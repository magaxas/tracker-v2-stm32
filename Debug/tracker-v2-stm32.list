
tracker-v2-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000131d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d80  08013298  08013298  00023298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014018  08014018  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08014018  08014018  00024018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014020  08014020  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014020  08014020  00024020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014024  08014024  00024024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08014028  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d4c  20000220  08014248  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003f6c  08014248  00033f6c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001904f  00000000  00000000  0003028b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a44  00000000  00000000  000492da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c8  00000000  00000000  0004cd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000129c  00000000  00000000  0004e4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000191ce  00000000  00000000  0004f784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fb1d  00000000  00000000  00068952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e541  00000000  00000000  0008846f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ff8  00000000  00000000  001169b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0011d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000220 	.word	0x20000220
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801327c 	.word	0x0801327c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000224 	.word	0x20000224
 8000104:	0801327c 	.word	0x0801327c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fc9f 	bl	8001d94 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fbef 	bl	8001c44 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fc91 	bl	8001d94 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc87 	bl	8001d94 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc17 	bl	8001cc8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fc0d 	bl	8001cc8 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 fb43 	bl	8000b50 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 facf 	bl	8000a78 <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb35 	bl	8000b50 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb2b 	bl	8000b50 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fadb 	bl	8000ac4 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fad1 	bl	8000ac4 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <__aeabi_uldivmod>:
 8000530:	2b00      	cmp	r3, #0
 8000532:	d111      	bne.n	8000558 <__aeabi_uldivmod+0x28>
 8000534:	2a00      	cmp	r2, #0
 8000536:	d10f      	bne.n	8000558 <__aeabi_uldivmod+0x28>
 8000538:	2900      	cmp	r1, #0
 800053a:	d100      	bne.n	800053e <__aeabi_uldivmod+0xe>
 800053c:	2800      	cmp	r0, #0
 800053e:	d002      	beq.n	8000546 <__aeabi_uldivmod+0x16>
 8000540:	2100      	movs	r1, #0
 8000542:	43c9      	mvns	r1, r1
 8000544:	0008      	movs	r0, r1
 8000546:	b407      	push	{r0, r1, r2}
 8000548:	4802      	ldr	r0, [pc, #8]	; (8000554 <__aeabi_uldivmod+0x24>)
 800054a:	a102      	add	r1, pc, #8	; (adr r1, 8000554 <__aeabi_uldivmod+0x24>)
 800054c:	1840      	adds	r0, r0, r1
 800054e:	9002      	str	r0, [sp, #8]
 8000550:	bd03      	pop	{r0, r1, pc}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	fffffee9 	.word	0xfffffee9
 8000558:	b403      	push	{r0, r1}
 800055a:	4668      	mov	r0, sp
 800055c:	b501      	push	{r0, lr}
 800055e:	9802      	ldr	r0, [sp, #8]
 8000560:	f000 f8a4 	bl	80006ac <__udivmoddi4>
 8000564:	9b01      	ldr	r3, [sp, #4]
 8000566:	469e      	mov	lr, r3
 8000568:	b002      	add	sp, #8
 800056a:	bc0c      	pop	{r2, r3}
 800056c:	4770      	bx	lr
 800056e:	46c0      	nop			; (mov r8, r8)

08000570 <__aeabi_lmul>:
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	46ce      	mov	lr, r9
 8000574:	4699      	mov	r9, r3
 8000576:	0c03      	lsrs	r3, r0, #16
 8000578:	469c      	mov	ip, r3
 800057a:	0413      	lsls	r3, r2, #16
 800057c:	4647      	mov	r7, r8
 800057e:	0c1b      	lsrs	r3, r3, #16
 8000580:	001d      	movs	r5, r3
 8000582:	000e      	movs	r6, r1
 8000584:	4661      	mov	r1, ip
 8000586:	0404      	lsls	r4, r0, #16
 8000588:	0c24      	lsrs	r4, r4, #16
 800058a:	b580      	push	{r7, lr}
 800058c:	0007      	movs	r7, r0
 800058e:	0c10      	lsrs	r0, r2, #16
 8000590:	434b      	muls	r3, r1
 8000592:	4365      	muls	r5, r4
 8000594:	4341      	muls	r1, r0
 8000596:	4360      	muls	r0, r4
 8000598:	0c2c      	lsrs	r4, r5, #16
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	1820      	adds	r0, r4, r0
 800059e:	468c      	mov	ip, r1
 80005a0:	4283      	cmp	r3, r0
 80005a2:	d903      	bls.n	80005ac <__aeabi_lmul+0x3c>
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	025b      	lsls	r3, r3, #9
 80005a8:	4698      	mov	r8, r3
 80005aa:	44c4      	add	ip, r8
 80005ac:	4649      	mov	r1, r9
 80005ae:	4379      	muls	r1, r7
 80005b0:	4356      	muls	r6, r2
 80005b2:	0c03      	lsrs	r3, r0, #16
 80005b4:	042d      	lsls	r5, r5, #16
 80005b6:	0c2d      	lsrs	r5, r5, #16
 80005b8:	1989      	adds	r1, r1, r6
 80005ba:	4463      	add	r3, ip
 80005bc:	0400      	lsls	r0, r0, #16
 80005be:	1940      	adds	r0, r0, r5
 80005c0:	18c9      	adds	r1, r1, r3
 80005c2:	bcc0      	pop	{r6, r7}
 80005c4:	46b9      	mov	r9, r7
 80005c6:	46b0      	mov	r8, r6
 80005c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__aeabi_d2uiz>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	2200      	movs	r2, #0
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <__aeabi_d2uiz+0x38>)
 80005d2:	0004      	movs	r4, r0
 80005d4:	000d      	movs	r5, r1
 80005d6:	f7ff ff67 	bl	80004a8 <__aeabi_dcmpge>
 80005da:	2800      	cmp	r0, #0
 80005dc:	d104      	bne.n	80005e8 <__aeabi_d2uiz+0x1c>
 80005de:	0020      	movs	r0, r4
 80005e0:	0029      	movs	r1, r5
 80005e2:	f002 fa9d 	bl	8002b20 <__aeabi_d2iz>
 80005e6:	bd70      	pop	{r4, r5, r6, pc}
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <__aeabi_d2uiz+0x38>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	0020      	movs	r0, r4
 80005ee:	0029      	movs	r1, r5
 80005f0:	f001 fef6 	bl	80023e0 <__aeabi_dsub>
 80005f4:	f002 fa94 	bl	8002b20 <__aeabi_d2iz>
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	061b      	lsls	r3, r3, #24
 80005fc:	469c      	mov	ip, r3
 80005fe:	4460      	add	r0, ip
 8000600:	e7f1      	b.n	80005e6 <__aeabi_d2uiz+0x1a>
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	41e00000 	.word	0x41e00000

08000608 <__aeabi_d2lz>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	0005      	movs	r5, r0
 800060c:	000c      	movs	r4, r1
 800060e:	2200      	movs	r2, #0
 8000610:	2300      	movs	r3, #0
 8000612:	0028      	movs	r0, r5
 8000614:	0021      	movs	r1, r4
 8000616:	f7ff ff29 	bl	800046c <__aeabi_dcmplt>
 800061a:	2800      	cmp	r0, #0
 800061c:	d108      	bne.n	8000630 <__aeabi_d2lz+0x28>
 800061e:	0028      	movs	r0, r5
 8000620:	0021      	movs	r1, r4
 8000622:	f000 f80f 	bl	8000644 <__aeabi_d2ulz>
 8000626:	0002      	movs	r2, r0
 8000628:	000b      	movs	r3, r1
 800062a:	0010      	movs	r0, r2
 800062c:	0019      	movs	r1, r3
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	061b      	lsls	r3, r3, #24
 8000634:	18e1      	adds	r1, r4, r3
 8000636:	0028      	movs	r0, r5
 8000638:	f000 f804 	bl	8000644 <__aeabi_d2ulz>
 800063c:	2300      	movs	r3, #0
 800063e:	4242      	negs	r2, r0
 8000640:	418b      	sbcs	r3, r1
 8000642:	e7f2      	b.n	800062a <__aeabi_d2lz+0x22>

08000644 <__aeabi_d2ulz>:
 8000644:	b570      	push	{r4, r5, r6, lr}
 8000646:	2200      	movs	r2, #0
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <__aeabi_d2ulz+0x34>)
 800064a:	000d      	movs	r5, r1
 800064c:	0004      	movs	r4, r0
 800064e:	f001 fc05 	bl	8001e5c <__aeabi_dmul>
 8000652:	f7ff ffbb 	bl	80005cc <__aeabi_d2uiz>
 8000656:	0006      	movs	r6, r0
 8000658:	f002 fac8 	bl	8002bec <__aeabi_ui2d>
 800065c:	2200      	movs	r2, #0
 800065e:	4b07      	ldr	r3, [pc, #28]	; (800067c <__aeabi_d2ulz+0x38>)
 8000660:	f001 fbfc 	bl	8001e5c <__aeabi_dmul>
 8000664:	0002      	movs	r2, r0
 8000666:	000b      	movs	r3, r1
 8000668:	0020      	movs	r0, r4
 800066a:	0029      	movs	r1, r5
 800066c:	f001 feb8 	bl	80023e0 <__aeabi_dsub>
 8000670:	f7ff ffac 	bl	80005cc <__aeabi_d2uiz>
 8000674:	0031      	movs	r1, r6
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	3df00000 	.word	0x3df00000
 800067c:	41f00000 	.word	0x41f00000

08000680 <__aeabi_l2d>:
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	0006      	movs	r6, r0
 8000684:	0008      	movs	r0, r1
 8000686:	f002 fa81 	bl	8002b8c <__aeabi_i2d>
 800068a:	2200      	movs	r2, #0
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <__aeabi_l2d+0x28>)
 800068e:	f001 fbe5 	bl	8001e5c <__aeabi_dmul>
 8000692:	000d      	movs	r5, r1
 8000694:	0004      	movs	r4, r0
 8000696:	0030      	movs	r0, r6
 8000698:	f002 faa8 	bl	8002bec <__aeabi_ui2d>
 800069c:	002b      	movs	r3, r5
 800069e:	0022      	movs	r2, r4
 80006a0:	f000 fc82 	bl	8000fa8 <__aeabi_dadd>
 80006a4:	bd70      	pop	{r4, r5, r6, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	41f00000 	.word	0x41f00000

080006ac <__udivmoddi4>:
 80006ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ae:	4657      	mov	r7, sl
 80006b0:	464e      	mov	r6, r9
 80006b2:	4645      	mov	r5, r8
 80006b4:	46de      	mov	lr, fp
 80006b6:	b5e0      	push	{r5, r6, r7, lr}
 80006b8:	0004      	movs	r4, r0
 80006ba:	000d      	movs	r5, r1
 80006bc:	4692      	mov	sl, r2
 80006be:	4699      	mov	r9, r3
 80006c0:	b083      	sub	sp, #12
 80006c2:	428b      	cmp	r3, r1
 80006c4:	d830      	bhi.n	8000728 <__udivmoddi4+0x7c>
 80006c6:	d02d      	beq.n	8000724 <__udivmoddi4+0x78>
 80006c8:	4649      	mov	r1, r9
 80006ca:	4650      	mov	r0, sl
 80006cc:	f002 fba0 	bl	8002e10 <__clzdi2>
 80006d0:	0029      	movs	r1, r5
 80006d2:	0006      	movs	r6, r0
 80006d4:	0020      	movs	r0, r4
 80006d6:	f002 fb9b 	bl	8002e10 <__clzdi2>
 80006da:	1a33      	subs	r3, r6, r0
 80006dc:	4698      	mov	r8, r3
 80006de:	3b20      	subs	r3, #32
 80006e0:	d434      	bmi.n	800074c <__udivmoddi4+0xa0>
 80006e2:	469b      	mov	fp, r3
 80006e4:	4653      	mov	r3, sl
 80006e6:	465a      	mov	r2, fp
 80006e8:	4093      	lsls	r3, r2
 80006ea:	4642      	mov	r2, r8
 80006ec:	001f      	movs	r7, r3
 80006ee:	4653      	mov	r3, sl
 80006f0:	4093      	lsls	r3, r2
 80006f2:	001e      	movs	r6, r3
 80006f4:	42af      	cmp	r7, r5
 80006f6:	d83b      	bhi.n	8000770 <__udivmoddi4+0xc4>
 80006f8:	42af      	cmp	r7, r5
 80006fa:	d100      	bne.n	80006fe <__udivmoddi4+0x52>
 80006fc:	e079      	b.n	80007f2 <__udivmoddi4+0x146>
 80006fe:	465b      	mov	r3, fp
 8000700:	1ba4      	subs	r4, r4, r6
 8000702:	41bd      	sbcs	r5, r7
 8000704:	2b00      	cmp	r3, #0
 8000706:	da00      	bge.n	800070a <__udivmoddi4+0x5e>
 8000708:	e076      	b.n	80007f8 <__udivmoddi4+0x14c>
 800070a:	2200      	movs	r2, #0
 800070c:	2300      	movs	r3, #0
 800070e:	9200      	str	r2, [sp, #0]
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	2301      	movs	r3, #1
 8000714:	465a      	mov	r2, fp
 8000716:	4093      	lsls	r3, r2
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	2301      	movs	r3, #1
 800071c:	4642      	mov	r2, r8
 800071e:	4093      	lsls	r3, r2
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	e029      	b.n	8000778 <__udivmoddi4+0xcc>
 8000724:	4282      	cmp	r2, r0
 8000726:	d9cf      	bls.n	80006c8 <__udivmoddi4+0x1c>
 8000728:	2200      	movs	r2, #0
 800072a:	2300      	movs	r3, #0
 800072c:	9200      	str	r2, [sp, #0]
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <__udivmoddi4+0x8e>
 8000736:	601c      	str	r4, [r3, #0]
 8000738:	605d      	str	r5, [r3, #4]
 800073a:	9800      	ldr	r0, [sp, #0]
 800073c:	9901      	ldr	r1, [sp, #4]
 800073e:	b003      	add	sp, #12
 8000740:	bcf0      	pop	{r4, r5, r6, r7}
 8000742:	46bb      	mov	fp, r7
 8000744:	46b2      	mov	sl, r6
 8000746:	46a9      	mov	r9, r5
 8000748:	46a0      	mov	r8, r4
 800074a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800074c:	4642      	mov	r2, r8
 800074e:	469b      	mov	fp, r3
 8000750:	2320      	movs	r3, #32
 8000752:	1a9b      	subs	r3, r3, r2
 8000754:	4652      	mov	r2, sl
 8000756:	40da      	lsrs	r2, r3
 8000758:	4641      	mov	r1, r8
 800075a:	0013      	movs	r3, r2
 800075c:	464a      	mov	r2, r9
 800075e:	408a      	lsls	r2, r1
 8000760:	0017      	movs	r7, r2
 8000762:	4642      	mov	r2, r8
 8000764:	431f      	orrs	r7, r3
 8000766:	4653      	mov	r3, sl
 8000768:	4093      	lsls	r3, r2
 800076a:	001e      	movs	r6, r3
 800076c:	42af      	cmp	r7, r5
 800076e:	d9c3      	bls.n	80006f8 <__udivmoddi4+0x4c>
 8000770:	2200      	movs	r2, #0
 8000772:	2300      	movs	r3, #0
 8000774:	9200      	str	r2, [sp, #0]
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	4643      	mov	r3, r8
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0d8      	beq.n	8000730 <__udivmoddi4+0x84>
 800077e:	07fb      	lsls	r3, r7, #31
 8000780:	0872      	lsrs	r2, r6, #1
 8000782:	431a      	orrs	r2, r3
 8000784:	4646      	mov	r6, r8
 8000786:	087b      	lsrs	r3, r7, #1
 8000788:	e00e      	b.n	80007a8 <__udivmoddi4+0xfc>
 800078a:	42ab      	cmp	r3, r5
 800078c:	d101      	bne.n	8000792 <__udivmoddi4+0xe6>
 800078e:	42a2      	cmp	r2, r4
 8000790:	d80c      	bhi.n	80007ac <__udivmoddi4+0x100>
 8000792:	1aa4      	subs	r4, r4, r2
 8000794:	419d      	sbcs	r5, r3
 8000796:	2001      	movs	r0, #1
 8000798:	1924      	adds	r4, r4, r4
 800079a:	416d      	adcs	r5, r5
 800079c:	2100      	movs	r1, #0
 800079e:	3e01      	subs	r6, #1
 80007a0:	1824      	adds	r4, r4, r0
 80007a2:	414d      	adcs	r5, r1
 80007a4:	2e00      	cmp	r6, #0
 80007a6:	d006      	beq.n	80007b6 <__udivmoddi4+0x10a>
 80007a8:	42ab      	cmp	r3, r5
 80007aa:	d9ee      	bls.n	800078a <__udivmoddi4+0xde>
 80007ac:	3e01      	subs	r6, #1
 80007ae:	1924      	adds	r4, r4, r4
 80007b0:	416d      	adcs	r5, r5
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d1f8      	bne.n	80007a8 <__udivmoddi4+0xfc>
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	465b      	mov	r3, fp
 80007bc:	1900      	adds	r0, r0, r4
 80007be:	4169      	adcs	r1, r5
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	db24      	blt.n	800080e <__udivmoddi4+0x162>
 80007c4:	002b      	movs	r3, r5
 80007c6:	465a      	mov	r2, fp
 80007c8:	4644      	mov	r4, r8
 80007ca:	40d3      	lsrs	r3, r2
 80007cc:	002a      	movs	r2, r5
 80007ce:	40e2      	lsrs	r2, r4
 80007d0:	001c      	movs	r4, r3
 80007d2:	465b      	mov	r3, fp
 80007d4:	0015      	movs	r5, r2
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	db2a      	blt.n	8000830 <__udivmoddi4+0x184>
 80007da:	0026      	movs	r6, r4
 80007dc:	409e      	lsls	r6, r3
 80007de:	0033      	movs	r3, r6
 80007e0:	0026      	movs	r6, r4
 80007e2:	4647      	mov	r7, r8
 80007e4:	40be      	lsls	r6, r7
 80007e6:	0032      	movs	r2, r6
 80007e8:	1a80      	subs	r0, r0, r2
 80007ea:	4199      	sbcs	r1, r3
 80007ec:	9000      	str	r0, [sp, #0]
 80007ee:	9101      	str	r1, [sp, #4]
 80007f0:	e79e      	b.n	8000730 <__udivmoddi4+0x84>
 80007f2:	42a3      	cmp	r3, r4
 80007f4:	d8bc      	bhi.n	8000770 <__udivmoddi4+0xc4>
 80007f6:	e782      	b.n	80006fe <__udivmoddi4+0x52>
 80007f8:	4642      	mov	r2, r8
 80007fa:	2320      	movs	r3, #32
 80007fc:	2100      	movs	r1, #0
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	2200      	movs	r2, #0
 8000802:	9100      	str	r1, [sp, #0]
 8000804:	9201      	str	r2, [sp, #4]
 8000806:	2201      	movs	r2, #1
 8000808:	40da      	lsrs	r2, r3
 800080a:	9201      	str	r2, [sp, #4]
 800080c:	e785      	b.n	800071a <__udivmoddi4+0x6e>
 800080e:	4642      	mov	r2, r8
 8000810:	2320      	movs	r3, #32
 8000812:	1a9b      	subs	r3, r3, r2
 8000814:	002a      	movs	r2, r5
 8000816:	4646      	mov	r6, r8
 8000818:	409a      	lsls	r2, r3
 800081a:	0023      	movs	r3, r4
 800081c:	40f3      	lsrs	r3, r6
 800081e:	4644      	mov	r4, r8
 8000820:	4313      	orrs	r3, r2
 8000822:	002a      	movs	r2, r5
 8000824:	40e2      	lsrs	r2, r4
 8000826:	001c      	movs	r4, r3
 8000828:	465b      	mov	r3, fp
 800082a:	0015      	movs	r5, r2
 800082c:	2b00      	cmp	r3, #0
 800082e:	dad4      	bge.n	80007da <__udivmoddi4+0x12e>
 8000830:	4642      	mov	r2, r8
 8000832:	002f      	movs	r7, r5
 8000834:	2320      	movs	r3, #32
 8000836:	0026      	movs	r6, r4
 8000838:	4097      	lsls	r7, r2
 800083a:	1a9b      	subs	r3, r3, r2
 800083c:	40de      	lsrs	r6, r3
 800083e:	003b      	movs	r3, r7
 8000840:	4333      	orrs	r3, r6
 8000842:	e7cd      	b.n	80007e0 <__udivmoddi4+0x134>

08000844 <__aeabi_fdiv>:
 8000844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000846:	464f      	mov	r7, r9
 8000848:	4646      	mov	r6, r8
 800084a:	46d6      	mov	lr, sl
 800084c:	0245      	lsls	r5, r0, #9
 800084e:	b5c0      	push	{r6, r7, lr}
 8000850:	0047      	lsls	r7, r0, #1
 8000852:	1c0c      	adds	r4, r1, #0
 8000854:	0a6d      	lsrs	r5, r5, #9
 8000856:	0e3f      	lsrs	r7, r7, #24
 8000858:	0fc6      	lsrs	r6, r0, #31
 800085a:	2f00      	cmp	r7, #0
 800085c:	d100      	bne.n	8000860 <__aeabi_fdiv+0x1c>
 800085e:	e06f      	b.n	8000940 <__aeabi_fdiv+0xfc>
 8000860:	2fff      	cmp	r7, #255	; 0xff
 8000862:	d100      	bne.n	8000866 <__aeabi_fdiv+0x22>
 8000864:	e074      	b.n	8000950 <__aeabi_fdiv+0x10c>
 8000866:	2300      	movs	r3, #0
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	4699      	mov	r9, r3
 800086c:	469a      	mov	sl, r3
 800086e:	00ed      	lsls	r5, r5, #3
 8000870:	04d2      	lsls	r2, r2, #19
 8000872:	4315      	orrs	r5, r2
 8000874:	3f7f      	subs	r7, #127	; 0x7f
 8000876:	0263      	lsls	r3, r4, #9
 8000878:	0a5b      	lsrs	r3, r3, #9
 800087a:	4698      	mov	r8, r3
 800087c:	0063      	lsls	r3, r4, #1
 800087e:	0e1b      	lsrs	r3, r3, #24
 8000880:	0fe4      	lsrs	r4, r4, #31
 8000882:	2b00      	cmp	r3, #0
 8000884:	d04d      	beq.n	8000922 <__aeabi_fdiv+0xde>
 8000886:	2bff      	cmp	r3, #255	; 0xff
 8000888:	d045      	beq.n	8000916 <__aeabi_fdiv+0xd2>
 800088a:	4642      	mov	r2, r8
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	00d2      	lsls	r2, r2, #3
 8000890:	04c9      	lsls	r1, r1, #19
 8000892:	4311      	orrs	r1, r2
 8000894:	4688      	mov	r8, r1
 8000896:	2200      	movs	r2, #0
 8000898:	3b7f      	subs	r3, #127	; 0x7f
 800089a:	0031      	movs	r1, r6
 800089c:	1aff      	subs	r7, r7, r3
 800089e:	464b      	mov	r3, r9
 80008a0:	4061      	eors	r1, r4
 80008a2:	b2c9      	uxtb	r1, r1
 80008a4:	2b0f      	cmp	r3, #15
 80008a6:	d900      	bls.n	80008aa <__aeabi_fdiv+0x66>
 80008a8:	e0b8      	b.n	8000a1c <__aeabi_fdiv+0x1d8>
 80008aa:	4870      	ldr	r0, [pc, #448]	; (8000a6c <__aeabi_fdiv+0x228>)
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	58c3      	ldr	r3, [r0, r3]
 80008b0:	469f      	mov	pc, r3
 80008b2:	2300      	movs	r3, #0
 80008b4:	4698      	mov	r8, r3
 80008b6:	0026      	movs	r6, r4
 80008b8:	4645      	mov	r5, r8
 80008ba:	4692      	mov	sl, r2
 80008bc:	4653      	mov	r3, sl
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d100      	bne.n	80008c4 <__aeabi_fdiv+0x80>
 80008c2:	e08d      	b.n	80009e0 <__aeabi_fdiv+0x19c>
 80008c4:	2b03      	cmp	r3, #3
 80008c6:	d100      	bne.n	80008ca <__aeabi_fdiv+0x86>
 80008c8:	e0a1      	b.n	8000a0e <__aeabi_fdiv+0x1ca>
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d018      	beq.n	8000900 <__aeabi_fdiv+0xbc>
 80008ce:	003b      	movs	r3, r7
 80008d0:	337f      	adds	r3, #127	; 0x7f
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	dd6d      	ble.n	80009b2 <__aeabi_fdiv+0x16e>
 80008d6:	076a      	lsls	r2, r5, #29
 80008d8:	d004      	beq.n	80008e4 <__aeabi_fdiv+0xa0>
 80008da:	220f      	movs	r2, #15
 80008dc:	402a      	ands	r2, r5
 80008de:	2a04      	cmp	r2, #4
 80008e0:	d000      	beq.n	80008e4 <__aeabi_fdiv+0xa0>
 80008e2:	3504      	adds	r5, #4
 80008e4:	012a      	lsls	r2, r5, #4
 80008e6:	d503      	bpl.n	80008f0 <__aeabi_fdiv+0xac>
 80008e8:	4b61      	ldr	r3, [pc, #388]	; (8000a70 <__aeabi_fdiv+0x22c>)
 80008ea:	401d      	ands	r5, r3
 80008ec:	003b      	movs	r3, r7
 80008ee:	3380      	adds	r3, #128	; 0x80
 80008f0:	2bfe      	cmp	r3, #254	; 0xfe
 80008f2:	dd00      	ble.n	80008f6 <__aeabi_fdiv+0xb2>
 80008f4:	e074      	b.n	80009e0 <__aeabi_fdiv+0x19c>
 80008f6:	01aa      	lsls	r2, r5, #6
 80008f8:	0a52      	lsrs	r2, r2, #9
 80008fa:	b2d8      	uxtb	r0, r3
 80008fc:	e002      	b.n	8000904 <__aeabi_fdiv+0xc0>
 80008fe:	000e      	movs	r6, r1
 8000900:	2000      	movs	r0, #0
 8000902:	2200      	movs	r2, #0
 8000904:	05c0      	lsls	r0, r0, #23
 8000906:	07f6      	lsls	r6, r6, #31
 8000908:	4310      	orrs	r0, r2
 800090a:	4330      	orrs	r0, r6
 800090c:	bce0      	pop	{r5, r6, r7}
 800090e:	46ba      	mov	sl, r7
 8000910:	46b1      	mov	r9, r6
 8000912:	46a8      	mov	r8, r5
 8000914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000916:	4643      	mov	r3, r8
 8000918:	2b00      	cmp	r3, #0
 800091a:	d13f      	bne.n	800099c <__aeabi_fdiv+0x158>
 800091c:	2202      	movs	r2, #2
 800091e:	3fff      	subs	r7, #255	; 0xff
 8000920:	e003      	b.n	800092a <__aeabi_fdiv+0xe6>
 8000922:	4643      	mov	r3, r8
 8000924:	2b00      	cmp	r3, #0
 8000926:	d12d      	bne.n	8000984 <__aeabi_fdiv+0x140>
 8000928:	2201      	movs	r2, #1
 800092a:	0031      	movs	r1, r6
 800092c:	464b      	mov	r3, r9
 800092e:	4061      	eors	r1, r4
 8000930:	b2c9      	uxtb	r1, r1
 8000932:	4313      	orrs	r3, r2
 8000934:	2b0f      	cmp	r3, #15
 8000936:	d838      	bhi.n	80009aa <__aeabi_fdiv+0x166>
 8000938:	484e      	ldr	r0, [pc, #312]	; (8000a74 <__aeabi_fdiv+0x230>)
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	58c3      	ldr	r3, [r0, r3]
 800093e:	469f      	mov	pc, r3
 8000940:	2d00      	cmp	r5, #0
 8000942:	d113      	bne.n	800096c <__aeabi_fdiv+0x128>
 8000944:	2304      	movs	r3, #4
 8000946:	4699      	mov	r9, r3
 8000948:	3b03      	subs	r3, #3
 800094a:	2700      	movs	r7, #0
 800094c:	469a      	mov	sl, r3
 800094e:	e792      	b.n	8000876 <__aeabi_fdiv+0x32>
 8000950:	2d00      	cmp	r5, #0
 8000952:	d105      	bne.n	8000960 <__aeabi_fdiv+0x11c>
 8000954:	2308      	movs	r3, #8
 8000956:	4699      	mov	r9, r3
 8000958:	3b06      	subs	r3, #6
 800095a:	27ff      	movs	r7, #255	; 0xff
 800095c:	469a      	mov	sl, r3
 800095e:	e78a      	b.n	8000876 <__aeabi_fdiv+0x32>
 8000960:	230c      	movs	r3, #12
 8000962:	4699      	mov	r9, r3
 8000964:	3b09      	subs	r3, #9
 8000966:	27ff      	movs	r7, #255	; 0xff
 8000968:	469a      	mov	sl, r3
 800096a:	e784      	b.n	8000876 <__aeabi_fdiv+0x32>
 800096c:	0028      	movs	r0, r5
 800096e:	f002 fa31 	bl	8002dd4 <__clzsi2>
 8000972:	2776      	movs	r7, #118	; 0x76
 8000974:	1f43      	subs	r3, r0, #5
 8000976:	409d      	lsls	r5, r3
 8000978:	2300      	movs	r3, #0
 800097a:	427f      	negs	r7, r7
 800097c:	4699      	mov	r9, r3
 800097e:	469a      	mov	sl, r3
 8000980:	1a3f      	subs	r7, r7, r0
 8000982:	e778      	b.n	8000876 <__aeabi_fdiv+0x32>
 8000984:	4640      	mov	r0, r8
 8000986:	f002 fa25 	bl	8002dd4 <__clzsi2>
 800098a:	4642      	mov	r2, r8
 800098c:	1f43      	subs	r3, r0, #5
 800098e:	409a      	lsls	r2, r3
 8000990:	2376      	movs	r3, #118	; 0x76
 8000992:	425b      	negs	r3, r3
 8000994:	4690      	mov	r8, r2
 8000996:	1a1b      	subs	r3, r3, r0
 8000998:	2200      	movs	r2, #0
 800099a:	e77e      	b.n	800089a <__aeabi_fdiv+0x56>
 800099c:	2303      	movs	r3, #3
 800099e:	464a      	mov	r2, r9
 80009a0:	431a      	orrs	r2, r3
 80009a2:	4691      	mov	r9, r2
 80009a4:	33fc      	adds	r3, #252	; 0xfc
 80009a6:	2203      	movs	r2, #3
 80009a8:	e777      	b.n	800089a <__aeabi_fdiv+0x56>
 80009aa:	000e      	movs	r6, r1
 80009ac:	20ff      	movs	r0, #255	; 0xff
 80009ae:	2200      	movs	r2, #0
 80009b0:	e7a8      	b.n	8000904 <__aeabi_fdiv+0xc0>
 80009b2:	2201      	movs	r2, #1
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	2b1b      	cmp	r3, #27
 80009b8:	dca2      	bgt.n	8000900 <__aeabi_fdiv+0xbc>
 80009ba:	379e      	adds	r7, #158	; 0x9e
 80009bc:	002a      	movs	r2, r5
 80009be:	40bd      	lsls	r5, r7
 80009c0:	40da      	lsrs	r2, r3
 80009c2:	1e6b      	subs	r3, r5, #1
 80009c4:	419d      	sbcs	r5, r3
 80009c6:	4315      	orrs	r5, r2
 80009c8:	076a      	lsls	r2, r5, #29
 80009ca:	d004      	beq.n	80009d6 <__aeabi_fdiv+0x192>
 80009cc:	220f      	movs	r2, #15
 80009ce:	402a      	ands	r2, r5
 80009d0:	2a04      	cmp	r2, #4
 80009d2:	d000      	beq.n	80009d6 <__aeabi_fdiv+0x192>
 80009d4:	3504      	adds	r5, #4
 80009d6:	016a      	lsls	r2, r5, #5
 80009d8:	d544      	bpl.n	8000a64 <__aeabi_fdiv+0x220>
 80009da:	2001      	movs	r0, #1
 80009dc:	2200      	movs	r2, #0
 80009de:	e791      	b.n	8000904 <__aeabi_fdiv+0xc0>
 80009e0:	20ff      	movs	r0, #255	; 0xff
 80009e2:	2200      	movs	r2, #0
 80009e4:	e78e      	b.n	8000904 <__aeabi_fdiv+0xc0>
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	2600      	movs	r6, #0
 80009ea:	20ff      	movs	r0, #255	; 0xff
 80009ec:	03d2      	lsls	r2, r2, #15
 80009ee:	e789      	b.n	8000904 <__aeabi_fdiv+0xc0>
 80009f0:	2300      	movs	r3, #0
 80009f2:	4698      	mov	r8, r3
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	03d2      	lsls	r2, r2, #15
 80009f8:	4215      	tst	r5, r2
 80009fa:	d008      	beq.n	8000a0e <__aeabi_fdiv+0x1ca>
 80009fc:	4643      	mov	r3, r8
 80009fe:	4213      	tst	r3, r2
 8000a00:	d105      	bne.n	8000a0e <__aeabi_fdiv+0x1ca>
 8000a02:	431a      	orrs	r2, r3
 8000a04:	0252      	lsls	r2, r2, #9
 8000a06:	0026      	movs	r6, r4
 8000a08:	20ff      	movs	r0, #255	; 0xff
 8000a0a:	0a52      	lsrs	r2, r2, #9
 8000a0c:	e77a      	b.n	8000904 <__aeabi_fdiv+0xc0>
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	03d2      	lsls	r2, r2, #15
 8000a12:	432a      	orrs	r2, r5
 8000a14:	0252      	lsls	r2, r2, #9
 8000a16:	20ff      	movs	r0, #255	; 0xff
 8000a18:	0a52      	lsrs	r2, r2, #9
 8000a1a:	e773      	b.n	8000904 <__aeabi_fdiv+0xc0>
 8000a1c:	4642      	mov	r2, r8
 8000a1e:	016b      	lsls	r3, r5, #5
 8000a20:	0155      	lsls	r5, r2, #5
 8000a22:	42ab      	cmp	r3, r5
 8000a24:	d21a      	bcs.n	8000a5c <__aeabi_fdiv+0x218>
 8000a26:	201b      	movs	r0, #27
 8000a28:	2200      	movs	r2, #0
 8000a2a:	3f01      	subs	r7, #1
 8000a2c:	2601      	movs	r6, #1
 8000a2e:	001c      	movs	r4, r3
 8000a30:	0052      	lsls	r2, r2, #1
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	2c00      	cmp	r4, #0
 8000a36:	db01      	blt.n	8000a3c <__aeabi_fdiv+0x1f8>
 8000a38:	429d      	cmp	r5, r3
 8000a3a:	d801      	bhi.n	8000a40 <__aeabi_fdiv+0x1fc>
 8000a3c:	1b5b      	subs	r3, r3, r5
 8000a3e:	4332      	orrs	r2, r6
 8000a40:	3801      	subs	r0, #1
 8000a42:	2800      	cmp	r0, #0
 8000a44:	d1f3      	bne.n	8000a2e <__aeabi_fdiv+0x1ea>
 8000a46:	1e58      	subs	r0, r3, #1
 8000a48:	4183      	sbcs	r3, r0
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	001d      	movs	r5, r3
 8000a4e:	003b      	movs	r3, r7
 8000a50:	337f      	adds	r3, #127	; 0x7f
 8000a52:	000e      	movs	r6, r1
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	dd00      	ble.n	8000a5a <__aeabi_fdiv+0x216>
 8000a58:	e73d      	b.n	80008d6 <__aeabi_fdiv+0x92>
 8000a5a:	e7aa      	b.n	80009b2 <__aeabi_fdiv+0x16e>
 8000a5c:	201a      	movs	r0, #26
 8000a5e:	2201      	movs	r2, #1
 8000a60:	1b5b      	subs	r3, r3, r5
 8000a62:	e7e3      	b.n	8000a2c <__aeabi_fdiv+0x1e8>
 8000a64:	01aa      	lsls	r2, r5, #6
 8000a66:	2000      	movs	r0, #0
 8000a68:	0a52      	lsrs	r2, r2, #9
 8000a6a:	e74b      	b.n	8000904 <__aeabi_fdiv+0xc0>
 8000a6c:	08013578 	.word	0x08013578
 8000a70:	f7ffffff 	.word	0xf7ffffff
 8000a74:	080135b8 	.word	0x080135b8

08000a78 <__eqsf2>:
 8000a78:	b570      	push	{r4, r5, r6, lr}
 8000a7a:	0042      	lsls	r2, r0, #1
 8000a7c:	0245      	lsls	r5, r0, #9
 8000a7e:	024e      	lsls	r6, r1, #9
 8000a80:	004c      	lsls	r4, r1, #1
 8000a82:	0fc3      	lsrs	r3, r0, #31
 8000a84:	0a6d      	lsrs	r5, r5, #9
 8000a86:	2001      	movs	r0, #1
 8000a88:	0e12      	lsrs	r2, r2, #24
 8000a8a:	0a76      	lsrs	r6, r6, #9
 8000a8c:	0e24      	lsrs	r4, r4, #24
 8000a8e:	0fc9      	lsrs	r1, r1, #31
 8000a90:	2aff      	cmp	r2, #255	; 0xff
 8000a92:	d006      	beq.n	8000aa2 <__eqsf2+0x2a>
 8000a94:	2cff      	cmp	r4, #255	; 0xff
 8000a96:	d003      	beq.n	8000aa0 <__eqsf2+0x28>
 8000a98:	42a2      	cmp	r2, r4
 8000a9a:	d101      	bne.n	8000aa0 <__eqsf2+0x28>
 8000a9c:	42b5      	cmp	r5, r6
 8000a9e:	d006      	beq.n	8000aae <__eqsf2+0x36>
 8000aa0:	bd70      	pop	{r4, r5, r6, pc}
 8000aa2:	2d00      	cmp	r5, #0
 8000aa4:	d1fc      	bne.n	8000aa0 <__eqsf2+0x28>
 8000aa6:	2cff      	cmp	r4, #255	; 0xff
 8000aa8:	d1fa      	bne.n	8000aa0 <__eqsf2+0x28>
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d1f8      	bne.n	8000aa0 <__eqsf2+0x28>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d006      	beq.n	8000ac0 <__eqsf2+0x48>
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	2a00      	cmp	r2, #0
 8000ab6:	d1f3      	bne.n	8000aa0 <__eqsf2+0x28>
 8000ab8:	0028      	movs	r0, r5
 8000aba:	1e43      	subs	r3, r0, #1
 8000abc:	4198      	sbcs	r0, r3
 8000abe:	e7ef      	b.n	8000aa0 <__eqsf2+0x28>
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	e7ed      	b.n	8000aa0 <__eqsf2+0x28>

08000ac4 <__gesf2>:
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	0042      	lsls	r2, r0, #1
 8000ac8:	0245      	lsls	r5, r0, #9
 8000aca:	024e      	lsls	r6, r1, #9
 8000acc:	004c      	lsls	r4, r1, #1
 8000ace:	0fc3      	lsrs	r3, r0, #31
 8000ad0:	0a6d      	lsrs	r5, r5, #9
 8000ad2:	0e12      	lsrs	r2, r2, #24
 8000ad4:	0a76      	lsrs	r6, r6, #9
 8000ad6:	0e24      	lsrs	r4, r4, #24
 8000ad8:	0fc8      	lsrs	r0, r1, #31
 8000ada:	2aff      	cmp	r2, #255	; 0xff
 8000adc:	d01b      	beq.n	8000b16 <__gesf2+0x52>
 8000ade:	2cff      	cmp	r4, #255	; 0xff
 8000ae0:	d00e      	beq.n	8000b00 <__gesf2+0x3c>
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d11b      	bne.n	8000b1e <__gesf2+0x5a>
 8000ae6:	2c00      	cmp	r4, #0
 8000ae8:	d101      	bne.n	8000aee <__gesf2+0x2a>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d01c      	beq.n	8000b28 <__gesf2+0x64>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	d00c      	beq.n	8000b0c <__gesf2+0x48>
 8000af2:	4283      	cmp	r3, r0
 8000af4:	d01c      	beq.n	8000b30 <__gesf2+0x6c>
 8000af6:	2102      	movs	r1, #2
 8000af8:	1e58      	subs	r0, r3, #1
 8000afa:	4008      	ands	r0, r1
 8000afc:	3801      	subs	r0, #1
 8000afe:	bd70      	pop	{r4, r5, r6, pc}
 8000b00:	2e00      	cmp	r6, #0
 8000b02:	d122      	bne.n	8000b4a <__gesf2+0x86>
 8000b04:	2a00      	cmp	r2, #0
 8000b06:	d1f4      	bne.n	8000af2 <__gesf2+0x2e>
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d1f2      	bne.n	8000af2 <__gesf2+0x2e>
 8000b0c:	2800      	cmp	r0, #0
 8000b0e:	d1f6      	bne.n	8000afe <__gesf2+0x3a>
 8000b10:	2001      	movs	r0, #1
 8000b12:	4240      	negs	r0, r0
 8000b14:	e7f3      	b.n	8000afe <__gesf2+0x3a>
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	d117      	bne.n	8000b4a <__gesf2+0x86>
 8000b1a:	2cff      	cmp	r4, #255	; 0xff
 8000b1c:	d0f0      	beq.n	8000b00 <__gesf2+0x3c>
 8000b1e:	2c00      	cmp	r4, #0
 8000b20:	d1e7      	bne.n	8000af2 <__gesf2+0x2e>
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	d1e5      	bne.n	8000af2 <__gesf2+0x2e>
 8000b26:	e7e6      	b.n	8000af6 <__gesf2+0x32>
 8000b28:	2000      	movs	r0, #0
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	d0e7      	beq.n	8000afe <__gesf2+0x3a>
 8000b2e:	e7e2      	b.n	8000af6 <__gesf2+0x32>
 8000b30:	42a2      	cmp	r2, r4
 8000b32:	dc05      	bgt.n	8000b40 <__gesf2+0x7c>
 8000b34:	dbea      	blt.n	8000b0c <__gesf2+0x48>
 8000b36:	42b5      	cmp	r5, r6
 8000b38:	d802      	bhi.n	8000b40 <__gesf2+0x7c>
 8000b3a:	d3e7      	bcc.n	8000b0c <__gesf2+0x48>
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	e7de      	b.n	8000afe <__gesf2+0x3a>
 8000b40:	4243      	negs	r3, r0
 8000b42:	4158      	adcs	r0, r3
 8000b44:	0040      	lsls	r0, r0, #1
 8000b46:	3801      	subs	r0, #1
 8000b48:	e7d9      	b.n	8000afe <__gesf2+0x3a>
 8000b4a:	2002      	movs	r0, #2
 8000b4c:	4240      	negs	r0, r0
 8000b4e:	e7d6      	b.n	8000afe <__gesf2+0x3a>

08000b50 <__lesf2>:
 8000b50:	b570      	push	{r4, r5, r6, lr}
 8000b52:	0042      	lsls	r2, r0, #1
 8000b54:	0245      	lsls	r5, r0, #9
 8000b56:	024e      	lsls	r6, r1, #9
 8000b58:	004c      	lsls	r4, r1, #1
 8000b5a:	0fc3      	lsrs	r3, r0, #31
 8000b5c:	0a6d      	lsrs	r5, r5, #9
 8000b5e:	0e12      	lsrs	r2, r2, #24
 8000b60:	0a76      	lsrs	r6, r6, #9
 8000b62:	0e24      	lsrs	r4, r4, #24
 8000b64:	0fc8      	lsrs	r0, r1, #31
 8000b66:	2aff      	cmp	r2, #255	; 0xff
 8000b68:	d00b      	beq.n	8000b82 <__lesf2+0x32>
 8000b6a:	2cff      	cmp	r4, #255	; 0xff
 8000b6c:	d00d      	beq.n	8000b8a <__lesf2+0x3a>
 8000b6e:	2a00      	cmp	r2, #0
 8000b70:	d11f      	bne.n	8000bb2 <__lesf2+0x62>
 8000b72:	2c00      	cmp	r4, #0
 8000b74:	d116      	bne.n	8000ba4 <__lesf2+0x54>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d114      	bne.n	8000ba4 <__lesf2+0x54>
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	2d00      	cmp	r5, #0
 8000b7e:	d010      	beq.n	8000ba2 <__lesf2+0x52>
 8000b80:	e009      	b.n	8000b96 <__lesf2+0x46>
 8000b82:	2d00      	cmp	r5, #0
 8000b84:	d10c      	bne.n	8000ba0 <__lesf2+0x50>
 8000b86:	2cff      	cmp	r4, #255	; 0xff
 8000b88:	d113      	bne.n	8000bb2 <__lesf2+0x62>
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	d108      	bne.n	8000ba0 <__lesf2+0x50>
 8000b8e:	2a00      	cmp	r2, #0
 8000b90:	d008      	beq.n	8000ba4 <__lesf2+0x54>
 8000b92:	4283      	cmp	r3, r0
 8000b94:	d012      	beq.n	8000bbc <__lesf2+0x6c>
 8000b96:	2102      	movs	r1, #2
 8000b98:	1e58      	subs	r0, r3, #1
 8000b9a:	4008      	ands	r0, r1
 8000b9c:	3801      	subs	r0, #1
 8000b9e:	e000      	b.n	8000ba2 <__lesf2+0x52>
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	bd70      	pop	{r4, r5, r6, pc}
 8000ba4:	2d00      	cmp	r5, #0
 8000ba6:	d1f4      	bne.n	8000b92 <__lesf2+0x42>
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d1fa      	bne.n	8000ba2 <__lesf2+0x52>
 8000bac:	2001      	movs	r0, #1
 8000bae:	4240      	negs	r0, r0
 8000bb0:	e7f7      	b.n	8000ba2 <__lesf2+0x52>
 8000bb2:	2c00      	cmp	r4, #0
 8000bb4:	d1ed      	bne.n	8000b92 <__lesf2+0x42>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d1eb      	bne.n	8000b92 <__lesf2+0x42>
 8000bba:	e7ec      	b.n	8000b96 <__lesf2+0x46>
 8000bbc:	42a2      	cmp	r2, r4
 8000bbe:	dc05      	bgt.n	8000bcc <__lesf2+0x7c>
 8000bc0:	dbf2      	blt.n	8000ba8 <__lesf2+0x58>
 8000bc2:	42b5      	cmp	r5, r6
 8000bc4:	d802      	bhi.n	8000bcc <__lesf2+0x7c>
 8000bc6:	d3ef      	bcc.n	8000ba8 <__lesf2+0x58>
 8000bc8:	2000      	movs	r0, #0
 8000bca:	e7ea      	b.n	8000ba2 <__lesf2+0x52>
 8000bcc:	4243      	negs	r3, r0
 8000bce:	4158      	adcs	r0, r3
 8000bd0:	0040      	lsls	r0, r0, #1
 8000bd2:	3801      	subs	r0, #1
 8000bd4:	e7e5      	b.n	8000ba2 <__lesf2+0x52>
 8000bd6:	46c0      	nop			; (mov r8, r8)

08000bd8 <__aeabi_fmul>:
 8000bd8:	0243      	lsls	r3, r0, #9
 8000bda:	0a5b      	lsrs	r3, r3, #9
 8000bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bde:	464f      	mov	r7, r9
 8000be0:	4646      	mov	r6, r8
 8000be2:	4699      	mov	r9, r3
 8000be4:	46d6      	mov	lr, sl
 8000be6:	0fc3      	lsrs	r3, r0, #31
 8000be8:	0045      	lsls	r5, r0, #1
 8000bea:	4698      	mov	r8, r3
 8000bec:	b5c0      	push	{r6, r7, lr}
 8000bee:	464b      	mov	r3, r9
 8000bf0:	1c0f      	adds	r7, r1, #0
 8000bf2:	0e2d      	lsrs	r5, r5, #24
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_fmul+0x20>
 8000bf6:	e0cb      	b.n	8000d90 <__aeabi_fmul+0x1b8>
 8000bf8:	2dff      	cmp	r5, #255	; 0xff
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_fmul+0x26>
 8000bfc:	e0cf      	b.n	8000d9e <__aeabi_fmul+0x1c6>
 8000bfe:	2280      	movs	r2, #128	; 0x80
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	04d2      	lsls	r2, r2, #19
 8000c04:	431a      	orrs	r2, r3
 8000c06:	2300      	movs	r3, #0
 8000c08:	4691      	mov	r9, r2
 8000c0a:	2600      	movs	r6, #0
 8000c0c:	469a      	mov	sl, r3
 8000c0e:	3d7f      	subs	r5, #127	; 0x7f
 8000c10:	027c      	lsls	r4, r7, #9
 8000c12:	007b      	lsls	r3, r7, #1
 8000c14:	0a64      	lsrs	r4, r4, #9
 8000c16:	0e1b      	lsrs	r3, r3, #24
 8000c18:	0fff      	lsrs	r7, r7, #31
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_fmul+0x48>
 8000c1e:	e0a9      	b.n	8000d74 <__aeabi_fmul+0x19c>
 8000c20:	2bff      	cmp	r3, #255	; 0xff
 8000c22:	d011      	beq.n	8000c48 <__aeabi_fmul+0x70>
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	00e4      	lsls	r4, r4, #3
 8000c28:	04d2      	lsls	r2, r2, #19
 8000c2a:	4314      	orrs	r4, r2
 8000c2c:	4642      	mov	r2, r8
 8000c2e:	3b7f      	subs	r3, #127	; 0x7f
 8000c30:	195b      	adds	r3, r3, r5
 8000c32:	407a      	eors	r2, r7
 8000c34:	2000      	movs	r0, #0
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	1c5d      	adds	r5, r3, #1
 8000c3a:	2e0a      	cmp	r6, #10
 8000c3c:	dd13      	ble.n	8000c66 <__aeabi_fmul+0x8e>
 8000c3e:	003a      	movs	r2, r7
 8000c40:	2e0b      	cmp	r6, #11
 8000c42:	d047      	beq.n	8000cd4 <__aeabi_fmul+0xfc>
 8000c44:	4647      	mov	r7, r8
 8000c46:	e03f      	b.n	8000cc8 <__aeabi_fmul+0xf0>
 8000c48:	002b      	movs	r3, r5
 8000c4a:	33ff      	adds	r3, #255	; 0xff
 8000c4c:	2c00      	cmp	r4, #0
 8000c4e:	d11e      	bne.n	8000c8e <__aeabi_fmul+0xb6>
 8000c50:	2202      	movs	r2, #2
 8000c52:	4316      	orrs	r6, r2
 8000c54:	4642      	mov	r2, r8
 8000c56:	3501      	adds	r5, #1
 8000c58:	407a      	eors	r2, r7
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	35ff      	adds	r5, #255	; 0xff
 8000c5e:	2e0a      	cmp	r6, #10
 8000c60:	dd00      	ble.n	8000c64 <__aeabi_fmul+0x8c>
 8000c62:	e0e4      	b.n	8000e2e <__aeabi_fmul+0x256>
 8000c64:	2002      	movs	r0, #2
 8000c66:	2e02      	cmp	r6, #2
 8000c68:	dc1c      	bgt.n	8000ca4 <__aeabi_fmul+0xcc>
 8000c6a:	3e01      	subs	r6, #1
 8000c6c:	2e01      	cmp	r6, #1
 8000c6e:	d842      	bhi.n	8000cf6 <__aeabi_fmul+0x11e>
 8000c70:	2802      	cmp	r0, #2
 8000c72:	d03d      	beq.n	8000cf0 <__aeabi_fmul+0x118>
 8000c74:	2801      	cmp	r0, #1
 8000c76:	d166      	bne.n	8000d46 <__aeabi_fmul+0x16e>
 8000c78:	2000      	movs	r0, #0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	05c0      	lsls	r0, r0, #23
 8000c7e:	4308      	orrs	r0, r1
 8000c80:	07d2      	lsls	r2, r2, #31
 8000c82:	4310      	orrs	r0, r2
 8000c84:	bce0      	pop	{r5, r6, r7}
 8000c86:	46ba      	mov	sl, r7
 8000c88:	46b1      	mov	r9, r6
 8000c8a:	46a8      	mov	r8, r5
 8000c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c8e:	2203      	movs	r2, #3
 8000c90:	4316      	orrs	r6, r2
 8000c92:	4642      	mov	r2, r8
 8000c94:	3501      	adds	r5, #1
 8000c96:	407a      	eors	r2, r7
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	35ff      	adds	r5, #255	; 0xff
 8000c9c:	2e0a      	cmp	r6, #10
 8000c9e:	dd00      	ble.n	8000ca2 <__aeabi_fmul+0xca>
 8000ca0:	e0e4      	b.n	8000e6c <__aeabi_fmul+0x294>
 8000ca2:	2003      	movs	r0, #3
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	40b1      	lsls	r1, r6
 8000ca8:	26a6      	movs	r6, #166	; 0xa6
 8000caa:	00f6      	lsls	r6, r6, #3
 8000cac:	4231      	tst	r1, r6
 8000cae:	d10a      	bne.n	8000cc6 <__aeabi_fmul+0xee>
 8000cb0:	2690      	movs	r6, #144	; 0x90
 8000cb2:	00b6      	lsls	r6, r6, #2
 8000cb4:	4231      	tst	r1, r6
 8000cb6:	d116      	bne.n	8000ce6 <__aeabi_fmul+0x10e>
 8000cb8:	3eb9      	subs	r6, #185	; 0xb9
 8000cba:	3eff      	subs	r6, #255	; 0xff
 8000cbc:	420e      	tst	r6, r1
 8000cbe:	d01a      	beq.n	8000cf6 <__aeabi_fmul+0x11e>
 8000cc0:	46a1      	mov	r9, r4
 8000cc2:	4682      	mov	sl, r0
 8000cc4:	e000      	b.n	8000cc8 <__aeabi_fmul+0xf0>
 8000cc6:	0017      	movs	r7, r2
 8000cc8:	4653      	mov	r3, sl
 8000cca:	003a      	movs	r2, r7
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d00f      	beq.n	8000cf0 <__aeabi_fmul+0x118>
 8000cd0:	464c      	mov	r4, r9
 8000cd2:	4650      	mov	r0, sl
 8000cd4:	2803      	cmp	r0, #3
 8000cd6:	d1cd      	bne.n	8000c74 <__aeabi_fmul+0x9c>
 8000cd8:	2180      	movs	r1, #128	; 0x80
 8000cda:	03c9      	lsls	r1, r1, #15
 8000cdc:	4321      	orrs	r1, r4
 8000cde:	0249      	lsls	r1, r1, #9
 8000ce0:	20ff      	movs	r0, #255	; 0xff
 8000ce2:	0a49      	lsrs	r1, r1, #9
 8000ce4:	e7ca      	b.n	8000c7c <__aeabi_fmul+0xa4>
 8000ce6:	2180      	movs	r1, #128	; 0x80
 8000ce8:	2200      	movs	r2, #0
 8000cea:	20ff      	movs	r0, #255	; 0xff
 8000cec:	03c9      	lsls	r1, r1, #15
 8000cee:	e7c5      	b.n	8000c7c <__aeabi_fmul+0xa4>
 8000cf0:	20ff      	movs	r0, #255	; 0xff
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	e7c2      	b.n	8000c7c <__aeabi_fmul+0xa4>
 8000cf6:	0c20      	lsrs	r0, r4, #16
 8000cf8:	4649      	mov	r1, r9
 8000cfa:	0424      	lsls	r4, r4, #16
 8000cfc:	0c24      	lsrs	r4, r4, #16
 8000cfe:	0027      	movs	r7, r4
 8000d00:	0c0e      	lsrs	r6, r1, #16
 8000d02:	0409      	lsls	r1, r1, #16
 8000d04:	0c09      	lsrs	r1, r1, #16
 8000d06:	4374      	muls	r4, r6
 8000d08:	434f      	muls	r7, r1
 8000d0a:	4346      	muls	r6, r0
 8000d0c:	4348      	muls	r0, r1
 8000d0e:	0c39      	lsrs	r1, r7, #16
 8000d10:	1900      	adds	r0, r0, r4
 8000d12:	1809      	adds	r1, r1, r0
 8000d14:	428c      	cmp	r4, r1
 8000d16:	d903      	bls.n	8000d20 <__aeabi_fmul+0x148>
 8000d18:	2080      	movs	r0, #128	; 0x80
 8000d1a:	0240      	lsls	r0, r0, #9
 8000d1c:	4684      	mov	ip, r0
 8000d1e:	4466      	add	r6, ip
 8000d20:	043f      	lsls	r7, r7, #16
 8000d22:	0408      	lsls	r0, r1, #16
 8000d24:	0c3f      	lsrs	r7, r7, #16
 8000d26:	19c0      	adds	r0, r0, r7
 8000d28:	0184      	lsls	r4, r0, #6
 8000d2a:	1e67      	subs	r7, r4, #1
 8000d2c:	41bc      	sbcs	r4, r7
 8000d2e:	0c09      	lsrs	r1, r1, #16
 8000d30:	0e80      	lsrs	r0, r0, #26
 8000d32:	1989      	adds	r1, r1, r6
 8000d34:	4304      	orrs	r4, r0
 8000d36:	0189      	lsls	r1, r1, #6
 8000d38:	430c      	orrs	r4, r1
 8000d3a:	0109      	lsls	r1, r1, #4
 8000d3c:	d571      	bpl.n	8000e22 <__aeabi_fmul+0x24a>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	0861      	lsrs	r1, r4, #1
 8000d42:	401c      	ands	r4, r3
 8000d44:	430c      	orrs	r4, r1
 8000d46:	002b      	movs	r3, r5
 8000d48:	337f      	adds	r3, #127	; 0x7f
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	dd51      	ble.n	8000df2 <__aeabi_fmul+0x21a>
 8000d4e:	0761      	lsls	r1, r4, #29
 8000d50:	d004      	beq.n	8000d5c <__aeabi_fmul+0x184>
 8000d52:	210f      	movs	r1, #15
 8000d54:	4021      	ands	r1, r4
 8000d56:	2904      	cmp	r1, #4
 8000d58:	d000      	beq.n	8000d5c <__aeabi_fmul+0x184>
 8000d5a:	3404      	adds	r4, #4
 8000d5c:	0121      	lsls	r1, r4, #4
 8000d5e:	d503      	bpl.n	8000d68 <__aeabi_fmul+0x190>
 8000d60:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <__aeabi_fmul+0x298>)
 8000d62:	401c      	ands	r4, r3
 8000d64:	002b      	movs	r3, r5
 8000d66:	3380      	adds	r3, #128	; 0x80
 8000d68:	2bfe      	cmp	r3, #254	; 0xfe
 8000d6a:	dcc1      	bgt.n	8000cf0 <__aeabi_fmul+0x118>
 8000d6c:	01a1      	lsls	r1, r4, #6
 8000d6e:	0a49      	lsrs	r1, r1, #9
 8000d70:	b2d8      	uxtb	r0, r3
 8000d72:	e783      	b.n	8000c7c <__aeabi_fmul+0xa4>
 8000d74:	2c00      	cmp	r4, #0
 8000d76:	d12c      	bne.n	8000dd2 <__aeabi_fmul+0x1fa>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	431e      	orrs	r6, r3
 8000d7e:	002b      	movs	r3, r5
 8000d80:	407a      	eors	r2, r7
 8000d82:	2001      	movs	r0, #1
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	1c5d      	adds	r5, r3, #1
 8000d88:	2e0a      	cmp	r6, #10
 8000d8a:	dd00      	ble.n	8000d8e <__aeabi_fmul+0x1b6>
 8000d8c:	e757      	b.n	8000c3e <__aeabi_fmul+0x66>
 8000d8e:	e76a      	b.n	8000c66 <__aeabi_fmul+0x8e>
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d110      	bne.n	8000db6 <__aeabi_fmul+0x1de>
 8000d94:	2301      	movs	r3, #1
 8000d96:	2604      	movs	r6, #4
 8000d98:	2500      	movs	r5, #0
 8000d9a:	469a      	mov	sl, r3
 8000d9c:	e738      	b.n	8000c10 <__aeabi_fmul+0x38>
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d104      	bne.n	8000dac <__aeabi_fmul+0x1d4>
 8000da2:	2302      	movs	r3, #2
 8000da4:	2608      	movs	r6, #8
 8000da6:	25ff      	movs	r5, #255	; 0xff
 8000da8:	469a      	mov	sl, r3
 8000daa:	e731      	b.n	8000c10 <__aeabi_fmul+0x38>
 8000dac:	2303      	movs	r3, #3
 8000dae:	260c      	movs	r6, #12
 8000db0:	25ff      	movs	r5, #255	; 0xff
 8000db2:	469a      	mov	sl, r3
 8000db4:	e72c      	b.n	8000c10 <__aeabi_fmul+0x38>
 8000db6:	4648      	mov	r0, r9
 8000db8:	f002 f80c 	bl	8002dd4 <__clzsi2>
 8000dbc:	464a      	mov	r2, r9
 8000dbe:	1f43      	subs	r3, r0, #5
 8000dc0:	2576      	movs	r5, #118	; 0x76
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	426d      	negs	r5, r5
 8000dc8:	4691      	mov	r9, r2
 8000dca:	2600      	movs	r6, #0
 8000dcc:	469a      	mov	sl, r3
 8000dce:	1a2d      	subs	r5, r5, r0
 8000dd0:	e71e      	b.n	8000c10 <__aeabi_fmul+0x38>
 8000dd2:	0020      	movs	r0, r4
 8000dd4:	f001 fffe 	bl	8002dd4 <__clzsi2>
 8000dd8:	4642      	mov	r2, r8
 8000dda:	1f43      	subs	r3, r0, #5
 8000ddc:	409c      	lsls	r4, r3
 8000dde:	1a2b      	subs	r3, r5, r0
 8000de0:	3b76      	subs	r3, #118	; 0x76
 8000de2:	407a      	eors	r2, r7
 8000de4:	2000      	movs	r0, #0
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	1c5d      	adds	r5, r3, #1
 8000dea:	2e0a      	cmp	r6, #10
 8000dec:	dd00      	ble.n	8000df0 <__aeabi_fmul+0x218>
 8000dee:	e726      	b.n	8000c3e <__aeabi_fmul+0x66>
 8000df0:	e739      	b.n	8000c66 <__aeabi_fmul+0x8e>
 8000df2:	2101      	movs	r1, #1
 8000df4:	1acb      	subs	r3, r1, r3
 8000df6:	2b1b      	cmp	r3, #27
 8000df8:	dd00      	ble.n	8000dfc <__aeabi_fmul+0x224>
 8000dfa:	e73d      	b.n	8000c78 <__aeabi_fmul+0xa0>
 8000dfc:	359e      	adds	r5, #158	; 0x9e
 8000dfe:	0021      	movs	r1, r4
 8000e00:	40ac      	lsls	r4, r5
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	1e63      	subs	r3, r4, #1
 8000e06:	419c      	sbcs	r4, r3
 8000e08:	4321      	orrs	r1, r4
 8000e0a:	074b      	lsls	r3, r1, #29
 8000e0c:	d004      	beq.n	8000e18 <__aeabi_fmul+0x240>
 8000e0e:	230f      	movs	r3, #15
 8000e10:	400b      	ands	r3, r1
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	d000      	beq.n	8000e18 <__aeabi_fmul+0x240>
 8000e16:	3104      	adds	r1, #4
 8000e18:	014b      	lsls	r3, r1, #5
 8000e1a:	d504      	bpl.n	8000e26 <__aeabi_fmul+0x24e>
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	2100      	movs	r1, #0
 8000e20:	e72c      	b.n	8000c7c <__aeabi_fmul+0xa4>
 8000e22:	001d      	movs	r5, r3
 8000e24:	e78f      	b.n	8000d46 <__aeabi_fmul+0x16e>
 8000e26:	0189      	lsls	r1, r1, #6
 8000e28:	2000      	movs	r0, #0
 8000e2a:	0a49      	lsrs	r1, r1, #9
 8000e2c:	e726      	b.n	8000c7c <__aeabi_fmul+0xa4>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	2e0f      	cmp	r6, #15
 8000e32:	d10c      	bne.n	8000e4e <__aeabi_fmul+0x276>
 8000e34:	2180      	movs	r1, #128	; 0x80
 8000e36:	464b      	mov	r3, r9
 8000e38:	03c9      	lsls	r1, r1, #15
 8000e3a:	420b      	tst	r3, r1
 8000e3c:	d00d      	beq.n	8000e5a <__aeabi_fmul+0x282>
 8000e3e:	420c      	tst	r4, r1
 8000e40:	d10b      	bne.n	8000e5a <__aeabi_fmul+0x282>
 8000e42:	4321      	orrs	r1, r4
 8000e44:	0249      	lsls	r1, r1, #9
 8000e46:	003a      	movs	r2, r7
 8000e48:	20ff      	movs	r0, #255	; 0xff
 8000e4a:	0a49      	lsrs	r1, r1, #9
 8000e4c:	e716      	b.n	8000c7c <__aeabi_fmul+0xa4>
 8000e4e:	2e0b      	cmp	r6, #11
 8000e50:	d000      	beq.n	8000e54 <__aeabi_fmul+0x27c>
 8000e52:	e6f7      	b.n	8000c44 <__aeabi_fmul+0x6c>
 8000e54:	46a1      	mov	r9, r4
 8000e56:	469a      	mov	sl, r3
 8000e58:	e736      	b.n	8000cc8 <__aeabi_fmul+0xf0>
 8000e5a:	2180      	movs	r1, #128	; 0x80
 8000e5c:	464b      	mov	r3, r9
 8000e5e:	03c9      	lsls	r1, r1, #15
 8000e60:	4319      	orrs	r1, r3
 8000e62:	0249      	lsls	r1, r1, #9
 8000e64:	4642      	mov	r2, r8
 8000e66:	20ff      	movs	r0, #255	; 0xff
 8000e68:	0a49      	lsrs	r1, r1, #9
 8000e6a:	e707      	b.n	8000c7c <__aeabi_fmul+0xa4>
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e7df      	b.n	8000e30 <__aeabi_fmul+0x258>
 8000e70:	f7ffffff 	.word	0xf7ffffff

08000e74 <__aeabi_i2f>:
 8000e74:	b570      	push	{r4, r5, r6, lr}
 8000e76:	2800      	cmp	r0, #0
 8000e78:	d013      	beq.n	8000ea2 <__aeabi_i2f+0x2e>
 8000e7a:	17c3      	asrs	r3, r0, #31
 8000e7c:	18c5      	adds	r5, r0, r3
 8000e7e:	405d      	eors	r5, r3
 8000e80:	0fc4      	lsrs	r4, r0, #31
 8000e82:	0028      	movs	r0, r5
 8000e84:	f001 ffa6 	bl	8002dd4 <__clzsi2>
 8000e88:	239e      	movs	r3, #158	; 0x9e
 8000e8a:	0001      	movs	r1, r0
 8000e8c:	1a1b      	subs	r3, r3, r0
 8000e8e:	2b96      	cmp	r3, #150	; 0x96
 8000e90:	dc0f      	bgt.n	8000eb2 <__aeabi_i2f+0x3e>
 8000e92:	2808      	cmp	r0, #8
 8000e94:	d031      	beq.n	8000efa <__aeabi_i2f+0x86>
 8000e96:	3908      	subs	r1, #8
 8000e98:	408d      	lsls	r5, r1
 8000e9a:	026d      	lsls	r5, r5, #9
 8000e9c:	0a6d      	lsrs	r5, r5, #9
 8000e9e:	b2d8      	uxtb	r0, r3
 8000ea0:	e002      	b.n	8000ea8 <__aeabi_i2f+0x34>
 8000ea2:	2400      	movs	r4, #0
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	2500      	movs	r5, #0
 8000ea8:	05c0      	lsls	r0, r0, #23
 8000eaa:	4328      	orrs	r0, r5
 8000eac:	07e4      	lsls	r4, r4, #31
 8000eae:	4320      	orrs	r0, r4
 8000eb0:	bd70      	pop	{r4, r5, r6, pc}
 8000eb2:	2b99      	cmp	r3, #153	; 0x99
 8000eb4:	dd0c      	ble.n	8000ed0 <__aeabi_i2f+0x5c>
 8000eb6:	2205      	movs	r2, #5
 8000eb8:	1a12      	subs	r2, r2, r0
 8000eba:	0028      	movs	r0, r5
 8000ebc:	40d0      	lsrs	r0, r2
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	0008      	movs	r0, r1
 8000ec2:	301b      	adds	r0, #27
 8000ec4:	4085      	lsls	r5, r0
 8000ec6:	0028      	movs	r0, r5
 8000ec8:	1e45      	subs	r5, r0, #1
 8000eca:	41a8      	sbcs	r0, r5
 8000ecc:	4302      	orrs	r2, r0
 8000ece:	0015      	movs	r5, r2
 8000ed0:	2905      	cmp	r1, #5
 8000ed2:	dc16      	bgt.n	8000f02 <__aeabi_i2f+0x8e>
 8000ed4:	002a      	movs	r2, r5
 8000ed6:	480f      	ldr	r0, [pc, #60]	; (8000f14 <__aeabi_i2f+0xa0>)
 8000ed8:	4002      	ands	r2, r0
 8000eda:	076e      	lsls	r6, r5, #29
 8000edc:	d009      	beq.n	8000ef2 <__aeabi_i2f+0x7e>
 8000ede:	260f      	movs	r6, #15
 8000ee0:	4035      	ands	r5, r6
 8000ee2:	2d04      	cmp	r5, #4
 8000ee4:	d005      	beq.n	8000ef2 <__aeabi_i2f+0x7e>
 8000ee6:	3204      	adds	r2, #4
 8000ee8:	0155      	lsls	r5, r2, #5
 8000eea:	d502      	bpl.n	8000ef2 <__aeabi_i2f+0x7e>
 8000eec:	239f      	movs	r3, #159	; 0x9f
 8000eee:	4002      	ands	r2, r0
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	0192      	lsls	r2, r2, #6
 8000ef4:	0a55      	lsrs	r5, r2, #9
 8000ef6:	b2d8      	uxtb	r0, r3
 8000ef8:	e7d6      	b.n	8000ea8 <__aeabi_i2f+0x34>
 8000efa:	026d      	lsls	r5, r5, #9
 8000efc:	2096      	movs	r0, #150	; 0x96
 8000efe:	0a6d      	lsrs	r5, r5, #9
 8000f00:	e7d2      	b.n	8000ea8 <__aeabi_i2f+0x34>
 8000f02:	1f4a      	subs	r2, r1, #5
 8000f04:	4095      	lsls	r5, r2
 8000f06:	002a      	movs	r2, r5
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <__aeabi_i2f+0xa0>)
 8000f0a:	4002      	ands	r2, r0
 8000f0c:	076e      	lsls	r6, r5, #29
 8000f0e:	d0f0      	beq.n	8000ef2 <__aeabi_i2f+0x7e>
 8000f10:	e7e5      	b.n	8000ede <__aeabi_i2f+0x6a>
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	fbffffff 	.word	0xfbffffff

08000f18 <__aeabi_ui2f>:
 8000f18:	b570      	push	{r4, r5, r6, lr}
 8000f1a:	1e04      	subs	r4, r0, #0
 8000f1c:	d00e      	beq.n	8000f3c <__aeabi_ui2f+0x24>
 8000f1e:	f001 ff59 	bl	8002dd4 <__clzsi2>
 8000f22:	239e      	movs	r3, #158	; 0x9e
 8000f24:	0001      	movs	r1, r0
 8000f26:	1a1b      	subs	r3, r3, r0
 8000f28:	2b96      	cmp	r3, #150	; 0x96
 8000f2a:	dc0c      	bgt.n	8000f46 <__aeabi_ui2f+0x2e>
 8000f2c:	2808      	cmp	r0, #8
 8000f2e:	d02c      	beq.n	8000f8a <__aeabi_ui2f+0x72>
 8000f30:	3908      	subs	r1, #8
 8000f32:	408c      	lsls	r4, r1
 8000f34:	0264      	lsls	r4, r4, #9
 8000f36:	0a64      	lsrs	r4, r4, #9
 8000f38:	b2d8      	uxtb	r0, r3
 8000f3a:	e001      	b.n	8000f40 <__aeabi_ui2f+0x28>
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	2400      	movs	r4, #0
 8000f40:	05c0      	lsls	r0, r0, #23
 8000f42:	4320      	orrs	r0, r4
 8000f44:	bd70      	pop	{r4, r5, r6, pc}
 8000f46:	2b99      	cmp	r3, #153	; 0x99
 8000f48:	dd0a      	ble.n	8000f60 <__aeabi_ui2f+0x48>
 8000f4a:	0002      	movs	r2, r0
 8000f4c:	0020      	movs	r0, r4
 8000f4e:	321b      	adds	r2, #27
 8000f50:	4090      	lsls	r0, r2
 8000f52:	0002      	movs	r2, r0
 8000f54:	1e50      	subs	r0, r2, #1
 8000f56:	4182      	sbcs	r2, r0
 8000f58:	2005      	movs	r0, #5
 8000f5a:	1a40      	subs	r0, r0, r1
 8000f5c:	40c4      	lsrs	r4, r0
 8000f5e:	4314      	orrs	r4, r2
 8000f60:	2905      	cmp	r1, #5
 8000f62:	dc16      	bgt.n	8000f92 <__aeabi_ui2f+0x7a>
 8000f64:	0022      	movs	r2, r4
 8000f66:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <__aeabi_ui2f+0x8c>)
 8000f68:	4002      	ands	r2, r0
 8000f6a:	0765      	lsls	r5, r4, #29
 8000f6c:	d009      	beq.n	8000f82 <__aeabi_ui2f+0x6a>
 8000f6e:	250f      	movs	r5, #15
 8000f70:	402c      	ands	r4, r5
 8000f72:	2c04      	cmp	r4, #4
 8000f74:	d005      	beq.n	8000f82 <__aeabi_ui2f+0x6a>
 8000f76:	3204      	adds	r2, #4
 8000f78:	0154      	lsls	r4, r2, #5
 8000f7a:	d502      	bpl.n	8000f82 <__aeabi_ui2f+0x6a>
 8000f7c:	239f      	movs	r3, #159	; 0x9f
 8000f7e:	4002      	ands	r2, r0
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	0192      	lsls	r2, r2, #6
 8000f84:	0a54      	lsrs	r4, r2, #9
 8000f86:	b2d8      	uxtb	r0, r3
 8000f88:	e7da      	b.n	8000f40 <__aeabi_ui2f+0x28>
 8000f8a:	0264      	lsls	r4, r4, #9
 8000f8c:	2096      	movs	r0, #150	; 0x96
 8000f8e:	0a64      	lsrs	r4, r4, #9
 8000f90:	e7d6      	b.n	8000f40 <__aeabi_ui2f+0x28>
 8000f92:	1f4a      	subs	r2, r1, #5
 8000f94:	4094      	lsls	r4, r2
 8000f96:	0022      	movs	r2, r4
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <__aeabi_ui2f+0x8c>)
 8000f9a:	4002      	ands	r2, r0
 8000f9c:	0765      	lsls	r5, r4, #29
 8000f9e:	d0f0      	beq.n	8000f82 <__aeabi_ui2f+0x6a>
 8000fa0:	e7e5      	b.n	8000f6e <__aeabi_ui2f+0x56>
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	fbffffff 	.word	0xfbffffff

08000fa8 <__aeabi_dadd>:
 8000fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000faa:	464f      	mov	r7, r9
 8000fac:	4646      	mov	r6, r8
 8000fae:	46d6      	mov	lr, sl
 8000fb0:	0004      	movs	r4, r0
 8000fb2:	b5c0      	push	{r6, r7, lr}
 8000fb4:	001f      	movs	r7, r3
 8000fb6:	030b      	lsls	r3, r1, #12
 8000fb8:	0010      	movs	r0, r2
 8000fba:	004e      	lsls	r6, r1, #1
 8000fbc:	0a5b      	lsrs	r3, r3, #9
 8000fbe:	0fcd      	lsrs	r5, r1, #31
 8000fc0:	0f61      	lsrs	r1, r4, #29
 8000fc2:	007a      	lsls	r2, r7, #1
 8000fc4:	4319      	orrs	r1, r3
 8000fc6:	00e3      	lsls	r3, r4, #3
 8000fc8:	033c      	lsls	r4, r7, #12
 8000fca:	0fff      	lsrs	r7, r7, #31
 8000fcc:	46bc      	mov	ip, r7
 8000fce:	0a64      	lsrs	r4, r4, #9
 8000fd0:	0f47      	lsrs	r7, r0, #29
 8000fd2:	4327      	orrs	r7, r4
 8000fd4:	0d76      	lsrs	r6, r6, #21
 8000fd6:	0d52      	lsrs	r2, r2, #21
 8000fd8:	00c0      	lsls	r0, r0, #3
 8000fda:	46b9      	mov	r9, r7
 8000fdc:	4680      	mov	r8, r0
 8000fde:	1ab7      	subs	r7, r6, r2
 8000fe0:	4565      	cmp	r5, ip
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_dadd+0x3e>
 8000fe4:	e09b      	b.n	800111e <__aeabi_dadd+0x176>
 8000fe6:	2f00      	cmp	r7, #0
 8000fe8:	dc00      	bgt.n	8000fec <__aeabi_dadd+0x44>
 8000fea:	e084      	b.n	80010f6 <__aeabi_dadd+0x14e>
 8000fec:	2a00      	cmp	r2, #0
 8000fee:	d100      	bne.n	8000ff2 <__aeabi_dadd+0x4a>
 8000ff0:	e0be      	b.n	8001170 <__aeabi_dadd+0x1c8>
 8000ff2:	4ac8      	ldr	r2, [pc, #800]	; (8001314 <__aeabi_dadd+0x36c>)
 8000ff4:	4296      	cmp	r6, r2
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_dadd+0x52>
 8000ff8:	e124      	b.n	8001244 <__aeabi_dadd+0x29c>
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	464c      	mov	r4, r9
 8000ffe:	0412      	lsls	r2, r2, #16
 8001000:	4314      	orrs	r4, r2
 8001002:	46a1      	mov	r9, r4
 8001004:	2f38      	cmp	r7, #56	; 0x38
 8001006:	dd00      	ble.n	800100a <__aeabi_dadd+0x62>
 8001008:	e167      	b.n	80012da <__aeabi_dadd+0x332>
 800100a:	2f1f      	cmp	r7, #31
 800100c:	dd00      	ble.n	8001010 <__aeabi_dadd+0x68>
 800100e:	e1d6      	b.n	80013be <__aeabi_dadd+0x416>
 8001010:	2220      	movs	r2, #32
 8001012:	464c      	mov	r4, r9
 8001014:	1bd2      	subs	r2, r2, r7
 8001016:	4094      	lsls	r4, r2
 8001018:	46a2      	mov	sl, r4
 800101a:	4644      	mov	r4, r8
 800101c:	40fc      	lsrs	r4, r7
 800101e:	0020      	movs	r0, r4
 8001020:	4654      	mov	r4, sl
 8001022:	4304      	orrs	r4, r0
 8001024:	4640      	mov	r0, r8
 8001026:	4090      	lsls	r0, r2
 8001028:	1e42      	subs	r2, r0, #1
 800102a:	4190      	sbcs	r0, r2
 800102c:	464a      	mov	r2, r9
 800102e:	40fa      	lsrs	r2, r7
 8001030:	4304      	orrs	r4, r0
 8001032:	1a89      	subs	r1, r1, r2
 8001034:	1b1c      	subs	r4, r3, r4
 8001036:	42a3      	cmp	r3, r4
 8001038:	4192      	sbcs	r2, r2
 800103a:	4252      	negs	r2, r2
 800103c:	1a8b      	subs	r3, r1, r2
 800103e:	469a      	mov	sl, r3
 8001040:	4653      	mov	r3, sl
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	d400      	bmi.n	8001048 <__aeabi_dadd+0xa0>
 8001046:	e0d4      	b.n	80011f2 <__aeabi_dadd+0x24a>
 8001048:	4653      	mov	r3, sl
 800104a:	025a      	lsls	r2, r3, #9
 800104c:	0a53      	lsrs	r3, r2, #9
 800104e:	469a      	mov	sl, r3
 8001050:	4653      	mov	r3, sl
 8001052:	2b00      	cmp	r3, #0
 8001054:	d100      	bne.n	8001058 <__aeabi_dadd+0xb0>
 8001056:	e104      	b.n	8001262 <__aeabi_dadd+0x2ba>
 8001058:	4650      	mov	r0, sl
 800105a:	f001 febb 	bl	8002dd4 <__clzsi2>
 800105e:	0003      	movs	r3, r0
 8001060:	3b08      	subs	r3, #8
 8001062:	2220      	movs	r2, #32
 8001064:	0020      	movs	r0, r4
 8001066:	1ad2      	subs	r2, r2, r3
 8001068:	4651      	mov	r1, sl
 800106a:	40d0      	lsrs	r0, r2
 800106c:	4099      	lsls	r1, r3
 800106e:	0002      	movs	r2, r0
 8001070:	409c      	lsls	r4, r3
 8001072:	430a      	orrs	r2, r1
 8001074:	42b3      	cmp	r3, r6
 8001076:	da00      	bge.n	800107a <__aeabi_dadd+0xd2>
 8001078:	e102      	b.n	8001280 <__aeabi_dadd+0x2d8>
 800107a:	1b9b      	subs	r3, r3, r6
 800107c:	1c59      	adds	r1, r3, #1
 800107e:	291f      	cmp	r1, #31
 8001080:	dd00      	ble.n	8001084 <__aeabi_dadd+0xdc>
 8001082:	e0a7      	b.n	80011d4 <__aeabi_dadd+0x22c>
 8001084:	2320      	movs	r3, #32
 8001086:	0010      	movs	r0, r2
 8001088:	0026      	movs	r6, r4
 800108a:	1a5b      	subs	r3, r3, r1
 800108c:	409c      	lsls	r4, r3
 800108e:	4098      	lsls	r0, r3
 8001090:	40ce      	lsrs	r6, r1
 8001092:	40ca      	lsrs	r2, r1
 8001094:	1e63      	subs	r3, r4, #1
 8001096:	419c      	sbcs	r4, r3
 8001098:	4330      	orrs	r0, r6
 800109a:	4692      	mov	sl, r2
 800109c:	2600      	movs	r6, #0
 800109e:	4304      	orrs	r4, r0
 80010a0:	0763      	lsls	r3, r4, #29
 80010a2:	d009      	beq.n	80010b8 <__aeabi_dadd+0x110>
 80010a4:	230f      	movs	r3, #15
 80010a6:	4023      	ands	r3, r4
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d005      	beq.n	80010b8 <__aeabi_dadd+0x110>
 80010ac:	1d23      	adds	r3, r4, #4
 80010ae:	42a3      	cmp	r3, r4
 80010b0:	41a4      	sbcs	r4, r4
 80010b2:	4264      	negs	r4, r4
 80010b4:	44a2      	add	sl, r4
 80010b6:	001c      	movs	r4, r3
 80010b8:	4653      	mov	r3, sl
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	d400      	bmi.n	80010c0 <__aeabi_dadd+0x118>
 80010be:	e09b      	b.n	80011f8 <__aeabi_dadd+0x250>
 80010c0:	4b94      	ldr	r3, [pc, #592]	; (8001314 <__aeabi_dadd+0x36c>)
 80010c2:	3601      	adds	r6, #1
 80010c4:	429e      	cmp	r6, r3
 80010c6:	d100      	bne.n	80010ca <__aeabi_dadd+0x122>
 80010c8:	e0b8      	b.n	800123c <__aeabi_dadd+0x294>
 80010ca:	4653      	mov	r3, sl
 80010cc:	4992      	ldr	r1, [pc, #584]	; (8001318 <__aeabi_dadd+0x370>)
 80010ce:	08e4      	lsrs	r4, r4, #3
 80010d0:	400b      	ands	r3, r1
 80010d2:	0019      	movs	r1, r3
 80010d4:	075b      	lsls	r3, r3, #29
 80010d6:	4323      	orrs	r3, r4
 80010d8:	0572      	lsls	r2, r6, #21
 80010da:	024c      	lsls	r4, r1, #9
 80010dc:	0b24      	lsrs	r4, r4, #12
 80010de:	0d52      	lsrs	r2, r2, #21
 80010e0:	0512      	lsls	r2, r2, #20
 80010e2:	07ed      	lsls	r5, r5, #31
 80010e4:	4322      	orrs	r2, r4
 80010e6:	432a      	orrs	r2, r5
 80010e8:	0018      	movs	r0, r3
 80010ea:	0011      	movs	r1, r2
 80010ec:	bce0      	pop	{r5, r6, r7}
 80010ee:	46ba      	mov	sl, r7
 80010f0:	46b1      	mov	r9, r6
 80010f2:	46a8      	mov	r8, r5
 80010f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f6:	2f00      	cmp	r7, #0
 80010f8:	d048      	beq.n	800118c <__aeabi_dadd+0x1e4>
 80010fa:	1b97      	subs	r7, r2, r6
 80010fc:	2e00      	cmp	r6, #0
 80010fe:	d000      	beq.n	8001102 <__aeabi_dadd+0x15a>
 8001100:	e10e      	b.n	8001320 <__aeabi_dadd+0x378>
 8001102:	000c      	movs	r4, r1
 8001104:	431c      	orrs	r4, r3
 8001106:	d100      	bne.n	800110a <__aeabi_dadd+0x162>
 8001108:	e1b7      	b.n	800147a <__aeabi_dadd+0x4d2>
 800110a:	1e7c      	subs	r4, r7, #1
 800110c:	2f01      	cmp	r7, #1
 800110e:	d100      	bne.n	8001112 <__aeabi_dadd+0x16a>
 8001110:	e226      	b.n	8001560 <__aeabi_dadd+0x5b8>
 8001112:	4d80      	ldr	r5, [pc, #512]	; (8001314 <__aeabi_dadd+0x36c>)
 8001114:	42af      	cmp	r7, r5
 8001116:	d100      	bne.n	800111a <__aeabi_dadd+0x172>
 8001118:	e1d5      	b.n	80014c6 <__aeabi_dadd+0x51e>
 800111a:	0027      	movs	r7, r4
 800111c:	e107      	b.n	800132e <__aeabi_dadd+0x386>
 800111e:	2f00      	cmp	r7, #0
 8001120:	dc00      	bgt.n	8001124 <__aeabi_dadd+0x17c>
 8001122:	e0b2      	b.n	800128a <__aeabi_dadd+0x2e2>
 8001124:	2a00      	cmp	r2, #0
 8001126:	d047      	beq.n	80011b8 <__aeabi_dadd+0x210>
 8001128:	4a7a      	ldr	r2, [pc, #488]	; (8001314 <__aeabi_dadd+0x36c>)
 800112a:	4296      	cmp	r6, r2
 800112c:	d100      	bne.n	8001130 <__aeabi_dadd+0x188>
 800112e:	e089      	b.n	8001244 <__aeabi_dadd+0x29c>
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	464c      	mov	r4, r9
 8001134:	0412      	lsls	r2, r2, #16
 8001136:	4314      	orrs	r4, r2
 8001138:	46a1      	mov	r9, r4
 800113a:	2f38      	cmp	r7, #56	; 0x38
 800113c:	dc6b      	bgt.n	8001216 <__aeabi_dadd+0x26e>
 800113e:	2f1f      	cmp	r7, #31
 8001140:	dc00      	bgt.n	8001144 <__aeabi_dadd+0x19c>
 8001142:	e16e      	b.n	8001422 <__aeabi_dadd+0x47a>
 8001144:	003a      	movs	r2, r7
 8001146:	4648      	mov	r0, r9
 8001148:	3a20      	subs	r2, #32
 800114a:	40d0      	lsrs	r0, r2
 800114c:	4684      	mov	ip, r0
 800114e:	2f20      	cmp	r7, #32
 8001150:	d007      	beq.n	8001162 <__aeabi_dadd+0x1ba>
 8001152:	2240      	movs	r2, #64	; 0x40
 8001154:	4648      	mov	r0, r9
 8001156:	1bd2      	subs	r2, r2, r7
 8001158:	4090      	lsls	r0, r2
 800115a:	0002      	movs	r2, r0
 800115c:	4640      	mov	r0, r8
 800115e:	4310      	orrs	r0, r2
 8001160:	4680      	mov	r8, r0
 8001162:	4640      	mov	r0, r8
 8001164:	1e42      	subs	r2, r0, #1
 8001166:	4190      	sbcs	r0, r2
 8001168:	4662      	mov	r2, ip
 800116a:	0004      	movs	r4, r0
 800116c:	4314      	orrs	r4, r2
 800116e:	e057      	b.n	8001220 <__aeabi_dadd+0x278>
 8001170:	464a      	mov	r2, r9
 8001172:	4302      	orrs	r2, r0
 8001174:	d100      	bne.n	8001178 <__aeabi_dadd+0x1d0>
 8001176:	e103      	b.n	8001380 <__aeabi_dadd+0x3d8>
 8001178:	1e7a      	subs	r2, r7, #1
 800117a:	2f01      	cmp	r7, #1
 800117c:	d100      	bne.n	8001180 <__aeabi_dadd+0x1d8>
 800117e:	e193      	b.n	80014a8 <__aeabi_dadd+0x500>
 8001180:	4c64      	ldr	r4, [pc, #400]	; (8001314 <__aeabi_dadd+0x36c>)
 8001182:	42a7      	cmp	r7, r4
 8001184:	d100      	bne.n	8001188 <__aeabi_dadd+0x1e0>
 8001186:	e18a      	b.n	800149e <__aeabi_dadd+0x4f6>
 8001188:	0017      	movs	r7, r2
 800118a:	e73b      	b.n	8001004 <__aeabi_dadd+0x5c>
 800118c:	4c63      	ldr	r4, [pc, #396]	; (800131c <__aeabi_dadd+0x374>)
 800118e:	1c72      	adds	r2, r6, #1
 8001190:	4222      	tst	r2, r4
 8001192:	d000      	beq.n	8001196 <__aeabi_dadd+0x1ee>
 8001194:	e0e0      	b.n	8001358 <__aeabi_dadd+0x3b0>
 8001196:	000a      	movs	r2, r1
 8001198:	431a      	orrs	r2, r3
 800119a:	2e00      	cmp	r6, #0
 800119c:	d000      	beq.n	80011a0 <__aeabi_dadd+0x1f8>
 800119e:	e174      	b.n	800148a <__aeabi_dadd+0x4e2>
 80011a0:	2a00      	cmp	r2, #0
 80011a2:	d100      	bne.n	80011a6 <__aeabi_dadd+0x1fe>
 80011a4:	e1d0      	b.n	8001548 <__aeabi_dadd+0x5a0>
 80011a6:	464a      	mov	r2, r9
 80011a8:	4302      	orrs	r2, r0
 80011aa:	d000      	beq.n	80011ae <__aeabi_dadd+0x206>
 80011ac:	e1e3      	b.n	8001576 <__aeabi_dadd+0x5ce>
 80011ae:	074a      	lsls	r2, r1, #29
 80011b0:	08db      	lsrs	r3, r3, #3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	08c9      	lsrs	r1, r1, #3
 80011b6:	e029      	b.n	800120c <__aeabi_dadd+0x264>
 80011b8:	464a      	mov	r2, r9
 80011ba:	4302      	orrs	r2, r0
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x218>
 80011be:	e17d      	b.n	80014bc <__aeabi_dadd+0x514>
 80011c0:	1e7a      	subs	r2, r7, #1
 80011c2:	2f01      	cmp	r7, #1
 80011c4:	d100      	bne.n	80011c8 <__aeabi_dadd+0x220>
 80011c6:	e0e0      	b.n	800138a <__aeabi_dadd+0x3e2>
 80011c8:	4c52      	ldr	r4, [pc, #328]	; (8001314 <__aeabi_dadd+0x36c>)
 80011ca:	42a7      	cmp	r7, r4
 80011cc:	d100      	bne.n	80011d0 <__aeabi_dadd+0x228>
 80011ce:	e166      	b.n	800149e <__aeabi_dadd+0x4f6>
 80011d0:	0017      	movs	r7, r2
 80011d2:	e7b2      	b.n	800113a <__aeabi_dadd+0x192>
 80011d4:	0010      	movs	r0, r2
 80011d6:	3b1f      	subs	r3, #31
 80011d8:	40d8      	lsrs	r0, r3
 80011da:	2920      	cmp	r1, #32
 80011dc:	d003      	beq.n	80011e6 <__aeabi_dadd+0x23e>
 80011de:	2340      	movs	r3, #64	; 0x40
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	409a      	lsls	r2, r3
 80011e4:	4314      	orrs	r4, r2
 80011e6:	1e63      	subs	r3, r4, #1
 80011e8:	419c      	sbcs	r4, r3
 80011ea:	2300      	movs	r3, #0
 80011ec:	2600      	movs	r6, #0
 80011ee:	469a      	mov	sl, r3
 80011f0:	4304      	orrs	r4, r0
 80011f2:	0763      	lsls	r3, r4, #29
 80011f4:	d000      	beq.n	80011f8 <__aeabi_dadd+0x250>
 80011f6:	e755      	b.n	80010a4 <__aeabi_dadd+0xfc>
 80011f8:	4652      	mov	r2, sl
 80011fa:	08e3      	lsrs	r3, r4, #3
 80011fc:	0752      	lsls	r2, r2, #29
 80011fe:	4313      	orrs	r3, r2
 8001200:	4652      	mov	r2, sl
 8001202:	0037      	movs	r7, r6
 8001204:	08d1      	lsrs	r1, r2, #3
 8001206:	4a43      	ldr	r2, [pc, #268]	; (8001314 <__aeabi_dadd+0x36c>)
 8001208:	4297      	cmp	r7, r2
 800120a:	d01f      	beq.n	800124c <__aeabi_dadd+0x2a4>
 800120c:	0309      	lsls	r1, r1, #12
 800120e:	057a      	lsls	r2, r7, #21
 8001210:	0b0c      	lsrs	r4, r1, #12
 8001212:	0d52      	lsrs	r2, r2, #21
 8001214:	e764      	b.n	80010e0 <__aeabi_dadd+0x138>
 8001216:	4642      	mov	r2, r8
 8001218:	464c      	mov	r4, r9
 800121a:	4314      	orrs	r4, r2
 800121c:	1e62      	subs	r2, r4, #1
 800121e:	4194      	sbcs	r4, r2
 8001220:	18e4      	adds	r4, r4, r3
 8001222:	429c      	cmp	r4, r3
 8001224:	4192      	sbcs	r2, r2
 8001226:	4252      	negs	r2, r2
 8001228:	4692      	mov	sl, r2
 800122a:	448a      	add	sl, r1
 800122c:	4653      	mov	r3, sl
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	d5df      	bpl.n	80011f2 <__aeabi_dadd+0x24a>
 8001232:	4b38      	ldr	r3, [pc, #224]	; (8001314 <__aeabi_dadd+0x36c>)
 8001234:	3601      	adds	r6, #1
 8001236:	429e      	cmp	r6, r3
 8001238:	d000      	beq.n	800123c <__aeabi_dadd+0x294>
 800123a:	e0b3      	b.n	80013a4 <__aeabi_dadd+0x3fc>
 800123c:	0032      	movs	r2, r6
 800123e:	2400      	movs	r4, #0
 8001240:	2300      	movs	r3, #0
 8001242:	e74d      	b.n	80010e0 <__aeabi_dadd+0x138>
 8001244:	074a      	lsls	r2, r1, #29
 8001246:	08db      	lsrs	r3, r3, #3
 8001248:	4313      	orrs	r3, r2
 800124a:	08c9      	lsrs	r1, r1, #3
 800124c:	001a      	movs	r2, r3
 800124e:	430a      	orrs	r2, r1
 8001250:	d100      	bne.n	8001254 <__aeabi_dadd+0x2ac>
 8001252:	e200      	b.n	8001656 <__aeabi_dadd+0x6ae>
 8001254:	2480      	movs	r4, #128	; 0x80
 8001256:	0324      	lsls	r4, r4, #12
 8001258:	430c      	orrs	r4, r1
 800125a:	0324      	lsls	r4, r4, #12
 800125c:	4a2d      	ldr	r2, [pc, #180]	; (8001314 <__aeabi_dadd+0x36c>)
 800125e:	0b24      	lsrs	r4, r4, #12
 8001260:	e73e      	b.n	80010e0 <__aeabi_dadd+0x138>
 8001262:	0020      	movs	r0, r4
 8001264:	f001 fdb6 	bl	8002dd4 <__clzsi2>
 8001268:	0003      	movs	r3, r0
 800126a:	3318      	adds	r3, #24
 800126c:	2b1f      	cmp	r3, #31
 800126e:	dc00      	bgt.n	8001272 <__aeabi_dadd+0x2ca>
 8001270:	e6f7      	b.n	8001062 <__aeabi_dadd+0xba>
 8001272:	0022      	movs	r2, r4
 8001274:	3808      	subs	r0, #8
 8001276:	4082      	lsls	r2, r0
 8001278:	2400      	movs	r4, #0
 800127a:	42b3      	cmp	r3, r6
 800127c:	db00      	blt.n	8001280 <__aeabi_dadd+0x2d8>
 800127e:	e6fc      	b.n	800107a <__aeabi_dadd+0xd2>
 8001280:	1af6      	subs	r6, r6, r3
 8001282:	4b25      	ldr	r3, [pc, #148]	; (8001318 <__aeabi_dadd+0x370>)
 8001284:	401a      	ands	r2, r3
 8001286:	4692      	mov	sl, r2
 8001288:	e70a      	b.n	80010a0 <__aeabi_dadd+0xf8>
 800128a:	2f00      	cmp	r7, #0
 800128c:	d02b      	beq.n	80012e6 <__aeabi_dadd+0x33e>
 800128e:	1b97      	subs	r7, r2, r6
 8001290:	2e00      	cmp	r6, #0
 8001292:	d100      	bne.n	8001296 <__aeabi_dadd+0x2ee>
 8001294:	e0b8      	b.n	8001408 <__aeabi_dadd+0x460>
 8001296:	4c1f      	ldr	r4, [pc, #124]	; (8001314 <__aeabi_dadd+0x36c>)
 8001298:	42a2      	cmp	r2, r4
 800129a:	d100      	bne.n	800129e <__aeabi_dadd+0x2f6>
 800129c:	e11c      	b.n	80014d8 <__aeabi_dadd+0x530>
 800129e:	2480      	movs	r4, #128	; 0x80
 80012a0:	0424      	lsls	r4, r4, #16
 80012a2:	4321      	orrs	r1, r4
 80012a4:	2f38      	cmp	r7, #56	; 0x38
 80012a6:	dd00      	ble.n	80012aa <__aeabi_dadd+0x302>
 80012a8:	e11e      	b.n	80014e8 <__aeabi_dadd+0x540>
 80012aa:	2f1f      	cmp	r7, #31
 80012ac:	dd00      	ble.n	80012b0 <__aeabi_dadd+0x308>
 80012ae:	e19e      	b.n	80015ee <__aeabi_dadd+0x646>
 80012b0:	2620      	movs	r6, #32
 80012b2:	000c      	movs	r4, r1
 80012b4:	1bf6      	subs	r6, r6, r7
 80012b6:	0018      	movs	r0, r3
 80012b8:	40b3      	lsls	r3, r6
 80012ba:	40b4      	lsls	r4, r6
 80012bc:	40f8      	lsrs	r0, r7
 80012be:	1e5e      	subs	r6, r3, #1
 80012c0:	41b3      	sbcs	r3, r6
 80012c2:	40f9      	lsrs	r1, r7
 80012c4:	4304      	orrs	r4, r0
 80012c6:	431c      	orrs	r4, r3
 80012c8:	4489      	add	r9, r1
 80012ca:	4444      	add	r4, r8
 80012cc:	4544      	cmp	r4, r8
 80012ce:	419b      	sbcs	r3, r3
 80012d0:	425b      	negs	r3, r3
 80012d2:	444b      	add	r3, r9
 80012d4:	469a      	mov	sl, r3
 80012d6:	0016      	movs	r6, r2
 80012d8:	e7a8      	b.n	800122c <__aeabi_dadd+0x284>
 80012da:	4642      	mov	r2, r8
 80012dc:	464c      	mov	r4, r9
 80012de:	4314      	orrs	r4, r2
 80012e0:	1e62      	subs	r2, r4, #1
 80012e2:	4194      	sbcs	r4, r2
 80012e4:	e6a6      	b.n	8001034 <__aeabi_dadd+0x8c>
 80012e6:	4c0d      	ldr	r4, [pc, #52]	; (800131c <__aeabi_dadd+0x374>)
 80012e8:	1c72      	adds	r2, r6, #1
 80012ea:	4222      	tst	r2, r4
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x348>
 80012ee:	e0a8      	b.n	8001442 <__aeabi_dadd+0x49a>
 80012f0:	000a      	movs	r2, r1
 80012f2:	431a      	orrs	r2, r3
 80012f4:	2e00      	cmp	r6, #0
 80012f6:	d000      	beq.n	80012fa <__aeabi_dadd+0x352>
 80012f8:	e10a      	b.n	8001510 <__aeabi_dadd+0x568>
 80012fa:	2a00      	cmp	r2, #0
 80012fc:	d100      	bne.n	8001300 <__aeabi_dadd+0x358>
 80012fe:	e15e      	b.n	80015be <__aeabi_dadd+0x616>
 8001300:	464a      	mov	r2, r9
 8001302:	4302      	orrs	r2, r0
 8001304:	d000      	beq.n	8001308 <__aeabi_dadd+0x360>
 8001306:	e161      	b.n	80015cc <__aeabi_dadd+0x624>
 8001308:	074a      	lsls	r2, r1, #29
 800130a:	08db      	lsrs	r3, r3, #3
 800130c:	4313      	orrs	r3, r2
 800130e:	08c9      	lsrs	r1, r1, #3
 8001310:	e77c      	b.n	800120c <__aeabi_dadd+0x264>
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	000007ff 	.word	0x000007ff
 8001318:	ff7fffff 	.word	0xff7fffff
 800131c:	000007fe 	.word	0x000007fe
 8001320:	4ccf      	ldr	r4, [pc, #828]	; (8001660 <__aeabi_dadd+0x6b8>)
 8001322:	42a2      	cmp	r2, r4
 8001324:	d100      	bne.n	8001328 <__aeabi_dadd+0x380>
 8001326:	e0ce      	b.n	80014c6 <__aeabi_dadd+0x51e>
 8001328:	2480      	movs	r4, #128	; 0x80
 800132a:	0424      	lsls	r4, r4, #16
 800132c:	4321      	orrs	r1, r4
 800132e:	2f38      	cmp	r7, #56	; 0x38
 8001330:	dc5b      	bgt.n	80013ea <__aeabi_dadd+0x442>
 8001332:	2f1f      	cmp	r7, #31
 8001334:	dd00      	ble.n	8001338 <__aeabi_dadd+0x390>
 8001336:	e0dc      	b.n	80014f2 <__aeabi_dadd+0x54a>
 8001338:	2520      	movs	r5, #32
 800133a:	000c      	movs	r4, r1
 800133c:	1bed      	subs	r5, r5, r7
 800133e:	001e      	movs	r6, r3
 8001340:	40ab      	lsls	r3, r5
 8001342:	40ac      	lsls	r4, r5
 8001344:	40fe      	lsrs	r6, r7
 8001346:	1e5d      	subs	r5, r3, #1
 8001348:	41ab      	sbcs	r3, r5
 800134a:	4334      	orrs	r4, r6
 800134c:	40f9      	lsrs	r1, r7
 800134e:	431c      	orrs	r4, r3
 8001350:	464b      	mov	r3, r9
 8001352:	1a5b      	subs	r3, r3, r1
 8001354:	4699      	mov	r9, r3
 8001356:	e04c      	b.n	80013f2 <__aeabi_dadd+0x44a>
 8001358:	464a      	mov	r2, r9
 800135a:	1a1c      	subs	r4, r3, r0
 800135c:	1a88      	subs	r0, r1, r2
 800135e:	42a3      	cmp	r3, r4
 8001360:	4192      	sbcs	r2, r2
 8001362:	4252      	negs	r2, r2
 8001364:	4692      	mov	sl, r2
 8001366:	0002      	movs	r2, r0
 8001368:	4650      	mov	r0, sl
 800136a:	1a12      	subs	r2, r2, r0
 800136c:	4692      	mov	sl, r2
 800136e:	0212      	lsls	r2, r2, #8
 8001370:	d478      	bmi.n	8001464 <__aeabi_dadd+0x4bc>
 8001372:	4653      	mov	r3, sl
 8001374:	4323      	orrs	r3, r4
 8001376:	d000      	beq.n	800137a <__aeabi_dadd+0x3d2>
 8001378:	e66a      	b.n	8001050 <__aeabi_dadd+0xa8>
 800137a:	2100      	movs	r1, #0
 800137c:	2500      	movs	r5, #0
 800137e:	e745      	b.n	800120c <__aeabi_dadd+0x264>
 8001380:	074a      	lsls	r2, r1, #29
 8001382:	08db      	lsrs	r3, r3, #3
 8001384:	4313      	orrs	r3, r2
 8001386:	08c9      	lsrs	r1, r1, #3
 8001388:	e73d      	b.n	8001206 <__aeabi_dadd+0x25e>
 800138a:	181c      	adds	r4, r3, r0
 800138c:	429c      	cmp	r4, r3
 800138e:	419b      	sbcs	r3, r3
 8001390:	4449      	add	r1, r9
 8001392:	468a      	mov	sl, r1
 8001394:	425b      	negs	r3, r3
 8001396:	449a      	add	sl, r3
 8001398:	4653      	mov	r3, sl
 800139a:	2601      	movs	r6, #1
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	d400      	bmi.n	80013a2 <__aeabi_dadd+0x3fa>
 80013a0:	e727      	b.n	80011f2 <__aeabi_dadd+0x24a>
 80013a2:	2602      	movs	r6, #2
 80013a4:	4652      	mov	r2, sl
 80013a6:	4baf      	ldr	r3, [pc, #700]	; (8001664 <__aeabi_dadd+0x6bc>)
 80013a8:	2101      	movs	r1, #1
 80013aa:	401a      	ands	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	4021      	ands	r1, r4
 80013b0:	0862      	lsrs	r2, r4, #1
 80013b2:	430a      	orrs	r2, r1
 80013b4:	07dc      	lsls	r4, r3, #31
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	469a      	mov	sl, r3
 80013ba:	4314      	orrs	r4, r2
 80013bc:	e670      	b.n	80010a0 <__aeabi_dadd+0xf8>
 80013be:	003a      	movs	r2, r7
 80013c0:	464c      	mov	r4, r9
 80013c2:	3a20      	subs	r2, #32
 80013c4:	40d4      	lsrs	r4, r2
 80013c6:	46a4      	mov	ip, r4
 80013c8:	2f20      	cmp	r7, #32
 80013ca:	d007      	beq.n	80013dc <__aeabi_dadd+0x434>
 80013cc:	2240      	movs	r2, #64	; 0x40
 80013ce:	4648      	mov	r0, r9
 80013d0:	1bd2      	subs	r2, r2, r7
 80013d2:	4090      	lsls	r0, r2
 80013d4:	0002      	movs	r2, r0
 80013d6:	4640      	mov	r0, r8
 80013d8:	4310      	orrs	r0, r2
 80013da:	4680      	mov	r8, r0
 80013dc:	4640      	mov	r0, r8
 80013de:	1e42      	subs	r2, r0, #1
 80013e0:	4190      	sbcs	r0, r2
 80013e2:	4662      	mov	r2, ip
 80013e4:	0004      	movs	r4, r0
 80013e6:	4314      	orrs	r4, r2
 80013e8:	e624      	b.n	8001034 <__aeabi_dadd+0x8c>
 80013ea:	4319      	orrs	r1, r3
 80013ec:	000c      	movs	r4, r1
 80013ee:	1e63      	subs	r3, r4, #1
 80013f0:	419c      	sbcs	r4, r3
 80013f2:	4643      	mov	r3, r8
 80013f4:	1b1c      	subs	r4, r3, r4
 80013f6:	45a0      	cmp	r8, r4
 80013f8:	419b      	sbcs	r3, r3
 80013fa:	4649      	mov	r1, r9
 80013fc:	425b      	negs	r3, r3
 80013fe:	1acb      	subs	r3, r1, r3
 8001400:	469a      	mov	sl, r3
 8001402:	4665      	mov	r5, ip
 8001404:	0016      	movs	r6, r2
 8001406:	e61b      	b.n	8001040 <__aeabi_dadd+0x98>
 8001408:	000c      	movs	r4, r1
 800140a:	431c      	orrs	r4, r3
 800140c:	d100      	bne.n	8001410 <__aeabi_dadd+0x468>
 800140e:	e0c7      	b.n	80015a0 <__aeabi_dadd+0x5f8>
 8001410:	1e7c      	subs	r4, r7, #1
 8001412:	2f01      	cmp	r7, #1
 8001414:	d100      	bne.n	8001418 <__aeabi_dadd+0x470>
 8001416:	e0f9      	b.n	800160c <__aeabi_dadd+0x664>
 8001418:	4e91      	ldr	r6, [pc, #580]	; (8001660 <__aeabi_dadd+0x6b8>)
 800141a:	42b7      	cmp	r7, r6
 800141c:	d05c      	beq.n	80014d8 <__aeabi_dadd+0x530>
 800141e:	0027      	movs	r7, r4
 8001420:	e740      	b.n	80012a4 <__aeabi_dadd+0x2fc>
 8001422:	2220      	movs	r2, #32
 8001424:	464c      	mov	r4, r9
 8001426:	4640      	mov	r0, r8
 8001428:	1bd2      	subs	r2, r2, r7
 800142a:	4094      	lsls	r4, r2
 800142c:	40f8      	lsrs	r0, r7
 800142e:	4304      	orrs	r4, r0
 8001430:	4640      	mov	r0, r8
 8001432:	4090      	lsls	r0, r2
 8001434:	1e42      	subs	r2, r0, #1
 8001436:	4190      	sbcs	r0, r2
 8001438:	464a      	mov	r2, r9
 800143a:	40fa      	lsrs	r2, r7
 800143c:	4304      	orrs	r4, r0
 800143e:	1889      	adds	r1, r1, r2
 8001440:	e6ee      	b.n	8001220 <__aeabi_dadd+0x278>
 8001442:	4c87      	ldr	r4, [pc, #540]	; (8001660 <__aeabi_dadd+0x6b8>)
 8001444:	42a2      	cmp	r2, r4
 8001446:	d100      	bne.n	800144a <__aeabi_dadd+0x4a2>
 8001448:	e6f9      	b.n	800123e <__aeabi_dadd+0x296>
 800144a:	1818      	adds	r0, r3, r0
 800144c:	4298      	cmp	r0, r3
 800144e:	419b      	sbcs	r3, r3
 8001450:	4449      	add	r1, r9
 8001452:	425b      	negs	r3, r3
 8001454:	18cb      	adds	r3, r1, r3
 8001456:	07dc      	lsls	r4, r3, #31
 8001458:	0840      	lsrs	r0, r0, #1
 800145a:	085b      	lsrs	r3, r3, #1
 800145c:	469a      	mov	sl, r3
 800145e:	0016      	movs	r6, r2
 8001460:	4304      	orrs	r4, r0
 8001462:	e6c6      	b.n	80011f2 <__aeabi_dadd+0x24a>
 8001464:	4642      	mov	r2, r8
 8001466:	1ad4      	subs	r4, r2, r3
 8001468:	45a0      	cmp	r8, r4
 800146a:	4180      	sbcs	r0, r0
 800146c:	464b      	mov	r3, r9
 800146e:	4240      	negs	r0, r0
 8001470:	1a59      	subs	r1, r3, r1
 8001472:	1a0b      	subs	r3, r1, r0
 8001474:	469a      	mov	sl, r3
 8001476:	4665      	mov	r5, ip
 8001478:	e5ea      	b.n	8001050 <__aeabi_dadd+0xa8>
 800147a:	464b      	mov	r3, r9
 800147c:	464a      	mov	r2, r9
 800147e:	08c0      	lsrs	r0, r0, #3
 8001480:	075b      	lsls	r3, r3, #29
 8001482:	4665      	mov	r5, ip
 8001484:	4303      	orrs	r3, r0
 8001486:	08d1      	lsrs	r1, r2, #3
 8001488:	e6bd      	b.n	8001206 <__aeabi_dadd+0x25e>
 800148a:	2a00      	cmp	r2, #0
 800148c:	d000      	beq.n	8001490 <__aeabi_dadd+0x4e8>
 800148e:	e08e      	b.n	80015ae <__aeabi_dadd+0x606>
 8001490:	464b      	mov	r3, r9
 8001492:	4303      	orrs	r3, r0
 8001494:	d117      	bne.n	80014c6 <__aeabi_dadd+0x51e>
 8001496:	2180      	movs	r1, #128	; 0x80
 8001498:	2500      	movs	r5, #0
 800149a:	0309      	lsls	r1, r1, #12
 800149c:	e6da      	b.n	8001254 <__aeabi_dadd+0x2ac>
 800149e:	074a      	lsls	r2, r1, #29
 80014a0:	08db      	lsrs	r3, r3, #3
 80014a2:	4313      	orrs	r3, r2
 80014a4:	08c9      	lsrs	r1, r1, #3
 80014a6:	e6d1      	b.n	800124c <__aeabi_dadd+0x2a4>
 80014a8:	1a1c      	subs	r4, r3, r0
 80014aa:	464a      	mov	r2, r9
 80014ac:	42a3      	cmp	r3, r4
 80014ae:	419b      	sbcs	r3, r3
 80014b0:	1a89      	subs	r1, r1, r2
 80014b2:	425b      	negs	r3, r3
 80014b4:	1acb      	subs	r3, r1, r3
 80014b6:	469a      	mov	sl, r3
 80014b8:	2601      	movs	r6, #1
 80014ba:	e5c1      	b.n	8001040 <__aeabi_dadd+0x98>
 80014bc:	074a      	lsls	r2, r1, #29
 80014be:	08db      	lsrs	r3, r3, #3
 80014c0:	4313      	orrs	r3, r2
 80014c2:	08c9      	lsrs	r1, r1, #3
 80014c4:	e69f      	b.n	8001206 <__aeabi_dadd+0x25e>
 80014c6:	4643      	mov	r3, r8
 80014c8:	08d8      	lsrs	r0, r3, #3
 80014ca:	464b      	mov	r3, r9
 80014cc:	464a      	mov	r2, r9
 80014ce:	075b      	lsls	r3, r3, #29
 80014d0:	4665      	mov	r5, ip
 80014d2:	4303      	orrs	r3, r0
 80014d4:	08d1      	lsrs	r1, r2, #3
 80014d6:	e6b9      	b.n	800124c <__aeabi_dadd+0x2a4>
 80014d8:	4643      	mov	r3, r8
 80014da:	08d8      	lsrs	r0, r3, #3
 80014dc:	464b      	mov	r3, r9
 80014de:	464a      	mov	r2, r9
 80014e0:	075b      	lsls	r3, r3, #29
 80014e2:	4303      	orrs	r3, r0
 80014e4:	08d1      	lsrs	r1, r2, #3
 80014e6:	e6b1      	b.n	800124c <__aeabi_dadd+0x2a4>
 80014e8:	4319      	orrs	r1, r3
 80014ea:	000c      	movs	r4, r1
 80014ec:	1e63      	subs	r3, r4, #1
 80014ee:	419c      	sbcs	r4, r3
 80014f0:	e6eb      	b.n	80012ca <__aeabi_dadd+0x322>
 80014f2:	003c      	movs	r4, r7
 80014f4:	000d      	movs	r5, r1
 80014f6:	3c20      	subs	r4, #32
 80014f8:	40e5      	lsrs	r5, r4
 80014fa:	2f20      	cmp	r7, #32
 80014fc:	d003      	beq.n	8001506 <__aeabi_dadd+0x55e>
 80014fe:	2440      	movs	r4, #64	; 0x40
 8001500:	1be4      	subs	r4, r4, r7
 8001502:	40a1      	lsls	r1, r4
 8001504:	430b      	orrs	r3, r1
 8001506:	001c      	movs	r4, r3
 8001508:	1e63      	subs	r3, r4, #1
 800150a:	419c      	sbcs	r4, r3
 800150c:	432c      	orrs	r4, r5
 800150e:	e770      	b.n	80013f2 <__aeabi_dadd+0x44a>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d0e1      	beq.n	80014d8 <__aeabi_dadd+0x530>
 8001514:	464a      	mov	r2, r9
 8001516:	4302      	orrs	r2, r0
 8001518:	d0c1      	beq.n	800149e <__aeabi_dadd+0x4f6>
 800151a:	074a      	lsls	r2, r1, #29
 800151c:	08db      	lsrs	r3, r3, #3
 800151e:	4313      	orrs	r3, r2
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	08c9      	lsrs	r1, r1, #3
 8001524:	0312      	lsls	r2, r2, #12
 8001526:	4211      	tst	r1, r2
 8001528:	d008      	beq.n	800153c <__aeabi_dadd+0x594>
 800152a:	4648      	mov	r0, r9
 800152c:	08c4      	lsrs	r4, r0, #3
 800152e:	4214      	tst	r4, r2
 8001530:	d104      	bne.n	800153c <__aeabi_dadd+0x594>
 8001532:	4643      	mov	r3, r8
 8001534:	0021      	movs	r1, r4
 8001536:	08db      	lsrs	r3, r3, #3
 8001538:	0742      	lsls	r2, r0, #29
 800153a:	4313      	orrs	r3, r2
 800153c:	0f5a      	lsrs	r2, r3, #29
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	0752      	lsls	r2, r2, #29
 8001542:	08db      	lsrs	r3, r3, #3
 8001544:	4313      	orrs	r3, r2
 8001546:	e681      	b.n	800124c <__aeabi_dadd+0x2a4>
 8001548:	464b      	mov	r3, r9
 800154a:	4303      	orrs	r3, r0
 800154c:	d100      	bne.n	8001550 <__aeabi_dadd+0x5a8>
 800154e:	e714      	b.n	800137a <__aeabi_dadd+0x3d2>
 8001550:	464b      	mov	r3, r9
 8001552:	464a      	mov	r2, r9
 8001554:	08c0      	lsrs	r0, r0, #3
 8001556:	075b      	lsls	r3, r3, #29
 8001558:	4665      	mov	r5, ip
 800155a:	4303      	orrs	r3, r0
 800155c:	08d1      	lsrs	r1, r2, #3
 800155e:	e655      	b.n	800120c <__aeabi_dadd+0x264>
 8001560:	1ac4      	subs	r4, r0, r3
 8001562:	45a0      	cmp	r8, r4
 8001564:	4180      	sbcs	r0, r0
 8001566:	464b      	mov	r3, r9
 8001568:	4240      	negs	r0, r0
 800156a:	1a59      	subs	r1, r3, r1
 800156c:	1a0b      	subs	r3, r1, r0
 800156e:	469a      	mov	sl, r3
 8001570:	4665      	mov	r5, ip
 8001572:	2601      	movs	r6, #1
 8001574:	e564      	b.n	8001040 <__aeabi_dadd+0x98>
 8001576:	1a1c      	subs	r4, r3, r0
 8001578:	464a      	mov	r2, r9
 800157a:	42a3      	cmp	r3, r4
 800157c:	4180      	sbcs	r0, r0
 800157e:	1a8a      	subs	r2, r1, r2
 8001580:	4240      	negs	r0, r0
 8001582:	1a12      	subs	r2, r2, r0
 8001584:	4692      	mov	sl, r2
 8001586:	0212      	lsls	r2, r2, #8
 8001588:	d549      	bpl.n	800161e <__aeabi_dadd+0x676>
 800158a:	4642      	mov	r2, r8
 800158c:	1ad4      	subs	r4, r2, r3
 800158e:	45a0      	cmp	r8, r4
 8001590:	4180      	sbcs	r0, r0
 8001592:	464b      	mov	r3, r9
 8001594:	4240      	negs	r0, r0
 8001596:	1a59      	subs	r1, r3, r1
 8001598:	1a0b      	subs	r3, r1, r0
 800159a:	469a      	mov	sl, r3
 800159c:	4665      	mov	r5, ip
 800159e:	e57f      	b.n	80010a0 <__aeabi_dadd+0xf8>
 80015a0:	464b      	mov	r3, r9
 80015a2:	464a      	mov	r2, r9
 80015a4:	08c0      	lsrs	r0, r0, #3
 80015a6:	075b      	lsls	r3, r3, #29
 80015a8:	4303      	orrs	r3, r0
 80015aa:	08d1      	lsrs	r1, r2, #3
 80015ac:	e62b      	b.n	8001206 <__aeabi_dadd+0x25e>
 80015ae:	464a      	mov	r2, r9
 80015b0:	08db      	lsrs	r3, r3, #3
 80015b2:	4302      	orrs	r2, r0
 80015b4:	d138      	bne.n	8001628 <__aeabi_dadd+0x680>
 80015b6:	074a      	lsls	r2, r1, #29
 80015b8:	4313      	orrs	r3, r2
 80015ba:	08c9      	lsrs	r1, r1, #3
 80015bc:	e646      	b.n	800124c <__aeabi_dadd+0x2a4>
 80015be:	464b      	mov	r3, r9
 80015c0:	464a      	mov	r2, r9
 80015c2:	08c0      	lsrs	r0, r0, #3
 80015c4:	075b      	lsls	r3, r3, #29
 80015c6:	4303      	orrs	r3, r0
 80015c8:	08d1      	lsrs	r1, r2, #3
 80015ca:	e61f      	b.n	800120c <__aeabi_dadd+0x264>
 80015cc:	181c      	adds	r4, r3, r0
 80015ce:	429c      	cmp	r4, r3
 80015d0:	419b      	sbcs	r3, r3
 80015d2:	4449      	add	r1, r9
 80015d4:	468a      	mov	sl, r1
 80015d6:	425b      	negs	r3, r3
 80015d8:	449a      	add	sl, r3
 80015da:	4653      	mov	r3, sl
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	d400      	bmi.n	80015e2 <__aeabi_dadd+0x63a>
 80015e0:	e607      	b.n	80011f2 <__aeabi_dadd+0x24a>
 80015e2:	4652      	mov	r2, sl
 80015e4:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <__aeabi_dadd+0x6bc>)
 80015e6:	2601      	movs	r6, #1
 80015e8:	401a      	ands	r2, r3
 80015ea:	4692      	mov	sl, r2
 80015ec:	e601      	b.n	80011f2 <__aeabi_dadd+0x24a>
 80015ee:	003c      	movs	r4, r7
 80015f0:	000e      	movs	r6, r1
 80015f2:	3c20      	subs	r4, #32
 80015f4:	40e6      	lsrs	r6, r4
 80015f6:	2f20      	cmp	r7, #32
 80015f8:	d003      	beq.n	8001602 <__aeabi_dadd+0x65a>
 80015fa:	2440      	movs	r4, #64	; 0x40
 80015fc:	1be4      	subs	r4, r4, r7
 80015fe:	40a1      	lsls	r1, r4
 8001600:	430b      	orrs	r3, r1
 8001602:	001c      	movs	r4, r3
 8001604:	1e63      	subs	r3, r4, #1
 8001606:	419c      	sbcs	r4, r3
 8001608:	4334      	orrs	r4, r6
 800160a:	e65e      	b.n	80012ca <__aeabi_dadd+0x322>
 800160c:	4443      	add	r3, r8
 800160e:	4283      	cmp	r3, r0
 8001610:	4180      	sbcs	r0, r0
 8001612:	4449      	add	r1, r9
 8001614:	468a      	mov	sl, r1
 8001616:	4240      	negs	r0, r0
 8001618:	001c      	movs	r4, r3
 800161a:	4482      	add	sl, r0
 800161c:	e6bc      	b.n	8001398 <__aeabi_dadd+0x3f0>
 800161e:	4653      	mov	r3, sl
 8001620:	4323      	orrs	r3, r4
 8001622:	d100      	bne.n	8001626 <__aeabi_dadd+0x67e>
 8001624:	e6a9      	b.n	800137a <__aeabi_dadd+0x3d2>
 8001626:	e5e4      	b.n	80011f2 <__aeabi_dadd+0x24a>
 8001628:	074a      	lsls	r2, r1, #29
 800162a:	4313      	orrs	r3, r2
 800162c:	2280      	movs	r2, #128	; 0x80
 800162e:	08c9      	lsrs	r1, r1, #3
 8001630:	0312      	lsls	r2, r2, #12
 8001632:	4211      	tst	r1, r2
 8001634:	d009      	beq.n	800164a <__aeabi_dadd+0x6a2>
 8001636:	4648      	mov	r0, r9
 8001638:	08c4      	lsrs	r4, r0, #3
 800163a:	4214      	tst	r4, r2
 800163c:	d105      	bne.n	800164a <__aeabi_dadd+0x6a2>
 800163e:	4643      	mov	r3, r8
 8001640:	4665      	mov	r5, ip
 8001642:	0021      	movs	r1, r4
 8001644:	08db      	lsrs	r3, r3, #3
 8001646:	0742      	lsls	r2, r0, #29
 8001648:	4313      	orrs	r3, r2
 800164a:	0f5a      	lsrs	r2, r3, #29
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	08db      	lsrs	r3, r3, #3
 8001650:	0752      	lsls	r2, r2, #29
 8001652:	4313      	orrs	r3, r2
 8001654:	e5fa      	b.n	800124c <__aeabi_dadd+0x2a4>
 8001656:	2300      	movs	r3, #0
 8001658:	4a01      	ldr	r2, [pc, #4]	; (8001660 <__aeabi_dadd+0x6b8>)
 800165a:	001c      	movs	r4, r3
 800165c:	e540      	b.n	80010e0 <__aeabi_dadd+0x138>
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	000007ff 	.word	0x000007ff
 8001664:	ff7fffff 	.word	0xff7fffff

08001668 <__aeabi_ddiv>:
 8001668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166a:	4657      	mov	r7, sl
 800166c:	464e      	mov	r6, r9
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	b5e0      	push	{r5, r6, r7, lr}
 8001674:	030c      	lsls	r4, r1, #12
 8001676:	001f      	movs	r7, r3
 8001678:	004b      	lsls	r3, r1, #1
 800167a:	4681      	mov	r9, r0
 800167c:	4692      	mov	sl, r2
 800167e:	0005      	movs	r5, r0
 8001680:	b085      	sub	sp, #20
 8001682:	0b24      	lsrs	r4, r4, #12
 8001684:	0d5b      	lsrs	r3, r3, #21
 8001686:	0fce      	lsrs	r6, r1, #31
 8001688:	2b00      	cmp	r3, #0
 800168a:	d100      	bne.n	800168e <__aeabi_ddiv+0x26>
 800168c:	e152      	b.n	8001934 <__aeabi_ddiv+0x2cc>
 800168e:	4ad2      	ldr	r2, [pc, #840]	; (80019d8 <__aeabi_ddiv+0x370>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d100      	bne.n	8001696 <__aeabi_ddiv+0x2e>
 8001694:	e16e      	b.n	8001974 <__aeabi_ddiv+0x30c>
 8001696:	0f42      	lsrs	r2, r0, #29
 8001698:	00e4      	lsls	r4, r4, #3
 800169a:	4314      	orrs	r4, r2
 800169c:	2280      	movs	r2, #128	; 0x80
 800169e:	0412      	lsls	r2, r2, #16
 80016a0:	4322      	orrs	r2, r4
 80016a2:	4690      	mov	r8, r2
 80016a4:	4acd      	ldr	r2, [pc, #820]	; (80019dc <__aeabi_ddiv+0x374>)
 80016a6:	00c5      	lsls	r5, r0, #3
 80016a8:	4693      	mov	fp, r2
 80016aa:	449b      	add	fp, r3
 80016ac:	2300      	movs	r3, #0
 80016ae:	4699      	mov	r9, r3
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	033c      	lsls	r4, r7, #12
 80016b4:	007b      	lsls	r3, r7, #1
 80016b6:	4650      	mov	r0, sl
 80016b8:	0b24      	lsrs	r4, r4, #12
 80016ba:	0d5b      	lsrs	r3, r3, #21
 80016bc:	0fff      	lsrs	r7, r7, #31
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_ddiv+0x5c>
 80016c2:	e11a      	b.n	80018fa <__aeabi_ddiv+0x292>
 80016c4:	4ac4      	ldr	r2, [pc, #784]	; (80019d8 <__aeabi_ddiv+0x370>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d100      	bne.n	80016cc <__aeabi_ddiv+0x64>
 80016ca:	e15e      	b.n	800198a <__aeabi_ddiv+0x322>
 80016cc:	0f42      	lsrs	r2, r0, #29
 80016ce:	00e4      	lsls	r4, r4, #3
 80016d0:	4322      	orrs	r2, r4
 80016d2:	2480      	movs	r4, #128	; 0x80
 80016d4:	0424      	lsls	r4, r4, #16
 80016d6:	4314      	orrs	r4, r2
 80016d8:	4ac0      	ldr	r2, [pc, #768]	; (80019dc <__aeabi_ddiv+0x374>)
 80016da:	00c1      	lsls	r1, r0, #3
 80016dc:	4694      	mov	ip, r2
 80016de:	465a      	mov	r2, fp
 80016e0:	4463      	add	r3, ip
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	469b      	mov	fp, r3
 80016e6:	2000      	movs	r0, #0
 80016e8:	0033      	movs	r3, r6
 80016ea:	407b      	eors	r3, r7
 80016ec:	469a      	mov	sl, r3
 80016ee:	464b      	mov	r3, r9
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d827      	bhi.n	8001744 <__aeabi_ddiv+0xdc>
 80016f4:	4aba      	ldr	r2, [pc, #744]	; (80019e0 <__aeabi_ddiv+0x378>)
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	58d3      	ldr	r3, [r2, r3]
 80016fa:	469f      	mov	pc, r3
 80016fc:	46b2      	mov	sl, r6
 80016fe:	9b00      	ldr	r3, [sp, #0]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d016      	beq.n	8001732 <__aeabi_ddiv+0xca>
 8001704:	2b03      	cmp	r3, #3
 8001706:	d100      	bne.n	800170a <__aeabi_ddiv+0xa2>
 8001708:	e287      	b.n	8001c1a <__aeabi_ddiv+0x5b2>
 800170a:	2b01      	cmp	r3, #1
 800170c:	d000      	beq.n	8001710 <__aeabi_ddiv+0xa8>
 800170e:	e0d5      	b.n	80018bc <__aeabi_ddiv+0x254>
 8001710:	2300      	movs	r3, #0
 8001712:	2200      	movs	r2, #0
 8001714:	2500      	movs	r5, #0
 8001716:	051b      	lsls	r3, r3, #20
 8001718:	4313      	orrs	r3, r2
 800171a:	4652      	mov	r2, sl
 800171c:	07d2      	lsls	r2, r2, #31
 800171e:	4313      	orrs	r3, r2
 8001720:	0028      	movs	r0, r5
 8001722:	0019      	movs	r1, r3
 8001724:	b005      	add	sp, #20
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2200      	movs	r2, #0
 8001734:	2500      	movs	r5, #0
 8001736:	4ba8      	ldr	r3, [pc, #672]	; (80019d8 <__aeabi_ddiv+0x370>)
 8001738:	e7ed      	b.n	8001716 <__aeabi_ddiv+0xae>
 800173a:	46ba      	mov	sl, r7
 800173c:	46a0      	mov	r8, r4
 800173e:	000d      	movs	r5, r1
 8001740:	9000      	str	r0, [sp, #0]
 8001742:	e7dc      	b.n	80016fe <__aeabi_ddiv+0x96>
 8001744:	4544      	cmp	r4, r8
 8001746:	d200      	bcs.n	800174a <__aeabi_ddiv+0xe2>
 8001748:	e1c4      	b.n	8001ad4 <__aeabi_ddiv+0x46c>
 800174a:	d100      	bne.n	800174e <__aeabi_ddiv+0xe6>
 800174c:	e1bf      	b.n	8001ace <__aeabi_ddiv+0x466>
 800174e:	2301      	movs	r3, #1
 8001750:	425b      	negs	r3, r3
 8001752:	469c      	mov	ip, r3
 8001754:	002e      	movs	r6, r5
 8001756:	4640      	mov	r0, r8
 8001758:	2500      	movs	r5, #0
 800175a:	44e3      	add	fp, ip
 800175c:	0223      	lsls	r3, r4, #8
 800175e:	0e0c      	lsrs	r4, r1, #24
 8001760:	431c      	orrs	r4, r3
 8001762:	0c1b      	lsrs	r3, r3, #16
 8001764:	4699      	mov	r9, r3
 8001766:	0423      	lsls	r3, r4, #16
 8001768:	020a      	lsls	r2, r1, #8
 800176a:	0c1f      	lsrs	r7, r3, #16
 800176c:	4649      	mov	r1, r9
 800176e:	9200      	str	r2, [sp, #0]
 8001770:	9701      	str	r7, [sp, #4]
 8001772:	f7fe fd75 	bl	8000260 <__aeabi_uidivmod>
 8001776:	0002      	movs	r2, r0
 8001778:	437a      	muls	r2, r7
 800177a:	040b      	lsls	r3, r1, #16
 800177c:	0c31      	lsrs	r1, r6, #16
 800177e:	4680      	mov	r8, r0
 8001780:	4319      	orrs	r1, r3
 8001782:	428a      	cmp	r2, r1
 8001784:	d907      	bls.n	8001796 <__aeabi_ddiv+0x12e>
 8001786:	2301      	movs	r3, #1
 8001788:	425b      	negs	r3, r3
 800178a:	469c      	mov	ip, r3
 800178c:	1909      	adds	r1, r1, r4
 800178e:	44e0      	add	r8, ip
 8001790:	428c      	cmp	r4, r1
 8001792:	d800      	bhi.n	8001796 <__aeabi_ddiv+0x12e>
 8001794:	e201      	b.n	8001b9a <__aeabi_ddiv+0x532>
 8001796:	1a88      	subs	r0, r1, r2
 8001798:	4649      	mov	r1, r9
 800179a:	f7fe fd61 	bl	8000260 <__aeabi_uidivmod>
 800179e:	9a01      	ldr	r2, [sp, #4]
 80017a0:	0436      	lsls	r6, r6, #16
 80017a2:	4342      	muls	r2, r0
 80017a4:	0409      	lsls	r1, r1, #16
 80017a6:	0c36      	lsrs	r6, r6, #16
 80017a8:	0003      	movs	r3, r0
 80017aa:	430e      	orrs	r6, r1
 80017ac:	42b2      	cmp	r2, r6
 80017ae:	d904      	bls.n	80017ba <__aeabi_ddiv+0x152>
 80017b0:	1936      	adds	r6, r6, r4
 80017b2:	3b01      	subs	r3, #1
 80017b4:	42b4      	cmp	r4, r6
 80017b6:	d800      	bhi.n	80017ba <__aeabi_ddiv+0x152>
 80017b8:	e1e9      	b.n	8001b8e <__aeabi_ddiv+0x526>
 80017ba:	1ab0      	subs	r0, r6, r2
 80017bc:	4642      	mov	r2, r8
 80017be:	9e00      	ldr	r6, [sp, #0]
 80017c0:	0412      	lsls	r2, r2, #16
 80017c2:	431a      	orrs	r2, r3
 80017c4:	0c33      	lsrs	r3, r6, #16
 80017c6:	001f      	movs	r7, r3
 80017c8:	0c11      	lsrs	r1, r2, #16
 80017ca:	4690      	mov	r8, r2
 80017cc:	9302      	str	r3, [sp, #8]
 80017ce:	0413      	lsls	r3, r2, #16
 80017d0:	0432      	lsls	r2, r6, #16
 80017d2:	0c16      	lsrs	r6, r2, #16
 80017d4:	0032      	movs	r2, r6
 80017d6:	0c1b      	lsrs	r3, r3, #16
 80017d8:	435a      	muls	r2, r3
 80017da:	9603      	str	r6, [sp, #12]
 80017dc:	437b      	muls	r3, r7
 80017de:	434e      	muls	r6, r1
 80017e0:	4379      	muls	r1, r7
 80017e2:	0c17      	lsrs	r7, r2, #16
 80017e4:	46bc      	mov	ip, r7
 80017e6:	199b      	adds	r3, r3, r6
 80017e8:	4463      	add	r3, ip
 80017ea:	429e      	cmp	r6, r3
 80017ec:	d903      	bls.n	80017f6 <__aeabi_ddiv+0x18e>
 80017ee:	2680      	movs	r6, #128	; 0x80
 80017f0:	0276      	lsls	r6, r6, #9
 80017f2:	46b4      	mov	ip, r6
 80017f4:	4461      	add	r1, ip
 80017f6:	0c1e      	lsrs	r6, r3, #16
 80017f8:	1871      	adds	r1, r6, r1
 80017fa:	0416      	lsls	r6, r2, #16
 80017fc:	041b      	lsls	r3, r3, #16
 80017fe:	0c36      	lsrs	r6, r6, #16
 8001800:	199e      	adds	r6, r3, r6
 8001802:	4288      	cmp	r0, r1
 8001804:	d302      	bcc.n	800180c <__aeabi_ddiv+0x1a4>
 8001806:	d112      	bne.n	800182e <__aeabi_ddiv+0x1c6>
 8001808:	42b5      	cmp	r5, r6
 800180a:	d210      	bcs.n	800182e <__aeabi_ddiv+0x1c6>
 800180c:	4643      	mov	r3, r8
 800180e:	1e5a      	subs	r2, r3, #1
 8001810:	9b00      	ldr	r3, [sp, #0]
 8001812:	469c      	mov	ip, r3
 8001814:	4465      	add	r5, ip
 8001816:	001f      	movs	r7, r3
 8001818:	429d      	cmp	r5, r3
 800181a:	419b      	sbcs	r3, r3
 800181c:	425b      	negs	r3, r3
 800181e:	191b      	adds	r3, r3, r4
 8001820:	18c0      	adds	r0, r0, r3
 8001822:	4284      	cmp	r4, r0
 8001824:	d200      	bcs.n	8001828 <__aeabi_ddiv+0x1c0>
 8001826:	e19e      	b.n	8001b66 <__aeabi_ddiv+0x4fe>
 8001828:	d100      	bne.n	800182c <__aeabi_ddiv+0x1c4>
 800182a:	e199      	b.n	8001b60 <__aeabi_ddiv+0x4f8>
 800182c:	4690      	mov	r8, r2
 800182e:	1bae      	subs	r6, r5, r6
 8001830:	42b5      	cmp	r5, r6
 8001832:	41ad      	sbcs	r5, r5
 8001834:	1a40      	subs	r0, r0, r1
 8001836:	426d      	negs	r5, r5
 8001838:	1b40      	subs	r0, r0, r5
 800183a:	4284      	cmp	r4, r0
 800183c:	d100      	bne.n	8001840 <__aeabi_ddiv+0x1d8>
 800183e:	e1d2      	b.n	8001be6 <__aeabi_ddiv+0x57e>
 8001840:	4649      	mov	r1, r9
 8001842:	f7fe fd0d 	bl	8000260 <__aeabi_uidivmod>
 8001846:	9a01      	ldr	r2, [sp, #4]
 8001848:	040b      	lsls	r3, r1, #16
 800184a:	4342      	muls	r2, r0
 800184c:	0c31      	lsrs	r1, r6, #16
 800184e:	0005      	movs	r5, r0
 8001850:	4319      	orrs	r1, r3
 8001852:	428a      	cmp	r2, r1
 8001854:	d900      	bls.n	8001858 <__aeabi_ddiv+0x1f0>
 8001856:	e16c      	b.n	8001b32 <__aeabi_ddiv+0x4ca>
 8001858:	1a88      	subs	r0, r1, r2
 800185a:	4649      	mov	r1, r9
 800185c:	f7fe fd00 	bl	8000260 <__aeabi_uidivmod>
 8001860:	9a01      	ldr	r2, [sp, #4]
 8001862:	0436      	lsls	r6, r6, #16
 8001864:	4342      	muls	r2, r0
 8001866:	0409      	lsls	r1, r1, #16
 8001868:	0c36      	lsrs	r6, r6, #16
 800186a:	0003      	movs	r3, r0
 800186c:	430e      	orrs	r6, r1
 800186e:	42b2      	cmp	r2, r6
 8001870:	d900      	bls.n	8001874 <__aeabi_ddiv+0x20c>
 8001872:	e153      	b.n	8001b1c <__aeabi_ddiv+0x4b4>
 8001874:	9803      	ldr	r0, [sp, #12]
 8001876:	1ab6      	subs	r6, r6, r2
 8001878:	0002      	movs	r2, r0
 800187a:	042d      	lsls	r5, r5, #16
 800187c:	431d      	orrs	r5, r3
 800187e:	9f02      	ldr	r7, [sp, #8]
 8001880:	042b      	lsls	r3, r5, #16
 8001882:	0c1b      	lsrs	r3, r3, #16
 8001884:	435a      	muls	r2, r3
 8001886:	437b      	muls	r3, r7
 8001888:	469c      	mov	ip, r3
 800188a:	0c29      	lsrs	r1, r5, #16
 800188c:	4348      	muls	r0, r1
 800188e:	0c13      	lsrs	r3, r2, #16
 8001890:	4484      	add	ip, r0
 8001892:	4463      	add	r3, ip
 8001894:	4379      	muls	r1, r7
 8001896:	4298      	cmp	r0, r3
 8001898:	d903      	bls.n	80018a2 <__aeabi_ddiv+0x23a>
 800189a:	2080      	movs	r0, #128	; 0x80
 800189c:	0240      	lsls	r0, r0, #9
 800189e:	4684      	mov	ip, r0
 80018a0:	4461      	add	r1, ip
 80018a2:	0c18      	lsrs	r0, r3, #16
 80018a4:	0412      	lsls	r2, r2, #16
 80018a6:	041b      	lsls	r3, r3, #16
 80018a8:	0c12      	lsrs	r2, r2, #16
 80018aa:	1840      	adds	r0, r0, r1
 80018ac:	189b      	adds	r3, r3, r2
 80018ae:	4286      	cmp	r6, r0
 80018b0:	d200      	bcs.n	80018b4 <__aeabi_ddiv+0x24c>
 80018b2:	e100      	b.n	8001ab6 <__aeabi_ddiv+0x44e>
 80018b4:	d100      	bne.n	80018b8 <__aeabi_ddiv+0x250>
 80018b6:	e0fb      	b.n	8001ab0 <__aeabi_ddiv+0x448>
 80018b8:	2301      	movs	r3, #1
 80018ba:	431d      	orrs	r5, r3
 80018bc:	4b49      	ldr	r3, [pc, #292]	; (80019e4 <__aeabi_ddiv+0x37c>)
 80018be:	445b      	add	r3, fp
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	dc00      	bgt.n	80018c6 <__aeabi_ddiv+0x25e>
 80018c4:	e0aa      	b.n	8001a1c <__aeabi_ddiv+0x3b4>
 80018c6:	076a      	lsls	r2, r5, #29
 80018c8:	d000      	beq.n	80018cc <__aeabi_ddiv+0x264>
 80018ca:	e13d      	b.n	8001b48 <__aeabi_ddiv+0x4e0>
 80018cc:	08e9      	lsrs	r1, r5, #3
 80018ce:	4642      	mov	r2, r8
 80018d0:	01d2      	lsls	r2, r2, #7
 80018d2:	d506      	bpl.n	80018e2 <__aeabi_ddiv+0x27a>
 80018d4:	4642      	mov	r2, r8
 80018d6:	4b44      	ldr	r3, [pc, #272]	; (80019e8 <__aeabi_ddiv+0x380>)
 80018d8:	401a      	ands	r2, r3
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	4690      	mov	r8, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	445b      	add	r3, fp
 80018e2:	4a42      	ldr	r2, [pc, #264]	; (80019ec <__aeabi_ddiv+0x384>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	dd00      	ble.n	80018ea <__aeabi_ddiv+0x282>
 80018e8:	e723      	b.n	8001732 <__aeabi_ddiv+0xca>
 80018ea:	4642      	mov	r2, r8
 80018ec:	055b      	lsls	r3, r3, #21
 80018ee:	0755      	lsls	r5, r2, #29
 80018f0:	0252      	lsls	r2, r2, #9
 80018f2:	430d      	orrs	r5, r1
 80018f4:	0b12      	lsrs	r2, r2, #12
 80018f6:	0d5b      	lsrs	r3, r3, #21
 80018f8:	e70d      	b.n	8001716 <__aeabi_ddiv+0xae>
 80018fa:	4651      	mov	r1, sl
 80018fc:	4321      	orrs	r1, r4
 80018fe:	d100      	bne.n	8001902 <__aeabi_ddiv+0x29a>
 8001900:	e07c      	b.n	80019fc <__aeabi_ddiv+0x394>
 8001902:	2c00      	cmp	r4, #0
 8001904:	d100      	bne.n	8001908 <__aeabi_ddiv+0x2a0>
 8001906:	e0fb      	b.n	8001b00 <__aeabi_ddiv+0x498>
 8001908:	0020      	movs	r0, r4
 800190a:	f001 fa63 	bl	8002dd4 <__clzsi2>
 800190e:	0002      	movs	r2, r0
 8001910:	3a0b      	subs	r2, #11
 8001912:	231d      	movs	r3, #29
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	4652      	mov	r2, sl
 8001918:	0001      	movs	r1, r0
 800191a:	40da      	lsrs	r2, r3
 800191c:	4653      	mov	r3, sl
 800191e:	3908      	subs	r1, #8
 8001920:	408b      	lsls	r3, r1
 8001922:	408c      	lsls	r4, r1
 8001924:	0019      	movs	r1, r3
 8001926:	4314      	orrs	r4, r2
 8001928:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <__aeabi_ddiv+0x388>)
 800192a:	4458      	add	r0, fp
 800192c:	469b      	mov	fp, r3
 800192e:	4483      	add	fp, r0
 8001930:	2000      	movs	r0, #0
 8001932:	e6d9      	b.n	80016e8 <__aeabi_ddiv+0x80>
 8001934:	0003      	movs	r3, r0
 8001936:	4323      	orrs	r3, r4
 8001938:	4698      	mov	r8, r3
 800193a:	d044      	beq.n	80019c6 <__aeabi_ddiv+0x35e>
 800193c:	2c00      	cmp	r4, #0
 800193e:	d100      	bne.n	8001942 <__aeabi_ddiv+0x2da>
 8001940:	e0cf      	b.n	8001ae2 <__aeabi_ddiv+0x47a>
 8001942:	0020      	movs	r0, r4
 8001944:	f001 fa46 	bl	8002dd4 <__clzsi2>
 8001948:	0001      	movs	r1, r0
 800194a:	0002      	movs	r2, r0
 800194c:	390b      	subs	r1, #11
 800194e:	231d      	movs	r3, #29
 8001950:	1a5b      	subs	r3, r3, r1
 8001952:	4649      	mov	r1, r9
 8001954:	0010      	movs	r0, r2
 8001956:	40d9      	lsrs	r1, r3
 8001958:	3808      	subs	r0, #8
 800195a:	4084      	lsls	r4, r0
 800195c:	000b      	movs	r3, r1
 800195e:	464d      	mov	r5, r9
 8001960:	4323      	orrs	r3, r4
 8001962:	4698      	mov	r8, r3
 8001964:	4085      	lsls	r5, r0
 8001966:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <__aeabi_ddiv+0x38c>)
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	469b      	mov	fp, r3
 800196c:	2300      	movs	r3, #0
 800196e:	4699      	mov	r9, r3
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	e69e      	b.n	80016b2 <__aeabi_ddiv+0x4a>
 8001974:	0002      	movs	r2, r0
 8001976:	4322      	orrs	r2, r4
 8001978:	4690      	mov	r8, r2
 800197a:	d11d      	bne.n	80019b8 <__aeabi_ddiv+0x350>
 800197c:	2208      	movs	r2, #8
 800197e:	469b      	mov	fp, r3
 8001980:	2302      	movs	r3, #2
 8001982:	2500      	movs	r5, #0
 8001984:	4691      	mov	r9, r2
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	e693      	b.n	80016b2 <__aeabi_ddiv+0x4a>
 800198a:	4651      	mov	r1, sl
 800198c:	4321      	orrs	r1, r4
 800198e:	d109      	bne.n	80019a4 <__aeabi_ddiv+0x33c>
 8001990:	2302      	movs	r3, #2
 8001992:	464a      	mov	r2, r9
 8001994:	431a      	orrs	r2, r3
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <__aeabi_ddiv+0x390>)
 8001998:	4691      	mov	r9, r2
 800199a:	469c      	mov	ip, r3
 800199c:	2400      	movs	r4, #0
 800199e:	2002      	movs	r0, #2
 80019a0:	44e3      	add	fp, ip
 80019a2:	e6a1      	b.n	80016e8 <__aeabi_ddiv+0x80>
 80019a4:	2303      	movs	r3, #3
 80019a6:	464a      	mov	r2, r9
 80019a8:	431a      	orrs	r2, r3
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <__aeabi_ddiv+0x390>)
 80019ac:	4691      	mov	r9, r2
 80019ae:	469c      	mov	ip, r3
 80019b0:	4651      	mov	r1, sl
 80019b2:	2003      	movs	r0, #3
 80019b4:	44e3      	add	fp, ip
 80019b6:	e697      	b.n	80016e8 <__aeabi_ddiv+0x80>
 80019b8:	220c      	movs	r2, #12
 80019ba:	469b      	mov	fp, r3
 80019bc:	2303      	movs	r3, #3
 80019be:	46a0      	mov	r8, r4
 80019c0:	4691      	mov	r9, r2
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	e675      	b.n	80016b2 <__aeabi_ddiv+0x4a>
 80019c6:	2304      	movs	r3, #4
 80019c8:	4699      	mov	r9, r3
 80019ca:	2300      	movs	r3, #0
 80019cc:	469b      	mov	fp, r3
 80019ce:	3301      	adds	r3, #1
 80019d0:	2500      	movs	r5, #0
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	e66d      	b.n	80016b2 <__aeabi_ddiv+0x4a>
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	000007ff 	.word	0x000007ff
 80019dc:	fffffc01 	.word	0xfffffc01
 80019e0:	080135f8 	.word	0x080135f8
 80019e4:	000003ff 	.word	0x000003ff
 80019e8:	feffffff 	.word	0xfeffffff
 80019ec:	000007fe 	.word	0x000007fe
 80019f0:	000003f3 	.word	0x000003f3
 80019f4:	fffffc0d 	.word	0xfffffc0d
 80019f8:	fffff801 	.word	0xfffff801
 80019fc:	464a      	mov	r2, r9
 80019fe:	2301      	movs	r3, #1
 8001a00:	431a      	orrs	r2, r3
 8001a02:	4691      	mov	r9, r2
 8001a04:	2400      	movs	r4, #0
 8001a06:	2001      	movs	r0, #1
 8001a08:	e66e      	b.n	80016e8 <__aeabi_ddiv+0x80>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	469a      	mov	sl, r3
 8001a10:	2500      	movs	r5, #0
 8001a12:	4b88      	ldr	r3, [pc, #544]	; (8001c34 <__aeabi_ddiv+0x5cc>)
 8001a14:	0312      	lsls	r2, r2, #12
 8001a16:	e67e      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001a18:	2501      	movs	r5, #1
 8001a1a:	426d      	negs	r5, r5
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	1ad2      	subs	r2, r2, r3
 8001a20:	2a38      	cmp	r2, #56	; 0x38
 8001a22:	dd00      	ble.n	8001a26 <__aeabi_ddiv+0x3be>
 8001a24:	e674      	b.n	8001710 <__aeabi_ddiv+0xa8>
 8001a26:	2a1f      	cmp	r2, #31
 8001a28:	dc00      	bgt.n	8001a2c <__aeabi_ddiv+0x3c4>
 8001a2a:	e0bd      	b.n	8001ba8 <__aeabi_ddiv+0x540>
 8001a2c:	211f      	movs	r1, #31
 8001a2e:	4249      	negs	r1, r1
 8001a30:	1acb      	subs	r3, r1, r3
 8001a32:	4641      	mov	r1, r8
 8001a34:	40d9      	lsrs	r1, r3
 8001a36:	000b      	movs	r3, r1
 8001a38:	2a20      	cmp	r2, #32
 8001a3a:	d004      	beq.n	8001a46 <__aeabi_ddiv+0x3de>
 8001a3c:	4641      	mov	r1, r8
 8001a3e:	4a7e      	ldr	r2, [pc, #504]	; (8001c38 <__aeabi_ddiv+0x5d0>)
 8001a40:	445a      	add	r2, fp
 8001a42:	4091      	lsls	r1, r2
 8001a44:	430d      	orrs	r5, r1
 8001a46:	0029      	movs	r1, r5
 8001a48:	1e4a      	subs	r2, r1, #1
 8001a4a:	4191      	sbcs	r1, r2
 8001a4c:	4319      	orrs	r1, r3
 8001a4e:	2307      	movs	r3, #7
 8001a50:	001d      	movs	r5, r3
 8001a52:	2200      	movs	r2, #0
 8001a54:	400d      	ands	r5, r1
 8001a56:	420b      	tst	r3, r1
 8001a58:	d100      	bne.n	8001a5c <__aeabi_ddiv+0x3f4>
 8001a5a:	e0d0      	b.n	8001bfe <__aeabi_ddiv+0x596>
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	2300      	movs	r3, #0
 8001a60:	400a      	ands	r2, r1
 8001a62:	2a04      	cmp	r2, #4
 8001a64:	d100      	bne.n	8001a68 <__aeabi_ddiv+0x400>
 8001a66:	e0c7      	b.n	8001bf8 <__aeabi_ddiv+0x590>
 8001a68:	1d0a      	adds	r2, r1, #4
 8001a6a:	428a      	cmp	r2, r1
 8001a6c:	4189      	sbcs	r1, r1
 8001a6e:	4249      	negs	r1, r1
 8001a70:	185b      	adds	r3, r3, r1
 8001a72:	0011      	movs	r1, r2
 8001a74:	021a      	lsls	r2, r3, #8
 8001a76:	d400      	bmi.n	8001a7a <__aeabi_ddiv+0x412>
 8001a78:	e0be      	b.n	8001bf8 <__aeabi_ddiv+0x590>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2500      	movs	r5, #0
 8001a80:	e649      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001a82:	2280      	movs	r2, #128	; 0x80
 8001a84:	4643      	mov	r3, r8
 8001a86:	0312      	lsls	r2, r2, #12
 8001a88:	4213      	tst	r3, r2
 8001a8a:	d008      	beq.n	8001a9e <__aeabi_ddiv+0x436>
 8001a8c:	4214      	tst	r4, r2
 8001a8e:	d106      	bne.n	8001a9e <__aeabi_ddiv+0x436>
 8001a90:	4322      	orrs	r2, r4
 8001a92:	0312      	lsls	r2, r2, #12
 8001a94:	46ba      	mov	sl, r7
 8001a96:	000d      	movs	r5, r1
 8001a98:	4b66      	ldr	r3, [pc, #408]	; (8001c34 <__aeabi_ddiv+0x5cc>)
 8001a9a:	0b12      	lsrs	r2, r2, #12
 8001a9c:	e63b      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	4643      	mov	r3, r8
 8001aa2:	0312      	lsls	r2, r2, #12
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	0312      	lsls	r2, r2, #12
 8001aa8:	46b2      	mov	sl, r6
 8001aaa:	4b62      	ldr	r3, [pc, #392]	; (8001c34 <__aeabi_ddiv+0x5cc>)
 8001aac:	0b12      	lsrs	r2, r2, #12
 8001aae:	e632      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_ddiv+0x44e>
 8001ab4:	e702      	b.n	80018bc <__aeabi_ddiv+0x254>
 8001ab6:	19a6      	adds	r6, r4, r6
 8001ab8:	1e6a      	subs	r2, r5, #1
 8001aba:	42a6      	cmp	r6, r4
 8001abc:	d200      	bcs.n	8001ac0 <__aeabi_ddiv+0x458>
 8001abe:	e089      	b.n	8001bd4 <__aeabi_ddiv+0x56c>
 8001ac0:	4286      	cmp	r6, r0
 8001ac2:	d200      	bcs.n	8001ac6 <__aeabi_ddiv+0x45e>
 8001ac4:	e09f      	b.n	8001c06 <__aeabi_ddiv+0x59e>
 8001ac6:	d100      	bne.n	8001aca <__aeabi_ddiv+0x462>
 8001ac8:	e0af      	b.n	8001c2a <__aeabi_ddiv+0x5c2>
 8001aca:	0015      	movs	r5, r2
 8001acc:	e6f4      	b.n	80018b8 <__aeabi_ddiv+0x250>
 8001ace:	42a9      	cmp	r1, r5
 8001ad0:	d900      	bls.n	8001ad4 <__aeabi_ddiv+0x46c>
 8001ad2:	e63c      	b.n	800174e <__aeabi_ddiv+0xe6>
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	07de      	lsls	r6, r3, #31
 8001ad8:	0858      	lsrs	r0, r3, #1
 8001ada:	086b      	lsrs	r3, r5, #1
 8001adc:	431e      	orrs	r6, r3
 8001ade:	07ed      	lsls	r5, r5, #31
 8001ae0:	e63c      	b.n	800175c <__aeabi_ddiv+0xf4>
 8001ae2:	f001 f977 	bl	8002dd4 <__clzsi2>
 8001ae6:	0001      	movs	r1, r0
 8001ae8:	0002      	movs	r2, r0
 8001aea:	3115      	adds	r1, #21
 8001aec:	3220      	adds	r2, #32
 8001aee:	291c      	cmp	r1, #28
 8001af0:	dc00      	bgt.n	8001af4 <__aeabi_ddiv+0x48c>
 8001af2:	e72c      	b.n	800194e <__aeabi_ddiv+0x2e6>
 8001af4:	464b      	mov	r3, r9
 8001af6:	3808      	subs	r0, #8
 8001af8:	4083      	lsls	r3, r0
 8001afa:	2500      	movs	r5, #0
 8001afc:	4698      	mov	r8, r3
 8001afe:	e732      	b.n	8001966 <__aeabi_ddiv+0x2fe>
 8001b00:	f001 f968 	bl	8002dd4 <__clzsi2>
 8001b04:	0003      	movs	r3, r0
 8001b06:	001a      	movs	r2, r3
 8001b08:	3215      	adds	r2, #21
 8001b0a:	3020      	adds	r0, #32
 8001b0c:	2a1c      	cmp	r2, #28
 8001b0e:	dc00      	bgt.n	8001b12 <__aeabi_ddiv+0x4aa>
 8001b10:	e6ff      	b.n	8001912 <__aeabi_ddiv+0x2aa>
 8001b12:	4654      	mov	r4, sl
 8001b14:	3b08      	subs	r3, #8
 8001b16:	2100      	movs	r1, #0
 8001b18:	409c      	lsls	r4, r3
 8001b1a:	e705      	b.n	8001928 <__aeabi_ddiv+0x2c0>
 8001b1c:	1936      	adds	r6, r6, r4
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	42b4      	cmp	r4, r6
 8001b22:	d900      	bls.n	8001b26 <__aeabi_ddiv+0x4be>
 8001b24:	e6a6      	b.n	8001874 <__aeabi_ddiv+0x20c>
 8001b26:	42b2      	cmp	r2, r6
 8001b28:	d800      	bhi.n	8001b2c <__aeabi_ddiv+0x4c4>
 8001b2a:	e6a3      	b.n	8001874 <__aeabi_ddiv+0x20c>
 8001b2c:	1e83      	subs	r3, r0, #2
 8001b2e:	1936      	adds	r6, r6, r4
 8001b30:	e6a0      	b.n	8001874 <__aeabi_ddiv+0x20c>
 8001b32:	1909      	adds	r1, r1, r4
 8001b34:	3d01      	subs	r5, #1
 8001b36:	428c      	cmp	r4, r1
 8001b38:	d900      	bls.n	8001b3c <__aeabi_ddiv+0x4d4>
 8001b3a:	e68d      	b.n	8001858 <__aeabi_ddiv+0x1f0>
 8001b3c:	428a      	cmp	r2, r1
 8001b3e:	d800      	bhi.n	8001b42 <__aeabi_ddiv+0x4da>
 8001b40:	e68a      	b.n	8001858 <__aeabi_ddiv+0x1f0>
 8001b42:	1e85      	subs	r5, r0, #2
 8001b44:	1909      	adds	r1, r1, r4
 8001b46:	e687      	b.n	8001858 <__aeabi_ddiv+0x1f0>
 8001b48:	220f      	movs	r2, #15
 8001b4a:	402a      	ands	r2, r5
 8001b4c:	2a04      	cmp	r2, #4
 8001b4e:	d100      	bne.n	8001b52 <__aeabi_ddiv+0x4ea>
 8001b50:	e6bc      	b.n	80018cc <__aeabi_ddiv+0x264>
 8001b52:	1d29      	adds	r1, r5, #4
 8001b54:	42a9      	cmp	r1, r5
 8001b56:	41ad      	sbcs	r5, r5
 8001b58:	426d      	negs	r5, r5
 8001b5a:	08c9      	lsrs	r1, r1, #3
 8001b5c:	44a8      	add	r8, r5
 8001b5e:	e6b6      	b.n	80018ce <__aeabi_ddiv+0x266>
 8001b60:	42af      	cmp	r7, r5
 8001b62:	d900      	bls.n	8001b66 <__aeabi_ddiv+0x4fe>
 8001b64:	e662      	b.n	800182c <__aeabi_ddiv+0x1c4>
 8001b66:	4281      	cmp	r1, r0
 8001b68:	d804      	bhi.n	8001b74 <__aeabi_ddiv+0x50c>
 8001b6a:	d000      	beq.n	8001b6e <__aeabi_ddiv+0x506>
 8001b6c:	e65e      	b.n	800182c <__aeabi_ddiv+0x1c4>
 8001b6e:	42ae      	cmp	r6, r5
 8001b70:	d800      	bhi.n	8001b74 <__aeabi_ddiv+0x50c>
 8001b72:	e65b      	b.n	800182c <__aeabi_ddiv+0x1c4>
 8001b74:	2302      	movs	r3, #2
 8001b76:	425b      	negs	r3, r3
 8001b78:	469c      	mov	ip, r3
 8001b7a:	9b00      	ldr	r3, [sp, #0]
 8001b7c:	44e0      	add	r8, ip
 8001b7e:	469c      	mov	ip, r3
 8001b80:	4465      	add	r5, ip
 8001b82:	429d      	cmp	r5, r3
 8001b84:	419b      	sbcs	r3, r3
 8001b86:	425b      	negs	r3, r3
 8001b88:	191b      	adds	r3, r3, r4
 8001b8a:	18c0      	adds	r0, r0, r3
 8001b8c:	e64f      	b.n	800182e <__aeabi_ddiv+0x1c6>
 8001b8e:	42b2      	cmp	r2, r6
 8001b90:	d800      	bhi.n	8001b94 <__aeabi_ddiv+0x52c>
 8001b92:	e612      	b.n	80017ba <__aeabi_ddiv+0x152>
 8001b94:	1e83      	subs	r3, r0, #2
 8001b96:	1936      	adds	r6, r6, r4
 8001b98:	e60f      	b.n	80017ba <__aeabi_ddiv+0x152>
 8001b9a:	428a      	cmp	r2, r1
 8001b9c:	d800      	bhi.n	8001ba0 <__aeabi_ddiv+0x538>
 8001b9e:	e5fa      	b.n	8001796 <__aeabi_ddiv+0x12e>
 8001ba0:	1e83      	subs	r3, r0, #2
 8001ba2:	4698      	mov	r8, r3
 8001ba4:	1909      	adds	r1, r1, r4
 8001ba6:	e5f6      	b.n	8001796 <__aeabi_ddiv+0x12e>
 8001ba8:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <__aeabi_ddiv+0x5d4>)
 8001baa:	0028      	movs	r0, r5
 8001bac:	445b      	add	r3, fp
 8001bae:	4641      	mov	r1, r8
 8001bb0:	409d      	lsls	r5, r3
 8001bb2:	4099      	lsls	r1, r3
 8001bb4:	40d0      	lsrs	r0, r2
 8001bb6:	1e6b      	subs	r3, r5, #1
 8001bb8:	419d      	sbcs	r5, r3
 8001bba:	4643      	mov	r3, r8
 8001bbc:	4301      	orrs	r1, r0
 8001bbe:	4329      	orrs	r1, r5
 8001bc0:	40d3      	lsrs	r3, r2
 8001bc2:	074a      	lsls	r2, r1, #29
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_ddiv+0x560>
 8001bc6:	e755      	b.n	8001a74 <__aeabi_ddiv+0x40c>
 8001bc8:	220f      	movs	r2, #15
 8001bca:	400a      	ands	r2, r1
 8001bcc:	2a04      	cmp	r2, #4
 8001bce:	d000      	beq.n	8001bd2 <__aeabi_ddiv+0x56a>
 8001bd0:	e74a      	b.n	8001a68 <__aeabi_ddiv+0x400>
 8001bd2:	e74f      	b.n	8001a74 <__aeabi_ddiv+0x40c>
 8001bd4:	0015      	movs	r5, r2
 8001bd6:	4286      	cmp	r6, r0
 8001bd8:	d000      	beq.n	8001bdc <__aeabi_ddiv+0x574>
 8001bda:	e66d      	b.n	80018b8 <__aeabi_ddiv+0x250>
 8001bdc:	9a00      	ldr	r2, [sp, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d000      	beq.n	8001be4 <__aeabi_ddiv+0x57c>
 8001be2:	e669      	b.n	80018b8 <__aeabi_ddiv+0x250>
 8001be4:	e66a      	b.n	80018bc <__aeabi_ddiv+0x254>
 8001be6:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <__aeabi_ddiv+0x5d8>)
 8001be8:	445b      	add	r3, fp
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	dc00      	bgt.n	8001bf0 <__aeabi_ddiv+0x588>
 8001bee:	e713      	b.n	8001a18 <__aeabi_ddiv+0x3b0>
 8001bf0:	2501      	movs	r5, #1
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	44a8      	add	r8, r5
 8001bf6:	e66a      	b.n	80018ce <__aeabi_ddiv+0x266>
 8001bf8:	075d      	lsls	r5, r3, #29
 8001bfa:	025b      	lsls	r3, r3, #9
 8001bfc:	0b1a      	lsrs	r2, r3, #12
 8001bfe:	08c9      	lsrs	r1, r1, #3
 8001c00:	2300      	movs	r3, #0
 8001c02:	430d      	orrs	r5, r1
 8001c04:	e587      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001c06:	9900      	ldr	r1, [sp, #0]
 8001c08:	3d02      	subs	r5, #2
 8001c0a:	004a      	lsls	r2, r1, #1
 8001c0c:	428a      	cmp	r2, r1
 8001c0e:	41bf      	sbcs	r7, r7
 8001c10:	427f      	negs	r7, r7
 8001c12:	193f      	adds	r7, r7, r4
 8001c14:	19f6      	adds	r6, r6, r7
 8001c16:	9200      	str	r2, [sp, #0]
 8001c18:	e7dd      	b.n	8001bd6 <__aeabi_ddiv+0x56e>
 8001c1a:	2280      	movs	r2, #128	; 0x80
 8001c1c:	4643      	mov	r3, r8
 8001c1e:	0312      	lsls	r2, r2, #12
 8001c20:	431a      	orrs	r2, r3
 8001c22:	0312      	lsls	r2, r2, #12
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <__aeabi_ddiv+0x5cc>)
 8001c26:	0b12      	lsrs	r2, r2, #12
 8001c28:	e575      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001c2a:	9900      	ldr	r1, [sp, #0]
 8001c2c:	4299      	cmp	r1, r3
 8001c2e:	d3ea      	bcc.n	8001c06 <__aeabi_ddiv+0x59e>
 8001c30:	0015      	movs	r5, r2
 8001c32:	e7d3      	b.n	8001bdc <__aeabi_ddiv+0x574>
 8001c34:	000007ff 	.word	0x000007ff
 8001c38:	0000043e 	.word	0x0000043e
 8001c3c:	0000041e 	.word	0x0000041e
 8001c40:	000003ff 	.word	0x000003ff

08001c44 <__eqdf2>:
 8001c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c46:	464e      	mov	r6, r9
 8001c48:	4645      	mov	r5, r8
 8001c4a:	46de      	mov	lr, fp
 8001c4c:	4657      	mov	r7, sl
 8001c4e:	4690      	mov	r8, r2
 8001c50:	b5e0      	push	{r5, r6, r7, lr}
 8001c52:	0017      	movs	r7, r2
 8001c54:	031a      	lsls	r2, r3, #12
 8001c56:	0b12      	lsrs	r2, r2, #12
 8001c58:	0005      	movs	r5, r0
 8001c5a:	4684      	mov	ip, r0
 8001c5c:	4819      	ldr	r0, [pc, #100]	; (8001cc4 <__eqdf2+0x80>)
 8001c5e:	030e      	lsls	r6, r1, #12
 8001c60:	004c      	lsls	r4, r1, #1
 8001c62:	4691      	mov	r9, r2
 8001c64:	005a      	lsls	r2, r3, #1
 8001c66:	0fdb      	lsrs	r3, r3, #31
 8001c68:	469b      	mov	fp, r3
 8001c6a:	0b36      	lsrs	r6, r6, #12
 8001c6c:	0d64      	lsrs	r4, r4, #21
 8001c6e:	0fc9      	lsrs	r1, r1, #31
 8001c70:	0d52      	lsrs	r2, r2, #21
 8001c72:	4284      	cmp	r4, r0
 8001c74:	d019      	beq.n	8001caa <__eqdf2+0x66>
 8001c76:	4282      	cmp	r2, r0
 8001c78:	d010      	beq.n	8001c9c <__eqdf2+0x58>
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	4294      	cmp	r4, r2
 8001c7e:	d10e      	bne.n	8001c9e <__eqdf2+0x5a>
 8001c80:	454e      	cmp	r6, r9
 8001c82:	d10c      	bne.n	8001c9e <__eqdf2+0x5a>
 8001c84:	2001      	movs	r0, #1
 8001c86:	45c4      	cmp	ip, r8
 8001c88:	d109      	bne.n	8001c9e <__eqdf2+0x5a>
 8001c8a:	4559      	cmp	r1, fp
 8001c8c:	d017      	beq.n	8001cbe <__eqdf2+0x7a>
 8001c8e:	2c00      	cmp	r4, #0
 8001c90:	d105      	bne.n	8001c9e <__eqdf2+0x5a>
 8001c92:	0030      	movs	r0, r6
 8001c94:	4328      	orrs	r0, r5
 8001c96:	1e43      	subs	r3, r0, #1
 8001c98:	4198      	sbcs	r0, r3
 8001c9a:	e000      	b.n	8001c9e <__eqdf2+0x5a>
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001ca0:	46bb      	mov	fp, r7
 8001ca2:	46b2      	mov	sl, r6
 8001ca4:	46a9      	mov	r9, r5
 8001ca6:	46a0      	mov	r8, r4
 8001ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001caa:	0033      	movs	r3, r6
 8001cac:	2001      	movs	r0, #1
 8001cae:	432b      	orrs	r3, r5
 8001cb0:	d1f5      	bne.n	8001c9e <__eqdf2+0x5a>
 8001cb2:	42a2      	cmp	r2, r4
 8001cb4:	d1f3      	bne.n	8001c9e <__eqdf2+0x5a>
 8001cb6:	464b      	mov	r3, r9
 8001cb8:	433b      	orrs	r3, r7
 8001cba:	d1f0      	bne.n	8001c9e <__eqdf2+0x5a>
 8001cbc:	e7e2      	b.n	8001c84 <__eqdf2+0x40>
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	e7ed      	b.n	8001c9e <__eqdf2+0x5a>
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	000007ff 	.word	0x000007ff

08001cc8 <__gedf2>:
 8001cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cca:	4647      	mov	r7, r8
 8001ccc:	46ce      	mov	lr, r9
 8001cce:	0004      	movs	r4, r0
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	0016      	movs	r6, r2
 8001cd4:	031b      	lsls	r3, r3, #12
 8001cd6:	0b1b      	lsrs	r3, r3, #12
 8001cd8:	4d2d      	ldr	r5, [pc, #180]	; (8001d90 <__gedf2+0xc8>)
 8001cda:	004a      	lsls	r2, r1, #1
 8001cdc:	4699      	mov	r9, r3
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	0043      	lsls	r3, r0, #1
 8001ce2:	030f      	lsls	r7, r1, #12
 8001ce4:	46a4      	mov	ip, r4
 8001ce6:	46b0      	mov	r8, r6
 8001ce8:	0b3f      	lsrs	r7, r7, #12
 8001cea:	0d52      	lsrs	r2, r2, #21
 8001cec:	0fc9      	lsrs	r1, r1, #31
 8001cee:	0d5b      	lsrs	r3, r3, #21
 8001cf0:	0fc0      	lsrs	r0, r0, #31
 8001cf2:	42aa      	cmp	r2, r5
 8001cf4:	d021      	beq.n	8001d3a <__gedf2+0x72>
 8001cf6:	42ab      	cmp	r3, r5
 8001cf8:	d013      	beq.n	8001d22 <__gedf2+0x5a>
 8001cfa:	2a00      	cmp	r2, #0
 8001cfc:	d122      	bne.n	8001d44 <__gedf2+0x7c>
 8001cfe:	433c      	orrs	r4, r7
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <__gedf2+0x42>
 8001d04:	464d      	mov	r5, r9
 8001d06:	432e      	orrs	r6, r5
 8001d08:	d022      	beq.n	8001d50 <__gedf2+0x88>
 8001d0a:	2c00      	cmp	r4, #0
 8001d0c:	d010      	beq.n	8001d30 <__gedf2+0x68>
 8001d0e:	4281      	cmp	r1, r0
 8001d10:	d022      	beq.n	8001d58 <__gedf2+0x90>
 8001d12:	2002      	movs	r0, #2
 8001d14:	3901      	subs	r1, #1
 8001d16:	4008      	ands	r0, r1
 8001d18:	3801      	subs	r0, #1
 8001d1a:	bcc0      	pop	{r6, r7}
 8001d1c:	46b9      	mov	r9, r7
 8001d1e:	46b0      	mov	r8, r6
 8001d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d22:	464d      	mov	r5, r9
 8001d24:	432e      	orrs	r6, r5
 8001d26:	d129      	bne.n	8001d7c <__gedf2+0xb4>
 8001d28:	2a00      	cmp	r2, #0
 8001d2a:	d1f0      	bne.n	8001d0e <__gedf2+0x46>
 8001d2c:	433c      	orrs	r4, r7
 8001d2e:	d1ee      	bne.n	8001d0e <__gedf2+0x46>
 8001d30:	2800      	cmp	r0, #0
 8001d32:	d1f2      	bne.n	8001d1a <__gedf2+0x52>
 8001d34:	2001      	movs	r0, #1
 8001d36:	4240      	negs	r0, r0
 8001d38:	e7ef      	b.n	8001d1a <__gedf2+0x52>
 8001d3a:	003d      	movs	r5, r7
 8001d3c:	4325      	orrs	r5, r4
 8001d3e:	d11d      	bne.n	8001d7c <__gedf2+0xb4>
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d0ee      	beq.n	8001d22 <__gedf2+0x5a>
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e2      	bne.n	8001d0e <__gedf2+0x46>
 8001d48:	464c      	mov	r4, r9
 8001d4a:	4326      	orrs	r6, r4
 8001d4c:	d1df      	bne.n	8001d0e <__gedf2+0x46>
 8001d4e:	e7e0      	b.n	8001d12 <__gedf2+0x4a>
 8001d50:	2000      	movs	r0, #0
 8001d52:	2c00      	cmp	r4, #0
 8001d54:	d0e1      	beq.n	8001d1a <__gedf2+0x52>
 8001d56:	e7dc      	b.n	8001d12 <__gedf2+0x4a>
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	dc0a      	bgt.n	8001d72 <__gedf2+0xaa>
 8001d5c:	dbe8      	blt.n	8001d30 <__gedf2+0x68>
 8001d5e:	454f      	cmp	r7, r9
 8001d60:	d8d7      	bhi.n	8001d12 <__gedf2+0x4a>
 8001d62:	d00e      	beq.n	8001d82 <__gedf2+0xba>
 8001d64:	2000      	movs	r0, #0
 8001d66:	454f      	cmp	r7, r9
 8001d68:	d2d7      	bcs.n	8001d1a <__gedf2+0x52>
 8001d6a:	2900      	cmp	r1, #0
 8001d6c:	d0e2      	beq.n	8001d34 <__gedf2+0x6c>
 8001d6e:	0008      	movs	r0, r1
 8001d70:	e7d3      	b.n	8001d1a <__gedf2+0x52>
 8001d72:	4243      	negs	r3, r0
 8001d74:	4158      	adcs	r0, r3
 8001d76:	0040      	lsls	r0, r0, #1
 8001d78:	3801      	subs	r0, #1
 8001d7a:	e7ce      	b.n	8001d1a <__gedf2+0x52>
 8001d7c:	2002      	movs	r0, #2
 8001d7e:	4240      	negs	r0, r0
 8001d80:	e7cb      	b.n	8001d1a <__gedf2+0x52>
 8001d82:	45c4      	cmp	ip, r8
 8001d84:	d8c5      	bhi.n	8001d12 <__gedf2+0x4a>
 8001d86:	2000      	movs	r0, #0
 8001d88:	45c4      	cmp	ip, r8
 8001d8a:	d2c6      	bcs.n	8001d1a <__gedf2+0x52>
 8001d8c:	e7ed      	b.n	8001d6a <__gedf2+0xa2>
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	000007ff 	.word	0x000007ff

08001d94 <__ledf2>:
 8001d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d96:	4647      	mov	r7, r8
 8001d98:	46ce      	mov	lr, r9
 8001d9a:	0004      	movs	r4, r0
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	0016      	movs	r6, r2
 8001da0:	031b      	lsls	r3, r3, #12
 8001da2:	0b1b      	lsrs	r3, r3, #12
 8001da4:	4d2c      	ldr	r5, [pc, #176]	; (8001e58 <__ledf2+0xc4>)
 8001da6:	004a      	lsls	r2, r1, #1
 8001da8:	4699      	mov	r9, r3
 8001daa:	b580      	push	{r7, lr}
 8001dac:	0043      	lsls	r3, r0, #1
 8001dae:	030f      	lsls	r7, r1, #12
 8001db0:	46a4      	mov	ip, r4
 8001db2:	46b0      	mov	r8, r6
 8001db4:	0b3f      	lsrs	r7, r7, #12
 8001db6:	0d52      	lsrs	r2, r2, #21
 8001db8:	0fc9      	lsrs	r1, r1, #31
 8001dba:	0d5b      	lsrs	r3, r3, #21
 8001dbc:	0fc0      	lsrs	r0, r0, #31
 8001dbe:	42aa      	cmp	r2, r5
 8001dc0:	d00d      	beq.n	8001dde <__ledf2+0x4a>
 8001dc2:	42ab      	cmp	r3, r5
 8001dc4:	d010      	beq.n	8001de8 <__ledf2+0x54>
 8001dc6:	2a00      	cmp	r2, #0
 8001dc8:	d127      	bne.n	8001e1a <__ledf2+0x86>
 8001dca:	433c      	orrs	r4, r7
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d111      	bne.n	8001df4 <__ledf2+0x60>
 8001dd0:	464d      	mov	r5, r9
 8001dd2:	432e      	orrs	r6, r5
 8001dd4:	d10e      	bne.n	8001df4 <__ledf2+0x60>
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	2c00      	cmp	r4, #0
 8001dda:	d015      	beq.n	8001e08 <__ledf2+0x74>
 8001ddc:	e00e      	b.n	8001dfc <__ledf2+0x68>
 8001dde:	003d      	movs	r5, r7
 8001de0:	4325      	orrs	r5, r4
 8001de2:	d110      	bne.n	8001e06 <__ledf2+0x72>
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d118      	bne.n	8001e1a <__ledf2+0x86>
 8001de8:	464d      	mov	r5, r9
 8001dea:	432e      	orrs	r6, r5
 8001dec:	d10b      	bne.n	8001e06 <__ledf2+0x72>
 8001dee:	2a00      	cmp	r2, #0
 8001df0:	d102      	bne.n	8001df8 <__ledf2+0x64>
 8001df2:	433c      	orrs	r4, r7
 8001df4:	2c00      	cmp	r4, #0
 8001df6:	d00b      	beq.n	8001e10 <__ledf2+0x7c>
 8001df8:	4281      	cmp	r1, r0
 8001dfa:	d014      	beq.n	8001e26 <__ledf2+0x92>
 8001dfc:	2002      	movs	r0, #2
 8001dfe:	3901      	subs	r1, #1
 8001e00:	4008      	ands	r0, r1
 8001e02:	3801      	subs	r0, #1
 8001e04:	e000      	b.n	8001e08 <__ledf2+0x74>
 8001e06:	2002      	movs	r0, #2
 8001e08:	bcc0      	pop	{r6, r7}
 8001e0a:	46b9      	mov	r9, r7
 8001e0c:	46b0      	mov	r8, r6
 8001e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e10:	2800      	cmp	r0, #0
 8001e12:	d1f9      	bne.n	8001e08 <__ledf2+0x74>
 8001e14:	2001      	movs	r0, #1
 8001e16:	4240      	negs	r0, r0
 8001e18:	e7f6      	b.n	8001e08 <__ledf2+0x74>
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1ec      	bne.n	8001df8 <__ledf2+0x64>
 8001e1e:	464c      	mov	r4, r9
 8001e20:	4326      	orrs	r6, r4
 8001e22:	d1e9      	bne.n	8001df8 <__ledf2+0x64>
 8001e24:	e7ea      	b.n	8001dfc <__ledf2+0x68>
 8001e26:	429a      	cmp	r2, r3
 8001e28:	dd04      	ble.n	8001e34 <__ledf2+0xa0>
 8001e2a:	4243      	negs	r3, r0
 8001e2c:	4158      	adcs	r0, r3
 8001e2e:	0040      	lsls	r0, r0, #1
 8001e30:	3801      	subs	r0, #1
 8001e32:	e7e9      	b.n	8001e08 <__ledf2+0x74>
 8001e34:	429a      	cmp	r2, r3
 8001e36:	dbeb      	blt.n	8001e10 <__ledf2+0x7c>
 8001e38:	454f      	cmp	r7, r9
 8001e3a:	d8df      	bhi.n	8001dfc <__ledf2+0x68>
 8001e3c:	d006      	beq.n	8001e4c <__ledf2+0xb8>
 8001e3e:	2000      	movs	r0, #0
 8001e40:	454f      	cmp	r7, r9
 8001e42:	d2e1      	bcs.n	8001e08 <__ledf2+0x74>
 8001e44:	2900      	cmp	r1, #0
 8001e46:	d0e5      	beq.n	8001e14 <__ledf2+0x80>
 8001e48:	0008      	movs	r0, r1
 8001e4a:	e7dd      	b.n	8001e08 <__ledf2+0x74>
 8001e4c:	45c4      	cmp	ip, r8
 8001e4e:	d8d5      	bhi.n	8001dfc <__ledf2+0x68>
 8001e50:	2000      	movs	r0, #0
 8001e52:	45c4      	cmp	ip, r8
 8001e54:	d2d8      	bcs.n	8001e08 <__ledf2+0x74>
 8001e56:	e7f5      	b.n	8001e44 <__ledf2+0xb0>
 8001e58:	000007ff 	.word	0x000007ff

08001e5c <__aeabi_dmul>:
 8001e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5e:	4645      	mov	r5, r8
 8001e60:	46de      	mov	lr, fp
 8001e62:	4657      	mov	r7, sl
 8001e64:	464e      	mov	r6, r9
 8001e66:	b5e0      	push	{r5, r6, r7, lr}
 8001e68:	001f      	movs	r7, r3
 8001e6a:	030b      	lsls	r3, r1, #12
 8001e6c:	0b1b      	lsrs	r3, r3, #12
 8001e6e:	469b      	mov	fp, r3
 8001e70:	004d      	lsls	r5, r1, #1
 8001e72:	0fcb      	lsrs	r3, r1, #31
 8001e74:	0004      	movs	r4, r0
 8001e76:	4691      	mov	r9, r2
 8001e78:	4698      	mov	r8, r3
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	0d6d      	lsrs	r5, r5, #21
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_dmul+0x26>
 8001e80:	e1cd      	b.n	800221e <__aeabi_dmul+0x3c2>
 8001e82:	4bce      	ldr	r3, [pc, #824]	; (80021bc <__aeabi_dmul+0x360>)
 8001e84:	429d      	cmp	r5, r3
 8001e86:	d100      	bne.n	8001e8a <__aeabi_dmul+0x2e>
 8001e88:	e1e9      	b.n	800225e <__aeabi_dmul+0x402>
 8001e8a:	465a      	mov	r2, fp
 8001e8c:	0f43      	lsrs	r3, r0, #29
 8001e8e:	00d2      	lsls	r2, r2, #3
 8001e90:	4313      	orrs	r3, r2
 8001e92:	2280      	movs	r2, #128	; 0x80
 8001e94:	0412      	lsls	r2, r2, #16
 8001e96:	431a      	orrs	r2, r3
 8001e98:	00c3      	lsls	r3, r0, #3
 8001e9a:	469a      	mov	sl, r3
 8001e9c:	4bc8      	ldr	r3, [pc, #800]	; (80021c0 <__aeabi_dmul+0x364>)
 8001e9e:	4693      	mov	fp, r2
 8001ea0:	469c      	mov	ip, r3
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	2600      	movs	r6, #0
 8001ea6:	4465      	add	r5, ip
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	033c      	lsls	r4, r7, #12
 8001eac:	007b      	lsls	r3, r7, #1
 8001eae:	4648      	mov	r0, r9
 8001eb0:	0b24      	lsrs	r4, r4, #12
 8001eb2:	0d5b      	lsrs	r3, r3, #21
 8001eb4:	0fff      	lsrs	r7, r7, #31
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d100      	bne.n	8001ebc <__aeabi_dmul+0x60>
 8001eba:	e189      	b.n	80021d0 <__aeabi_dmul+0x374>
 8001ebc:	4abf      	ldr	r2, [pc, #764]	; (80021bc <__aeabi_dmul+0x360>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d019      	beq.n	8001ef6 <__aeabi_dmul+0x9a>
 8001ec2:	0f42      	lsrs	r2, r0, #29
 8001ec4:	00e4      	lsls	r4, r4, #3
 8001ec6:	4322      	orrs	r2, r4
 8001ec8:	2480      	movs	r4, #128	; 0x80
 8001eca:	0424      	lsls	r4, r4, #16
 8001ecc:	4314      	orrs	r4, r2
 8001ece:	4abc      	ldr	r2, [pc, #752]	; (80021c0 <__aeabi_dmul+0x364>)
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4694      	mov	ip, r2
 8001ed4:	4642      	mov	r2, r8
 8001ed6:	4463      	add	r3, ip
 8001ed8:	195b      	adds	r3, r3, r5
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	9b01      	ldr	r3, [sp, #4]
 8001ede:	407a      	eors	r2, r7
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	00c0      	lsls	r0, r0, #3
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	9302      	str	r3, [sp, #8]
 8001ee8:	2e0a      	cmp	r6, #10
 8001eea:	dd1c      	ble.n	8001f26 <__aeabi_dmul+0xca>
 8001eec:	003a      	movs	r2, r7
 8001eee:	2e0b      	cmp	r6, #11
 8001ef0:	d05e      	beq.n	8001fb0 <__aeabi_dmul+0x154>
 8001ef2:	4647      	mov	r7, r8
 8001ef4:	e056      	b.n	8001fa4 <__aeabi_dmul+0x148>
 8001ef6:	4649      	mov	r1, r9
 8001ef8:	4bb0      	ldr	r3, [pc, #704]	; (80021bc <__aeabi_dmul+0x360>)
 8001efa:	4321      	orrs	r1, r4
 8001efc:	18eb      	adds	r3, r5, r3
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	2900      	cmp	r1, #0
 8001f02:	d12a      	bne.n	8001f5a <__aeabi_dmul+0xfe>
 8001f04:	2080      	movs	r0, #128	; 0x80
 8001f06:	2202      	movs	r2, #2
 8001f08:	0100      	lsls	r0, r0, #4
 8001f0a:	002b      	movs	r3, r5
 8001f0c:	4684      	mov	ip, r0
 8001f0e:	4316      	orrs	r6, r2
 8001f10:	4642      	mov	r2, r8
 8001f12:	4463      	add	r3, ip
 8001f14:	407a      	eors	r2, r7
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	9302      	str	r3, [sp, #8]
 8001f1a:	2e0a      	cmp	r6, #10
 8001f1c:	dd00      	ble.n	8001f20 <__aeabi_dmul+0xc4>
 8001f1e:	e231      	b.n	8002384 <__aeabi_dmul+0x528>
 8001f20:	2000      	movs	r0, #0
 8001f22:	2400      	movs	r4, #0
 8001f24:	2102      	movs	r1, #2
 8001f26:	2e02      	cmp	r6, #2
 8001f28:	dc26      	bgt.n	8001f78 <__aeabi_dmul+0x11c>
 8001f2a:	3e01      	subs	r6, #1
 8001f2c:	2e01      	cmp	r6, #1
 8001f2e:	d852      	bhi.n	8001fd6 <__aeabi_dmul+0x17a>
 8001f30:	2902      	cmp	r1, #2
 8001f32:	d04c      	beq.n	8001fce <__aeabi_dmul+0x172>
 8001f34:	2901      	cmp	r1, #1
 8001f36:	d000      	beq.n	8001f3a <__aeabi_dmul+0xde>
 8001f38:	e118      	b.n	800216c <__aeabi_dmul+0x310>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2400      	movs	r4, #0
 8001f3e:	2500      	movs	r5, #0
 8001f40:	051b      	lsls	r3, r3, #20
 8001f42:	4323      	orrs	r3, r4
 8001f44:	07d2      	lsls	r2, r2, #31
 8001f46:	4313      	orrs	r3, r2
 8001f48:	0028      	movs	r0, r5
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	b007      	add	sp, #28
 8001f4e:	bcf0      	pop	{r4, r5, r6, r7}
 8001f50:	46bb      	mov	fp, r7
 8001f52:	46b2      	mov	sl, r6
 8001f54:	46a9      	mov	r9, r5
 8001f56:	46a0      	mov	r8, r4
 8001f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	0109      	lsls	r1, r1, #4
 8001f60:	002b      	movs	r3, r5
 8001f62:	468c      	mov	ip, r1
 8001f64:	4316      	orrs	r6, r2
 8001f66:	4642      	mov	r2, r8
 8001f68:	4463      	add	r3, ip
 8001f6a:	407a      	eors	r2, r7
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	9302      	str	r3, [sp, #8]
 8001f70:	2e0a      	cmp	r6, #10
 8001f72:	dd00      	ble.n	8001f76 <__aeabi_dmul+0x11a>
 8001f74:	e228      	b.n	80023c8 <__aeabi_dmul+0x56c>
 8001f76:	2103      	movs	r1, #3
 8001f78:	2501      	movs	r5, #1
 8001f7a:	40b5      	lsls	r5, r6
 8001f7c:	46ac      	mov	ip, r5
 8001f7e:	26a6      	movs	r6, #166	; 0xa6
 8001f80:	4663      	mov	r3, ip
 8001f82:	00f6      	lsls	r6, r6, #3
 8001f84:	4035      	ands	r5, r6
 8001f86:	4233      	tst	r3, r6
 8001f88:	d10b      	bne.n	8001fa2 <__aeabi_dmul+0x146>
 8001f8a:	2690      	movs	r6, #144	; 0x90
 8001f8c:	00b6      	lsls	r6, r6, #2
 8001f8e:	4233      	tst	r3, r6
 8001f90:	d118      	bne.n	8001fc4 <__aeabi_dmul+0x168>
 8001f92:	3eb9      	subs	r6, #185	; 0xb9
 8001f94:	3eff      	subs	r6, #255	; 0xff
 8001f96:	421e      	tst	r6, r3
 8001f98:	d01d      	beq.n	8001fd6 <__aeabi_dmul+0x17a>
 8001f9a:	46a3      	mov	fp, r4
 8001f9c:	4682      	mov	sl, r0
 8001f9e:	9100      	str	r1, [sp, #0]
 8001fa0:	e000      	b.n	8001fa4 <__aeabi_dmul+0x148>
 8001fa2:	0017      	movs	r7, r2
 8001fa4:	9900      	ldr	r1, [sp, #0]
 8001fa6:	003a      	movs	r2, r7
 8001fa8:	2902      	cmp	r1, #2
 8001faa:	d010      	beq.n	8001fce <__aeabi_dmul+0x172>
 8001fac:	465c      	mov	r4, fp
 8001fae:	4650      	mov	r0, sl
 8001fb0:	2903      	cmp	r1, #3
 8001fb2:	d1bf      	bne.n	8001f34 <__aeabi_dmul+0xd8>
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	031b      	lsls	r3, r3, #12
 8001fb8:	431c      	orrs	r4, r3
 8001fba:	0324      	lsls	r4, r4, #12
 8001fbc:	0005      	movs	r5, r0
 8001fbe:	4b7f      	ldr	r3, [pc, #508]	; (80021bc <__aeabi_dmul+0x360>)
 8001fc0:	0b24      	lsrs	r4, r4, #12
 8001fc2:	e7bd      	b.n	8001f40 <__aeabi_dmul+0xe4>
 8001fc4:	2480      	movs	r4, #128	; 0x80
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	4b7c      	ldr	r3, [pc, #496]	; (80021bc <__aeabi_dmul+0x360>)
 8001fca:	0324      	lsls	r4, r4, #12
 8001fcc:	e7b8      	b.n	8001f40 <__aeabi_dmul+0xe4>
 8001fce:	2400      	movs	r4, #0
 8001fd0:	2500      	movs	r5, #0
 8001fd2:	4b7a      	ldr	r3, [pc, #488]	; (80021bc <__aeabi_dmul+0x360>)
 8001fd4:	e7b4      	b.n	8001f40 <__aeabi_dmul+0xe4>
 8001fd6:	4653      	mov	r3, sl
 8001fd8:	041e      	lsls	r6, r3, #16
 8001fda:	0c36      	lsrs	r6, r6, #16
 8001fdc:	0c1f      	lsrs	r7, r3, #16
 8001fde:	0033      	movs	r3, r6
 8001fe0:	0c01      	lsrs	r1, r0, #16
 8001fe2:	0400      	lsls	r0, r0, #16
 8001fe4:	0c00      	lsrs	r0, r0, #16
 8001fe6:	4343      	muls	r3, r0
 8001fe8:	4698      	mov	r8, r3
 8001fea:	0003      	movs	r3, r0
 8001fec:	437b      	muls	r3, r7
 8001fee:	4699      	mov	r9, r3
 8001ff0:	0033      	movs	r3, r6
 8001ff2:	434b      	muls	r3, r1
 8001ff4:	469c      	mov	ip, r3
 8001ff6:	4643      	mov	r3, r8
 8001ff8:	000d      	movs	r5, r1
 8001ffa:	0c1b      	lsrs	r3, r3, #16
 8001ffc:	469a      	mov	sl, r3
 8001ffe:	437d      	muls	r5, r7
 8002000:	44cc      	add	ip, r9
 8002002:	44d4      	add	ip, sl
 8002004:	9500      	str	r5, [sp, #0]
 8002006:	45e1      	cmp	r9, ip
 8002008:	d904      	bls.n	8002014 <__aeabi_dmul+0x1b8>
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	025b      	lsls	r3, r3, #9
 800200e:	4699      	mov	r9, r3
 8002010:	444d      	add	r5, r9
 8002012:	9500      	str	r5, [sp, #0]
 8002014:	4663      	mov	r3, ip
 8002016:	0c1b      	lsrs	r3, r3, #16
 8002018:	001d      	movs	r5, r3
 800201a:	4663      	mov	r3, ip
 800201c:	041b      	lsls	r3, r3, #16
 800201e:	469c      	mov	ip, r3
 8002020:	4643      	mov	r3, r8
 8002022:	041b      	lsls	r3, r3, #16
 8002024:	0c1b      	lsrs	r3, r3, #16
 8002026:	4698      	mov	r8, r3
 8002028:	4663      	mov	r3, ip
 800202a:	4443      	add	r3, r8
 800202c:	9303      	str	r3, [sp, #12]
 800202e:	0c23      	lsrs	r3, r4, #16
 8002030:	4698      	mov	r8, r3
 8002032:	0033      	movs	r3, r6
 8002034:	0424      	lsls	r4, r4, #16
 8002036:	0c24      	lsrs	r4, r4, #16
 8002038:	4363      	muls	r3, r4
 800203a:	469c      	mov	ip, r3
 800203c:	0023      	movs	r3, r4
 800203e:	437b      	muls	r3, r7
 8002040:	4699      	mov	r9, r3
 8002042:	4643      	mov	r3, r8
 8002044:	435e      	muls	r6, r3
 8002046:	435f      	muls	r7, r3
 8002048:	444e      	add	r6, r9
 800204a:	4663      	mov	r3, ip
 800204c:	46b2      	mov	sl, r6
 800204e:	0c1e      	lsrs	r6, r3, #16
 8002050:	4456      	add	r6, sl
 8002052:	45b1      	cmp	r9, r6
 8002054:	d903      	bls.n	800205e <__aeabi_dmul+0x202>
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	025b      	lsls	r3, r3, #9
 800205a:	4699      	mov	r9, r3
 800205c:	444f      	add	r7, r9
 800205e:	0c33      	lsrs	r3, r6, #16
 8002060:	4699      	mov	r9, r3
 8002062:	003b      	movs	r3, r7
 8002064:	444b      	add	r3, r9
 8002066:	9305      	str	r3, [sp, #20]
 8002068:	4663      	mov	r3, ip
 800206a:	46ac      	mov	ip, r5
 800206c:	041f      	lsls	r7, r3, #16
 800206e:	0c3f      	lsrs	r7, r7, #16
 8002070:	0436      	lsls	r6, r6, #16
 8002072:	19f6      	adds	r6, r6, r7
 8002074:	44b4      	add	ip, r6
 8002076:	4663      	mov	r3, ip
 8002078:	9304      	str	r3, [sp, #16]
 800207a:	465b      	mov	r3, fp
 800207c:	0c1b      	lsrs	r3, r3, #16
 800207e:	469c      	mov	ip, r3
 8002080:	465b      	mov	r3, fp
 8002082:	041f      	lsls	r7, r3, #16
 8002084:	0c3f      	lsrs	r7, r7, #16
 8002086:	003b      	movs	r3, r7
 8002088:	4343      	muls	r3, r0
 800208a:	4699      	mov	r9, r3
 800208c:	4663      	mov	r3, ip
 800208e:	4343      	muls	r3, r0
 8002090:	469a      	mov	sl, r3
 8002092:	464b      	mov	r3, r9
 8002094:	4660      	mov	r0, ip
 8002096:	0c1b      	lsrs	r3, r3, #16
 8002098:	469b      	mov	fp, r3
 800209a:	4348      	muls	r0, r1
 800209c:	4379      	muls	r1, r7
 800209e:	4451      	add	r1, sl
 80020a0:	4459      	add	r1, fp
 80020a2:	458a      	cmp	sl, r1
 80020a4:	d903      	bls.n	80020ae <__aeabi_dmul+0x252>
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	025b      	lsls	r3, r3, #9
 80020aa:	469a      	mov	sl, r3
 80020ac:	4450      	add	r0, sl
 80020ae:	0c0b      	lsrs	r3, r1, #16
 80020b0:	469a      	mov	sl, r3
 80020b2:	464b      	mov	r3, r9
 80020b4:	041b      	lsls	r3, r3, #16
 80020b6:	0c1b      	lsrs	r3, r3, #16
 80020b8:	4699      	mov	r9, r3
 80020ba:	003b      	movs	r3, r7
 80020bc:	4363      	muls	r3, r4
 80020be:	0409      	lsls	r1, r1, #16
 80020c0:	4645      	mov	r5, r8
 80020c2:	4449      	add	r1, r9
 80020c4:	4699      	mov	r9, r3
 80020c6:	4663      	mov	r3, ip
 80020c8:	435c      	muls	r4, r3
 80020ca:	436b      	muls	r3, r5
 80020cc:	469c      	mov	ip, r3
 80020ce:	464b      	mov	r3, r9
 80020d0:	0c1b      	lsrs	r3, r3, #16
 80020d2:	4698      	mov	r8, r3
 80020d4:	436f      	muls	r7, r5
 80020d6:	193f      	adds	r7, r7, r4
 80020d8:	4447      	add	r7, r8
 80020da:	4450      	add	r0, sl
 80020dc:	42bc      	cmp	r4, r7
 80020de:	d903      	bls.n	80020e8 <__aeabi_dmul+0x28c>
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	4698      	mov	r8, r3
 80020e6:	44c4      	add	ip, r8
 80020e8:	9b04      	ldr	r3, [sp, #16]
 80020ea:	9d00      	ldr	r5, [sp, #0]
 80020ec:	4698      	mov	r8, r3
 80020ee:	4445      	add	r5, r8
 80020f0:	42b5      	cmp	r5, r6
 80020f2:	41b6      	sbcs	r6, r6
 80020f4:	4273      	negs	r3, r6
 80020f6:	4698      	mov	r8, r3
 80020f8:	464b      	mov	r3, r9
 80020fa:	041e      	lsls	r6, r3, #16
 80020fc:	9b05      	ldr	r3, [sp, #20]
 80020fe:	043c      	lsls	r4, r7, #16
 8002100:	4699      	mov	r9, r3
 8002102:	0c36      	lsrs	r6, r6, #16
 8002104:	19a4      	adds	r4, r4, r6
 8002106:	444c      	add	r4, r9
 8002108:	46a1      	mov	r9, r4
 800210a:	4683      	mov	fp, r0
 800210c:	186e      	adds	r6, r5, r1
 800210e:	44c1      	add	r9, r8
 8002110:	428e      	cmp	r6, r1
 8002112:	4189      	sbcs	r1, r1
 8002114:	44cb      	add	fp, r9
 8002116:	465d      	mov	r5, fp
 8002118:	4249      	negs	r1, r1
 800211a:	186d      	adds	r5, r5, r1
 800211c:	429c      	cmp	r4, r3
 800211e:	41a4      	sbcs	r4, r4
 8002120:	45c1      	cmp	r9, r8
 8002122:	419b      	sbcs	r3, r3
 8002124:	4583      	cmp	fp, r0
 8002126:	4180      	sbcs	r0, r0
 8002128:	428d      	cmp	r5, r1
 800212a:	4189      	sbcs	r1, r1
 800212c:	425b      	negs	r3, r3
 800212e:	4264      	negs	r4, r4
 8002130:	431c      	orrs	r4, r3
 8002132:	4240      	negs	r0, r0
 8002134:	9b03      	ldr	r3, [sp, #12]
 8002136:	4249      	negs	r1, r1
 8002138:	4301      	orrs	r1, r0
 800213a:	0270      	lsls	r0, r6, #9
 800213c:	0c3f      	lsrs	r7, r7, #16
 800213e:	4318      	orrs	r0, r3
 8002140:	19e4      	adds	r4, r4, r7
 8002142:	1e47      	subs	r7, r0, #1
 8002144:	41b8      	sbcs	r0, r7
 8002146:	1864      	adds	r4, r4, r1
 8002148:	4464      	add	r4, ip
 800214a:	0df6      	lsrs	r6, r6, #23
 800214c:	0261      	lsls	r1, r4, #9
 800214e:	4330      	orrs	r0, r6
 8002150:	0dec      	lsrs	r4, r5, #23
 8002152:	026e      	lsls	r6, r5, #9
 8002154:	430c      	orrs	r4, r1
 8002156:	4330      	orrs	r0, r6
 8002158:	01c9      	lsls	r1, r1, #7
 800215a:	d400      	bmi.n	800215e <__aeabi_dmul+0x302>
 800215c:	e0f1      	b.n	8002342 <__aeabi_dmul+0x4e6>
 800215e:	2101      	movs	r1, #1
 8002160:	0843      	lsrs	r3, r0, #1
 8002162:	4001      	ands	r1, r0
 8002164:	430b      	orrs	r3, r1
 8002166:	07e0      	lsls	r0, r4, #31
 8002168:	4318      	orrs	r0, r3
 800216a:	0864      	lsrs	r4, r4, #1
 800216c:	4915      	ldr	r1, [pc, #84]	; (80021c4 <__aeabi_dmul+0x368>)
 800216e:	9b02      	ldr	r3, [sp, #8]
 8002170:	468c      	mov	ip, r1
 8002172:	4463      	add	r3, ip
 8002174:	2b00      	cmp	r3, #0
 8002176:	dc00      	bgt.n	800217a <__aeabi_dmul+0x31e>
 8002178:	e097      	b.n	80022aa <__aeabi_dmul+0x44e>
 800217a:	0741      	lsls	r1, r0, #29
 800217c:	d009      	beq.n	8002192 <__aeabi_dmul+0x336>
 800217e:	210f      	movs	r1, #15
 8002180:	4001      	ands	r1, r0
 8002182:	2904      	cmp	r1, #4
 8002184:	d005      	beq.n	8002192 <__aeabi_dmul+0x336>
 8002186:	1d01      	adds	r1, r0, #4
 8002188:	4281      	cmp	r1, r0
 800218a:	4180      	sbcs	r0, r0
 800218c:	4240      	negs	r0, r0
 800218e:	1824      	adds	r4, r4, r0
 8002190:	0008      	movs	r0, r1
 8002192:	01e1      	lsls	r1, r4, #7
 8002194:	d506      	bpl.n	80021a4 <__aeabi_dmul+0x348>
 8002196:	2180      	movs	r1, #128	; 0x80
 8002198:	00c9      	lsls	r1, r1, #3
 800219a:	468c      	mov	ip, r1
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <__aeabi_dmul+0x36c>)
 800219e:	401c      	ands	r4, r3
 80021a0:	9b02      	ldr	r3, [sp, #8]
 80021a2:	4463      	add	r3, ip
 80021a4:	4909      	ldr	r1, [pc, #36]	; (80021cc <__aeabi_dmul+0x370>)
 80021a6:	428b      	cmp	r3, r1
 80021a8:	dd00      	ble.n	80021ac <__aeabi_dmul+0x350>
 80021aa:	e710      	b.n	8001fce <__aeabi_dmul+0x172>
 80021ac:	0761      	lsls	r1, r4, #29
 80021ae:	08c5      	lsrs	r5, r0, #3
 80021b0:	0264      	lsls	r4, r4, #9
 80021b2:	055b      	lsls	r3, r3, #21
 80021b4:	430d      	orrs	r5, r1
 80021b6:	0b24      	lsrs	r4, r4, #12
 80021b8:	0d5b      	lsrs	r3, r3, #21
 80021ba:	e6c1      	b.n	8001f40 <__aeabi_dmul+0xe4>
 80021bc:	000007ff 	.word	0x000007ff
 80021c0:	fffffc01 	.word	0xfffffc01
 80021c4:	000003ff 	.word	0x000003ff
 80021c8:	feffffff 	.word	0xfeffffff
 80021cc:	000007fe 	.word	0x000007fe
 80021d0:	464b      	mov	r3, r9
 80021d2:	4323      	orrs	r3, r4
 80021d4:	d059      	beq.n	800228a <__aeabi_dmul+0x42e>
 80021d6:	2c00      	cmp	r4, #0
 80021d8:	d100      	bne.n	80021dc <__aeabi_dmul+0x380>
 80021da:	e0a3      	b.n	8002324 <__aeabi_dmul+0x4c8>
 80021dc:	0020      	movs	r0, r4
 80021de:	f000 fdf9 	bl	8002dd4 <__clzsi2>
 80021e2:	0001      	movs	r1, r0
 80021e4:	0003      	movs	r3, r0
 80021e6:	390b      	subs	r1, #11
 80021e8:	221d      	movs	r2, #29
 80021ea:	1a52      	subs	r2, r2, r1
 80021ec:	4649      	mov	r1, r9
 80021ee:	0018      	movs	r0, r3
 80021f0:	40d1      	lsrs	r1, r2
 80021f2:	464a      	mov	r2, r9
 80021f4:	3808      	subs	r0, #8
 80021f6:	4082      	lsls	r2, r0
 80021f8:	4084      	lsls	r4, r0
 80021fa:	0010      	movs	r0, r2
 80021fc:	430c      	orrs	r4, r1
 80021fe:	4a74      	ldr	r2, [pc, #464]	; (80023d0 <__aeabi_dmul+0x574>)
 8002200:	1aeb      	subs	r3, r5, r3
 8002202:	4694      	mov	ip, r2
 8002204:	4642      	mov	r2, r8
 8002206:	4463      	add	r3, ip
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	9b01      	ldr	r3, [sp, #4]
 800220c:	407a      	eors	r2, r7
 800220e:	3301      	adds	r3, #1
 8002210:	2100      	movs	r1, #0
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	2e0a      	cmp	r6, #10
 8002218:	dd00      	ble.n	800221c <__aeabi_dmul+0x3c0>
 800221a:	e667      	b.n	8001eec <__aeabi_dmul+0x90>
 800221c:	e683      	b.n	8001f26 <__aeabi_dmul+0xca>
 800221e:	465b      	mov	r3, fp
 8002220:	4303      	orrs	r3, r0
 8002222:	469a      	mov	sl, r3
 8002224:	d02a      	beq.n	800227c <__aeabi_dmul+0x420>
 8002226:	465b      	mov	r3, fp
 8002228:	2b00      	cmp	r3, #0
 800222a:	d06d      	beq.n	8002308 <__aeabi_dmul+0x4ac>
 800222c:	4658      	mov	r0, fp
 800222e:	f000 fdd1 	bl	8002dd4 <__clzsi2>
 8002232:	0001      	movs	r1, r0
 8002234:	0003      	movs	r3, r0
 8002236:	390b      	subs	r1, #11
 8002238:	221d      	movs	r2, #29
 800223a:	1a52      	subs	r2, r2, r1
 800223c:	0021      	movs	r1, r4
 800223e:	0018      	movs	r0, r3
 8002240:	465d      	mov	r5, fp
 8002242:	40d1      	lsrs	r1, r2
 8002244:	3808      	subs	r0, #8
 8002246:	4085      	lsls	r5, r0
 8002248:	000a      	movs	r2, r1
 800224a:	4084      	lsls	r4, r0
 800224c:	432a      	orrs	r2, r5
 800224e:	4693      	mov	fp, r2
 8002250:	46a2      	mov	sl, r4
 8002252:	4d5f      	ldr	r5, [pc, #380]	; (80023d0 <__aeabi_dmul+0x574>)
 8002254:	2600      	movs	r6, #0
 8002256:	1aed      	subs	r5, r5, r3
 8002258:	2300      	movs	r3, #0
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	e625      	b.n	8001eaa <__aeabi_dmul+0x4e>
 800225e:	465b      	mov	r3, fp
 8002260:	4303      	orrs	r3, r0
 8002262:	469a      	mov	sl, r3
 8002264:	d105      	bne.n	8002272 <__aeabi_dmul+0x416>
 8002266:	2300      	movs	r3, #0
 8002268:	469b      	mov	fp, r3
 800226a:	3302      	adds	r3, #2
 800226c:	2608      	movs	r6, #8
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	e61b      	b.n	8001eaa <__aeabi_dmul+0x4e>
 8002272:	2303      	movs	r3, #3
 8002274:	4682      	mov	sl, r0
 8002276:	260c      	movs	r6, #12
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	e616      	b.n	8001eaa <__aeabi_dmul+0x4e>
 800227c:	2300      	movs	r3, #0
 800227e:	469b      	mov	fp, r3
 8002280:	3301      	adds	r3, #1
 8002282:	2604      	movs	r6, #4
 8002284:	2500      	movs	r5, #0
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	e60f      	b.n	8001eaa <__aeabi_dmul+0x4e>
 800228a:	4642      	mov	r2, r8
 800228c:	3301      	adds	r3, #1
 800228e:	9501      	str	r5, [sp, #4]
 8002290:	431e      	orrs	r6, r3
 8002292:	9b01      	ldr	r3, [sp, #4]
 8002294:	407a      	eors	r2, r7
 8002296:	3301      	adds	r3, #1
 8002298:	2400      	movs	r4, #0
 800229a:	2000      	movs	r0, #0
 800229c:	2101      	movs	r1, #1
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	9302      	str	r3, [sp, #8]
 80022a2:	2e0a      	cmp	r6, #10
 80022a4:	dd00      	ble.n	80022a8 <__aeabi_dmul+0x44c>
 80022a6:	e621      	b.n	8001eec <__aeabi_dmul+0x90>
 80022a8:	e63d      	b.n	8001f26 <__aeabi_dmul+0xca>
 80022aa:	2101      	movs	r1, #1
 80022ac:	1ac9      	subs	r1, r1, r3
 80022ae:	2938      	cmp	r1, #56	; 0x38
 80022b0:	dd00      	ble.n	80022b4 <__aeabi_dmul+0x458>
 80022b2:	e642      	b.n	8001f3a <__aeabi_dmul+0xde>
 80022b4:	291f      	cmp	r1, #31
 80022b6:	dd47      	ble.n	8002348 <__aeabi_dmul+0x4ec>
 80022b8:	261f      	movs	r6, #31
 80022ba:	0025      	movs	r5, r4
 80022bc:	4276      	negs	r6, r6
 80022be:	1af3      	subs	r3, r6, r3
 80022c0:	40dd      	lsrs	r5, r3
 80022c2:	002b      	movs	r3, r5
 80022c4:	2920      	cmp	r1, #32
 80022c6:	d005      	beq.n	80022d4 <__aeabi_dmul+0x478>
 80022c8:	4942      	ldr	r1, [pc, #264]	; (80023d4 <__aeabi_dmul+0x578>)
 80022ca:	9d02      	ldr	r5, [sp, #8]
 80022cc:	468c      	mov	ip, r1
 80022ce:	4465      	add	r5, ip
 80022d0:	40ac      	lsls	r4, r5
 80022d2:	4320      	orrs	r0, r4
 80022d4:	1e41      	subs	r1, r0, #1
 80022d6:	4188      	sbcs	r0, r1
 80022d8:	4318      	orrs	r0, r3
 80022da:	2307      	movs	r3, #7
 80022dc:	001d      	movs	r5, r3
 80022de:	2400      	movs	r4, #0
 80022e0:	4005      	ands	r5, r0
 80022e2:	4203      	tst	r3, r0
 80022e4:	d04a      	beq.n	800237c <__aeabi_dmul+0x520>
 80022e6:	230f      	movs	r3, #15
 80022e8:	2400      	movs	r4, #0
 80022ea:	4003      	ands	r3, r0
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d042      	beq.n	8002376 <__aeabi_dmul+0x51a>
 80022f0:	1d03      	adds	r3, r0, #4
 80022f2:	4283      	cmp	r3, r0
 80022f4:	4180      	sbcs	r0, r0
 80022f6:	4240      	negs	r0, r0
 80022f8:	1824      	adds	r4, r4, r0
 80022fa:	0018      	movs	r0, r3
 80022fc:	0223      	lsls	r3, r4, #8
 80022fe:	d53a      	bpl.n	8002376 <__aeabi_dmul+0x51a>
 8002300:	2301      	movs	r3, #1
 8002302:	2400      	movs	r4, #0
 8002304:	2500      	movs	r5, #0
 8002306:	e61b      	b.n	8001f40 <__aeabi_dmul+0xe4>
 8002308:	f000 fd64 	bl	8002dd4 <__clzsi2>
 800230c:	0001      	movs	r1, r0
 800230e:	0003      	movs	r3, r0
 8002310:	3115      	adds	r1, #21
 8002312:	3320      	adds	r3, #32
 8002314:	291c      	cmp	r1, #28
 8002316:	dd8f      	ble.n	8002238 <__aeabi_dmul+0x3dc>
 8002318:	3808      	subs	r0, #8
 800231a:	2200      	movs	r2, #0
 800231c:	4084      	lsls	r4, r0
 800231e:	4692      	mov	sl, r2
 8002320:	46a3      	mov	fp, r4
 8002322:	e796      	b.n	8002252 <__aeabi_dmul+0x3f6>
 8002324:	f000 fd56 	bl	8002dd4 <__clzsi2>
 8002328:	0001      	movs	r1, r0
 800232a:	0003      	movs	r3, r0
 800232c:	3115      	adds	r1, #21
 800232e:	3320      	adds	r3, #32
 8002330:	291c      	cmp	r1, #28
 8002332:	dc00      	bgt.n	8002336 <__aeabi_dmul+0x4da>
 8002334:	e758      	b.n	80021e8 <__aeabi_dmul+0x38c>
 8002336:	0002      	movs	r2, r0
 8002338:	464c      	mov	r4, r9
 800233a:	3a08      	subs	r2, #8
 800233c:	2000      	movs	r0, #0
 800233e:	4094      	lsls	r4, r2
 8002340:	e75d      	b.n	80021fe <__aeabi_dmul+0x3a2>
 8002342:	9b01      	ldr	r3, [sp, #4]
 8002344:	9302      	str	r3, [sp, #8]
 8002346:	e711      	b.n	800216c <__aeabi_dmul+0x310>
 8002348:	4b23      	ldr	r3, [pc, #140]	; (80023d8 <__aeabi_dmul+0x57c>)
 800234a:	0026      	movs	r6, r4
 800234c:	469c      	mov	ip, r3
 800234e:	0003      	movs	r3, r0
 8002350:	9d02      	ldr	r5, [sp, #8]
 8002352:	40cb      	lsrs	r3, r1
 8002354:	4465      	add	r5, ip
 8002356:	40ae      	lsls	r6, r5
 8002358:	431e      	orrs	r6, r3
 800235a:	0003      	movs	r3, r0
 800235c:	40ab      	lsls	r3, r5
 800235e:	1e58      	subs	r0, r3, #1
 8002360:	4183      	sbcs	r3, r0
 8002362:	0030      	movs	r0, r6
 8002364:	4318      	orrs	r0, r3
 8002366:	40cc      	lsrs	r4, r1
 8002368:	0743      	lsls	r3, r0, #29
 800236a:	d0c7      	beq.n	80022fc <__aeabi_dmul+0x4a0>
 800236c:	230f      	movs	r3, #15
 800236e:	4003      	ands	r3, r0
 8002370:	2b04      	cmp	r3, #4
 8002372:	d1bd      	bne.n	80022f0 <__aeabi_dmul+0x494>
 8002374:	e7c2      	b.n	80022fc <__aeabi_dmul+0x4a0>
 8002376:	0765      	lsls	r5, r4, #29
 8002378:	0264      	lsls	r4, r4, #9
 800237a:	0b24      	lsrs	r4, r4, #12
 800237c:	08c0      	lsrs	r0, r0, #3
 800237e:	2300      	movs	r3, #0
 8002380:	4305      	orrs	r5, r0
 8002382:	e5dd      	b.n	8001f40 <__aeabi_dmul+0xe4>
 8002384:	2500      	movs	r5, #0
 8002386:	2302      	movs	r3, #2
 8002388:	2e0f      	cmp	r6, #15
 800238a:	d10c      	bne.n	80023a6 <__aeabi_dmul+0x54a>
 800238c:	2480      	movs	r4, #128	; 0x80
 800238e:	465b      	mov	r3, fp
 8002390:	0324      	lsls	r4, r4, #12
 8002392:	4223      	tst	r3, r4
 8002394:	d00e      	beq.n	80023b4 <__aeabi_dmul+0x558>
 8002396:	4221      	tst	r1, r4
 8002398:	d10c      	bne.n	80023b4 <__aeabi_dmul+0x558>
 800239a:	430c      	orrs	r4, r1
 800239c:	0324      	lsls	r4, r4, #12
 800239e:	003a      	movs	r2, r7
 80023a0:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <__aeabi_dmul+0x580>)
 80023a2:	0b24      	lsrs	r4, r4, #12
 80023a4:	e5cc      	b.n	8001f40 <__aeabi_dmul+0xe4>
 80023a6:	2e0b      	cmp	r6, #11
 80023a8:	d000      	beq.n	80023ac <__aeabi_dmul+0x550>
 80023aa:	e5a2      	b.n	8001ef2 <__aeabi_dmul+0x96>
 80023ac:	468b      	mov	fp, r1
 80023ae:	46aa      	mov	sl, r5
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	e5f7      	b.n	8001fa4 <__aeabi_dmul+0x148>
 80023b4:	2480      	movs	r4, #128	; 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4642      	mov	r2, r8
 80023c0:	4655      	mov	r5, sl
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <__aeabi_dmul+0x580>)
 80023c4:	0b24      	lsrs	r4, r4, #12
 80023c6:	e5bb      	b.n	8001f40 <__aeabi_dmul+0xe4>
 80023c8:	464d      	mov	r5, r9
 80023ca:	0021      	movs	r1, r4
 80023cc:	2303      	movs	r3, #3
 80023ce:	e7db      	b.n	8002388 <__aeabi_dmul+0x52c>
 80023d0:	fffffc0d 	.word	0xfffffc0d
 80023d4:	0000043e 	.word	0x0000043e
 80023d8:	0000041e 	.word	0x0000041e
 80023dc:	000007ff 	.word	0x000007ff

080023e0 <__aeabi_dsub>:
 80023e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023e2:	4657      	mov	r7, sl
 80023e4:	464e      	mov	r6, r9
 80023e6:	4645      	mov	r5, r8
 80023e8:	46de      	mov	lr, fp
 80023ea:	b5e0      	push	{r5, r6, r7, lr}
 80023ec:	000d      	movs	r5, r1
 80023ee:	0004      	movs	r4, r0
 80023f0:	0019      	movs	r1, r3
 80023f2:	0010      	movs	r0, r2
 80023f4:	032b      	lsls	r3, r5, #12
 80023f6:	0a5b      	lsrs	r3, r3, #9
 80023f8:	0f62      	lsrs	r2, r4, #29
 80023fa:	431a      	orrs	r2, r3
 80023fc:	00e3      	lsls	r3, r4, #3
 80023fe:	030c      	lsls	r4, r1, #12
 8002400:	0a64      	lsrs	r4, r4, #9
 8002402:	0f47      	lsrs	r7, r0, #29
 8002404:	4327      	orrs	r7, r4
 8002406:	4cd0      	ldr	r4, [pc, #832]	; (8002748 <__aeabi_dsub+0x368>)
 8002408:	006e      	lsls	r6, r5, #1
 800240a:	4691      	mov	r9, r2
 800240c:	b083      	sub	sp, #12
 800240e:	004a      	lsls	r2, r1, #1
 8002410:	00c0      	lsls	r0, r0, #3
 8002412:	4698      	mov	r8, r3
 8002414:	46a2      	mov	sl, r4
 8002416:	0d76      	lsrs	r6, r6, #21
 8002418:	0fed      	lsrs	r5, r5, #31
 800241a:	0d52      	lsrs	r2, r2, #21
 800241c:	0fc9      	lsrs	r1, r1, #31
 800241e:	9001      	str	r0, [sp, #4]
 8002420:	42a2      	cmp	r2, r4
 8002422:	d100      	bne.n	8002426 <__aeabi_dsub+0x46>
 8002424:	e0b9      	b.n	800259a <__aeabi_dsub+0x1ba>
 8002426:	2401      	movs	r4, #1
 8002428:	4061      	eors	r1, r4
 800242a:	468b      	mov	fp, r1
 800242c:	428d      	cmp	r5, r1
 800242e:	d100      	bne.n	8002432 <__aeabi_dsub+0x52>
 8002430:	e08d      	b.n	800254e <__aeabi_dsub+0x16e>
 8002432:	1ab4      	subs	r4, r6, r2
 8002434:	46a4      	mov	ip, r4
 8002436:	2c00      	cmp	r4, #0
 8002438:	dc00      	bgt.n	800243c <__aeabi_dsub+0x5c>
 800243a:	e0b7      	b.n	80025ac <__aeabi_dsub+0x1cc>
 800243c:	2a00      	cmp	r2, #0
 800243e:	d100      	bne.n	8002442 <__aeabi_dsub+0x62>
 8002440:	e0cb      	b.n	80025da <__aeabi_dsub+0x1fa>
 8002442:	4ac1      	ldr	r2, [pc, #772]	; (8002748 <__aeabi_dsub+0x368>)
 8002444:	4296      	cmp	r6, r2
 8002446:	d100      	bne.n	800244a <__aeabi_dsub+0x6a>
 8002448:	e186      	b.n	8002758 <__aeabi_dsub+0x378>
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	0412      	lsls	r2, r2, #16
 800244e:	4317      	orrs	r7, r2
 8002450:	4662      	mov	r2, ip
 8002452:	2a38      	cmp	r2, #56	; 0x38
 8002454:	dd00      	ble.n	8002458 <__aeabi_dsub+0x78>
 8002456:	e1a4      	b.n	80027a2 <__aeabi_dsub+0x3c2>
 8002458:	2a1f      	cmp	r2, #31
 800245a:	dd00      	ble.n	800245e <__aeabi_dsub+0x7e>
 800245c:	e21d      	b.n	800289a <__aeabi_dsub+0x4ba>
 800245e:	4661      	mov	r1, ip
 8002460:	2220      	movs	r2, #32
 8002462:	003c      	movs	r4, r7
 8002464:	1a52      	subs	r2, r2, r1
 8002466:	0001      	movs	r1, r0
 8002468:	4090      	lsls	r0, r2
 800246a:	4094      	lsls	r4, r2
 800246c:	1e42      	subs	r2, r0, #1
 800246e:	4190      	sbcs	r0, r2
 8002470:	4662      	mov	r2, ip
 8002472:	46a0      	mov	r8, r4
 8002474:	4664      	mov	r4, ip
 8002476:	40d7      	lsrs	r7, r2
 8002478:	464a      	mov	r2, r9
 800247a:	40e1      	lsrs	r1, r4
 800247c:	4644      	mov	r4, r8
 800247e:	1bd2      	subs	r2, r2, r7
 8002480:	4691      	mov	r9, r2
 8002482:	430c      	orrs	r4, r1
 8002484:	4304      	orrs	r4, r0
 8002486:	1b1c      	subs	r4, r3, r4
 8002488:	42a3      	cmp	r3, r4
 800248a:	4192      	sbcs	r2, r2
 800248c:	464b      	mov	r3, r9
 800248e:	4252      	negs	r2, r2
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	469a      	mov	sl, r3
 8002494:	4653      	mov	r3, sl
 8002496:	021b      	lsls	r3, r3, #8
 8002498:	d400      	bmi.n	800249c <__aeabi_dsub+0xbc>
 800249a:	e12b      	b.n	80026f4 <__aeabi_dsub+0x314>
 800249c:	4653      	mov	r3, sl
 800249e:	025a      	lsls	r2, r3, #9
 80024a0:	0a53      	lsrs	r3, r2, #9
 80024a2:	469a      	mov	sl, r3
 80024a4:	4653      	mov	r3, sl
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d100      	bne.n	80024ac <__aeabi_dsub+0xcc>
 80024aa:	e166      	b.n	800277a <__aeabi_dsub+0x39a>
 80024ac:	4650      	mov	r0, sl
 80024ae:	f000 fc91 	bl	8002dd4 <__clzsi2>
 80024b2:	0003      	movs	r3, r0
 80024b4:	3b08      	subs	r3, #8
 80024b6:	2220      	movs	r2, #32
 80024b8:	0020      	movs	r0, r4
 80024ba:	1ad2      	subs	r2, r2, r3
 80024bc:	4651      	mov	r1, sl
 80024be:	40d0      	lsrs	r0, r2
 80024c0:	4099      	lsls	r1, r3
 80024c2:	0002      	movs	r2, r0
 80024c4:	409c      	lsls	r4, r3
 80024c6:	430a      	orrs	r2, r1
 80024c8:	429e      	cmp	r6, r3
 80024ca:	dd00      	ble.n	80024ce <__aeabi_dsub+0xee>
 80024cc:	e164      	b.n	8002798 <__aeabi_dsub+0x3b8>
 80024ce:	1b9b      	subs	r3, r3, r6
 80024d0:	1c59      	adds	r1, r3, #1
 80024d2:	291f      	cmp	r1, #31
 80024d4:	dd00      	ble.n	80024d8 <__aeabi_dsub+0xf8>
 80024d6:	e0fe      	b.n	80026d6 <__aeabi_dsub+0x2f6>
 80024d8:	2320      	movs	r3, #32
 80024da:	0010      	movs	r0, r2
 80024dc:	0026      	movs	r6, r4
 80024de:	1a5b      	subs	r3, r3, r1
 80024e0:	409c      	lsls	r4, r3
 80024e2:	4098      	lsls	r0, r3
 80024e4:	40ce      	lsrs	r6, r1
 80024e6:	40ca      	lsrs	r2, r1
 80024e8:	1e63      	subs	r3, r4, #1
 80024ea:	419c      	sbcs	r4, r3
 80024ec:	4330      	orrs	r0, r6
 80024ee:	4692      	mov	sl, r2
 80024f0:	2600      	movs	r6, #0
 80024f2:	4304      	orrs	r4, r0
 80024f4:	0763      	lsls	r3, r4, #29
 80024f6:	d009      	beq.n	800250c <__aeabi_dsub+0x12c>
 80024f8:	230f      	movs	r3, #15
 80024fa:	4023      	ands	r3, r4
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x12c>
 8002500:	1d23      	adds	r3, r4, #4
 8002502:	42a3      	cmp	r3, r4
 8002504:	41a4      	sbcs	r4, r4
 8002506:	4264      	negs	r4, r4
 8002508:	44a2      	add	sl, r4
 800250a:	001c      	movs	r4, r3
 800250c:	4653      	mov	r3, sl
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	d400      	bmi.n	8002514 <__aeabi_dsub+0x134>
 8002512:	e0f2      	b.n	80026fa <__aeabi_dsub+0x31a>
 8002514:	4b8c      	ldr	r3, [pc, #560]	; (8002748 <__aeabi_dsub+0x368>)
 8002516:	3601      	adds	r6, #1
 8002518:	429e      	cmp	r6, r3
 800251a:	d100      	bne.n	800251e <__aeabi_dsub+0x13e>
 800251c:	e10f      	b.n	800273e <__aeabi_dsub+0x35e>
 800251e:	4653      	mov	r3, sl
 8002520:	498a      	ldr	r1, [pc, #552]	; (800274c <__aeabi_dsub+0x36c>)
 8002522:	08e4      	lsrs	r4, r4, #3
 8002524:	400b      	ands	r3, r1
 8002526:	0019      	movs	r1, r3
 8002528:	075b      	lsls	r3, r3, #29
 800252a:	4323      	orrs	r3, r4
 800252c:	0572      	lsls	r2, r6, #21
 800252e:	024c      	lsls	r4, r1, #9
 8002530:	0b24      	lsrs	r4, r4, #12
 8002532:	0d52      	lsrs	r2, r2, #21
 8002534:	0512      	lsls	r2, r2, #20
 8002536:	4322      	orrs	r2, r4
 8002538:	07ed      	lsls	r5, r5, #31
 800253a:	432a      	orrs	r2, r5
 800253c:	0018      	movs	r0, r3
 800253e:	0011      	movs	r1, r2
 8002540:	b003      	add	sp, #12
 8002542:	bcf0      	pop	{r4, r5, r6, r7}
 8002544:	46bb      	mov	fp, r7
 8002546:	46b2      	mov	sl, r6
 8002548:	46a9      	mov	r9, r5
 800254a:	46a0      	mov	r8, r4
 800254c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800254e:	1ab4      	subs	r4, r6, r2
 8002550:	46a4      	mov	ip, r4
 8002552:	2c00      	cmp	r4, #0
 8002554:	dd59      	ble.n	800260a <__aeabi_dsub+0x22a>
 8002556:	2a00      	cmp	r2, #0
 8002558:	d100      	bne.n	800255c <__aeabi_dsub+0x17c>
 800255a:	e0b0      	b.n	80026be <__aeabi_dsub+0x2de>
 800255c:	4556      	cmp	r6, sl
 800255e:	d100      	bne.n	8002562 <__aeabi_dsub+0x182>
 8002560:	e0fa      	b.n	8002758 <__aeabi_dsub+0x378>
 8002562:	2280      	movs	r2, #128	; 0x80
 8002564:	0412      	lsls	r2, r2, #16
 8002566:	4317      	orrs	r7, r2
 8002568:	4662      	mov	r2, ip
 800256a:	2a38      	cmp	r2, #56	; 0x38
 800256c:	dd00      	ble.n	8002570 <__aeabi_dsub+0x190>
 800256e:	e0d4      	b.n	800271a <__aeabi_dsub+0x33a>
 8002570:	2a1f      	cmp	r2, #31
 8002572:	dc00      	bgt.n	8002576 <__aeabi_dsub+0x196>
 8002574:	e1c0      	b.n	80028f8 <__aeabi_dsub+0x518>
 8002576:	0039      	movs	r1, r7
 8002578:	3a20      	subs	r2, #32
 800257a:	40d1      	lsrs	r1, r2
 800257c:	4662      	mov	r2, ip
 800257e:	2a20      	cmp	r2, #32
 8002580:	d006      	beq.n	8002590 <__aeabi_dsub+0x1b0>
 8002582:	4664      	mov	r4, ip
 8002584:	2240      	movs	r2, #64	; 0x40
 8002586:	1b12      	subs	r2, r2, r4
 8002588:	003c      	movs	r4, r7
 800258a:	4094      	lsls	r4, r2
 800258c:	4304      	orrs	r4, r0
 800258e:	9401      	str	r4, [sp, #4]
 8002590:	9c01      	ldr	r4, [sp, #4]
 8002592:	1e62      	subs	r2, r4, #1
 8002594:	4194      	sbcs	r4, r2
 8002596:	430c      	orrs	r4, r1
 8002598:	e0c3      	b.n	8002722 <__aeabi_dsub+0x342>
 800259a:	003c      	movs	r4, r7
 800259c:	4304      	orrs	r4, r0
 800259e:	d02b      	beq.n	80025f8 <__aeabi_dsub+0x218>
 80025a0:	468b      	mov	fp, r1
 80025a2:	428d      	cmp	r5, r1
 80025a4:	d02e      	beq.n	8002604 <__aeabi_dsub+0x224>
 80025a6:	4c6a      	ldr	r4, [pc, #424]	; (8002750 <__aeabi_dsub+0x370>)
 80025a8:	46a4      	mov	ip, r4
 80025aa:	44b4      	add	ip, r6
 80025ac:	4664      	mov	r4, ip
 80025ae:	2c00      	cmp	r4, #0
 80025b0:	d05f      	beq.n	8002672 <__aeabi_dsub+0x292>
 80025b2:	1b94      	subs	r4, r2, r6
 80025b4:	46a4      	mov	ip, r4
 80025b6:	2e00      	cmp	r6, #0
 80025b8:	d000      	beq.n	80025bc <__aeabi_dsub+0x1dc>
 80025ba:	e120      	b.n	80027fe <__aeabi_dsub+0x41e>
 80025bc:	464c      	mov	r4, r9
 80025be:	431c      	orrs	r4, r3
 80025c0:	d100      	bne.n	80025c4 <__aeabi_dsub+0x1e4>
 80025c2:	e1c7      	b.n	8002954 <__aeabi_dsub+0x574>
 80025c4:	4661      	mov	r1, ip
 80025c6:	1e4c      	subs	r4, r1, #1
 80025c8:	2901      	cmp	r1, #1
 80025ca:	d100      	bne.n	80025ce <__aeabi_dsub+0x1ee>
 80025cc:	e223      	b.n	8002a16 <__aeabi_dsub+0x636>
 80025ce:	4d5e      	ldr	r5, [pc, #376]	; (8002748 <__aeabi_dsub+0x368>)
 80025d0:	45ac      	cmp	ip, r5
 80025d2:	d100      	bne.n	80025d6 <__aeabi_dsub+0x1f6>
 80025d4:	e1d8      	b.n	8002988 <__aeabi_dsub+0x5a8>
 80025d6:	46a4      	mov	ip, r4
 80025d8:	e11a      	b.n	8002810 <__aeabi_dsub+0x430>
 80025da:	003a      	movs	r2, r7
 80025dc:	4302      	orrs	r2, r0
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x202>
 80025e0:	e0e4      	b.n	80027ac <__aeabi_dsub+0x3cc>
 80025e2:	0022      	movs	r2, r4
 80025e4:	3a01      	subs	r2, #1
 80025e6:	2c01      	cmp	r4, #1
 80025e8:	d100      	bne.n	80025ec <__aeabi_dsub+0x20c>
 80025ea:	e1c3      	b.n	8002974 <__aeabi_dsub+0x594>
 80025ec:	4956      	ldr	r1, [pc, #344]	; (8002748 <__aeabi_dsub+0x368>)
 80025ee:	428c      	cmp	r4, r1
 80025f0:	d100      	bne.n	80025f4 <__aeabi_dsub+0x214>
 80025f2:	e0b1      	b.n	8002758 <__aeabi_dsub+0x378>
 80025f4:	4694      	mov	ip, r2
 80025f6:	e72b      	b.n	8002450 <__aeabi_dsub+0x70>
 80025f8:	2401      	movs	r4, #1
 80025fa:	4061      	eors	r1, r4
 80025fc:	468b      	mov	fp, r1
 80025fe:	428d      	cmp	r5, r1
 8002600:	d000      	beq.n	8002604 <__aeabi_dsub+0x224>
 8002602:	e716      	b.n	8002432 <__aeabi_dsub+0x52>
 8002604:	4952      	ldr	r1, [pc, #328]	; (8002750 <__aeabi_dsub+0x370>)
 8002606:	468c      	mov	ip, r1
 8002608:	44b4      	add	ip, r6
 800260a:	4664      	mov	r4, ip
 800260c:	2c00      	cmp	r4, #0
 800260e:	d100      	bne.n	8002612 <__aeabi_dsub+0x232>
 8002610:	e0d3      	b.n	80027ba <__aeabi_dsub+0x3da>
 8002612:	1b91      	subs	r1, r2, r6
 8002614:	468c      	mov	ip, r1
 8002616:	2e00      	cmp	r6, #0
 8002618:	d100      	bne.n	800261c <__aeabi_dsub+0x23c>
 800261a:	e15e      	b.n	80028da <__aeabi_dsub+0x4fa>
 800261c:	494a      	ldr	r1, [pc, #296]	; (8002748 <__aeabi_dsub+0x368>)
 800261e:	428a      	cmp	r2, r1
 8002620:	d100      	bne.n	8002624 <__aeabi_dsub+0x244>
 8002622:	e1be      	b.n	80029a2 <__aeabi_dsub+0x5c2>
 8002624:	2180      	movs	r1, #128	; 0x80
 8002626:	464c      	mov	r4, r9
 8002628:	0409      	lsls	r1, r1, #16
 800262a:	430c      	orrs	r4, r1
 800262c:	46a1      	mov	r9, r4
 800262e:	4661      	mov	r1, ip
 8002630:	2938      	cmp	r1, #56	; 0x38
 8002632:	dd00      	ble.n	8002636 <__aeabi_dsub+0x256>
 8002634:	e1ba      	b.n	80029ac <__aeabi_dsub+0x5cc>
 8002636:	291f      	cmp	r1, #31
 8002638:	dd00      	ble.n	800263c <__aeabi_dsub+0x25c>
 800263a:	e227      	b.n	8002a8c <__aeabi_dsub+0x6ac>
 800263c:	2420      	movs	r4, #32
 800263e:	1a64      	subs	r4, r4, r1
 8002640:	4649      	mov	r1, r9
 8002642:	40a1      	lsls	r1, r4
 8002644:	001e      	movs	r6, r3
 8002646:	4688      	mov	r8, r1
 8002648:	4661      	mov	r1, ip
 800264a:	40a3      	lsls	r3, r4
 800264c:	40ce      	lsrs	r6, r1
 800264e:	4641      	mov	r1, r8
 8002650:	1e5c      	subs	r4, r3, #1
 8002652:	41a3      	sbcs	r3, r4
 8002654:	4331      	orrs	r1, r6
 8002656:	4319      	orrs	r1, r3
 8002658:	000c      	movs	r4, r1
 800265a:	4663      	mov	r3, ip
 800265c:	4649      	mov	r1, r9
 800265e:	40d9      	lsrs	r1, r3
 8002660:	187f      	adds	r7, r7, r1
 8002662:	1824      	adds	r4, r4, r0
 8002664:	4284      	cmp	r4, r0
 8002666:	419b      	sbcs	r3, r3
 8002668:	425b      	negs	r3, r3
 800266a:	469a      	mov	sl, r3
 800266c:	0016      	movs	r6, r2
 800266e:	44ba      	add	sl, r7
 8002670:	e05d      	b.n	800272e <__aeabi_dsub+0x34e>
 8002672:	4c38      	ldr	r4, [pc, #224]	; (8002754 <__aeabi_dsub+0x374>)
 8002674:	1c72      	adds	r2, r6, #1
 8002676:	4222      	tst	r2, r4
 8002678:	d000      	beq.n	800267c <__aeabi_dsub+0x29c>
 800267a:	e0df      	b.n	800283c <__aeabi_dsub+0x45c>
 800267c:	464a      	mov	r2, r9
 800267e:	431a      	orrs	r2, r3
 8002680:	2e00      	cmp	r6, #0
 8002682:	d000      	beq.n	8002686 <__aeabi_dsub+0x2a6>
 8002684:	e15c      	b.n	8002940 <__aeabi_dsub+0x560>
 8002686:	2a00      	cmp	r2, #0
 8002688:	d100      	bne.n	800268c <__aeabi_dsub+0x2ac>
 800268a:	e1cf      	b.n	8002a2c <__aeabi_dsub+0x64c>
 800268c:	003a      	movs	r2, r7
 800268e:	4302      	orrs	r2, r0
 8002690:	d100      	bne.n	8002694 <__aeabi_dsub+0x2b4>
 8002692:	e17f      	b.n	8002994 <__aeabi_dsub+0x5b4>
 8002694:	1a1c      	subs	r4, r3, r0
 8002696:	464a      	mov	r2, r9
 8002698:	42a3      	cmp	r3, r4
 800269a:	4189      	sbcs	r1, r1
 800269c:	1bd2      	subs	r2, r2, r7
 800269e:	4249      	negs	r1, r1
 80026a0:	1a52      	subs	r2, r2, r1
 80026a2:	4692      	mov	sl, r2
 80026a4:	0212      	lsls	r2, r2, #8
 80026a6:	d400      	bmi.n	80026aa <__aeabi_dsub+0x2ca>
 80026a8:	e20a      	b.n	8002ac0 <__aeabi_dsub+0x6e0>
 80026aa:	1ac4      	subs	r4, r0, r3
 80026ac:	42a0      	cmp	r0, r4
 80026ae:	4180      	sbcs	r0, r0
 80026b0:	464b      	mov	r3, r9
 80026b2:	4240      	negs	r0, r0
 80026b4:	1aff      	subs	r7, r7, r3
 80026b6:	1a3b      	subs	r3, r7, r0
 80026b8:	469a      	mov	sl, r3
 80026ba:	465d      	mov	r5, fp
 80026bc:	e71a      	b.n	80024f4 <__aeabi_dsub+0x114>
 80026be:	003a      	movs	r2, r7
 80026c0:	4302      	orrs	r2, r0
 80026c2:	d073      	beq.n	80027ac <__aeabi_dsub+0x3cc>
 80026c4:	0022      	movs	r2, r4
 80026c6:	3a01      	subs	r2, #1
 80026c8:	2c01      	cmp	r4, #1
 80026ca:	d100      	bne.n	80026ce <__aeabi_dsub+0x2ee>
 80026cc:	e0cb      	b.n	8002866 <__aeabi_dsub+0x486>
 80026ce:	4554      	cmp	r4, sl
 80026d0:	d042      	beq.n	8002758 <__aeabi_dsub+0x378>
 80026d2:	4694      	mov	ip, r2
 80026d4:	e748      	b.n	8002568 <__aeabi_dsub+0x188>
 80026d6:	0010      	movs	r0, r2
 80026d8:	3b1f      	subs	r3, #31
 80026da:	40d8      	lsrs	r0, r3
 80026dc:	2920      	cmp	r1, #32
 80026de:	d003      	beq.n	80026e8 <__aeabi_dsub+0x308>
 80026e0:	2340      	movs	r3, #64	; 0x40
 80026e2:	1a5b      	subs	r3, r3, r1
 80026e4:	409a      	lsls	r2, r3
 80026e6:	4314      	orrs	r4, r2
 80026e8:	1e63      	subs	r3, r4, #1
 80026ea:	419c      	sbcs	r4, r3
 80026ec:	2300      	movs	r3, #0
 80026ee:	2600      	movs	r6, #0
 80026f0:	469a      	mov	sl, r3
 80026f2:	4304      	orrs	r4, r0
 80026f4:	0763      	lsls	r3, r4, #29
 80026f6:	d000      	beq.n	80026fa <__aeabi_dsub+0x31a>
 80026f8:	e6fe      	b.n	80024f8 <__aeabi_dsub+0x118>
 80026fa:	4652      	mov	r2, sl
 80026fc:	08e3      	lsrs	r3, r4, #3
 80026fe:	0752      	lsls	r2, r2, #29
 8002700:	4313      	orrs	r3, r2
 8002702:	4652      	mov	r2, sl
 8002704:	46b4      	mov	ip, r6
 8002706:	08d2      	lsrs	r2, r2, #3
 8002708:	490f      	ldr	r1, [pc, #60]	; (8002748 <__aeabi_dsub+0x368>)
 800270a:	458c      	cmp	ip, r1
 800270c:	d02a      	beq.n	8002764 <__aeabi_dsub+0x384>
 800270e:	0312      	lsls	r2, r2, #12
 8002710:	0b14      	lsrs	r4, r2, #12
 8002712:	4662      	mov	r2, ip
 8002714:	0552      	lsls	r2, r2, #21
 8002716:	0d52      	lsrs	r2, r2, #21
 8002718:	e70c      	b.n	8002534 <__aeabi_dsub+0x154>
 800271a:	003c      	movs	r4, r7
 800271c:	4304      	orrs	r4, r0
 800271e:	1e62      	subs	r2, r4, #1
 8002720:	4194      	sbcs	r4, r2
 8002722:	18e4      	adds	r4, r4, r3
 8002724:	429c      	cmp	r4, r3
 8002726:	4192      	sbcs	r2, r2
 8002728:	4252      	negs	r2, r2
 800272a:	444a      	add	r2, r9
 800272c:	4692      	mov	sl, r2
 800272e:	4653      	mov	r3, sl
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	d5df      	bpl.n	80026f4 <__aeabi_dsub+0x314>
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <__aeabi_dsub+0x368>)
 8002736:	3601      	adds	r6, #1
 8002738:	429e      	cmp	r6, r3
 800273a:	d000      	beq.n	800273e <__aeabi_dsub+0x35e>
 800273c:	e0a0      	b.n	8002880 <__aeabi_dsub+0x4a0>
 800273e:	0032      	movs	r2, r6
 8002740:	2400      	movs	r4, #0
 8002742:	2300      	movs	r3, #0
 8002744:	e6f6      	b.n	8002534 <__aeabi_dsub+0x154>
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	000007ff 	.word	0x000007ff
 800274c:	ff7fffff 	.word	0xff7fffff
 8002750:	fffff801 	.word	0xfffff801
 8002754:	000007fe 	.word	0x000007fe
 8002758:	08db      	lsrs	r3, r3, #3
 800275a:	464a      	mov	r2, r9
 800275c:	0752      	lsls	r2, r2, #29
 800275e:	4313      	orrs	r3, r2
 8002760:	464a      	mov	r2, r9
 8002762:	08d2      	lsrs	r2, r2, #3
 8002764:	0019      	movs	r1, r3
 8002766:	4311      	orrs	r1, r2
 8002768:	d100      	bne.n	800276c <__aeabi_dsub+0x38c>
 800276a:	e1b5      	b.n	8002ad8 <__aeabi_dsub+0x6f8>
 800276c:	2480      	movs	r4, #128	; 0x80
 800276e:	0324      	lsls	r4, r4, #12
 8002770:	4314      	orrs	r4, r2
 8002772:	0324      	lsls	r4, r4, #12
 8002774:	4ad5      	ldr	r2, [pc, #852]	; (8002acc <__aeabi_dsub+0x6ec>)
 8002776:	0b24      	lsrs	r4, r4, #12
 8002778:	e6dc      	b.n	8002534 <__aeabi_dsub+0x154>
 800277a:	0020      	movs	r0, r4
 800277c:	f000 fb2a 	bl	8002dd4 <__clzsi2>
 8002780:	0003      	movs	r3, r0
 8002782:	3318      	adds	r3, #24
 8002784:	2b1f      	cmp	r3, #31
 8002786:	dc00      	bgt.n	800278a <__aeabi_dsub+0x3aa>
 8002788:	e695      	b.n	80024b6 <__aeabi_dsub+0xd6>
 800278a:	0022      	movs	r2, r4
 800278c:	3808      	subs	r0, #8
 800278e:	4082      	lsls	r2, r0
 8002790:	2400      	movs	r4, #0
 8002792:	429e      	cmp	r6, r3
 8002794:	dc00      	bgt.n	8002798 <__aeabi_dsub+0x3b8>
 8002796:	e69a      	b.n	80024ce <__aeabi_dsub+0xee>
 8002798:	1af6      	subs	r6, r6, r3
 800279a:	4bcd      	ldr	r3, [pc, #820]	; (8002ad0 <__aeabi_dsub+0x6f0>)
 800279c:	401a      	ands	r2, r3
 800279e:	4692      	mov	sl, r2
 80027a0:	e6a8      	b.n	80024f4 <__aeabi_dsub+0x114>
 80027a2:	003c      	movs	r4, r7
 80027a4:	4304      	orrs	r4, r0
 80027a6:	1e62      	subs	r2, r4, #1
 80027a8:	4194      	sbcs	r4, r2
 80027aa:	e66c      	b.n	8002486 <__aeabi_dsub+0xa6>
 80027ac:	464a      	mov	r2, r9
 80027ae:	08db      	lsrs	r3, r3, #3
 80027b0:	0752      	lsls	r2, r2, #29
 80027b2:	4313      	orrs	r3, r2
 80027b4:	464a      	mov	r2, r9
 80027b6:	08d2      	lsrs	r2, r2, #3
 80027b8:	e7a6      	b.n	8002708 <__aeabi_dsub+0x328>
 80027ba:	4cc6      	ldr	r4, [pc, #792]	; (8002ad4 <__aeabi_dsub+0x6f4>)
 80027bc:	1c72      	adds	r2, r6, #1
 80027be:	4222      	tst	r2, r4
 80027c0:	d000      	beq.n	80027c4 <__aeabi_dsub+0x3e4>
 80027c2:	e0ac      	b.n	800291e <__aeabi_dsub+0x53e>
 80027c4:	464a      	mov	r2, r9
 80027c6:	431a      	orrs	r2, r3
 80027c8:	2e00      	cmp	r6, #0
 80027ca:	d000      	beq.n	80027ce <__aeabi_dsub+0x3ee>
 80027cc:	e105      	b.n	80029da <__aeabi_dsub+0x5fa>
 80027ce:	2a00      	cmp	r2, #0
 80027d0:	d100      	bne.n	80027d4 <__aeabi_dsub+0x3f4>
 80027d2:	e156      	b.n	8002a82 <__aeabi_dsub+0x6a2>
 80027d4:	003a      	movs	r2, r7
 80027d6:	4302      	orrs	r2, r0
 80027d8:	d100      	bne.n	80027dc <__aeabi_dsub+0x3fc>
 80027da:	e0db      	b.n	8002994 <__aeabi_dsub+0x5b4>
 80027dc:	181c      	adds	r4, r3, r0
 80027de:	429c      	cmp	r4, r3
 80027e0:	419b      	sbcs	r3, r3
 80027e2:	444f      	add	r7, r9
 80027e4:	46ba      	mov	sl, r7
 80027e6:	425b      	negs	r3, r3
 80027e8:	449a      	add	sl, r3
 80027ea:	4653      	mov	r3, sl
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	d400      	bmi.n	80027f2 <__aeabi_dsub+0x412>
 80027f0:	e780      	b.n	80026f4 <__aeabi_dsub+0x314>
 80027f2:	4652      	mov	r2, sl
 80027f4:	4bb6      	ldr	r3, [pc, #728]	; (8002ad0 <__aeabi_dsub+0x6f0>)
 80027f6:	2601      	movs	r6, #1
 80027f8:	401a      	ands	r2, r3
 80027fa:	4692      	mov	sl, r2
 80027fc:	e77a      	b.n	80026f4 <__aeabi_dsub+0x314>
 80027fe:	4cb3      	ldr	r4, [pc, #716]	; (8002acc <__aeabi_dsub+0x6ec>)
 8002800:	42a2      	cmp	r2, r4
 8002802:	d100      	bne.n	8002806 <__aeabi_dsub+0x426>
 8002804:	e0c0      	b.n	8002988 <__aeabi_dsub+0x5a8>
 8002806:	2480      	movs	r4, #128	; 0x80
 8002808:	464d      	mov	r5, r9
 800280a:	0424      	lsls	r4, r4, #16
 800280c:	4325      	orrs	r5, r4
 800280e:	46a9      	mov	r9, r5
 8002810:	4664      	mov	r4, ip
 8002812:	2c38      	cmp	r4, #56	; 0x38
 8002814:	dc53      	bgt.n	80028be <__aeabi_dsub+0x4de>
 8002816:	4661      	mov	r1, ip
 8002818:	2c1f      	cmp	r4, #31
 800281a:	dd00      	ble.n	800281e <__aeabi_dsub+0x43e>
 800281c:	e0cd      	b.n	80029ba <__aeabi_dsub+0x5da>
 800281e:	2520      	movs	r5, #32
 8002820:	001e      	movs	r6, r3
 8002822:	1b2d      	subs	r5, r5, r4
 8002824:	464c      	mov	r4, r9
 8002826:	40ab      	lsls	r3, r5
 8002828:	40ac      	lsls	r4, r5
 800282a:	40ce      	lsrs	r6, r1
 800282c:	1e5d      	subs	r5, r3, #1
 800282e:	41ab      	sbcs	r3, r5
 8002830:	4334      	orrs	r4, r6
 8002832:	4323      	orrs	r3, r4
 8002834:	464c      	mov	r4, r9
 8002836:	40cc      	lsrs	r4, r1
 8002838:	1b3f      	subs	r7, r7, r4
 800283a:	e045      	b.n	80028c8 <__aeabi_dsub+0x4e8>
 800283c:	464a      	mov	r2, r9
 800283e:	1a1c      	subs	r4, r3, r0
 8002840:	1bd1      	subs	r1, r2, r7
 8002842:	42a3      	cmp	r3, r4
 8002844:	4192      	sbcs	r2, r2
 8002846:	4252      	negs	r2, r2
 8002848:	4692      	mov	sl, r2
 800284a:	000a      	movs	r2, r1
 800284c:	4651      	mov	r1, sl
 800284e:	1a52      	subs	r2, r2, r1
 8002850:	4692      	mov	sl, r2
 8002852:	0212      	lsls	r2, r2, #8
 8002854:	d500      	bpl.n	8002858 <__aeabi_dsub+0x478>
 8002856:	e083      	b.n	8002960 <__aeabi_dsub+0x580>
 8002858:	4653      	mov	r3, sl
 800285a:	4323      	orrs	r3, r4
 800285c:	d000      	beq.n	8002860 <__aeabi_dsub+0x480>
 800285e:	e621      	b.n	80024a4 <__aeabi_dsub+0xc4>
 8002860:	2200      	movs	r2, #0
 8002862:	2500      	movs	r5, #0
 8002864:	e753      	b.n	800270e <__aeabi_dsub+0x32e>
 8002866:	181c      	adds	r4, r3, r0
 8002868:	429c      	cmp	r4, r3
 800286a:	419b      	sbcs	r3, r3
 800286c:	444f      	add	r7, r9
 800286e:	46ba      	mov	sl, r7
 8002870:	425b      	negs	r3, r3
 8002872:	449a      	add	sl, r3
 8002874:	4653      	mov	r3, sl
 8002876:	2601      	movs	r6, #1
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	d400      	bmi.n	800287e <__aeabi_dsub+0x49e>
 800287c:	e73a      	b.n	80026f4 <__aeabi_dsub+0x314>
 800287e:	2602      	movs	r6, #2
 8002880:	4652      	mov	r2, sl
 8002882:	4b93      	ldr	r3, [pc, #588]	; (8002ad0 <__aeabi_dsub+0x6f0>)
 8002884:	2101      	movs	r1, #1
 8002886:	401a      	ands	r2, r3
 8002888:	0013      	movs	r3, r2
 800288a:	4021      	ands	r1, r4
 800288c:	0862      	lsrs	r2, r4, #1
 800288e:	430a      	orrs	r2, r1
 8002890:	07dc      	lsls	r4, r3, #31
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	469a      	mov	sl, r3
 8002896:	4314      	orrs	r4, r2
 8002898:	e62c      	b.n	80024f4 <__aeabi_dsub+0x114>
 800289a:	0039      	movs	r1, r7
 800289c:	3a20      	subs	r2, #32
 800289e:	40d1      	lsrs	r1, r2
 80028a0:	4662      	mov	r2, ip
 80028a2:	2a20      	cmp	r2, #32
 80028a4:	d006      	beq.n	80028b4 <__aeabi_dsub+0x4d4>
 80028a6:	4664      	mov	r4, ip
 80028a8:	2240      	movs	r2, #64	; 0x40
 80028aa:	1b12      	subs	r2, r2, r4
 80028ac:	003c      	movs	r4, r7
 80028ae:	4094      	lsls	r4, r2
 80028b0:	4304      	orrs	r4, r0
 80028b2:	9401      	str	r4, [sp, #4]
 80028b4:	9c01      	ldr	r4, [sp, #4]
 80028b6:	1e62      	subs	r2, r4, #1
 80028b8:	4194      	sbcs	r4, r2
 80028ba:	430c      	orrs	r4, r1
 80028bc:	e5e3      	b.n	8002486 <__aeabi_dsub+0xa6>
 80028be:	4649      	mov	r1, r9
 80028c0:	4319      	orrs	r1, r3
 80028c2:	000b      	movs	r3, r1
 80028c4:	1e5c      	subs	r4, r3, #1
 80028c6:	41a3      	sbcs	r3, r4
 80028c8:	1ac4      	subs	r4, r0, r3
 80028ca:	42a0      	cmp	r0, r4
 80028cc:	419b      	sbcs	r3, r3
 80028ce:	425b      	negs	r3, r3
 80028d0:	1afb      	subs	r3, r7, r3
 80028d2:	469a      	mov	sl, r3
 80028d4:	465d      	mov	r5, fp
 80028d6:	0016      	movs	r6, r2
 80028d8:	e5dc      	b.n	8002494 <__aeabi_dsub+0xb4>
 80028da:	4649      	mov	r1, r9
 80028dc:	4319      	orrs	r1, r3
 80028de:	d100      	bne.n	80028e2 <__aeabi_dsub+0x502>
 80028e0:	e0ae      	b.n	8002a40 <__aeabi_dsub+0x660>
 80028e2:	4661      	mov	r1, ip
 80028e4:	4664      	mov	r4, ip
 80028e6:	3901      	subs	r1, #1
 80028e8:	2c01      	cmp	r4, #1
 80028ea:	d100      	bne.n	80028ee <__aeabi_dsub+0x50e>
 80028ec:	e0e0      	b.n	8002ab0 <__aeabi_dsub+0x6d0>
 80028ee:	4c77      	ldr	r4, [pc, #476]	; (8002acc <__aeabi_dsub+0x6ec>)
 80028f0:	45a4      	cmp	ip, r4
 80028f2:	d056      	beq.n	80029a2 <__aeabi_dsub+0x5c2>
 80028f4:	468c      	mov	ip, r1
 80028f6:	e69a      	b.n	800262e <__aeabi_dsub+0x24e>
 80028f8:	4661      	mov	r1, ip
 80028fa:	2220      	movs	r2, #32
 80028fc:	003c      	movs	r4, r7
 80028fe:	1a52      	subs	r2, r2, r1
 8002900:	4094      	lsls	r4, r2
 8002902:	0001      	movs	r1, r0
 8002904:	4090      	lsls	r0, r2
 8002906:	46a0      	mov	r8, r4
 8002908:	4664      	mov	r4, ip
 800290a:	1e42      	subs	r2, r0, #1
 800290c:	4190      	sbcs	r0, r2
 800290e:	4662      	mov	r2, ip
 8002910:	40e1      	lsrs	r1, r4
 8002912:	4644      	mov	r4, r8
 8002914:	40d7      	lsrs	r7, r2
 8002916:	430c      	orrs	r4, r1
 8002918:	4304      	orrs	r4, r0
 800291a:	44b9      	add	r9, r7
 800291c:	e701      	b.n	8002722 <__aeabi_dsub+0x342>
 800291e:	496b      	ldr	r1, [pc, #428]	; (8002acc <__aeabi_dsub+0x6ec>)
 8002920:	428a      	cmp	r2, r1
 8002922:	d100      	bne.n	8002926 <__aeabi_dsub+0x546>
 8002924:	e70c      	b.n	8002740 <__aeabi_dsub+0x360>
 8002926:	1818      	adds	r0, r3, r0
 8002928:	4298      	cmp	r0, r3
 800292a:	419b      	sbcs	r3, r3
 800292c:	444f      	add	r7, r9
 800292e:	425b      	negs	r3, r3
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	07dc      	lsls	r4, r3, #31
 8002934:	0840      	lsrs	r0, r0, #1
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	469a      	mov	sl, r3
 800293a:	0016      	movs	r6, r2
 800293c:	4304      	orrs	r4, r0
 800293e:	e6d9      	b.n	80026f4 <__aeabi_dsub+0x314>
 8002940:	2a00      	cmp	r2, #0
 8002942:	d000      	beq.n	8002946 <__aeabi_dsub+0x566>
 8002944:	e081      	b.n	8002a4a <__aeabi_dsub+0x66a>
 8002946:	003b      	movs	r3, r7
 8002948:	4303      	orrs	r3, r0
 800294a:	d11d      	bne.n	8002988 <__aeabi_dsub+0x5a8>
 800294c:	2280      	movs	r2, #128	; 0x80
 800294e:	2500      	movs	r5, #0
 8002950:	0312      	lsls	r2, r2, #12
 8002952:	e70b      	b.n	800276c <__aeabi_dsub+0x38c>
 8002954:	08c0      	lsrs	r0, r0, #3
 8002956:	077b      	lsls	r3, r7, #29
 8002958:	465d      	mov	r5, fp
 800295a:	4303      	orrs	r3, r0
 800295c:	08fa      	lsrs	r2, r7, #3
 800295e:	e6d3      	b.n	8002708 <__aeabi_dsub+0x328>
 8002960:	1ac4      	subs	r4, r0, r3
 8002962:	42a0      	cmp	r0, r4
 8002964:	4180      	sbcs	r0, r0
 8002966:	464b      	mov	r3, r9
 8002968:	4240      	negs	r0, r0
 800296a:	1aff      	subs	r7, r7, r3
 800296c:	1a3b      	subs	r3, r7, r0
 800296e:	469a      	mov	sl, r3
 8002970:	465d      	mov	r5, fp
 8002972:	e597      	b.n	80024a4 <__aeabi_dsub+0xc4>
 8002974:	1a1c      	subs	r4, r3, r0
 8002976:	464a      	mov	r2, r9
 8002978:	42a3      	cmp	r3, r4
 800297a:	419b      	sbcs	r3, r3
 800297c:	1bd7      	subs	r7, r2, r7
 800297e:	425b      	negs	r3, r3
 8002980:	1afb      	subs	r3, r7, r3
 8002982:	469a      	mov	sl, r3
 8002984:	2601      	movs	r6, #1
 8002986:	e585      	b.n	8002494 <__aeabi_dsub+0xb4>
 8002988:	08c0      	lsrs	r0, r0, #3
 800298a:	077b      	lsls	r3, r7, #29
 800298c:	465d      	mov	r5, fp
 800298e:	4303      	orrs	r3, r0
 8002990:	08fa      	lsrs	r2, r7, #3
 8002992:	e6e7      	b.n	8002764 <__aeabi_dsub+0x384>
 8002994:	464a      	mov	r2, r9
 8002996:	08db      	lsrs	r3, r3, #3
 8002998:	0752      	lsls	r2, r2, #29
 800299a:	4313      	orrs	r3, r2
 800299c:	464a      	mov	r2, r9
 800299e:	08d2      	lsrs	r2, r2, #3
 80029a0:	e6b5      	b.n	800270e <__aeabi_dsub+0x32e>
 80029a2:	08c0      	lsrs	r0, r0, #3
 80029a4:	077b      	lsls	r3, r7, #29
 80029a6:	4303      	orrs	r3, r0
 80029a8:	08fa      	lsrs	r2, r7, #3
 80029aa:	e6db      	b.n	8002764 <__aeabi_dsub+0x384>
 80029ac:	4649      	mov	r1, r9
 80029ae:	4319      	orrs	r1, r3
 80029b0:	000b      	movs	r3, r1
 80029b2:	1e59      	subs	r1, r3, #1
 80029b4:	418b      	sbcs	r3, r1
 80029b6:	001c      	movs	r4, r3
 80029b8:	e653      	b.n	8002662 <__aeabi_dsub+0x282>
 80029ba:	464d      	mov	r5, r9
 80029bc:	3c20      	subs	r4, #32
 80029be:	40e5      	lsrs	r5, r4
 80029c0:	2920      	cmp	r1, #32
 80029c2:	d005      	beq.n	80029d0 <__aeabi_dsub+0x5f0>
 80029c4:	2440      	movs	r4, #64	; 0x40
 80029c6:	1a64      	subs	r4, r4, r1
 80029c8:	4649      	mov	r1, r9
 80029ca:	40a1      	lsls	r1, r4
 80029cc:	430b      	orrs	r3, r1
 80029ce:	4698      	mov	r8, r3
 80029d0:	4643      	mov	r3, r8
 80029d2:	1e5c      	subs	r4, r3, #1
 80029d4:	41a3      	sbcs	r3, r4
 80029d6:	432b      	orrs	r3, r5
 80029d8:	e776      	b.n	80028c8 <__aeabi_dsub+0x4e8>
 80029da:	2a00      	cmp	r2, #0
 80029dc:	d0e1      	beq.n	80029a2 <__aeabi_dsub+0x5c2>
 80029de:	003a      	movs	r2, r7
 80029e0:	08db      	lsrs	r3, r3, #3
 80029e2:	4302      	orrs	r2, r0
 80029e4:	d100      	bne.n	80029e8 <__aeabi_dsub+0x608>
 80029e6:	e6b8      	b.n	800275a <__aeabi_dsub+0x37a>
 80029e8:	464a      	mov	r2, r9
 80029ea:	0752      	lsls	r2, r2, #29
 80029ec:	2480      	movs	r4, #128	; 0x80
 80029ee:	4313      	orrs	r3, r2
 80029f0:	464a      	mov	r2, r9
 80029f2:	0324      	lsls	r4, r4, #12
 80029f4:	08d2      	lsrs	r2, r2, #3
 80029f6:	4222      	tst	r2, r4
 80029f8:	d007      	beq.n	8002a0a <__aeabi_dsub+0x62a>
 80029fa:	08fe      	lsrs	r6, r7, #3
 80029fc:	4226      	tst	r6, r4
 80029fe:	d104      	bne.n	8002a0a <__aeabi_dsub+0x62a>
 8002a00:	465d      	mov	r5, fp
 8002a02:	0032      	movs	r2, r6
 8002a04:	08c3      	lsrs	r3, r0, #3
 8002a06:	077f      	lsls	r7, r7, #29
 8002a08:	433b      	orrs	r3, r7
 8002a0a:	0f59      	lsrs	r1, r3, #29
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	0749      	lsls	r1, r1, #29
 8002a10:	08db      	lsrs	r3, r3, #3
 8002a12:	430b      	orrs	r3, r1
 8002a14:	e6a6      	b.n	8002764 <__aeabi_dsub+0x384>
 8002a16:	1ac4      	subs	r4, r0, r3
 8002a18:	42a0      	cmp	r0, r4
 8002a1a:	4180      	sbcs	r0, r0
 8002a1c:	464b      	mov	r3, r9
 8002a1e:	4240      	negs	r0, r0
 8002a20:	1aff      	subs	r7, r7, r3
 8002a22:	1a3b      	subs	r3, r7, r0
 8002a24:	469a      	mov	sl, r3
 8002a26:	465d      	mov	r5, fp
 8002a28:	2601      	movs	r6, #1
 8002a2a:	e533      	b.n	8002494 <__aeabi_dsub+0xb4>
 8002a2c:	003b      	movs	r3, r7
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	d100      	bne.n	8002a34 <__aeabi_dsub+0x654>
 8002a32:	e715      	b.n	8002860 <__aeabi_dsub+0x480>
 8002a34:	08c0      	lsrs	r0, r0, #3
 8002a36:	077b      	lsls	r3, r7, #29
 8002a38:	465d      	mov	r5, fp
 8002a3a:	4303      	orrs	r3, r0
 8002a3c:	08fa      	lsrs	r2, r7, #3
 8002a3e:	e666      	b.n	800270e <__aeabi_dsub+0x32e>
 8002a40:	08c0      	lsrs	r0, r0, #3
 8002a42:	077b      	lsls	r3, r7, #29
 8002a44:	4303      	orrs	r3, r0
 8002a46:	08fa      	lsrs	r2, r7, #3
 8002a48:	e65e      	b.n	8002708 <__aeabi_dsub+0x328>
 8002a4a:	003a      	movs	r2, r7
 8002a4c:	08db      	lsrs	r3, r3, #3
 8002a4e:	4302      	orrs	r2, r0
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dsub+0x674>
 8002a52:	e682      	b.n	800275a <__aeabi_dsub+0x37a>
 8002a54:	464a      	mov	r2, r9
 8002a56:	0752      	lsls	r2, r2, #29
 8002a58:	2480      	movs	r4, #128	; 0x80
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	464a      	mov	r2, r9
 8002a5e:	0324      	lsls	r4, r4, #12
 8002a60:	08d2      	lsrs	r2, r2, #3
 8002a62:	4222      	tst	r2, r4
 8002a64:	d007      	beq.n	8002a76 <__aeabi_dsub+0x696>
 8002a66:	08fe      	lsrs	r6, r7, #3
 8002a68:	4226      	tst	r6, r4
 8002a6a:	d104      	bne.n	8002a76 <__aeabi_dsub+0x696>
 8002a6c:	465d      	mov	r5, fp
 8002a6e:	0032      	movs	r2, r6
 8002a70:	08c3      	lsrs	r3, r0, #3
 8002a72:	077f      	lsls	r7, r7, #29
 8002a74:	433b      	orrs	r3, r7
 8002a76:	0f59      	lsrs	r1, r3, #29
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	08db      	lsrs	r3, r3, #3
 8002a7c:	0749      	lsls	r1, r1, #29
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	e670      	b.n	8002764 <__aeabi_dsub+0x384>
 8002a82:	08c0      	lsrs	r0, r0, #3
 8002a84:	077b      	lsls	r3, r7, #29
 8002a86:	4303      	orrs	r3, r0
 8002a88:	08fa      	lsrs	r2, r7, #3
 8002a8a:	e640      	b.n	800270e <__aeabi_dsub+0x32e>
 8002a8c:	464c      	mov	r4, r9
 8002a8e:	3920      	subs	r1, #32
 8002a90:	40cc      	lsrs	r4, r1
 8002a92:	4661      	mov	r1, ip
 8002a94:	2920      	cmp	r1, #32
 8002a96:	d006      	beq.n	8002aa6 <__aeabi_dsub+0x6c6>
 8002a98:	4666      	mov	r6, ip
 8002a9a:	2140      	movs	r1, #64	; 0x40
 8002a9c:	1b89      	subs	r1, r1, r6
 8002a9e:	464e      	mov	r6, r9
 8002aa0:	408e      	lsls	r6, r1
 8002aa2:	4333      	orrs	r3, r6
 8002aa4:	4698      	mov	r8, r3
 8002aa6:	4643      	mov	r3, r8
 8002aa8:	1e59      	subs	r1, r3, #1
 8002aaa:	418b      	sbcs	r3, r1
 8002aac:	431c      	orrs	r4, r3
 8002aae:	e5d8      	b.n	8002662 <__aeabi_dsub+0x282>
 8002ab0:	181c      	adds	r4, r3, r0
 8002ab2:	4284      	cmp	r4, r0
 8002ab4:	4180      	sbcs	r0, r0
 8002ab6:	444f      	add	r7, r9
 8002ab8:	46ba      	mov	sl, r7
 8002aba:	4240      	negs	r0, r0
 8002abc:	4482      	add	sl, r0
 8002abe:	e6d9      	b.n	8002874 <__aeabi_dsub+0x494>
 8002ac0:	4653      	mov	r3, sl
 8002ac2:	4323      	orrs	r3, r4
 8002ac4:	d100      	bne.n	8002ac8 <__aeabi_dsub+0x6e8>
 8002ac6:	e6cb      	b.n	8002860 <__aeabi_dsub+0x480>
 8002ac8:	e614      	b.n	80026f4 <__aeabi_dsub+0x314>
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	000007ff 	.word	0x000007ff
 8002ad0:	ff7fffff 	.word	0xff7fffff
 8002ad4:	000007fe 	.word	0x000007fe
 8002ad8:	2300      	movs	r3, #0
 8002ada:	4a01      	ldr	r2, [pc, #4]	; (8002ae0 <__aeabi_dsub+0x700>)
 8002adc:	001c      	movs	r4, r3
 8002ade:	e529      	b.n	8002534 <__aeabi_dsub+0x154>
 8002ae0:	000007ff 	.word	0x000007ff

08002ae4 <__aeabi_dcmpun>:
 8002ae4:	b570      	push	{r4, r5, r6, lr}
 8002ae6:	0005      	movs	r5, r0
 8002ae8:	480c      	ldr	r0, [pc, #48]	; (8002b1c <__aeabi_dcmpun+0x38>)
 8002aea:	031c      	lsls	r4, r3, #12
 8002aec:	0016      	movs	r6, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	030a      	lsls	r2, r1, #12
 8002af2:	0049      	lsls	r1, r1, #1
 8002af4:	0b12      	lsrs	r2, r2, #12
 8002af6:	0d49      	lsrs	r1, r1, #21
 8002af8:	0b24      	lsrs	r4, r4, #12
 8002afa:	0d5b      	lsrs	r3, r3, #21
 8002afc:	4281      	cmp	r1, r0
 8002afe:	d008      	beq.n	8002b12 <__aeabi_dcmpun+0x2e>
 8002b00:	4a06      	ldr	r2, [pc, #24]	; (8002b1c <__aeabi_dcmpun+0x38>)
 8002b02:	2000      	movs	r0, #0
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d103      	bne.n	8002b10 <__aeabi_dcmpun+0x2c>
 8002b08:	0020      	movs	r0, r4
 8002b0a:	4330      	orrs	r0, r6
 8002b0c:	1e43      	subs	r3, r0, #1
 8002b0e:	4198      	sbcs	r0, r3
 8002b10:	bd70      	pop	{r4, r5, r6, pc}
 8002b12:	2001      	movs	r0, #1
 8002b14:	432a      	orrs	r2, r5
 8002b16:	d1fb      	bne.n	8002b10 <__aeabi_dcmpun+0x2c>
 8002b18:	e7f2      	b.n	8002b00 <__aeabi_dcmpun+0x1c>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	000007ff 	.word	0x000007ff

08002b20 <__aeabi_d2iz>:
 8002b20:	000a      	movs	r2, r1
 8002b22:	b530      	push	{r4, r5, lr}
 8002b24:	4c13      	ldr	r4, [pc, #76]	; (8002b74 <__aeabi_d2iz+0x54>)
 8002b26:	0053      	lsls	r3, r2, #1
 8002b28:	0309      	lsls	r1, r1, #12
 8002b2a:	0005      	movs	r5, r0
 8002b2c:	0b09      	lsrs	r1, r1, #12
 8002b2e:	2000      	movs	r0, #0
 8002b30:	0d5b      	lsrs	r3, r3, #21
 8002b32:	0fd2      	lsrs	r2, r2, #31
 8002b34:	42a3      	cmp	r3, r4
 8002b36:	dd04      	ble.n	8002b42 <__aeabi_d2iz+0x22>
 8002b38:	480f      	ldr	r0, [pc, #60]	; (8002b78 <__aeabi_d2iz+0x58>)
 8002b3a:	4283      	cmp	r3, r0
 8002b3c:	dd02      	ble.n	8002b44 <__aeabi_d2iz+0x24>
 8002b3e:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <__aeabi_d2iz+0x5c>)
 8002b40:	18d0      	adds	r0, r2, r3
 8002b42:	bd30      	pop	{r4, r5, pc}
 8002b44:	2080      	movs	r0, #128	; 0x80
 8002b46:	0340      	lsls	r0, r0, #13
 8002b48:	4301      	orrs	r1, r0
 8002b4a:	480d      	ldr	r0, [pc, #52]	; (8002b80 <__aeabi_d2iz+0x60>)
 8002b4c:	1ac0      	subs	r0, r0, r3
 8002b4e:	281f      	cmp	r0, #31
 8002b50:	dd08      	ble.n	8002b64 <__aeabi_d2iz+0x44>
 8002b52:	480c      	ldr	r0, [pc, #48]	; (8002b84 <__aeabi_d2iz+0x64>)
 8002b54:	1ac3      	subs	r3, r0, r3
 8002b56:	40d9      	lsrs	r1, r3
 8002b58:	000b      	movs	r3, r1
 8002b5a:	4258      	negs	r0, r3
 8002b5c:	2a00      	cmp	r2, #0
 8002b5e:	d1f0      	bne.n	8002b42 <__aeabi_d2iz+0x22>
 8002b60:	0018      	movs	r0, r3
 8002b62:	e7ee      	b.n	8002b42 <__aeabi_d2iz+0x22>
 8002b64:	4c08      	ldr	r4, [pc, #32]	; (8002b88 <__aeabi_d2iz+0x68>)
 8002b66:	40c5      	lsrs	r5, r0
 8002b68:	46a4      	mov	ip, r4
 8002b6a:	4463      	add	r3, ip
 8002b6c:	4099      	lsls	r1, r3
 8002b6e:	000b      	movs	r3, r1
 8002b70:	432b      	orrs	r3, r5
 8002b72:	e7f2      	b.n	8002b5a <__aeabi_d2iz+0x3a>
 8002b74:	000003fe 	.word	0x000003fe
 8002b78:	0000041d 	.word	0x0000041d
 8002b7c:	7fffffff 	.word	0x7fffffff
 8002b80:	00000433 	.word	0x00000433
 8002b84:	00000413 	.word	0x00000413
 8002b88:	fffffbed 	.word	0xfffffbed

08002b8c <__aeabi_i2d>:
 8002b8c:	b570      	push	{r4, r5, r6, lr}
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	d016      	beq.n	8002bc0 <__aeabi_i2d+0x34>
 8002b92:	17c3      	asrs	r3, r0, #31
 8002b94:	18c5      	adds	r5, r0, r3
 8002b96:	405d      	eors	r5, r3
 8002b98:	0fc4      	lsrs	r4, r0, #31
 8002b9a:	0028      	movs	r0, r5
 8002b9c:	f000 f91a 	bl	8002dd4 <__clzsi2>
 8002ba0:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <__aeabi_i2d+0x5c>)
 8002ba2:	1a1b      	subs	r3, r3, r0
 8002ba4:	280a      	cmp	r0, #10
 8002ba6:	dc16      	bgt.n	8002bd6 <__aeabi_i2d+0x4a>
 8002ba8:	0002      	movs	r2, r0
 8002baa:	002e      	movs	r6, r5
 8002bac:	3215      	adds	r2, #21
 8002bae:	4096      	lsls	r6, r2
 8002bb0:	220b      	movs	r2, #11
 8002bb2:	1a12      	subs	r2, r2, r0
 8002bb4:	40d5      	lsrs	r5, r2
 8002bb6:	055b      	lsls	r3, r3, #21
 8002bb8:	032d      	lsls	r5, r5, #12
 8002bba:	0b2d      	lsrs	r5, r5, #12
 8002bbc:	0d5b      	lsrs	r3, r3, #21
 8002bbe:	e003      	b.n	8002bc8 <__aeabi_i2d+0x3c>
 8002bc0:	2400      	movs	r4, #0
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	2500      	movs	r5, #0
 8002bc6:	2600      	movs	r6, #0
 8002bc8:	051b      	lsls	r3, r3, #20
 8002bca:	432b      	orrs	r3, r5
 8002bcc:	07e4      	lsls	r4, r4, #31
 8002bce:	4323      	orrs	r3, r4
 8002bd0:	0030      	movs	r0, r6
 8002bd2:	0019      	movs	r1, r3
 8002bd4:	bd70      	pop	{r4, r5, r6, pc}
 8002bd6:	380b      	subs	r0, #11
 8002bd8:	4085      	lsls	r5, r0
 8002bda:	055b      	lsls	r3, r3, #21
 8002bdc:	032d      	lsls	r5, r5, #12
 8002bde:	2600      	movs	r6, #0
 8002be0:	0b2d      	lsrs	r5, r5, #12
 8002be2:	0d5b      	lsrs	r3, r3, #21
 8002be4:	e7f0      	b.n	8002bc8 <__aeabi_i2d+0x3c>
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	0000041e 	.word	0x0000041e

08002bec <__aeabi_ui2d>:
 8002bec:	b510      	push	{r4, lr}
 8002bee:	1e04      	subs	r4, r0, #0
 8002bf0:	d010      	beq.n	8002c14 <__aeabi_ui2d+0x28>
 8002bf2:	f000 f8ef 	bl	8002dd4 <__clzsi2>
 8002bf6:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <__aeabi_ui2d+0x48>)
 8002bf8:	1a1b      	subs	r3, r3, r0
 8002bfa:	280a      	cmp	r0, #10
 8002bfc:	dc11      	bgt.n	8002c22 <__aeabi_ui2d+0x36>
 8002bfe:	220b      	movs	r2, #11
 8002c00:	0021      	movs	r1, r4
 8002c02:	1a12      	subs	r2, r2, r0
 8002c04:	40d1      	lsrs	r1, r2
 8002c06:	3015      	adds	r0, #21
 8002c08:	030a      	lsls	r2, r1, #12
 8002c0a:	055b      	lsls	r3, r3, #21
 8002c0c:	4084      	lsls	r4, r0
 8002c0e:	0b12      	lsrs	r2, r2, #12
 8002c10:	0d5b      	lsrs	r3, r3, #21
 8002c12:	e001      	b.n	8002c18 <__aeabi_ui2d+0x2c>
 8002c14:	2300      	movs	r3, #0
 8002c16:	2200      	movs	r2, #0
 8002c18:	051b      	lsls	r3, r3, #20
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	0020      	movs	r0, r4
 8002c1e:	0019      	movs	r1, r3
 8002c20:	bd10      	pop	{r4, pc}
 8002c22:	0022      	movs	r2, r4
 8002c24:	380b      	subs	r0, #11
 8002c26:	4082      	lsls	r2, r0
 8002c28:	055b      	lsls	r3, r3, #21
 8002c2a:	0312      	lsls	r2, r2, #12
 8002c2c:	2400      	movs	r4, #0
 8002c2e:	0b12      	lsrs	r2, r2, #12
 8002c30:	0d5b      	lsrs	r3, r3, #21
 8002c32:	e7f1      	b.n	8002c18 <__aeabi_ui2d+0x2c>
 8002c34:	0000041e 	.word	0x0000041e

08002c38 <__aeabi_f2d>:
 8002c38:	b570      	push	{r4, r5, r6, lr}
 8002c3a:	0242      	lsls	r2, r0, #9
 8002c3c:	0043      	lsls	r3, r0, #1
 8002c3e:	0fc4      	lsrs	r4, r0, #31
 8002c40:	20fe      	movs	r0, #254	; 0xfe
 8002c42:	0e1b      	lsrs	r3, r3, #24
 8002c44:	1c59      	adds	r1, r3, #1
 8002c46:	0a55      	lsrs	r5, r2, #9
 8002c48:	4208      	tst	r0, r1
 8002c4a:	d00c      	beq.n	8002c66 <__aeabi_f2d+0x2e>
 8002c4c:	21e0      	movs	r1, #224	; 0xe0
 8002c4e:	0089      	lsls	r1, r1, #2
 8002c50:	468c      	mov	ip, r1
 8002c52:	076d      	lsls	r5, r5, #29
 8002c54:	0b12      	lsrs	r2, r2, #12
 8002c56:	4463      	add	r3, ip
 8002c58:	051b      	lsls	r3, r3, #20
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	07e4      	lsls	r4, r4, #31
 8002c5e:	4323      	orrs	r3, r4
 8002c60:	0028      	movs	r0, r5
 8002c62:	0019      	movs	r1, r3
 8002c64:	bd70      	pop	{r4, r5, r6, pc}
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d114      	bne.n	8002c94 <__aeabi_f2d+0x5c>
 8002c6a:	2d00      	cmp	r5, #0
 8002c6c:	d01b      	beq.n	8002ca6 <__aeabi_f2d+0x6e>
 8002c6e:	0028      	movs	r0, r5
 8002c70:	f000 f8b0 	bl	8002dd4 <__clzsi2>
 8002c74:	280a      	cmp	r0, #10
 8002c76:	dc1c      	bgt.n	8002cb2 <__aeabi_f2d+0x7a>
 8002c78:	230b      	movs	r3, #11
 8002c7a:	002a      	movs	r2, r5
 8002c7c:	1a1b      	subs	r3, r3, r0
 8002c7e:	40da      	lsrs	r2, r3
 8002c80:	0003      	movs	r3, r0
 8002c82:	3315      	adds	r3, #21
 8002c84:	409d      	lsls	r5, r3
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <__aeabi_f2d+0x88>)
 8002c88:	0312      	lsls	r2, r2, #12
 8002c8a:	1a1b      	subs	r3, r3, r0
 8002c8c:	055b      	lsls	r3, r3, #21
 8002c8e:	0b12      	lsrs	r2, r2, #12
 8002c90:	0d5b      	lsrs	r3, r3, #21
 8002c92:	e7e1      	b.n	8002c58 <__aeabi_f2d+0x20>
 8002c94:	2d00      	cmp	r5, #0
 8002c96:	d009      	beq.n	8002cac <__aeabi_f2d+0x74>
 8002c98:	0b13      	lsrs	r3, r2, #12
 8002c9a:	2280      	movs	r2, #128	; 0x80
 8002c9c:	0312      	lsls	r2, r2, #12
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	076d      	lsls	r5, r5, #29
 8002ca2:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <__aeabi_f2d+0x8c>)
 8002ca4:	e7d8      	b.n	8002c58 <__aeabi_f2d+0x20>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2200      	movs	r2, #0
 8002caa:	e7d5      	b.n	8002c58 <__aeabi_f2d+0x20>
 8002cac:	2200      	movs	r2, #0
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <__aeabi_f2d+0x8c>)
 8002cb0:	e7d2      	b.n	8002c58 <__aeabi_f2d+0x20>
 8002cb2:	0003      	movs	r3, r0
 8002cb4:	002a      	movs	r2, r5
 8002cb6:	3b0b      	subs	r3, #11
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	2500      	movs	r5, #0
 8002cbc:	e7e3      	b.n	8002c86 <__aeabi_f2d+0x4e>
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	00000389 	.word	0x00000389
 8002cc4:	000007ff 	.word	0x000007ff

08002cc8 <__aeabi_d2f>:
 8002cc8:	0002      	movs	r2, r0
 8002cca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ccc:	004b      	lsls	r3, r1, #1
 8002cce:	030d      	lsls	r5, r1, #12
 8002cd0:	0f40      	lsrs	r0, r0, #29
 8002cd2:	0d5b      	lsrs	r3, r3, #21
 8002cd4:	0fcc      	lsrs	r4, r1, #31
 8002cd6:	0a6d      	lsrs	r5, r5, #9
 8002cd8:	493a      	ldr	r1, [pc, #232]	; (8002dc4 <__aeabi_d2f+0xfc>)
 8002cda:	4305      	orrs	r5, r0
 8002cdc:	1c58      	adds	r0, r3, #1
 8002cde:	00d7      	lsls	r7, r2, #3
 8002ce0:	4208      	tst	r0, r1
 8002ce2:	d00a      	beq.n	8002cfa <__aeabi_d2f+0x32>
 8002ce4:	4938      	ldr	r1, [pc, #224]	; (8002dc8 <__aeabi_d2f+0x100>)
 8002ce6:	1859      	adds	r1, r3, r1
 8002ce8:	29fe      	cmp	r1, #254	; 0xfe
 8002cea:	dd16      	ble.n	8002d1a <__aeabi_d2f+0x52>
 8002cec:	20ff      	movs	r0, #255	; 0xff
 8002cee:	2200      	movs	r2, #0
 8002cf0:	05c0      	lsls	r0, r0, #23
 8002cf2:	4310      	orrs	r0, r2
 8002cf4:	07e4      	lsls	r4, r4, #31
 8002cf6:	4320      	orrs	r0, r4
 8002cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <__aeabi_d2f+0x44>
 8002cfe:	433d      	orrs	r5, r7
 8002d00:	d026      	beq.n	8002d50 <__aeabi_d2f+0x88>
 8002d02:	2205      	movs	r2, #5
 8002d04:	0192      	lsls	r2, r2, #6
 8002d06:	0a52      	lsrs	r2, r2, #9
 8002d08:	b2d8      	uxtb	r0, r3
 8002d0a:	e7f1      	b.n	8002cf0 <__aeabi_d2f+0x28>
 8002d0c:	432f      	orrs	r7, r5
 8002d0e:	d0ed      	beq.n	8002cec <__aeabi_d2f+0x24>
 8002d10:	2280      	movs	r2, #128	; 0x80
 8002d12:	03d2      	lsls	r2, r2, #15
 8002d14:	20ff      	movs	r0, #255	; 0xff
 8002d16:	432a      	orrs	r2, r5
 8002d18:	e7ea      	b.n	8002cf0 <__aeabi_d2f+0x28>
 8002d1a:	2900      	cmp	r1, #0
 8002d1c:	dd1b      	ble.n	8002d56 <__aeabi_d2f+0x8e>
 8002d1e:	0192      	lsls	r2, r2, #6
 8002d20:	1e50      	subs	r0, r2, #1
 8002d22:	4182      	sbcs	r2, r0
 8002d24:	00ed      	lsls	r5, r5, #3
 8002d26:	0f7f      	lsrs	r7, r7, #29
 8002d28:	432a      	orrs	r2, r5
 8002d2a:	433a      	orrs	r2, r7
 8002d2c:	0753      	lsls	r3, r2, #29
 8002d2e:	d047      	beq.n	8002dc0 <__aeabi_d2f+0xf8>
 8002d30:	230f      	movs	r3, #15
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d000      	beq.n	8002d3a <__aeabi_d2f+0x72>
 8002d38:	3204      	adds	r2, #4
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	04db      	lsls	r3, r3, #19
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d03e      	beq.n	8002dc0 <__aeabi_d2f+0xf8>
 8002d42:	1c48      	adds	r0, r1, #1
 8002d44:	29fe      	cmp	r1, #254	; 0xfe
 8002d46:	d0d1      	beq.n	8002cec <__aeabi_d2f+0x24>
 8002d48:	0192      	lsls	r2, r2, #6
 8002d4a:	0a52      	lsrs	r2, r2, #9
 8002d4c:	b2c0      	uxtb	r0, r0
 8002d4e:	e7cf      	b.n	8002cf0 <__aeabi_d2f+0x28>
 8002d50:	2000      	movs	r0, #0
 8002d52:	2200      	movs	r2, #0
 8002d54:	e7cc      	b.n	8002cf0 <__aeabi_d2f+0x28>
 8002d56:	000a      	movs	r2, r1
 8002d58:	3217      	adds	r2, #23
 8002d5a:	db2f      	blt.n	8002dbc <__aeabi_d2f+0xf4>
 8002d5c:	2680      	movs	r6, #128	; 0x80
 8002d5e:	0436      	lsls	r6, r6, #16
 8002d60:	432e      	orrs	r6, r5
 8002d62:	251e      	movs	r5, #30
 8002d64:	1a6d      	subs	r5, r5, r1
 8002d66:	2d1f      	cmp	r5, #31
 8002d68:	dd11      	ble.n	8002d8e <__aeabi_d2f+0xc6>
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	4252      	negs	r2, r2
 8002d6e:	1a52      	subs	r2, r2, r1
 8002d70:	0031      	movs	r1, r6
 8002d72:	40d1      	lsrs	r1, r2
 8002d74:	2d20      	cmp	r5, #32
 8002d76:	d004      	beq.n	8002d82 <__aeabi_d2f+0xba>
 8002d78:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <__aeabi_d2f+0x104>)
 8002d7a:	4694      	mov	ip, r2
 8002d7c:	4463      	add	r3, ip
 8002d7e:	409e      	lsls	r6, r3
 8002d80:	4337      	orrs	r7, r6
 8002d82:	003a      	movs	r2, r7
 8002d84:	1e53      	subs	r3, r2, #1
 8002d86:	419a      	sbcs	r2, r3
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	e7ce      	b.n	8002d2c <__aeabi_d2f+0x64>
 8002d8e:	4a10      	ldr	r2, [pc, #64]	; (8002dd0 <__aeabi_d2f+0x108>)
 8002d90:	0038      	movs	r0, r7
 8002d92:	4694      	mov	ip, r2
 8002d94:	4463      	add	r3, ip
 8002d96:	4098      	lsls	r0, r3
 8002d98:	003a      	movs	r2, r7
 8002d9a:	1e41      	subs	r1, r0, #1
 8002d9c:	4188      	sbcs	r0, r1
 8002d9e:	409e      	lsls	r6, r3
 8002da0:	40ea      	lsrs	r2, r5
 8002da2:	4330      	orrs	r0, r6
 8002da4:	4302      	orrs	r2, r0
 8002da6:	2100      	movs	r1, #0
 8002da8:	0753      	lsls	r3, r2, #29
 8002daa:	d1c1      	bne.n	8002d30 <__aeabi_d2f+0x68>
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	0013      	movs	r3, r2
 8002db0:	04c9      	lsls	r1, r1, #19
 8002db2:	2001      	movs	r0, #1
 8002db4:	400b      	ands	r3, r1
 8002db6:	420a      	tst	r2, r1
 8002db8:	d1c6      	bne.n	8002d48 <__aeabi_d2f+0x80>
 8002dba:	e7a3      	b.n	8002d04 <__aeabi_d2f+0x3c>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	e7a0      	b.n	8002d02 <__aeabi_d2f+0x3a>
 8002dc0:	000b      	movs	r3, r1
 8002dc2:	e79f      	b.n	8002d04 <__aeabi_d2f+0x3c>
 8002dc4:	000007fe 	.word	0x000007fe
 8002dc8:	fffffc80 	.word	0xfffffc80
 8002dcc:	fffffca2 	.word	0xfffffca2
 8002dd0:	fffffc82 	.word	0xfffffc82

08002dd4 <__clzsi2>:
 8002dd4:	211c      	movs	r1, #28
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	041b      	lsls	r3, r3, #16
 8002dda:	4298      	cmp	r0, r3
 8002ddc:	d301      	bcc.n	8002de2 <__clzsi2+0xe>
 8002dde:	0c00      	lsrs	r0, r0, #16
 8002de0:	3910      	subs	r1, #16
 8002de2:	0a1b      	lsrs	r3, r3, #8
 8002de4:	4298      	cmp	r0, r3
 8002de6:	d301      	bcc.n	8002dec <__clzsi2+0x18>
 8002de8:	0a00      	lsrs	r0, r0, #8
 8002dea:	3908      	subs	r1, #8
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	4298      	cmp	r0, r3
 8002df0:	d301      	bcc.n	8002df6 <__clzsi2+0x22>
 8002df2:	0900      	lsrs	r0, r0, #4
 8002df4:	3904      	subs	r1, #4
 8002df6:	a202      	add	r2, pc, #8	; (adr r2, 8002e00 <__clzsi2+0x2c>)
 8002df8:	5c10      	ldrb	r0, [r2, r0]
 8002dfa:	1840      	adds	r0, r0, r1
 8002dfc:	4770      	bx	lr
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	02020304 	.word	0x02020304
 8002e04:	01010101 	.word	0x01010101
	...

08002e10 <__clzdi2>:
 8002e10:	b510      	push	{r4, lr}
 8002e12:	2900      	cmp	r1, #0
 8002e14:	d103      	bne.n	8002e1e <__clzdi2+0xe>
 8002e16:	f7ff ffdd 	bl	8002dd4 <__clzsi2>
 8002e1a:	3020      	adds	r0, #32
 8002e1c:	e002      	b.n	8002e24 <__clzdi2+0x14>
 8002e1e:	0008      	movs	r0, r1
 8002e20:	f7ff ffd8 	bl	8002dd4 <__clzsi2>
 8002e24:	bd10      	pop	{r4, pc}
 8002e26:	46c0      	nop			; (mov r8, r8)

08002e28 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <SELECT+0x1c>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2101      	movs	r1, #1
 8002e32:	0018      	movs	r0, r3
 8002e34:	f004 f88f 	bl	8006f56 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f003 f89b 	bl	8005f74 <HAL_Delay>
}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	50000400 	.word	0x50000400

08002e48 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <DESELECT+0x1c>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	2101      	movs	r1, #1
 8002e52:	0018      	movs	r0, r3
 8002e54:	f004 f87f 	bl	8006f56 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002e58:	2001      	movs	r0, #1
 8002e5a:	f003 f88b 	bl	8005f74 <HAL_Delay>
}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	50000400 	.word	0x50000400

08002e68 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	0002      	movs	r2, r0
 8002e70:	1dfb      	adds	r3, r7, #7
 8002e72:	701a      	strb	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002e74:	46c0      	nop			; (mov r8, r8)
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <SPI_TxByte+0x34>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d1f8      	bne.n	8002e76 <SPI_TxByte+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8002e84:	23fa      	movs	r3, #250	; 0xfa
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	1df9      	adds	r1, r7, #7
 8002e8a:	4804      	ldr	r0, [pc, #16]	; (8002e9c <SPI_TxByte+0x34>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f005 ff69 	bl	8008d64 <HAL_SPI_Transmit>
}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b002      	add	sp, #8
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	200002f4 	.word	0x200002f4

08002ea0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	000a      	movs	r2, r1
 8002eaa:	1cbb      	adds	r3, r7, #2
 8002eac:	801a      	strh	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <SPI_TxBuffer+0x38>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d1f8      	bne.n	8002eb0 <SPI_TxBuffer+0x10>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8002ebe:	23fa      	movs	r3, #250	; 0xfa
 8002ec0:	009c      	lsls	r4, r3, #2
 8002ec2:	1cbb      	adds	r3, r7, #2
 8002ec4:	881a      	ldrh	r2, [r3, #0]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4803      	ldr	r0, [pc, #12]	; (8002ed8 <SPI_TxBuffer+0x38>)
 8002eca:	0023      	movs	r3, r4
 8002ecc:	f005 ff4a 	bl	8008d64 <HAL_SPI_Transmit>
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b003      	add	sp, #12
 8002ed6:	bd90      	pop	{r4, r7, pc}
 8002ed8:	200002f4 	.word	0x200002f4

08002edc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8002ee2:	1dfb      	adds	r3, r7, #7
 8002ee4:	22ff      	movs	r2, #255	; 0xff
 8002ee6:	701a      	strb	r2, [r3, #0]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <SPI_RxByte+0x3c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d1f8      	bne.n	8002eea <SPI_RxByte+0xe>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002ef8:	1dba      	adds	r2, r7, #6
 8002efa:	1df9      	adds	r1, r7, #7
 8002efc:	4806      	ldr	r0, [pc, #24]	; (8002f18 <SPI_RxByte+0x3c>)
 8002efe:	23fa      	movs	r3, #250	; 0xfa
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	2301      	movs	r3, #1
 8002f06:	f006 f88a 	bl	800901e <HAL_SPI_TransmitReceive>

  return data;
 8002f0a:	1dbb      	adds	r3, r7, #6
 8002f0c:	781b      	ldrb	r3, [r3, #0]
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b002      	add	sp, #8
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	200002f4 	.word	0x200002f4

08002f1c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8002f24:	f7ff ffda 	bl	8002edc <SPI_RxByte>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	001a      	movs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	701a      	strb	r2, [r3, #0]
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <SD_ReadyWait+0x34>)
 8002f40:	22fa      	movs	r2, #250	; 0xfa
 8002f42:	0052      	lsls	r2, r2, #1
 8002f44:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8002f46:	1dfc      	adds	r4, r7, #7
 8002f48:	f7ff ffc8 	bl	8002edc <SPI_RxByte>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	7023      	strb	r3, [r4, #0]
  } while ((res != 0xFF) && Timer2);
 8002f50:	1dfb      	adds	r3, r7, #7
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2bff      	cmp	r3, #255	; 0xff
 8002f56:	d003      	beq.n	8002f60 <SD_ReadyWait+0x28>
 8002f58:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <SD_ReadyWait+0x34>)
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f2      	bne.n	8002f46 <SD_ReadyWait+0xe>

  return res;
 8002f60:	1dfb      	adds	r3, r7, #7
 8002f62:	781b      	ldrb	r3, [r3, #0]
}
 8002f64:	0018      	movs	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b003      	add	sp, #12
 8002f6a:	bd90      	pop	{r4, r7, pc}
 8002f6c:	2000023e 	.word	0x2000023e

08002f70 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8002f76:	4b20      	ldr	r3, [pc, #128]	; (8002ff8 <SD_PowerOn+0x88>)
 8002f78:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8002f7a:	f7ff ff65 	bl	8002e48 <DESELECT>
  for(int i = 0; i < 10; i++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	e005      	b.n	8002f90 <SD_PowerOn+0x20>
  {
    SPI_TxByte(0xFF);
 8002f84:	20ff      	movs	r0, #255	; 0xff
 8002f86:	f7ff ff6f 	bl	8002e68 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b09      	cmp	r3, #9
 8002f94:	ddf6      	ble.n	8002f84 <SD_PowerOn+0x14>
  }

  /* slave select */
  SELECT();
 8002f96:	f7ff ff47 	bl	8002e28 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8002f9a:	003b      	movs	r3, r7
 8002f9c:	2240      	movs	r2, #64	; 0x40
 8002f9e:	701a      	strb	r2, [r3, #0]
  args[1] = 0;
 8002fa0:	003b      	movs	r3, r7
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	705a      	strb	r2, [r3, #1]
  args[2] = 0;
 8002fa6:	003b      	movs	r3, r7
 8002fa8:	2200      	movs	r2, #0
 8002faa:	709a      	strb	r2, [r3, #2]
  args[3] = 0;
 8002fac:	003b      	movs	r3, r7
 8002fae:	2200      	movs	r2, #0
 8002fb0:	70da      	strb	r2, [r3, #3]
  args[4] = 0;
 8002fb2:	003b      	movs	r3, r7
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	711a      	strb	r2, [r3, #4]
  args[5] = 0x95;   /* CRC */
 8002fb8:	003b      	movs	r3, r7
 8002fba:	2295      	movs	r2, #149	; 0x95
 8002fbc:	715a      	strb	r2, [r3, #5]

  SPI_TxBuffer(args, sizeof(args));
 8002fbe:	003b      	movs	r3, r7
 8002fc0:	2106      	movs	r1, #6
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f7ff ff6c 	bl	8002ea0 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8002fc8:	e002      	b.n	8002fd0 <SD_PowerOn+0x60>
  {
    cnt--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8002fd0:	f7ff ff84 	bl	8002edc <SPI_RxByte>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d002      	beq.n	8002fe0 <SD_PowerOn+0x70>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f4      	bne.n	8002fca <SD_PowerOn+0x5a>
  }

  DESELECT();
 8002fe0:	f7ff ff32 	bl	8002e48 <DESELECT>
  SPI_TxByte(0XFF);
 8002fe4:	20ff      	movs	r0, #255	; 0xff
 8002fe6:	f7ff ff3f 	bl	8002e68 <SPI_TxByte>

  PowerFlag = 1;
 8002fea:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <SD_PowerOn+0x8c>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
}
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b004      	add	sp, #16
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	00001fff 	.word	0x00001fff
 8002ffc:	20000241 	.word	0x20000241

08003000 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8003004:	4b02      	ldr	r3, [pc, #8]	; (8003010 <SD_PowerOff+0x10>)
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20000241 	.word	0x20000241

08003014 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  return PowerFlag;
 8003018:	4b02      	ldr	r3, [pc, #8]	; (8003024 <SD_CheckPower+0x10>)
 800301a:	781b      	ldrb	r3, [r3, #0]
}
 800301c:	0018      	movs	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	20000241 	.word	0x20000241

08003028 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003028:	b5b0      	push	{r4, r5, r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8003032:	4b16      	ldr	r3, [pc, #88]	; (800308c <SD_RxDataBlock+0x64>)
 8003034:	22c8      	movs	r2, #200	; 0xc8
 8003036:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8003038:	250f      	movs	r5, #15
 800303a:	197c      	adds	r4, r7, r5
 800303c:	f7ff ff4e 	bl	8002edc <SPI_RxByte>
 8003040:	0003      	movs	r3, r0
 8003042:	7023      	strb	r3, [r4, #0]
  } while((token == 0xFF) && Timer1);
 8003044:	197b      	adds	r3, r7, r5
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2bff      	cmp	r3, #255	; 0xff
 800304a:	d103      	bne.n	8003054 <SD_RxDataBlock+0x2c>
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <SD_RxDataBlock+0x64>)
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f1      	bne.n	8003038 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8003054:	230f      	movs	r3, #15
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2bfe      	cmp	r3, #254	; 0xfe
 800305c:	d001      	beq.n	8003062 <SD_RxDataBlock+0x3a>
 800305e:	2300      	movs	r3, #0
 8003060:	e00f      	b.n	8003082 <SD_RxDataBlock+0x5a>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	0018      	movs	r0, r3
 800306a:	f7ff ff57 	bl	8002f1c <SPI_RxBytePtr>
  } while(len--);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	1e5a      	subs	r2, r3, #1
 8003072:	603a      	str	r2, [r7, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f4      	bne.n	8003062 <SD_RxDataBlock+0x3a>

  /* discard CRC */
  SPI_RxByte();
 8003078:	f7ff ff30 	bl	8002edc <SPI_RxByte>
  SPI_RxByte();
 800307c:	f7ff ff2e 	bl	8002edc <SPI_RxByte>

  return TRUE;
 8003080:	2301      	movs	r3, #1
}
 8003082:	0018      	movs	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	b004      	add	sp, #16
 8003088:	bdb0      	pop	{r4, r5, r7, pc}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	2000023c 	.word	0x2000023c

08003090 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8003090:	b5b0      	push	{r4, r5, r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	000a      	movs	r2, r1
 800309a:	1cfb      	adds	r3, r7, #3
 800309c:	701a      	strb	r2, [r3, #0]
  uint8_t resp;
  uint8_t i = 0;
 800309e:	230e      	movs	r3, #14
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	2200      	movs	r2, #0
 80030a4:	701a      	strb	r2, [r3, #0]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80030a6:	f7ff ff47 	bl	8002f38 <SD_ReadyWait>
 80030aa:	0003      	movs	r3, r0
 80030ac:	2bff      	cmp	r3, #255	; 0xff
 80030ae:	d001      	beq.n	80030b4 <SD_TxDataBlock+0x24>
 80030b0:	2300      	movs	r3, #0
 80030b2:	e03c      	b.n	800312e <SD_TxDataBlock+0x9e>

  /* transmit token */
  SPI_TxByte(token);
 80030b4:	1cfb      	adds	r3, r7, #3
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	0018      	movs	r0, r3
 80030ba:	f7ff fed5 	bl	8002e68 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80030be:	1cfb      	adds	r3, r7, #3
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2bfd      	cmp	r3, #253	; 0xfd
 80030c4:	d029      	beq.n	800311a <SD_TxDataBlock+0x8a>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	009a      	lsls	r2, r3, #2
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	0011      	movs	r1, r2
 80030ce:	0018      	movs	r0, r3
 80030d0:	f7ff fee6 	bl	8002ea0 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 80030d4:	f7ff ff02 	bl	8002edc <SPI_RxByte>
    SPI_RxByte();
 80030d8:	f7ff ff00 	bl	8002edc <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 80030dc:	e011      	b.n	8003102 <SD_TxDataBlock+0x72>
    {
      resp = SPI_RxByte();
 80030de:	250f      	movs	r5, #15
 80030e0:	197c      	adds	r4, r7, r5
 80030e2:	f7ff fefb 	bl	8002edc <SPI_RxByte>
 80030e6:	0003      	movs	r3, r0
 80030e8:	7023      	strb	r3, [r4, #0]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 80030ea:	197b      	adds	r3, r7, r5
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	221f      	movs	r2, #31
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b05      	cmp	r3, #5
 80030f4:	d00b      	beq.n	800310e <SD_TxDataBlock+0x7e>
      i++;
 80030f6:	210e      	movs	r1, #14
 80030f8:	187b      	adds	r3, r7, r1
 80030fa:	781a      	ldrb	r2, [r3, #0]
 80030fc:	187b      	adds	r3, r7, r1
 80030fe:	3201      	adds	r2, #1
 8003100:	701a      	strb	r2, [r3, #0]
    while (i <= 64)
 8003102:	230e      	movs	r3, #14
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b40      	cmp	r3, #64	; 0x40
 800310a:	d9e8      	bls.n	80030de <SD_TxDataBlock+0x4e>
 800310c:	e000      	b.n	8003110 <SD_TxDataBlock+0x80>
      if ((resp & 0x1F) == 0x05) break;
 800310e:	46c0      	nop			; (mov r8, r8)
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8003110:	46c0      	nop			; (mov r8, r8)
 8003112:	f7ff fee3 	bl	8002edc <SPI_RxByte>
 8003116:	1e03      	subs	r3, r0, #0
 8003118:	d0fb      	beq.n	8003112 <SD_TxDataBlock+0x82>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800311a:	230f      	movs	r3, #15
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	221f      	movs	r2, #31
 8003122:	4013      	ands	r3, r2
 8003124:	2b05      	cmp	r3, #5
 8003126:	d101      	bne.n	800312c <SD_TxDataBlock+0x9c>
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <SD_TxDataBlock+0x9e>

  return FALSE;
 800312c:	2300      	movs	r3, #0
}
 800312e:	0018      	movs	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	b004      	add	sp, #16
 8003134:	bdb0      	pop	{r4, r5, r7, pc}

08003136 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8003136:	b5b0      	push	{r4, r5, r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	0002      	movs	r2, r0
 800313e:	6039      	str	r1, [r7, #0]
 8003140:	1dfb      	adds	r3, r7, #7
 8003142:	701a      	strb	r2, [r3, #0]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003144:	f7ff fef8 	bl	8002f38 <SD_ReadyWait>
 8003148:	0003      	movs	r3, r0
 800314a:	2bff      	cmp	r3, #255	; 0xff
 800314c:	d001      	beq.n	8003152 <SD_SendCmd+0x1c>
 800314e:	23ff      	movs	r3, #255	; 0xff
 8003150:	e059      	b.n	8003206 <SD_SendCmd+0xd0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8003152:	1dfb      	adds	r3, r7, #7
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	0018      	movs	r0, r3
 8003158:	f7ff fe86 	bl	8002e68 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	0e1b      	lsrs	r3, r3, #24
 8003160:	b2db      	uxtb	r3, r3
 8003162:	0018      	movs	r0, r3
 8003164:	f7ff fe80 	bl	8002e68 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	0c1b      	lsrs	r3, r3, #16
 800316c:	b2db      	uxtb	r3, r3
 800316e:	0018      	movs	r0, r3
 8003170:	f7ff fe7a 	bl	8002e68 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	0a1b      	lsrs	r3, r3, #8
 8003178:	b2db      	uxtb	r3, r3
 800317a:	0018      	movs	r0, r3
 800317c:	f7ff fe74 	bl	8002e68 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	0018      	movs	r0, r3
 8003186:	f7ff fe6f 	bl	8002e68 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800318a:	1dfb      	adds	r3, r7, #7
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b40      	cmp	r3, #64	; 0x40
 8003190:	d104      	bne.n	800319c <SD_SendCmd+0x66>
 8003192:	230f      	movs	r3, #15
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	2295      	movs	r2, #149	; 0x95
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e00c      	b.n	80031b6 <SD_SendCmd+0x80>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800319c:	1dfb      	adds	r3, r7, #7
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b48      	cmp	r3, #72	; 0x48
 80031a2:	d104      	bne.n	80031ae <SD_SendCmd+0x78>
 80031a4:	230f      	movs	r3, #15
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	2287      	movs	r2, #135	; 0x87
 80031aa:	701a      	strb	r2, [r3, #0]
 80031ac:	e003      	b.n	80031b6 <SD_SendCmd+0x80>
  else crc = 1;
 80031ae:	230f      	movs	r3, #15
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]

  /* transmit CRC */
  SPI_TxByte(crc);
 80031b6:	230f      	movs	r3, #15
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	0018      	movs	r0, r3
 80031be:	f7ff fe53 	bl	8002e68 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80031c2:	1dfb      	adds	r3, r7, #7
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b4c      	cmp	r3, #76	; 0x4c
 80031c8:	d101      	bne.n	80031ce <SD_SendCmd+0x98>
 80031ca:	f7ff fe87 	bl	8002edc <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 80031ce:	230e      	movs	r3, #14
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	220a      	movs	r2, #10
 80031d4:	701a      	strb	r2, [r3, #0]
  do {
    res = SPI_RxByte();
 80031d6:	250d      	movs	r5, #13
 80031d8:	197c      	adds	r4, r7, r5
 80031da:	f7ff fe7f 	bl	8002edc <SPI_RxByte>
 80031de:	0003      	movs	r3, r0
 80031e0:	7023      	strb	r3, [r4, #0]
  } while ((res & 0x80) && --n);
 80031e2:	197b      	adds	r3, r7, r5
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	b25b      	sxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	da09      	bge.n	8003200 <SD_SendCmd+0xca>
 80031ec:	210e      	movs	r1, #14
 80031ee:	187b      	adds	r3, r7, r1
 80031f0:	187a      	adds	r2, r7, r1
 80031f2:	7812      	ldrb	r2, [r2, #0]
 80031f4:	3a01      	subs	r2, #1
 80031f6:	701a      	strb	r2, [r3, #0]
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1ea      	bne.n	80031d6 <SD_SendCmd+0xa0>

  return res;
 8003200:	230d      	movs	r3, #13
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	781b      	ldrb	r3, [r3, #0]
}
 8003206:	0018      	movs	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	b004      	add	sp, #16
 800320c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003210 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8003210:	b5b0      	push	{r4, r5, r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	0002      	movs	r2, r0
 8003218:	1dfb      	adds	r3, r7, #7
 800321a:	701a      	strb	r2, [r3, #0]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800321c:	1dfb      	adds	r3, r7, #7
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <SD_disk_initialize+0x18>
 8003224:	2301      	movs	r3, #1
 8003226:	e0f2      	b.n	800340e <SD_disk_initialize+0x1fe>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8003228:	4b7b      	ldr	r3, [pc, #492]	; (8003418 <SD_disk_initialize+0x208>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	001a      	movs	r2, r3
 8003230:	2302      	movs	r3, #2
 8003232:	4013      	ands	r3, r2
 8003234:	d003      	beq.n	800323e <SD_disk_initialize+0x2e>
 8003236:	4b78      	ldr	r3, [pc, #480]	; (8003418 <SD_disk_initialize+0x208>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	e0e7      	b.n	800340e <SD_disk_initialize+0x1fe>

  /* power on */
  SD_PowerOn();
 800323e:	f7ff fe97 	bl	8002f70 <SD_PowerOn>

  /* slave select */
  SELECT();
 8003242:	f7ff fdf1 	bl	8002e28 <SELECT>

  /* check disk type */
  type = 0;
 8003246:	230e      	movs	r3, #14
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	2200      	movs	r2, #0
 800324c:	701a      	strb	r2, [r3, #0]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800324e:	2100      	movs	r1, #0
 8003250:	2040      	movs	r0, #64	; 0x40
 8003252:	f7ff ff70 	bl	8003136 <SD_SendCmd>
 8003256:	0003      	movs	r3, r0
 8003258:	2b01      	cmp	r3, #1
 800325a:	d000      	beq.n	800325e <SD_disk_initialize+0x4e>
 800325c:	e0bc      	b.n	80033d8 <SD_disk_initialize+0x1c8>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800325e:	4b6f      	ldr	r3, [pc, #444]	; (800341c <SD_disk_initialize+0x20c>)
 8003260:	22fa      	movs	r2, #250	; 0xfa
 8003262:	0092      	lsls	r2, r2, #2
 8003264:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003266:	23d5      	movs	r3, #213	; 0xd5
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	0019      	movs	r1, r3
 800326c:	2048      	movs	r0, #72	; 0x48
 800326e:	f7ff ff62 	bl	8003136 <SD_SendCmd>
 8003272:	0003      	movs	r3, r0
 8003274:	2b01      	cmp	r3, #1
 8003276:	d000      	beq.n	800327a <SD_disk_initialize+0x6a>
 8003278:	e06b      	b.n	8003352 <SD_disk_initialize+0x142>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800327a:	230f      	movs	r3, #15
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e00e      	b.n	80032a2 <SD_disk_initialize+0x92>
      {
        ocr[n] = SPI_RxByte();
 8003284:	250f      	movs	r5, #15
 8003286:	197b      	adds	r3, r7, r5
 8003288:	781c      	ldrb	r4, [r3, #0]
 800328a:	f7ff fe27 	bl	8002edc <SPI_RxByte>
 800328e:	0003      	movs	r3, r0
 8003290:	001a      	movs	r2, r3
 8003292:	2308      	movs	r3, #8
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	551a      	strb	r2, [r3, r4]
      for (n = 0; n < 4; n++)
 8003298:	197b      	adds	r3, r7, r5
 800329a:	781a      	ldrb	r2, [r3, #0]
 800329c:	197b      	adds	r3, r7, r5
 800329e:	3201      	adds	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	230f      	movs	r3, #15
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d9eb      	bls.n	8003284 <SD_disk_initialize+0x74>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80032ac:	2208      	movs	r2, #8
 80032ae:	18bb      	adds	r3, r7, r2
 80032b0:	789b      	ldrb	r3, [r3, #2]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d000      	beq.n	80032b8 <SD_disk_initialize+0xa8>
 80032b6:	e08f      	b.n	80033d8 <SD_disk_initialize+0x1c8>
 80032b8:	18bb      	adds	r3, r7, r2
 80032ba:	78db      	ldrb	r3, [r3, #3]
 80032bc:	2baa      	cmp	r3, #170	; 0xaa
 80032be:	d000      	beq.n	80032c2 <SD_disk_initialize+0xb2>
 80032c0:	e08a      	b.n	80033d8 <SD_disk_initialize+0x1c8>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80032c2:	2100      	movs	r1, #0
 80032c4:	2077      	movs	r0, #119	; 0x77
 80032c6:	f7ff ff36 	bl	8003136 <SD_SendCmd>
 80032ca:	0003      	movs	r3, r0
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d807      	bhi.n	80032e0 <SD_disk_initialize+0xd0>
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	05db      	lsls	r3, r3, #23
 80032d4:	0019      	movs	r1, r3
 80032d6:	2069      	movs	r0, #105	; 0x69
 80032d8:	f7ff ff2d 	bl	8003136 <SD_SendCmd>
 80032dc:	1e03      	subs	r3, r0, #0
 80032de:	d004      	beq.n	80032ea <SD_disk_initialize+0xda>
        } while (Timer1);
 80032e0:	4b4e      	ldr	r3, [pc, #312]	; (800341c <SD_disk_initialize+0x20c>)
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1ec      	bne.n	80032c2 <SD_disk_initialize+0xb2>
 80032e8:	e000      	b.n	80032ec <SD_disk_initialize+0xdc>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80032ea:	46c0      	nop			; (mov r8, r8)

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80032ec:	4b4b      	ldr	r3, [pc, #300]	; (800341c <SD_disk_initialize+0x20c>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d100      	bne.n	80032f6 <SD_disk_initialize+0xe6>
 80032f4:	e070      	b.n	80033d8 <SD_disk_initialize+0x1c8>
 80032f6:	2100      	movs	r1, #0
 80032f8:	207a      	movs	r0, #122	; 0x7a
 80032fa:	f7ff ff1c 	bl	8003136 <SD_SendCmd>
 80032fe:	1e03      	subs	r3, r0, #0
 8003300:	d000      	beq.n	8003304 <SD_disk_initialize+0xf4>
 8003302:	e069      	b.n	80033d8 <SD_disk_initialize+0x1c8>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8003304:	230f      	movs	r3, #15
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	e00e      	b.n	800332c <SD_disk_initialize+0x11c>
          {
            ocr[n] = SPI_RxByte();
 800330e:	250f      	movs	r5, #15
 8003310:	197b      	adds	r3, r7, r5
 8003312:	781c      	ldrb	r4, [r3, #0]
 8003314:	f7ff fde2 	bl	8002edc <SPI_RxByte>
 8003318:	0003      	movs	r3, r0
 800331a:	001a      	movs	r2, r3
 800331c:	2308      	movs	r3, #8
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	551a      	strb	r2, [r3, r4]
          for (n = 0; n < 4; n++)
 8003322:	197b      	adds	r3, r7, r5
 8003324:	781a      	ldrb	r2, [r3, #0]
 8003326:	197b      	adds	r3, r7, r5
 8003328:	3201      	adds	r2, #1
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	230f      	movs	r3, #15
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b03      	cmp	r3, #3
 8003334:	d9eb      	bls.n	800330e <SD_disk_initialize+0xfe>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8003336:	2308      	movs	r3, #8
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	001a      	movs	r2, r3
 800333e:	2340      	movs	r3, #64	; 0x40
 8003340:	4013      	ands	r3, r2
 8003342:	d001      	beq.n	8003348 <SD_disk_initialize+0x138>
 8003344:	220c      	movs	r2, #12
 8003346:	e000      	b.n	800334a <SD_disk_initialize+0x13a>
 8003348:	2204      	movs	r2, #4
 800334a:	230e      	movs	r3, #14
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	e042      	b.n	80033d8 <SD_disk_initialize+0x1c8>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8003352:	2100      	movs	r1, #0
 8003354:	2077      	movs	r0, #119	; 0x77
 8003356:	f7ff feee 	bl	8003136 <SD_SendCmd>
 800335a:	0003      	movs	r3, r0
 800335c:	2b01      	cmp	r3, #1
 800335e:	d808      	bhi.n	8003372 <SD_disk_initialize+0x162>
 8003360:	2100      	movs	r1, #0
 8003362:	2069      	movs	r0, #105	; 0x69
 8003364:	f7ff fee7 	bl	8003136 <SD_SendCmd>
 8003368:	0003      	movs	r3, r0
 800336a:	2b01      	cmp	r3, #1
 800336c:	d801      	bhi.n	8003372 <SD_disk_initialize+0x162>
 800336e:	2202      	movs	r2, #2
 8003370:	e000      	b.n	8003374 <SD_disk_initialize+0x164>
 8003372:	2201      	movs	r2, #1
 8003374:	230e      	movs	r3, #14
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	701a      	strb	r2, [r3, #0]

      do
      {
        if (type == CT_SD1)
 800337a:	230e      	movs	r3, #14
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b02      	cmp	r3, #2
 8003382:	d10d      	bne.n	80033a0 <SD_disk_initialize+0x190>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003384:	2100      	movs	r1, #0
 8003386:	2077      	movs	r0, #119	; 0x77
 8003388:	f7ff fed5 	bl	8003136 <SD_SendCmd>
 800338c:	0003      	movs	r3, r0
 800338e:	2b01      	cmp	r3, #1
 8003390:	d80c      	bhi.n	80033ac <SD_disk_initialize+0x19c>
 8003392:	2100      	movs	r1, #0
 8003394:	2069      	movs	r0, #105	; 0x69
 8003396:	f7ff fece 	bl	8003136 <SD_SendCmd>
 800339a:	1e03      	subs	r3, r0, #0
 800339c:	d106      	bne.n	80033ac <SD_disk_initialize+0x19c>
 800339e:	e00b      	b.n	80033b8 <SD_disk_initialize+0x1a8>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80033a0:	2100      	movs	r1, #0
 80033a2:	2041      	movs	r0, #65	; 0x41
 80033a4:	f7ff fec7 	bl	8003136 <SD_SendCmd>
 80033a8:	1e03      	subs	r3, r0, #0
 80033aa:	d004      	beq.n	80033b6 <SD_disk_initialize+0x1a6>
        }

      } while (Timer1);
 80033ac:	4b1b      	ldr	r3, [pc, #108]	; (800341c <SD_disk_initialize+0x20c>)
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e2      	bne.n	800337a <SD_disk_initialize+0x16a>
 80033b4:	e000      	b.n	80033b8 <SD_disk_initialize+0x1a8>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80033b6:	46c0      	nop			; (mov r8, r8)

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80033b8:	4b18      	ldr	r3, [pc, #96]	; (800341c <SD_disk_initialize+0x20c>)
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d007      	beq.n	80033d0 <SD_disk_initialize+0x1c0>
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	0019      	movs	r1, r3
 80033c6:	2050      	movs	r0, #80	; 0x50
 80033c8:	f7ff feb5 	bl	8003136 <SD_SendCmd>
 80033cc:	1e03      	subs	r3, r0, #0
 80033ce:	d003      	beq.n	80033d8 <SD_disk_initialize+0x1c8>
 80033d0:	230e      	movs	r3, #14
 80033d2:	18fb      	adds	r3, r7, r3
 80033d4:	2200      	movs	r2, #0
 80033d6:	701a      	strb	r2, [r3, #0]
    }
  }

  CardType = type;
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <SD_disk_initialize+0x210>)
 80033da:	240e      	movs	r4, #14
 80033dc:	193a      	adds	r2, r7, r4
 80033de:	7812      	ldrb	r2, [r2, #0]
 80033e0:	701a      	strb	r2, [r3, #0]

  /* Idle */
  DESELECT();
 80033e2:	f7ff fd31 	bl	8002e48 <DESELECT>
  SPI_RxByte();
 80033e6:	f7ff fd79 	bl	8002edc <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80033ea:	193b      	adds	r3, r7, r4
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <SD_disk_initialize+0x1f4>
  {
    Stat &= ~STA_NOINIT;
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <SD_disk_initialize+0x208>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2201      	movs	r2, #1
 80033fa:	4393      	bics	r3, r2
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <SD_disk_initialize+0x208>)
 8003400:	701a      	strb	r2, [r3, #0]
 8003402:	e001      	b.n	8003408 <SD_disk_initialize+0x1f8>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8003404:	f7ff fdfc 	bl	8003000 <SD_PowerOff>
  }

  return Stat;
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <SD_disk_initialize+0x208>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	b2db      	uxtb	r3, r3
}
 800340e:	0018      	movs	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	b004      	add	sp, #16
 8003414:	bdb0      	pop	{r4, r5, r7, pc}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	20000000 	.word	0x20000000
 800341c:	2000023c 	.word	0x2000023c
 8003420:	20000240 	.word	0x20000240

08003424 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	0002      	movs	r2, r0
 800342c:	1dfb      	adds	r3, r7, #7
 800342e:	701a      	strb	r2, [r3, #0]
  if (drv) return STA_NOINIT;
 8003430:	1dfb      	adds	r3, r7, #7
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <SD_disk_status+0x18>
 8003438:	2301      	movs	r3, #1
 800343a:	e002      	b.n	8003442 <SD_disk_status+0x1e>
  return Stat;
 800343c:	4b03      	ldr	r3, [pc, #12]	; (800344c <SD_disk_status+0x28>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	b2db      	uxtb	r3, r3
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b002      	add	sp, #8
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	20000000 	.word	0x20000000

08003450 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	210f      	movs	r1, #15
 800345e:	187b      	adds	r3, r7, r1
 8003460:	1c02      	adds	r2, r0, #0
 8003462:	701a      	strb	r2, [r3, #0]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8003464:	187b      	adds	r3, r7, r1
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <SD_disk_read+0x22>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <SD_disk_read+0x26>
 8003472:	2304      	movs	r3, #4
 8003474:	e053      	b.n	800351e <SD_disk_read+0xce>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003476:	4b2c      	ldr	r3, [pc, #176]	; (8003528 <SD_disk_read+0xd8>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	001a      	movs	r2, r3
 800347e:	2301      	movs	r3, #1
 8003480:	4013      	ands	r3, r2
 8003482:	d001      	beq.n	8003488 <SD_disk_read+0x38>
 8003484:	2303      	movs	r3, #3
 8003486:	e04a      	b.n	800351e <SD_disk_read+0xce>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003488:	4b28      	ldr	r3, [pc, #160]	; (800352c <SD_disk_read+0xdc>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	001a      	movs	r2, r3
 800348e:	2304      	movs	r3, #4
 8003490:	4013      	ands	r3, r2
 8003492:	d102      	bne.n	800349a <SD_disk_read+0x4a>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	025b      	lsls	r3, r3, #9
 8003498:	607b      	str	r3, [r7, #4]

  SELECT();
 800349a:	f7ff fcc5 	bl	8002e28 <SELECT>

  if (count == 1)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d112      	bne.n	80034ca <SD_disk_read+0x7a>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	0019      	movs	r1, r3
 80034a8:	2051      	movs	r0, #81	; 0x51
 80034aa:	f7ff fe44 	bl	8003136 <SD_SendCmd>
 80034ae:	1e03      	subs	r3, r0, #0
 80034b0:	d12d      	bne.n	800350e <SD_disk_read+0xbe>
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	009a      	lsls	r2, r3, #2
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	0011      	movs	r1, r2
 80034ba:	0018      	movs	r0, r3
 80034bc:	f7ff fdb4 	bl	8003028 <SD_RxDataBlock>
 80034c0:	1e03      	subs	r3, r0, #0
 80034c2:	d024      	beq.n	800350e <SD_disk_read+0xbe>
 80034c4:	2300      	movs	r3, #0
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	e021      	b.n	800350e <SD_disk_read+0xbe>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	0019      	movs	r1, r3
 80034ce:	2052      	movs	r0, #82	; 0x52
 80034d0:	f7ff fe31 	bl	8003136 <SD_SendCmd>
 80034d4:	1e03      	subs	r3, r0, #0
 80034d6:	d11a      	bne.n	800350e <SD_disk_read+0xbe>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80034d8:	2380      	movs	r3, #128	; 0x80
 80034da:	009a      	lsls	r2, r3, #2
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	0011      	movs	r1, r2
 80034e0:	0018      	movs	r0, r3
 80034e2:	f7ff fda1 	bl	8003028 <SD_RxDataBlock>
 80034e6:	1e03      	subs	r3, r0, #0
 80034e8:	d00c      	beq.n	8003504 <SD_disk_read+0xb4>
        buff += 512;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2280      	movs	r2, #128	; 0x80
 80034ee:	0092      	lsls	r2, r2, #2
 80034f0:	4694      	mov	ip, r2
 80034f2:	4463      	add	r3, ip
 80034f4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1ea      	bne.n	80034d8 <SD_disk_read+0x88>
 8003502:	e000      	b.n	8003506 <SD_disk_read+0xb6>
        if (!SD_RxDataBlock(buff, 512)) break;
 8003504:	46c0      	nop			; (mov r8, r8)

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8003506:	2100      	movs	r1, #0
 8003508:	204c      	movs	r0, #76	; 0x4c
 800350a:	f7ff fe14 	bl	8003136 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 800350e:	f7ff fc9b 	bl	8002e48 <DESELECT>
  SPI_RxByte();
 8003512:	f7ff fce3 	bl	8002edc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	1e5a      	subs	r2, r3, #1
 800351a:	4193      	sbcs	r3, r2
 800351c:	b2db      	uxtb	r3, r3
}
 800351e:	0018      	movs	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	b004      	add	sp, #16
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	20000000 	.word	0x20000000
 800352c:	20000240 	.word	0x20000240

08003530 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	210f      	movs	r1, #15
 800353e:	187b      	adds	r3, r7, r1
 8003540:	1c02      	adds	r2, r0, #0
 8003542:	701a      	strb	r2, [r3, #0]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8003544:	187b      	adds	r3, r7, r1
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d102      	bne.n	8003552 <SD_disk_write+0x22>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <SD_disk_write+0x26>
 8003552:	2304      	movs	r3, #4
 8003554:	e06b      	b.n	800362e <SD_disk_write+0xfe>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003556:	4b38      	ldr	r3, [pc, #224]	; (8003638 <SD_disk_write+0x108>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	001a      	movs	r2, r3
 800355e:	2301      	movs	r3, #1
 8003560:	4013      	ands	r3, r2
 8003562:	d001      	beq.n	8003568 <SD_disk_write+0x38>
 8003564:	2303      	movs	r3, #3
 8003566:	e062      	b.n	800362e <SD_disk_write+0xfe>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8003568:	4b33      	ldr	r3, [pc, #204]	; (8003638 <SD_disk_write+0x108>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	001a      	movs	r2, r3
 8003570:	2304      	movs	r3, #4
 8003572:	4013      	ands	r3, r2
 8003574:	d001      	beq.n	800357a <SD_disk_write+0x4a>
 8003576:	2302      	movs	r3, #2
 8003578:	e059      	b.n	800362e <SD_disk_write+0xfe>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800357a:	4b30      	ldr	r3, [pc, #192]	; (800363c <SD_disk_write+0x10c>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	001a      	movs	r2, r3
 8003580:	2304      	movs	r3, #4
 8003582:	4013      	ands	r3, r2
 8003584:	d102      	bne.n	800358c <SD_disk_write+0x5c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	025b      	lsls	r3, r3, #9
 800358a:	607b      	str	r3, [r7, #4]

  SELECT();
 800358c:	f7ff fc4c 	bl	8002e28 <SELECT>

  if (count == 1)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d110      	bne.n	80035b8 <SD_disk_write+0x88>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	0019      	movs	r1, r3
 800359a:	2058      	movs	r0, #88	; 0x58
 800359c:	f7ff fdcb 	bl	8003136 <SD_SendCmd>
 80035a0:	1e03      	subs	r3, r0, #0
 80035a2:	d13c      	bne.n	800361e <SD_disk_write+0xee>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	21fe      	movs	r1, #254	; 0xfe
 80035a8:	0018      	movs	r0, r3
 80035aa:	f7ff fd71 	bl	8003090 <SD_TxDataBlock>
 80035ae:	1e03      	subs	r3, r0, #0
 80035b0:	d035      	beq.n	800361e <SD_disk_write+0xee>
      count = 0;
 80035b2:	2300      	movs	r3, #0
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	e032      	b.n	800361e <SD_disk_write+0xee>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80035b8:	4b20      	ldr	r3, [pc, #128]	; (800363c <SD_disk_write+0x10c>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	001a      	movs	r2, r3
 80035be:	2302      	movs	r3, #2
 80035c0:	4013      	ands	r3, r2
 80035c2:	d008      	beq.n	80035d6 <SD_disk_write+0xa6>
    {
      SD_SendCmd(CMD55, 0);
 80035c4:	2100      	movs	r1, #0
 80035c6:	2077      	movs	r0, #119	; 0x77
 80035c8:	f7ff fdb5 	bl	8003136 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	0019      	movs	r1, r3
 80035d0:	2057      	movs	r0, #87	; 0x57
 80035d2:	f7ff fdb0 	bl	8003136 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	0019      	movs	r1, r3
 80035da:	2059      	movs	r0, #89	; 0x59
 80035dc:	f7ff fdab 	bl	8003136 <SD_SendCmd>
 80035e0:	1e03      	subs	r3, r0, #0
 80035e2:	d11c      	bne.n	800361e <SD_disk_write+0xee>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	21fc      	movs	r1, #252	; 0xfc
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7ff fd51 	bl	8003090 <SD_TxDataBlock>
 80035ee:	1e03      	subs	r3, r0, #0
 80035f0:	d00c      	beq.n	800360c <SD_disk_write+0xdc>
        buff += 512;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	0092      	lsls	r2, r2, #2
 80035f8:	4694      	mov	ip, r2
 80035fa:	4463      	add	r3, ip
 80035fc:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	3b01      	subs	r3, #1
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1ec      	bne.n	80035e4 <SD_disk_write+0xb4>
 800360a:	e000      	b.n	800360e <SD_disk_write+0xde>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800360c:	46c0      	nop			; (mov r8, r8)

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800360e:	21fd      	movs	r1, #253	; 0xfd
 8003610:	2000      	movs	r0, #0
 8003612:	f7ff fd3d 	bl	8003090 <SD_TxDataBlock>
 8003616:	1e03      	subs	r3, r0, #0
 8003618:	d101      	bne.n	800361e <SD_disk_write+0xee>
      {
        count = 1;
 800361a:	2301      	movs	r3, #1
 800361c:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 800361e:	f7ff fc13 	bl	8002e48 <DESELECT>
  SPI_RxByte();
 8003622:	f7ff fc5b 	bl	8002edc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	1e5a      	subs	r2, r3, #1
 800362a:	4193      	sbcs	r3, r2
 800362c:	b2db      	uxtb	r3, r3
}
 800362e:	0018      	movs	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	b004      	add	sp, #16
 8003634:	bd80      	pop	{r7, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	20000000 	.word	0x20000000
 800363c:	20000240 	.word	0x20000240

08003640 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b08b      	sub	sp, #44	; 0x2c
 8003644:	af00      	add	r7, sp, #0
 8003646:	603a      	str	r2, [r7, #0]
 8003648:	1dfb      	adds	r3, r7, #7
 800364a:	1c02      	adds	r2, r0, #0
 800364c:	701a      	strb	r2, [r3, #0]
 800364e:	1dbb      	adds	r3, r7, #6
 8003650:	1c0a      	adds	r2, r1, #0
 8003652:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8003658:	1dfb      	adds	r3, r7, #7
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <SD_disk_ioctl+0x24>
 8003660:	2304      	movs	r3, #4
 8003662:	e11b      	b.n	800389c <SD_disk_ioctl+0x25c>
  res = RES_ERROR;
 8003664:	2327      	movs	r3, #39	; 0x27
 8003666:	18fb      	adds	r3, r7, r3
 8003668:	2201      	movs	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]

  if (ctrl == CTRL_POWER)
 800366c:	1dbb      	adds	r3, r7, #6
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b05      	cmp	r3, #5
 8003672:	d127      	bne.n	80036c4 <SD_disk_ioctl+0x84>
  {
    switch (*ptr)
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d013      	beq.n	80036a4 <SD_disk_ioctl+0x64>
 800367c:	dc1d      	bgt.n	80036ba <SD_disk_ioctl+0x7a>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <SD_disk_ioctl+0x48>
 8003682:	2b01      	cmp	r3, #1
 8003684:	d007      	beq.n	8003696 <SD_disk_ioctl+0x56>
 8003686:	e018      	b.n	80036ba <SD_disk_ioctl+0x7a>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8003688:	f7ff fcba 	bl	8003000 <SD_PowerOff>
      res = RES_OK;
 800368c:	2327      	movs	r3, #39	; 0x27
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]
      break;
 8003694:	e0ff      	b.n	8003896 <SD_disk_ioctl+0x256>
    case 1:
      SD_PowerOn();   /* Power On */
 8003696:	f7ff fc6b 	bl	8002f70 <SD_PowerOn>
      res = RES_OK;
 800369a:	2327      	movs	r3, #39	; 0x27
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	2200      	movs	r2, #0
 80036a0:	701a      	strb	r2, [r3, #0]
      break;
 80036a2:	e0f8      	b.n	8003896 <SD_disk_ioctl+0x256>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	1c5c      	adds	r4, r3, #1
 80036a8:	f7ff fcb4 	bl	8003014 <SD_CheckPower>
 80036ac:	0003      	movs	r3, r0
 80036ae:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80036b0:	2327      	movs	r3, #39	; 0x27
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
      break;
 80036b8:	e0ed      	b.n	8003896 <SD_disk_ioctl+0x256>
    default:
      res = RES_PARERR;
 80036ba:	2327      	movs	r3, #39	; 0x27
 80036bc:	18fb      	adds	r3, r7, r3
 80036be:	2204      	movs	r2, #4
 80036c0:	701a      	strb	r2, [r3, #0]
 80036c2:	e0e8      	b.n	8003896 <SD_disk_ioctl+0x256>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 80036c4:	4b77      	ldr	r3, [pc, #476]	; (80038a4 <SD_disk_ioctl+0x264>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	001a      	movs	r2, r3
 80036cc:	2301      	movs	r3, #1
 80036ce:	4013      	ands	r3, r2
 80036d0:	d001      	beq.n	80036d6 <SD_disk_ioctl+0x96>
 80036d2:	2303      	movs	r3, #3
 80036d4:	e0e2      	b.n	800389c <SD_disk_ioctl+0x25c>

    SELECT();
 80036d6:	f7ff fba7 	bl	8002e28 <SELECT>

    switch (ctrl)
 80036da:	1dbb      	adds	r3, r7, #6
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b0d      	cmp	r3, #13
 80036e0:	d900      	bls.n	80036e4 <SD_disk_ioctl+0xa4>
 80036e2:	e0c8      	b.n	8003876 <SD_disk_ioctl+0x236>
 80036e4:	009a      	lsls	r2, r3, #2
 80036e6:	4b70      	ldr	r3, [pc, #448]	; (80038a8 <SD_disk_ioctl+0x268>)
 80036e8:	18d3      	adds	r3, r2, r3
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	469f      	mov	pc, r3
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80036ee:	2100      	movs	r1, #0
 80036f0:	2049      	movs	r0, #73	; 0x49
 80036f2:	f7ff fd20 	bl	8003136 <SD_SendCmd>
 80036f6:	1e03      	subs	r3, r0, #0
 80036f8:	d000      	beq.n	80036fc <SD_disk_ioctl+0xbc>
 80036fa:	e0c1      	b.n	8003880 <SD_disk_ioctl+0x240>
 80036fc:	240c      	movs	r4, #12
 80036fe:	193b      	adds	r3, r7, r4
 8003700:	2110      	movs	r1, #16
 8003702:	0018      	movs	r0, r3
 8003704:	f7ff fc90 	bl	8003028 <SD_RxDataBlock>
 8003708:	1e03      	subs	r3, r0, #0
 800370a:	d100      	bne.n	800370e <SD_disk_ioctl+0xce>
 800370c:	e0b8      	b.n	8003880 <SD_disk_ioctl+0x240>
      {
        if ((csd[0] >> 6) == 1)
 800370e:	0022      	movs	r2, r4
 8003710:	18bb      	adds	r3, r7, r2
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	099b      	lsrs	r3, r3, #6
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d114      	bne.n	8003746 <SD_disk_ioctl+0x106>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800371c:	0011      	movs	r1, r2
 800371e:	18bb      	adds	r3, r7, r2
 8003720:	7a5b      	ldrb	r3, [r3, #9]
 8003722:	b29a      	uxth	r2, r3
 8003724:	187b      	adds	r3, r7, r1
 8003726:	7a1b      	ldrb	r3, [r3, #8]
 8003728:	b29b      	uxth	r3, r3
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	b29b      	uxth	r3, r3
 800372e:	18d3      	adds	r3, r2, r3
 8003730:	b29a      	uxth	r2, r3
 8003732:	211e      	movs	r1, #30
 8003734:	187b      	adds	r3, r7, r1
 8003736:	3201      	adds	r2, #1
 8003738:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << 10;
 800373a:	187b      	adds	r3, r7, r1
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	029a      	lsls	r2, r3, #10
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e03a      	b.n	80037bc <SD_disk_ioctl+0x17c>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003746:	200c      	movs	r0, #12
 8003748:	183b      	adds	r3, r7, r0
 800374a:	795b      	ldrb	r3, [r3, #5]
 800374c:	220f      	movs	r2, #15
 800374e:	4013      	ands	r3, r2
 8003750:	b2da      	uxtb	r2, r3
 8003752:	183b      	adds	r3, r7, r0
 8003754:	7a9b      	ldrb	r3, [r3, #10]
 8003756:	09db      	lsrs	r3, r3, #7
 8003758:	b2db      	uxtb	r3, r3
 800375a:	18d3      	adds	r3, r2, r3
 800375c:	b2da      	uxtb	r2, r3
 800375e:	183b      	adds	r3, r7, r0
 8003760:	7a5b      	ldrb	r3, [r3, #9]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2106      	movs	r1, #6
 8003768:	400b      	ands	r3, r1
 800376a:	b2db      	uxtb	r3, r3
 800376c:	18d3      	adds	r3, r2, r3
 800376e:	b2da      	uxtb	r2, r3
 8003770:	2426      	movs	r4, #38	; 0x26
 8003772:	193b      	adds	r3, r7, r4
 8003774:	3202      	adds	r2, #2
 8003776:	701a      	strb	r2, [r3, #0]
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003778:	183b      	adds	r3, r7, r0
 800377a:	7a1b      	ldrb	r3, [r3, #8]
 800377c:	099b      	lsrs	r3, r3, #6
 800377e:	b2db      	uxtb	r3, r3
 8003780:	b29a      	uxth	r2, r3
 8003782:	183b      	adds	r3, r7, r0
 8003784:	79db      	ldrb	r3, [r3, #7]
 8003786:	b29b      	uxth	r3, r3
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	b29b      	uxth	r3, r3
 800378c:	18d3      	adds	r3, r2, r3
 800378e:	b29a      	uxth	r2, r3
 8003790:	183b      	adds	r3, r7, r0
 8003792:	799b      	ldrb	r3, [r3, #6]
 8003794:	029b      	lsls	r3, r3, #10
 8003796:	b299      	uxth	r1, r3
 8003798:	23c0      	movs	r3, #192	; 0xc0
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	400b      	ands	r3, r1
 800379e:	b29b      	uxth	r3, r3
 80037a0:	18d3      	adds	r3, r2, r3
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	211e      	movs	r1, #30
 80037a6:	187b      	adds	r3, r7, r1
 80037a8:	3201      	adds	r2, #1
 80037aa:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80037ac:	187b      	adds	r3, r7, r1
 80037ae:	881a      	ldrh	r2, [r3, #0]
 80037b0:	193b      	adds	r3, r7, r4
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	3b09      	subs	r3, #9
 80037b6:	409a      	lsls	r2, r3
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80037bc:	2327      	movs	r3, #39	; 0x27
 80037be:	18fb      	adds	r3, r7, r3
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]
      }
      break;
 80037c4:	e05c      	b.n	8003880 <SD_disk_ioctl+0x240>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2280      	movs	r2, #128	; 0x80
 80037ca:	0092      	lsls	r2, r2, #2
 80037cc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80037ce:	2327      	movs	r3, #39	; 0x27
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
      break;
 80037d6:	e05a      	b.n	800388e <SD_disk_ioctl+0x24e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80037d8:	f7ff fbae 	bl	8002f38 <SD_ReadyWait>
 80037dc:	0003      	movs	r3, r0
 80037de:	2bff      	cmp	r3, #255	; 0xff
 80037e0:	d150      	bne.n	8003884 <SD_disk_ioctl+0x244>
 80037e2:	2327      	movs	r3, #39	; 0x27
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	2200      	movs	r2, #0
 80037e8:	701a      	strb	r2, [r3, #0]
      break;
 80037ea:	e04b      	b.n	8003884 <SD_disk_ioctl+0x244>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80037ec:	2100      	movs	r1, #0
 80037ee:	2049      	movs	r0, #73	; 0x49
 80037f0:	f7ff fca1 	bl	8003136 <SD_SendCmd>
 80037f4:	1e03      	subs	r3, r0, #0
 80037f6:	d147      	bne.n	8003888 <SD_disk_ioctl+0x248>
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	2110      	movs	r1, #16
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7ff fc13 	bl	8003028 <SD_RxDataBlock>
 8003802:	1e03      	subs	r3, r0, #0
 8003804:	d040      	beq.n	8003888 <SD_disk_ioctl+0x248>
 8003806:	2327      	movs	r3, #39	; 0x27
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]
      break;
 800380e:	e03b      	b.n	8003888 <SD_disk_ioctl+0x248>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003810:	2100      	movs	r1, #0
 8003812:	204a      	movs	r0, #74	; 0x4a
 8003814:	f7ff fc8f 	bl	8003136 <SD_SendCmd>
 8003818:	1e03      	subs	r3, r0, #0
 800381a:	d137      	bne.n	800388c <SD_disk_ioctl+0x24c>
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	2110      	movs	r1, #16
 8003820:	0018      	movs	r0, r3
 8003822:	f7ff fc01 	bl	8003028 <SD_RxDataBlock>
 8003826:	1e03      	subs	r3, r0, #0
 8003828:	d030      	beq.n	800388c <SD_disk_ioctl+0x24c>
 800382a:	2327      	movs	r3, #39	; 0x27
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	2200      	movs	r2, #0
 8003830:	701a      	strb	r2, [r3, #0]
      break;
 8003832:	e02b      	b.n	800388c <SD_disk_ioctl+0x24c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8003834:	2100      	movs	r1, #0
 8003836:	207a      	movs	r0, #122	; 0x7a
 8003838:	f7ff fc7d 	bl	8003136 <SD_SendCmd>
 800383c:	1e03      	subs	r3, r0, #0
 800383e:	d11a      	bne.n	8003876 <SD_disk_ioctl+0x236>
      {
        for (n = 0; n < 4; n++)
 8003840:	2326      	movs	r3, #38	; 0x26
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	2200      	movs	r2, #0
 8003846:	701a      	strb	r2, [r3, #0]
 8003848:	e00c      	b.n	8003864 <SD_disk_ioctl+0x224>
        {
          *ptr++ = SPI_RxByte();
 800384a:	6a3c      	ldr	r4, [r7, #32]
 800384c:	1c63      	adds	r3, r4, #1
 800384e:	623b      	str	r3, [r7, #32]
 8003850:	f7ff fb44 	bl	8002edc <SPI_RxByte>
 8003854:	0003      	movs	r3, r0
 8003856:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8003858:	2126      	movs	r1, #38	; 0x26
 800385a:	187b      	adds	r3, r7, r1
 800385c:	781a      	ldrb	r2, [r3, #0]
 800385e:	187b      	adds	r3, r7, r1
 8003860:	3201      	adds	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	2326      	movs	r3, #38	; 0x26
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b03      	cmp	r3, #3
 800386c:	d9ed      	bls.n	800384a <SD_disk_ioctl+0x20a>
        }
        res = RES_OK;
 800386e:	2327      	movs	r3, #39	; 0x27
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
      }
    default:
      res = RES_PARERR;
 8003876:	2327      	movs	r3, #39	; 0x27
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	2204      	movs	r2, #4
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	e006      	b.n	800388e <SD_disk_ioctl+0x24e>
      break;
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	e004      	b.n	800388e <SD_disk_ioctl+0x24e>
      break;
 8003884:	46c0      	nop			; (mov r8, r8)
 8003886:	e002      	b.n	800388e <SD_disk_ioctl+0x24e>
      break;
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	e000      	b.n	800388e <SD_disk_ioctl+0x24e>
      break;
 800388c:	46c0      	nop			; (mov r8, r8)
    }

    DESELECT();
 800388e:	f7ff fadb 	bl	8002e48 <DESELECT>
    SPI_RxByte();
 8003892:	f7ff fb23 	bl	8002edc <SPI_RxByte>
  }

  return res;
 8003896:	2327      	movs	r3, #39	; 0x27
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	781b      	ldrb	r3, [r3, #0]
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b00b      	add	sp, #44	; 0x2c
 80038a2:	bd90      	pop	{r4, r7, pc}
 80038a4:	20000000 	.word	0x20000000
 80038a8:	08013638 	.word	0x08013638

080038ac <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	0002      	movs	r2, r0
 80038b4:	1dbb      	adds	r3, r7, #6
 80038b6:	801a      	strh	r2, [r3, #0]
 if (GPIO_Pin == PUSH_BTN_Pin) {
 80038b8:	1dbb      	adds	r3, r7, #6
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d15d      	bne.n	800397c <HAL_GPIO_EXTI_Callback+0xd0>
   if (enter_stop_mode) {
 80038c0:	4b30      	ldr	r3, [pc, #192]	; (8003984 <HAL_GPIO_EXTI_Callback+0xd8>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00d      	beq.n	80038e4 <HAL_GPIO_EXTI_Callback+0x38>
     SystemClock_Config();
 80038c8:	f001 f898 	bl	80049fc <SystemClock_Config>
     HAL_ResumeTick();
 80038cc:	f002 fb84 	bl	8005fd8 <HAL_ResumeTick>
     enter_stop_mode = false;
 80038d0:	4b2c      	ldr	r3, [pc, #176]	; (8003984 <HAL_GPIO_EXTI_Callback+0xd8>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
     exit_stop_mode  = true;
 80038d6:	4b2c      	ldr	r3, [pc, #176]	; (8003988 <HAL_GPIO_EXTI_Callback+0xdc>)
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]
     btn_state = RELEASED;
 80038dc:	4b2b      	ldr	r3, [pc, #172]	; (800398c <HAL_GPIO_EXTI_Callback+0xe0>)
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]
     return;
 80038e2:	e04b      	b.n	800397c <HAL_GPIO_EXTI_Callback+0xd0>
   }

   uint32_t now = HAL_GetTick();
 80038e4:	f002 fb3c 	bl	8005f60 <HAL_GetTick>
 80038e8:	0003      	movs	r3, r0
 80038ea:	60fb      	str	r3, [r7, #12]
   if (btn_state == RELEASED && HAL_GPIO_ReadPin(PUSH_BTN_GPIO_Port, PUSH_BTN_Pin) == GPIO_PIN_RESET) {
 80038ec:	4b27      	ldr	r3, [pc, #156]	; (800398c <HAL_GPIO_EXTI_Callback+0xe0>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d10e      	bne.n	8003912 <HAL_GPIO_EXTI_Callback+0x66>
 80038f4:	23a0      	movs	r3, #160	; 0xa0
 80038f6:	05db      	lsls	r3, r3, #23
 80038f8:	2102      	movs	r1, #2
 80038fa:	0018      	movs	r0, r3
 80038fc:	f003 fb0e 	bl	8006f1c <HAL_GPIO_ReadPin>
 8003900:	1e03      	subs	r3, r0, #0
 8003902:	d106      	bne.n	8003912 <HAL_GPIO_EXTI_Callback+0x66>
     btn_state = PRESSED;
 8003904:	4b21      	ldr	r3, [pc, #132]	; (800398c <HAL_GPIO_EXTI_Callback+0xe0>)
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
     last_down_ts = now;
 800390a:	4b21      	ldr	r3, [pc, #132]	; (8003990 <HAL_GPIO_EXTI_Callback+0xe4>)
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	e034      	b.n	800397c <HAL_GPIO_EXTI_Callback+0xd0>
   }
   else if (btn_state == PRESSED) {
 8003912:	4b1e      	ldr	r3, [pc, #120]	; (800398c <HAL_GPIO_EXTI_Callback+0xe0>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d130      	bne.n	800397c <HAL_GPIO_EXTI_Callback+0xd0>
     last_up_ts = now;
 800391a:	4b1e      	ldr	r3, [pc, #120]	; (8003994 <HAL_GPIO_EXTI_Callback+0xe8>)
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	601a      	str	r2, [r3, #0]

     uint32_t diff = last_up_ts - last_down_ts;
 8003920:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <HAL_GPIO_EXTI_Callback+0xe8>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4b1a      	ldr	r3, [pc, #104]	; (8003990 <HAL_GPIO_EXTI_Callback+0xe4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	60bb      	str	r3, [r7, #8]
     if (diff > DEBOUNCE_MILLIS) { // Handle debounce
 800392c:	2214      	movs	r2, #20
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	4293      	cmp	r3, r2
 8003932:	d91d      	bls.n	8003970 <HAL_GPIO_EXTI_Callback+0xc4>
       btn_state = RELEASED;
 8003934:	4b15      	ldr	r3, [pc, #84]	; (800398c <HAL_GPIO_EXTI_Callback+0xe0>)
 8003936:	2201      	movs	r2, #1
 8003938:	701a      	strb	r2, [r3, #0]

       if (diff < LONG_MILLIS_MIN) {
 800393a:	4a17      	ldr	r2, [pc, #92]	; (8003998 <HAL_GPIO_EXTI_Callback+0xec>)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4293      	cmp	r3, r2
 8003940:	d203      	bcs.n	800394a <HAL_GPIO_EXTI_Callback+0x9e>
         btn_event = SINGLE_PRESS;
 8003942:	4b16      	ldr	r3, [pc, #88]	; (800399c <HAL_GPIO_EXTI_Callback+0xf0>)
 8003944:	2201      	movs	r2, #1
 8003946:	701a      	strb	r2, [r3, #0]
 8003948:	e018      	b.n	800397c <HAL_GPIO_EXTI_Callback+0xd0>
       }
       else if (diff > LONG_MILLIS_MIN && diff < LONG_MILLIS_MAX) {
 800394a:	4a13      	ldr	r2, [pc, #76]	; (8003998 <HAL_GPIO_EXTI_Callback+0xec>)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4293      	cmp	r3, r2
 8003950:	d907      	bls.n	8003962 <HAL_GPIO_EXTI_Callback+0xb6>
 8003952:	4a13      	ldr	r2, [pc, #76]	; (80039a0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4293      	cmp	r3, r2
 8003958:	d203      	bcs.n	8003962 <HAL_GPIO_EXTI_Callback+0xb6>
         btn_event = LONG_PRESS;
 800395a:	4b10      	ldr	r3, [pc, #64]	; (800399c <HAL_GPIO_EXTI_Callback+0xf0>)
 800395c:	2202      	movs	r2, #2
 800395e:	701a      	strb	r2, [r3, #0]
 8003960:	e00c      	b.n	800397c <HAL_GPIO_EXTI_Callback+0xd0>
       }
       else {
         btn_event = NO_PRESS;
 8003962:	4b0e      	ldr	r3, [pc, #56]	; (800399c <HAL_GPIO_EXTI_Callback+0xf0>)
 8003964:	2200      	movs	r2, #0
 8003966:	701a      	strb	r2, [r3, #0]
         btn_state = RELEASED;
 8003968:	4b08      	ldr	r3, [pc, #32]	; (800398c <HAL_GPIO_EXTI_Callback+0xe0>)
 800396a:	2201      	movs	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	e005      	b.n	800397c <HAL_GPIO_EXTI_Callback+0xd0>
       }
     }
     else if (diff == 0) {
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d102      	bne.n	800397c <HAL_GPIO_EXTI_Callback+0xd0>
       btn_state = RELEASED;
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_GPIO_EXTI_Callback+0xe0>)
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]
     }
   }
 }
}
 800397c:	46bd      	mov	sp, r7
 800397e:	b004      	add	sp, #16
 8003980:	bd80      	pop	{r7, pc}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	20002b6d 	.word	0x20002b6d
 8003988:	20002b6e 	.word	0x20002b6e
 800398c:	20000037 	.word	0x20000037
 8003990:	20002b68 	.word	0x20002b68
 8003994:	20002b64 	.word	0x20002b64
 8003998:	00000bb8 	.word	0x00000bb8
 800399c:	20002b6c 	.word	0x20002b6c
 80039a0:	00002710 	.word	0x00002710

080039a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  if (htim == &htim6 && send_done == 1 && gnss_data_ready == 0) {
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d10a      	bne.n	80039ca <HAL_TIM_PeriodElapsedCallback+0x26>
 80039b4:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d106      	bne.n	80039ca <HAL_TIM_PeriodElapsedCallback+0x26>
 80039bc:	4b07      	ldr	r3, [pc, #28]	; (80039dc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <HAL_TIM_PeriodElapsedCallback+0x26>
    // Repeating every 1s
    gnss_data_ready = 1;
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	701a      	strb	r2, [r3, #0]
  }
}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b002      	add	sp, #8
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	2000034c 	.word	0x2000034c
 80039d8:	20000036 	.word	0x20000036
 80039dc:	200009dd 	.word	0x200009dd

080039e0 <I2C_ReadMultiple>:

HAL_StatusTypeDef I2C_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80039e0:	b590      	push	{r4, r7, lr}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af04      	add	r7, sp, #16
 80039e6:	0004      	movs	r4, r0
 80039e8:	0008      	movs	r0, r1
 80039ea:	603a      	str	r2, [r7, #0]
 80039ec:	0019      	movs	r1, r3
 80039ee:	1dfb      	adds	r3, r7, #7
 80039f0:	1c22      	adds	r2, r4, #0
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	1dbb      	adds	r3, r7, #6
 80039f6:	1c02      	adds	r2, r0, #0
 80039f8:	701a      	strb	r2, [r3, #0]
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	1c0a      	adds	r2, r1, #0
 80039fe:	801a      	strh	r2, [r3, #0]
  return HAL_I2C_Mem_Read(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length, 1000);
 8003a00:	1dfb      	adds	r3, r7, #7
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	b299      	uxth	r1, r3
 8003a06:	1dbb      	adds	r3, r7, #6
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	4808      	ldr	r0, [pc, #32]	; (8003a30 <I2C_ReadMultiple+0x50>)
 8003a0e:	23fa      	movs	r3, #250	; 0xfa
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	9302      	str	r3, [sp, #8]
 8003a14:	1d3b      	adds	r3, r7, #4
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	2301      	movs	r3, #1
 8003a20:	f003 fc96 	bl	8007350 <HAL_I2C_Mem_Read>
 8003a24:	0003      	movs	r3, r0
}
 8003a26:	0018      	movs	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b003      	add	sp, #12
 8003a2c:	bd90      	pop	{r4, r7, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	200002a0 	.word	0x200002a0

08003a34 <I2C_Write>:

void I2C_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003a34:	b590      	push	{r4, r7, lr}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af04      	add	r7, sp, #16
 8003a3a:	0004      	movs	r4, r0
 8003a3c:	0008      	movs	r0, r1
 8003a3e:	0011      	movs	r1, r2
 8003a40:	1dfb      	adds	r3, r7, #7
 8003a42:	1c22      	adds	r2, r4, #0
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	1dbb      	adds	r3, r7, #6
 8003a48:	1c02      	adds	r2, r0, #0
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	1d7b      	adds	r3, r7, #5
 8003a4e:	1c0a      	adds	r2, r1, #0
 8003a50:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1, 1000);
 8003a52:	1dfb      	adds	r3, r7, #7
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	b299      	uxth	r1, r3
 8003a58:	1dbb      	adds	r3, r7, #6
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	4807      	ldr	r0, [pc, #28]	; (8003a7c <I2C_Write+0x48>)
 8003a60:	23fa      	movs	r3, #250	; 0xfa
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	9302      	str	r3, [sp, #8]
 8003a66:	2301      	movs	r3, #1
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	1d7b      	adds	r3, r7, #5
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f003 fb40 	bl	80070f4 <HAL_I2C_Mem_Write>
}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b003      	add	sp, #12
 8003a7a:	bd90      	pop	{r4, r7, pc}
 8003a7c:	200002a0 	.word	0x200002a0

08003a80 <LIS2DW12_Init>:

void LIS2DW12_Init()
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  I2C_Write(LIS2DW12_ADDRESS, LIS2DW12_CTRL1, 0x55);
 8003a84:	2255      	movs	r2, #85	; 0x55
 8003a86:	2120      	movs	r1, #32
 8003a88:	2033      	movs	r0, #51	; 0x33
 8003a8a:	f7ff ffd3 	bl	8003a34 <I2C_Write>
  I2C_Write(LIS2DW12_ADDRESS, LIS2DW12_CTRL2, 0x04);
 8003a8e:	2204      	movs	r2, #4
 8003a90:	2121      	movs	r1, #33	; 0x21
 8003a92:	2033      	movs	r0, #51	; 0x33
 8003a94:	f7ff ffce 	bl	8003a34 <I2C_Write>
  I2C_Write(LIS2DW12_ADDRESS, LIS2DW12_CTRL6, 0x10);
 8003a98:	2210      	movs	r2, #16
 8003a9a:	2125      	movs	r1, #37	; 0x25
 8003a9c:	2033      	movs	r0, #51	; 0x33
 8003a9e:	f7ff ffc9 	bl	8003a34 <I2C_Write>
}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <LIS2DW12_ReadXYZ>:

void LIS2DW12_ReadXYZ(float *data)
{
 8003aa8:	b5b0      	push	{r4, r5, r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  int16_t rawData[3];
  uint8_t buffer[6];

  /* Read 6 consecutive values from sensor: x,y,z (each is 2 bytes long) */
  I2C_ReadMultiple(LIS2DW12_ADDRESS, LIS2DW12_OUT_X_L, buffer, 6);
 8003ab0:	2308      	movs	r3, #8
 8003ab2:	18fa      	adds	r2, r7, r3
 8003ab4:	2306      	movs	r3, #6
 8003ab6:	2128      	movs	r1, #40	; 0x28
 8003ab8:	2033      	movs	r0, #51	; 0x33
 8003aba:	f7ff ff91 	bl	80039e0 <I2C_ReadMultiple>

  uint8_t i = 0;
 8003abe:	2117      	movs	r1, #23
 8003ac0:	187b      	adds	r3, r7, r1
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 3; i++) {
 8003ac6:	187b      	adds	r3, r7, r1
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
 8003acc:	e01e      	b.n	8003b0c <LIS2DW12_ReadXYZ+0x64>
    rawData[i] = (((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i];
 8003ace:	2017      	movs	r0, #23
 8003ad0:	183b      	adds	r3, r7, r0
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	2108      	movs	r1, #8
 8003ada:	187a      	adds	r2, r7, r1
 8003adc:	5cd3      	ldrb	r3, [r2, r3]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	021b      	lsls	r3, r3, #8
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	183b      	adds	r3, r7, r0
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	1879      	adds	r1, r7, r1
 8003aec:	5ccb      	ldrb	r3, [r1, r3]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	18d3      	adds	r3, r2, r3
 8003af2:	b299      	uxth	r1, r3
 8003af4:	183b      	adds	r3, r7, r0
 8003af6:	781a      	ldrb	r2, [r3, #0]
 8003af8:	b209      	sxth	r1, r1
 8003afa:	2310      	movs	r3, #16
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	0052      	lsls	r2, r2, #1
 8003b00:	52d1      	strh	r1, [r2, r3]
  for (i = 0; i < 3; i++) {
 8003b02:	183b      	adds	r3, r7, r0
 8003b04:	781a      	ldrb	r2, [r3, #0]
 8003b06:	183b      	adds	r3, r7, r0
 8003b08:	3201      	adds	r2, #1
 8003b0a:	701a      	strb	r2, [r3, #0]
 8003b0c:	2217      	movs	r2, #23
 8003b0e:	18bb      	adds	r3, r7, r2
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d9db      	bls.n	8003ace <LIS2DW12_ReadXYZ+0x26>
  }

  /* Convert according to sensitivity */
  for (i = 0; i < 3; i++) {
 8003b16:	18bb      	adds	r3, r7, r2
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	e018      	b.n	8003b50 <LIS2DW12_ReadXYZ+0xa8>
    data[i] = (float) ((rawData[i]) / 8393.4426f);
 8003b1e:	2517      	movs	r5, #23
 8003b20:	197b      	adds	r3, r7, r5
 8003b22:	781a      	ldrb	r2, [r3, #0]
 8003b24:	2310      	movs	r3, #16
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	0052      	lsls	r2, r2, #1
 8003b2a:	5ed3      	ldrsh	r3, [r2, r3]
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f7fd f9a1 	bl	8000e74 <__aeabi_i2f>
 8003b32:	197b      	adds	r3, r7, r5
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	18d4      	adds	r4, r2, r3
 8003b3c:	4909      	ldr	r1, [pc, #36]	; (8003b64 <LIS2DW12_ReadXYZ+0xbc>)
 8003b3e:	f7fc fe81 	bl	8000844 <__aeabi_fdiv>
 8003b42:	1c03      	adds	r3, r0, #0
 8003b44:	6023      	str	r3, [r4, #0]
  for (i = 0; i < 3; i++) {
 8003b46:	197b      	adds	r3, r7, r5
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	197b      	adds	r3, r7, r5
 8003b4c:	3201      	adds	r2, #1
 8003b4e:	701a      	strb	r2, [r3, #0]
 8003b50:	2317      	movs	r3, #23
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d9e1      	bls.n	8003b1e <LIS2DW12_ReadXYZ+0x76>
  }
}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	46c0      	nop			; (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b006      	add	sp, #24
 8003b62:	bdb0      	pop	{r4, r5, r7, pc}
 8003b64:	460325c5 	.word	0x460325c5

08003b68 <getBatteryVoltage>:

float getBatteryVoltage()
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc);
 8003b6e:	4b13      	ldr	r3, [pc, #76]	; (8003bbc <getBatteryVoltage+0x54>)
 8003b70:	0018      	movs	r0, r3
 8003b72:	f002 fbb3 	bl	80062dc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, ADC_TIMEOUT);
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <getBatteryVoltage+0x54>)
 8003b78:	2164      	movs	r1, #100	; 0x64
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f002 fc02 	bl	8006384 <HAL_ADC_PollForConversion>
  uint32_t raw = HAL_ADC_GetValue(&hadc);
 8003b80:	4b0e      	ldr	r3, [pc, #56]	; (8003bbc <getBatteryVoltage+0x54>)
 8003b82:	0018      	movs	r0, r3
 8003b84:	f002 fc9a 	bl	80064bc <HAL_ADC_GetValue>
 8003b88:	0003      	movs	r3, r0
 8003b8a:	607b      	str	r3, [r7, #4]
  return (float)raw/4095.f * 3.3f * 1.28f;
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7fd f9c3 	bl	8000f18 <__aeabi_ui2f>
 8003b92:	1c03      	adds	r3, r0, #0
 8003b94:	490a      	ldr	r1, [pc, #40]	; (8003bc0 <getBatteryVoltage+0x58>)
 8003b96:	1c18      	adds	r0, r3, #0
 8003b98:	f7fc fe54 	bl	8000844 <__aeabi_fdiv>
 8003b9c:	1c03      	adds	r3, r0, #0
 8003b9e:	4909      	ldr	r1, [pc, #36]	; (8003bc4 <getBatteryVoltage+0x5c>)
 8003ba0:	1c18      	adds	r0, r3, #0
 8003ba2:	f7fd f819 	bl	8000bd8 <__aeabi_fmul>
 8003ba6:	1c03      	adds	r3, r0, #0
 8003ba8:	4907      	ldr	r1, [pc, #28]	; (8003bc8 <getBatteryVoltage+0x60>)
 8003baa:	1c18      	adds	r0, r3, #0
 8003bac:	f7fd f814 	bl	8000bd8 <__aeabi_fmul>
 8003bb0:	1c03      	adds	r3, r0, #0
}
 8003bb2:	1c18      	adds	r0, r3, #0
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b002      	add	sp, #8
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	20000244 	.word	0x20000244
 8003bc0:	457ff000 	.word	0x457ff000
 8003bc4:	40533333 	.word	0x40533333
 8003bc8:	3fa3d70a 	.word	0x3fa3d70a

08003bcc <append_data_buf>:

void append_data_buf(uint8_t idx, bool append_last)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	0002      	movs	r2, r0
 8003bd4:	1dfb      	adds	r3, r7, #7
 8003bd6:	701a      	strb	r2, [r3, #0]
 8003bd8:	1dbb      	adds	r3, r7, #6
 8003bda:	1c0a      	adds	r2, r1, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
  strcat((char*)data, (char*)buf);
 8003bde:	4a1c      	ldr	r2, [pc, #112]	; (8003c50 <append_data_buf+0x84>)
 8003be0:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <append_data_buf+0x88>)
 8003be2:	0011      	movs	r1, r2
 8003be4:	0018      	movs	r0, r3
 8003be6:	f00c f865 	bl	800fcb4 <strcat>

  if (idx == dp_idx && append_last) { // if last item
 8003bea:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <append_data_buf+0x8c>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	1dfa      	adds	r2, r7, #7
 8003bf0:	7812      	ldrb	r2, [r2, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d113      	bne.n	8003c1e <append_data_buf+0x52>
 8003bf6:	1dbb      	adds	r3, r7, #6
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00f      	beq.n	8003c1e <append_data_buf+0x52>
    strcat((char*)data, "&");
 8003bfe:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <append_data_buf+0x88>)
 8003c00:	0018      	movs	r0, r3
 8003c02:	f7fc fa8b 	bl	800011c <strlen>
 8003c06:	0003      	movs	r3, r0
 8003c08:	001a      	movs	r2, r3
 8003c0a:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <append_data_buf+0x88>)
 8003c0c:	18d2      	adds	r2, r2, r3
 8003c0e:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <append_data_buf+0x90>)
 8003c10:	0010      	movs	r0, r2
 8003c12:	0019      	movs	r1, r3
 8003c14:	2302      	movs	r3, #2
 8003c16:	001a      	movs	r2, r3
 8003c18:	f00c f982 	bl	800ff20 <memcpy>
  } else if (idx != dp_idx) {
    strcat((char*)data, ";");
  }
}
 8003c1c:	e014      	b.n	8003c48 <append_data_buf+0x7c>
  } else if (idx != dp_idx) {
 8003c1e:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <append_data_buf+0x8c>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	1dfa      	adds	r2, r7, #7
 8003c24:	7812      	ldrb	r2, [r2, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d00e      	beq.n	8003c48 <append_data_buf+0x7c>
    strcat((char*)data, ";");
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <append_data_buf+0x88>)
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7fc fa75 	bl	800011c <strlen>
 8003c32:	0003      	movs	r3, r0
 8003c34:	001a      	movs	r2, r3
 8003c36:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <append_data_buf+0x88>)
 8003c38:	18d2      	adds	r2, r2, r3
 8003c3a:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <append_data_buf+0x94>)
 8003c3c:	0010      	movs	r0, r2
 8003c3e:	0019      	movs	r1, r3
 8003c40:	2302      	movs	r3, #2
 8003c42:	001a      	movs	r2, r3
 8003c44:	f00c f96c 	bl	800ff20 <memcpy>
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b002      	add	sp, #8
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	2000052c 	.word	0x2000052c
 8003c54:	200019d0 	.word	0x200019d0
 8003c58:	200009df 	.word	0x200009df
 8003c5c:	08013298 	.word	0x08013298
 8003c60:	0801329c 	.word	0x0801329c

08003c64 <init>:

void init()
{
 8003c64:	b590      	push	{r4, r7, lr}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af02      	add	r7, sp, #8
  //Init accelerometer
  LIS2DW12_Init();
 8003c6a:	f7ff ff09 	bl	8003a80 <LIS2DW12_Init>

  // Mount SD Card
  fres = f_mount(&FatFs, "", 1); // 1=mount now
 8003c6e:	4937      	ldr	r1, [pc, #220]	; (8003d4c <init+0xe8>)
 8003c70:	4b37      	ldr	r3, [pc, #220]	; (8003d50 <init+0xec>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	0018      	movs	r0, r3
 8003c76:	f009 fab5 	bl	800d1e4 <f_mount>
 8003c7a:	0003      	movs	r3, r0
 8003c7c:	001a      	movs	r2, r3
 8003c7e:	4b35      	ldr	r3, [pc, #212]	; (8003d54 <init+0xf0>)
 8003c80:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) { // No SD Card found
 8003c82:	4b34      	ldr	r3, [pc, #208]	; (8003d54 <init+0xf0>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d006      	beq.n	8003c98 <init+0x34>
    BLINK_LED(RED_LED_GPIO_Port, RED_LED_Pin, 3, 200);
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	0219      	lsls	r1, r3, #8
 8003c8e:	4832      	ldr	r0, [pc, #200]	; (8003d58 <init+0xf4>)
 8003c90:	23c8      	movs	r3, #200	; 0xc8
 8003c92:	2203      	movs	r2, #3
 8003c94:	f001 fe7a 	bl	800598c <BLINK_LED>
  }

  //Setup GNSS XTRA
  bool en_xtra_ok = send_at_cmd("AT+QGPSXTRA=1\r\n");
 8003c98:	1dfc      	adds	r4, r7, #7
 8003c9a:	4b30      	ldr	r3, [pc, #192]	; (8003d5c <init+0xf8>)
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f001 fcd3 	bl	8005648 <send_at_cmd>
 8003ca2:	0003      	movs	r3, r0
 8003ca4:	7023      	strb	r3, [r4, #0]
  bool en_xtra_auto_dwnld_ok = send_at_cmd("AT+QGPSCFG=\"xtra_autodownload\",1\r\n");
 8003ca6:	1dbc      	adds	r4, r7, #6
 8003ca8:	4b2d      	ldr	r3, [pc, #180]	; (8003d60 <init+0xfc>)
 8003caa:	0018      	movs	r0, r3
 8003cac:	f001 fccc 	bl	8005648 <send_at_cmd>
 8003cb0:	0003      	movs	r3, r0
 8003cb2:	7023      	strb	r3, [r4, #0]

  // Set HTTP URL
  sprintf(cmd, "AT+QHTTPURL=%d\r\n", strlen(url));
 8003cb4:	4b2b      	ldr	r3, [pc, #172]	; (8003d64 <init+0x100>)
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f7fc fa30 	bl	800011c <strlen>
 8003cbc:	0002      	movs	r2, r0
 8003cbe:	492a      	ldr	r1, [pc, #168]	; (8003d68 <init+0x104>)
 8003cc0:	4b2a      	ldr	r3, [pc, #168]	; (8003d6c <init+0x108>)
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f00b ff58 	bl	800fb78 <siprintf>
  bool set_url_ok = send_at_connect_cmd(cmd, url, NULL, NULL, 5);
 8003cc8:	1d7c      	adds	r4, r7, #5
 8003cca:	4926      	ldr	r1, [pc, #152]	; (8003d64 <init+0x100>)
 8003ccc:	4827      	ldr	r0, [pc, #156]	; (8003d6c <init+0x108>)
 8003cce:	2305      	movs	r3, #5
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f001 fd03 	bl	80056e0 <send_at_connect_cmd>
 8003cda:	0003      	movs	r3, r0
 8003cdc:	7023      	strb	r3, [r4, #0]
  // Configure GNSS Constellations (GPS + Galileo)
  bool gnss_config_ok = send_at_cmd("AT+QGPSCFG=\"gnssconfig\",3\r\n");
 8003cde:	1d3c      	adds	r4, r7, #4
 8003ce0:	4b23      	ldr	r3, [pc, #140]	; (8003d70 <init+0x10c>)
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f001 fcb0 	bl	8005648 <send_at_cmd>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	7023      	strb	r3, [r4, #0]
  // Turn on GNSS
  bool gnss_on_ok = send_at_cmd("AT+QGPS=1\r\n");
 8003cec:	1cfc      	adds	r4, r7, #3
 8003cee:	4b21      	ldr	r3, [pc, #132]	; (8003d74 <init+0x110>)
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f001 fca9 	bl	8005648 <send_at_cmd>
 8003cf6:	0003      	movs	r3, r0
 8003cf8:	7023      	strb	r3, [r4, #0]

  if (en_xtra_ok && en_xtra_auto_dwnld_ok && set_url_ok && gnss_config_ok && gnss_on_ok) {
 8003cfa:	1dfb      	adds	r3, r7, #7
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d018      	beq.n	8003d34 <init+0xd0>
 8003d02:	1dbb      	adds	r3, r7, #6
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d014      	beq.n	8003d34 <init+0xd0>
 8003d0a:	1d7b      	adds	r3, r7, #5
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d010      	beq.n	8003d34 <init+0xd0>
 8003d12:	1d3b      	adds	r3, r7, #4
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00c      	beq.n	8003d34 <init+0xd0>
 8003d1a:	1cfb      	adds	r3, r7, #3
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d008      	beq.n	8003d34 <init+0xd0>
    BLINK_LED(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 3, 100);
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	0119      	lsls	r1, r3, #4
 8003d26:	23a0      	movs	r3, #160	; 0xa0
 8003d28:	05d8      	lsls	r0, r3, #23
 8003d2a:	2364      	movs	r3, #100	; 0x64
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	f001 fe2d 	bl	800598c <BLINK_LED>
 8003d32:	e007      	b.n	8003d44 <init+0xe0>
  }
  else {
    BLINK_LED(RED_LED_GPIO_Port, RED_LED_Pin, 3, 100);
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	0219      	lsls	r1, r3, #8
 8003d38:	4807      	ldr	r0, [pc, #28]	; (8003d58 <init+0xf4>)
 8003d3a:	2364      	movs	r3, #100	; 0x64
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	f001 fe25 	bl	800598c <BLINK_LED>
  }
}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b003      	add	sp, #12
 8003d4a:	bd90      	pop	{r4, r7, pc}
 8003d4c:	080132a0 	.word	0x080132a0
 8003d50:	20002b70 	.word	0x20002b70
 8003d54:	20003bd8 	.word	0x20003bd8
 8003d58:	50000800 	.word	0x50000800
 8003d5c:	080132a4 	.word	0x080132a4
 8003d60:	080132b4 	.word	0x080132b4
 8003d64:	20000004 	.word	0x20000004
 8003d68:	080132d8 	.word	0x080132d8
 8003d6c:	20000914 	.word	0x20000914
 8003d70:	080132ec 	.word	0x080132ec
 8003d74:	08013308 	.word	0x08013308

08003d78 <add_packet_to_sd_card>:

void add_packet_to_sd_card(uint8_t idx)
{
 8003d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d7a:	46c6      	mov	lr, r8
 8003d7c:	b500      	push	{lr}
 8003d7e:	b09a      	sub	sp, #104	; 0x68
 8003d80:	af0e      	add	r7, sp, #56	; 0x38
 8003d82:	0002      	movs	r2, r0
 8003d84:	242f      	movs	r4, #47	; 0x2f
 8003d86:	193b      	adds	r3, r7, r4
 8003d88:	701a      	strb	r2, [r3, #0]
  sprintf(
      (char *)buf,
      "%s %s,%.6f,%.6f,%.3f,%.2f,%.2f,%.2f,%d\n",
      data_packets[idx].date,
 8003d8a:	193b      	adds	r3, r7, r4
 8003d8c:	781a      	ldrb	r2, [r3, #0]
 8003d8e:	0013      	movs	r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	189b      	adds	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	3308      	adds	r3, #8
 8003d98:	001a      	movs	r2, r3
 8003d9a:	4b69      	ldr	r3, [pc, #420]	; (8003f40 <add_packet_to_sd_card+0x1c8>)
 8003d9c:	18d3      	adds	r3, r2, r3
 8003d9e:	1c5e      	adds	r6, r3, #1
      data_packets[idx].EET_Time,
 8003da0:	193b      	adds	r3, r7, r4
 8003da2:	781a      	ldrb	r2, [r3, #0]
 8003da4:	0013      	movs	r3, r2
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	189b      	adds	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4a64      	ldr	r2, [pc, #400]	; (8003f40 <add_packet_to_sd_card+0x1c8>)
 8003dae:	4698      	mov	r8, r3
 8003db0:	4490      	add	r8, r2
      convertToDecimalDegrees(data_packets[idx].latitude, data_packets[idx].NS),
 8003db2:	193b      	adds	r3, r7, r4
 8003db4:	781a      	ldrb	r2, [r3, #0]
 8003db6:	0013      	movs	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	189b      	adds	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	3310      	adds	r3, #16
 8003dc0:	001a      	movs	r2, r3
 8003dc2:	4b5f      	ldr	r3, [pc, #380]	; (8003f40 <add_packet_to_sd_card+0x1c8>)
 8003dc4:	18d3      	adds	r3, r2, r3
 8003dc6:	1d98      	adds	r0, r3, #6
 8003dc8:	193b      	adds	r3, r7, r4
 8003dca:	781a      	ldrb	r2, [r3, #0]
 8003dcc:	495c      	ldr	r1, [pc, #368]	; (8003f40 <add_packet_to_sd_card+0x1c8>)
 8003dce:	0013      	movs	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	189b      	adds	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	18cb      	adds	r3, r1, r3
 8003dd8:	3314      	adds	r3, #20
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	0019      	movs	r1, r3
 8003dde:	f001 ffb3 	bl	8005d48 <convertToDecimalDegrees>
 8003de2:	1c03      	adds	r3, r0, #0
  sprintf(
 8003de4:	1c18      	adds	r0, r3, #0
 8003de6:	f7fe ff27 	bl	8002c38 <__aeabi_f2d>
 8003dea:	6238      	str	r0, [r7, #32]
 8003dec:	6279      	str	r1, [r7, #36]	; 0x24
      convertToDecimalDegrees(data_packets[idx].longitude, data_packets[idx].EW),
 8003dee:	193b      	adds	r3, r7, r4
 8003df0:	781a      	ldrb	r2, [r3, #0]
 8003df2:	0013      	movs	r3, r2
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	189b      	adds	r3, r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	3220      	adds	r2, #32
 8003dfe:	4b50      	ldr	r3, [pc, #320]	; (8003f40 <add_packet_to_sd_card+0x1c8>)
 8003e00:	18d3      	adds	r3, r2, r3
 8003e02:	1c98      	adds	r0, r3, #2
 8003e04:	193b      	adds	r3, r7, r4
 8003e06:	781a      	ldrb	r2, [r3, #0]
 8003e08:	494d      	ldr	r1, [pc, #308]	; (8003f40 <add_packet_to_sd_card+0x1c8>)
 8003e0a:	0013      	movs	r3, r2
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	189b      	adds	r3, r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	18cb      	adds	r3, r1, r3
 8003e14:	3315      	adds	r3, #21
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	0019      	movs	r1, r3
 8003e1a:	f001 ff95 	bl	8005d48 <convertToDecimalDegrees>
 8003e1e:	1c03      	adds	r3, r0, #0
  sprintf(
 8003e20:	1c18      	adds	r0, r3, #0
 8003e22:	f7fe ff09 	bl	8002c38 <__aeabi_f2d>
 8003e26:	61b8      	str	r0, [r7, #24]
 8003e28:	61f9      	str	r1, [r7, #28]
      data_packets[idx].batteryVoltage,
 8003e2a:	193b      	adds	r3, r7, r4
 8003e2c:	781a      	ldrb	r2, [r3, #0]
 8003e2e:	4944      	ldr	r1, [pc, #272]	; (8003f40 <add_packet_to_sd_card+0x1c8>)
 8003e30:	0013      	movs	r3, r2
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	189b      	adds	r3, r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	18cb      	adds	r3, r1, r3
 8003e3a:	3330      	adds	r3, #48	; 0x30
 8003e3c:	681b      	ldr	r3, [r3, #0]
  sprintf(
 8003e3e:	1c18      	adds	r0, r3, #0
 8003e40:	f7fe fefa 	bl	8002c38 <__aeabi_f2d>
 8003e44:	6138      	str	r0, [r7, #16]
 8003e46:	6179      	str	r1, [r7, #20]
      data_packets[idx].accelerometerData[0],
 8003e48:	193b      	adds	r3, r7, r4
 8003e4a:	781a      	ldrb	r2, [r3, #0]
 8003e4c:	493c      	ldr	r1, [pc, #240]	; (8003f40 <add_packet_to_sd_card+0x1c8>)
 8003e4e:	0013      	movs	r3, r2
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	189b      	adds	r3, r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	18cb      	adds	r3, r1, r3
 8003e58:	3334      	adds	r3, #52	; 0x34
 8003e5a:	681b      	ldr	r3, [r3, #0]
  sprintf(
 8003e5c:	1c18      	adds	r0, r3, #0
 8003e5e:	f7fe feeb 	bl	8002c38 <__aeabi_f2d>
 8003e62:	60b8      	str	r0, [r7, #8]
 8003e64:	60f9      	str	r1, [r7, #12]
      data_packets[idx].accelerometerData[1],
 8003e66:	193b      	adds	r3, r7, r4
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	4935      	ldr	r1, [pc, #212]	; (8003f40 <add_packet_to_sd_card+0x1c8>)
 8003e6c:	0013      	movs	r3, r2
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	189b      	adds	r3, r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	18cb      	adds	r3, r1, r3
 8003e76:	3338      	adds	r3, #56	; 0x38
 8003e78:	681b      	ldr	r3, [r3, #0]
  sprintf(
 8003e7a:	1c18      	adds	r0, r3, #0
 8003e7c:	f7fe fedc 	bl	8002c38 <__aeabi_f2d>
 8003e80:	6038      	str	r0, [r7, #0]
 8003e82:	6079      	str	r1, [r7, #4]
      data_packets[idx].accelerometerData[2],
 8003e84:	193b      	adds	r3, r7, r4
 8003e86:	781a      	ldrb	r2, [r3, #0]
 8003e88:	492d      	ldr	r1, [pc, #180]	; (8003f40 <add_packet_to_sd_card+0x1c8>)
 8003e8a:	0013      	movs	r3, r2
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	189b      	adds	r3, r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	18cb      	adds	r3, r1, r3
 8003e94:	333c      	adds	r3, #60	; 0x3c
 8003e96:	681b      	ldr	r3, [r3, #0]
  sprintf(
 8003e98:	1c18      	adds	r0, r3, #0
 8003e9a:	f7fe fecd 	bl	8002c38 <__aeabi_f2d>
 8003e9e:	0004      	movs	r4, r0
 8003ea0:	000d      	movs	r5, r1
      data_packets[idx].satNum
 8003ea2:	232f      	movs	r3, #47	; 0x2f
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	4925      	ldr	r1, [pc, #148]	; (8003f40 <add_packet_to_sd_card+0x1c8>)
 8003eaa:	2040      	movs	r0, #64	; 0x40
 8003eac:	0013      	movs	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	189b      	adds	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	18cb      	adds	r3, r1, r3
 8003eb6:	181b      	adds	r3, r3, r0
 8003eb8:	781b      	ldrb	r3, [r3, #0]
  sprintf(
 8003eba:	4922      	ldr	r1, [pc, #136]	; (8003f44 <add_packet_to_sd_card+0x1cc>)
 8003ebc:	4822      	ldr	r0, [pc, #136]	; (8003f48 <add_packet_to_sd_card+0x1d0>)
 8003ebe:	930c      	str	r3, [sp, #48]	; 0x30
 8003ec0:	940a      	str	r4, [sp, #40]	; 0x28
 8003ec2:	950b      	str	r5, [sp, #44]	; 0x2c
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	687c      	ldr	r4, [r7, #4]
 8003ec8:	9308      	str	r3, [sp, #32]
 8003eca:	9409      	str	r4, [sp, #36]	; 0x24
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	68fc      	ldr	r4, [r7, #12]
 8003ed0:	9306      	str	r3, [sp, #24]
 8003ed2:	9407      	str	r4, [sp, #28]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	697c      	ldr	r4, [r7, #20]
 8003ed8:	9304      	str	r3, [sp, #16]
 8003eda:	9405      	str	r4, [sp, #20]
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	69fc      	ldr	r4, [r7, #28]
 8003ee0:	9302      	str	r3, [sp, #8]
 8003ee2:	9403      	str	r4, [sp, #12]
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	9401      	str	r4, [sp, #4]
 8003eec:	4643      	mov	r3, r8
 8003eee:	0032      	movs	r2, r6
 8003ef0:	f00b fe42 	bl	800fb78 <siprintf>
  );

  //Open the file
  fres = f_open(&fil, "packets.txt", FA_OPEN_APPEND | FA_WRITE);
 8003ef4:	4915      	ldr	r1, [pc, #84]	; (8003f4c <add_packet_to_sd_card+0x1d4>)
 8003ef6:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <add_packet_to_sd_card+0x1d8>)
 8003ef8:	2232      	movs	r2, #50	; 0x32
 8003efa:	0018      	movs	r0, r3
 8003efc:	f009 f9be 	bl	800d27c <f_open>
 8003f00:	0003      	movs	r3, r0
 8003f02:	001a      	movs	r2, r3
 8003f04:	4b13      	ldr	r3, [pc, #76]	; (8003f54 <add_packet_to_sd_card+0x1dc>)
 8003f06:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) { //File creation/open Error
 8003f08:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <add_packet_to_sd_card+0x1dc>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <add_packet_to_sd_card+0x1a8>
    BLINK_LED(RED_LED_GPIO_Port, RED_LED_Pin, 1, 200);
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	0219      	lsls	r1, r3, #8
 8003f14:	4810      	ldr	r0, [pc, #64]	; (8003f58 <add_packet_to_sd_card+0x1e0>)
 8003f16:	23c8      	movs	r3, #200	; 0xc8
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f001 fd37 	bl	800598c <BLINK_LED>
    return;
 8003f1e:	e009      	b.n	8003f34 <add_packet_to_sd_card+0x1bc>
  }
  else {
    // write backup to sd card
    f_puts((char*)buf, &fil);
 8003f20:	4a0b      	ldr	r2, [pc, #44]	; (8003f50 <add_packet_to_sd_card+0x1d8>)
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <add_packet_to_sd_card+0x1d0>)
 8003f24:	0011      	movs	r1, r2
 8003f26:	0018      	movs	r0, r3
 8003f28:	f009 fe7d 	bl	800dc26 <f_puts>
    f_close(&fil);
 8003f2c:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <add_packet_to_sd_card+0x1d8>)
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f009 fdcd 	bl	800dace <f_close>
  }
}
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b00c      	add	sp, #48	; 0x30
 8003f38:	bc80      	pop	{r7}
 8003f3a:	46b8      	mov	r8, r7
 8003f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	200009e0 	.word	0x200009e0
 8003f44:	08013314 	.word	0x08013314
 8003f48:	2000052c 	.word	0x2000052c
 8003f4c:	0801333c 	.word	0x0801333c
 8003f50:	200033a8 	.word	0x200033a8
 8003f54:	20003bd8 	.word	0x20003bd8
 8003f58:	50000800 	.word	0x50000800

08003f5c <send_data>:

void send_data()
{
 8003f5c:	b590      	push	{r4, r7, lr}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af02      	add	r7, sp, #8
  send_done = 0;
 8003f62:	4be8      	ldr	r3, [pc, #928]	; (8004304 <send_data+0x3a8>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	701a      	strb	r2, [r3, #0]
  send_ready = 0;
 8003f68:	4be7      	ldr	r3, [pc, #924]	; (8004308 <send_data+0x3ac>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	701a      	strb	r2, [r3, #0]
  send_at_cmd("AT+QGPSCFG=\"priority\",1\r\n"); // Set WWAN priority
 8003f6e:	4be7      	ldr	r3, [pc, #924]	; (800430c <send_data+0x3b0>)
 8003f70:	0018      	movs	r0, r3
 8003f72:	f001 fb69 	bl	8005648 <send_at_cmd>
  HAL_Delay(150);
 8003f76:	2096      	movs	r0, #150	; 0x96
 8003f78:	f001 fffc 	bl	8005f74 <HAL_Delay>

  // Fill data
  sprintf(
 8003f7c:	4be4      	ldr	r3, [pc, #912]	; (8004310 <send_data+0x3b4>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	3301      	adds	r3, #1
 8003f82:	4ae4      	ldr	r2, [pc, #912]	; (8004314 <send_data+0x3b8>)
 8003f84:	49e4      	ldr	r1, [pc, #912]	; (8004318 <send_data+0x3bc>)
 8003f86:	48e5      	ldr	r0, [pc, #916]	; (800431c <send_data+0x3c0>)
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f00b fdf2 	bl	800fb78 <siprintf>
      EVENT_ID,
      DEVICE_ID,
      dp_idx+1
  );

  strcat(data, "latitudes=");
 8003f94:	4be1      	ldr	r3, [pc, #900]	; (800431c <send_data+0x3c0>)
 8003f96:	0018      	movs	r0, r3
 8003f98:	f7fc f8c0 	bl	800011c <strlen>
 8003f9c:	0003      	movs	r3, r0
 8003f9e:	001a      	movs	r2, r3
 8003fa0:	4bde      	ldr	r3, [pc, #888]	; (800431c <send_data+0x3c0>)
 8003fa2:	18d2      	adds	r2, r2, r3
 8003fa4:	4bde      	ldr	r3, [pc, #888]	; (8004320 <send_data+0x3c4>)
 8003fa6:	0010      	movs	r0, r2
 8003fa8:	0019      	movs	r1, r3
 8003faa:	230b      	movs	r3, #11
 8003fac:	001a      	movs	r2, r3
 8003fae:	f00b ffb7 	bl	800ff20 <memcpy>
  for (uint8_t i = 0; i < dp_idx+1; i++) {
 8003fb2:	1dfb      	adds	r3, r7, #7
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
 8003fb8:	e02c      	b.n	8004014 <send_data+0xb8>
    sprintf((char *)buf, "%.6f", convertToDecimalDegrees(data_packets[i].latitude, data_packets[i].NS));
 8003fba:	1dfb      	adds	r3, r7, #7
 8003fbc:	781a      	ldrb	r2, [r3, #0]
 8003fbe:	0013      	movs	r3, r2
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	189b      	adds	r3, r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	3310      	adds	r3, #16
 8003fc8:	001a      	movs	r2, r3
 8003fca:	4bd6      	ldr	r3, [pc, #856]	; (8004324 <send_data+0x3c8>)
 8003fcc:	18d3      	adds	r3, r2, r3
 8003fce:	1d98      	adds	r0, r3, #6
 8003fd0:	1dfb      	adds	r3, r7, #7
 8003fd2:	781a      	ldrb	r2, [r3, #0]
 8003fd4:	49d3      	ldr	r1, [pc, #844]	; (8004324 <send_data+0x3c8>)
 8003fd6:	0013      	movs	r3, r2
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	189b      	adds	r3, r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	18cb      	adds	r3, r1, r3
 8003fe0:	3314      	adds	r3, #20
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	0019      	movs	r1, r3
 8003fe6:	f001 feaf 	bl	8005d48 <convertToDecimalDegrees>
 8003fea:	1c03      	adds	r3, r0, #0
 8003fec:	1c18      	adds	r0, r3, #0
 8003fee:	f7fe fe23 	bl	8002c38 <__aeabi_f2d>
 8003ff2:	0002      	movs	r2, r0
 8003ff4:	000b      	movs	r3, r1
 8003ff6:	49cc      	ldr	r1, [pc, #816]	; (8004328 <send_data+0x3cc>)
 8003ff8:	48cc      	ldr	r0, [pc, #816]	; (800432c <send_data+0x3d0>)
 8003ffa:	f00b fdbd 	bl	800fb78 <siprintf>
    append_data_buf(i, true);
 8003ffe:	1dfb      	adds	r3, r7, #7
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2101      	movs	r1, #1
 8004004:	0018      	movs	r0, r3
 8004006:	f7ff fde1 	bl	8003bcc <append_data_buf>
  for (uint8_t i = 0; i < dp_idx+1; i++) {
 800400a:	1dfb      	adds	r3, r7, #7
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	1dfb      	adds	r3, r7, #7
 8004010:	3201      	adds	r2, #1
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	4bbe      	ldr	r3, [pc, #760]	; (8004310 <send_data+0x3b4>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	1dfa      	adds	r2, r7, #7
 800401a:	7812      	ldrb	r2, [r2, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d9cc      	bls.n	8003fba <send_data+0x5e>
  }

  strcat(data, "longitudes=");
 8004020:	4bbe      	ldr	r3, [pc, #760]	; (800431c <send_data+0x3c0>)
 8004022:	0018      	movs	r0, r3
 8004024:	f7fc f87a 	bl	800011c <strlen>
 8004028:	0003      	movs	r3, r0
 800402a:	001a      	movs	r2, r3
 800402c:	4bbb      	ldr	r3, [pc, #748]	; (800431c <send_data+0x3c0>)
 800402e:	18d2      	adds	r2, r2, r3
 8004030:	4bbf      	ldr	r3, [pc, #764]	; (8004330 <send_data+0x3d4>)
 8004032:	0010      	movs	r0, r2
 8004034:	0019      	movs	r1, r3
 8004036:	230c      	movs	r3, #12
 8004038:	001a      	movs	r2, r3
 800403a:	f00b ff71 	bl	800ff20 <memcpy>
  for (uint8_t i = 0; i < dp_idx+1; i++) {
 800403e:	1dbb      	adds	r3, r7, #6
 8004040:	2200      	movs	r2, #0
 8004042:	701a      	strb	r2, [r3, #0]
 8004044:	e02c      	b.n	80040a0 <send_data+0x144>
    sprintf((char *)buf, "%.6f", convertToDecimalDegrees(data_packets[i].longitude, data_packets[i].EW));
 8004046:	1dbb      	adds	r3, r7, #6
 8004048:	781a      	ldrb	r2, [r3, #0]
 800404a:	0013      	movs	r3, r2
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	189b      	adds	r3, r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	3320      	adds	r3, #32
 8004054:	001a      	movs	r2, r3
 8004056:	4bb3      	ldr	r3, [pc, #716]	; (8004324 <send_data+0x3c8>)
 8004058:	18d3      	adds	r3, r2, r3
 800405a:	1c98      	adds	r0, r3, #2
 800405c:	1dbb      	adds	r3, r7, #6
 800405e:	781a      	ldrb	r2, [r3, #0]
 8004060:	49b0      	ldr	r1, [pc, #704]	; (8004324 <send_data+0x3c8>)
 8004062:	0013      	movs	r3, r2
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	189b      	adds	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	18cb      	adds	r3, r1, r3
 800406c:	3315      	adds	r3, #21
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	0019      	movs	r1, r3
 8004072:	f001 fe69 	bl	8005d48 <convertToDecimalDegrees>
 8004076:	1c03      	adds	r3, r0, #0
 8004078:	1c18      	adds	r0, r3, #0
 800407a:	f7fe fddd 	bl	8002c38 <__aeabi_f2d>
 800407e:	0002      	movs	r2, r0
 8004080:	000b      	movs	r3, r1
 8004082:	49a9      	ldr	r1, [pc, #676]	; (8004328 <send_data+0x3cc>)
 8004084:	48a9      	ldr	r0, [pc, #676]	; (800432c <send_data+0x3d0>)
 8004086:	f00b fd77 	bl	800fb78 <siprintf>
    append_data_buf(i, true);
 800408a:	1dbb      	adds	r3, r7, #6
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2101      	movs	r1, #1
 8004090:	0018      	movs	r0, r3
 8004092:	f7ff fd9b 	bl	8003bcc <append_data_buf>
  for (uint8_t i = 0; i < dp_idx+1; i++) {
 8004096:	1dbb      	adds	r3, r7, #6
 8004098:	781a      	ldrb	r2, [r3, #0]
 800409a:	1dbb      	adds	r3, r7, #6
 800409c:	3201      	adds	r2, #1
 800409e:	701a      	strb	r2, [r3, #0]
 80040a0:	4b9b      	ldr	r3, [pc, #620]	; (8004310 <send_data+0x3b4>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	1dba      	adds	r2, r7, #6
 80040a6:	7812      	ldrb	r2, [r2, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d9cc      	bls.n	8004046 <send_data+0xea>
  }

  strcat(data, "dates=");
 80040ac:	4b9b      	ldr	r3, [pc, #620]	; (800431c <send_data+0x3c0>)
 80040ae:	0018      	movs	r0, r3
 80040b0:	f7fc f834 	bl	800011c <strlen>
 80040b4:	0003      	movs	r3, r0
 80040b6:	001a      	movs	r2, r3
 80040b8:	4b98      	ldr	r3, [pc, #608]	; (800431c <send_data+0x3c0>)
 80040ba:	18d2      	adds	r2, r2, r3
 80040bc:	4b9d      	ldr	r3, [pc, #628]	; (8004334 <send_data+0x3d8>)
 80040be:	0010      	movs	r0, r2
 80040c0:	0019      	movs	r1, r3
 80040c2:	2307      	movs	r3, #7
 80040c4:	001a      	movs	r2, r3
 80040c6:	f00b ff2b 	bl	800ff20 <memcpy>
  for (uint8_t i = 0; i < dp_idx+1; i++) {
 80040ca:	1d7b      	adds	r3, r7, #5
 80040cc:	2200      	movs	r2, #0
 80040ce:	701a      	strb	r2, [r3, #0]
 80040d0:	e022      	b.n	8004118 <send_data+0x1bc>
    sprintf((char *)buf, "%s %s", data_packets[i].date, data_packets[i].EET_Time);
 80040d2:	1d7b      	adds	r3, r7, #5
 80040d4:	781a      	ldrb	r2, [r3, #0]
 80040d6:	0013      	movs	r3, r2
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	189b      	adds	r3, r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	3308      	adds	r3, #8
 80040e0:	001a      	movs	r2, r3
 80040e2:	4b90      	ldr	r3, [pc, #576]	; (8004324 <send_data+0x3c8>)
 80040e4:	18d3      	adds	r3, r2, r3
 80040e6:	1c5c      	adds	r4, r3, #1
 80040e8:	1d7b      	adds	r3, r7, #5
 80040ea:	781a      	ldrb	r2, [r3, #0]
 80040ec:	0013      	movs	r3, r2
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	189b      	adds	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4a8b      	ldr	r2, [pc, #556]	; (8004324 <send_data+0x3c8>)
 80040f6:	189b      	adds	r3, r3, r2
 80040f8:	498f      	ldr	r1, [pc, #572]	; (8004338 <send_data+0x3dc>)
 80040fa:	488c      	ldr	r0, [pc, #560]	; (800432c <send_data+0x3d0>)
 80040fc:	0022      	movs	r2, r4
 80040fe:	f00b fd3b 	bl	800fb78 <siprintf>
    append_data_buf(i, true);
 8004102:	1d7b      	adds	r3, r7, #5
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2101      	movs	r1, #1
 8004108:	0018      	movs	r0, r3
 800410a:	f7ff fd5f 	bl	8003bcc <append_data_buf>
  for (uint8_t i = 0; i < dp_idx+1; i++) {
 800410e:	1d7b      	adds	r3, r7, #5
 8004110:	781a      	ldrb	r2, [r3, #0]
 8004112:	1d7b      	adds	r3, r7, #5
 8004114:	3201      	adds	r2, #1
 8004116:	701a      	strb	r2, [r3, #0]
 8004118:	4b7d      	ldr	r3, [pc, #500]	; (8004310 <send_data+0x3b4>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	1d7a      	adds	r2, r7, #5
 800411e:	7812      	ldrb	r2, [r2, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d9d6      	bls.n	80040d2 <send_data+0x176>
  }

  strcat(data, "batteryVoltages=");
 8004124:	4b7d      	ldr	r3, [pc, #500]	; (800431c <send_data+0x3c0>)
 8004126:	0018      	movs	r0, r3
 8004128:	f7fb fff8 	bl	800011c <strlen>
 800412c:	0003      	movs	r3, r0
 800412e:	001a      	movs	r2, r3
 8004130:	4b7a      	ldr	r3, [pc, #488]	; (800431c <send_data+0x3c0>)
 8004132:	18d2      	adds	r2, r2, r3
 8004134:	4b81      	ldr	r3, [pc, #516]	; (800433c <send_data+0x3e0>)
 8004136:	0010      	movs	r0, r2
 8004138:	0019      	movs	r1, r3
 800413a:	2311      	movs	r3, #17
 800413c:	001a      	movs	r2, r3
 800413e:	f00b feef 	bl	800ff20 <memcpy>
  for (uint8_t i = 0; i < dp_idx+1; i++) {
 8004142:	1d3b      	adds	r3, r7, #4
 8004144:	2200      	movs	r2, #0
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	e01d      	b.n	8004186 <send_data+0x22a>
    sprintf((char *)buf, "%.3f", data_packets[i].batteryVoltage);
 800414a:	1d3b      	adds	r3, r7, #4
 800414c:	781a      	ldrb	r2, [r3, #0]
 800414e:	4975      	ldr	r1, [pc, #468]	; (8004324 <send_data+0x3c8>)
 8004150:	0013      	movs	r3, r2
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	189b      	adds	r3, r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	18cb      	adds	r3, r1, r3
 800415a:	3330      	adds	r3, #48	; 0x30
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	1c18      	adds	r0, r3, #0
 8004160:	f7fe fd6a 	bl	8002c38 <__aeabi_f2d>
 8004164:	0002      	movs	r2, r0
 8004166:	000b      	movs	r3, r1
 8004168:	4975      	ldr	r1, [pc, #468]	; (8004340 <send_data+0x3e4>)
 800416a:	4870      	ldr	r0, [pc, #448]	; (800432c <send_data+0x3d0>)
 800416c:	f00b fd04 	bl	800fb78 <siprintf>
    append_data_buf(i, true);
 8004170:	1d3b      	adds	r3, r7, #4
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2101      	movs	r1, #1
 8004176:	0018      	movs	r0, r3
 8004178:	f7ff fd28 	bl	8003bcc <append_data_buf>
  for (uint8_t i = 0; i < dp_idx+1; i++) {
 800417c:	1d3b      	adds	r3, r7, #4
 800417e:	781a      	ldrb	r2, [r3, #0]
 8004180:	1d3b      	adds	r3, r7, #4
 8004182:	3201      	adds	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	4b62      	ldr	r3, [pc, #392]	; (8004310 <send_data+0x3b4>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	1d3a      	adds	r2, r7, #4
 800418c:	7812      	ldrb	r2, [r2, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d9db      	bls.n	800414a <send_data+0x1ee>
  }

  strcat(data, "accelX=");
 8004192:	4b62      	ldr	r3, [pc, #392]	; (800431c <send_data+0x3c0>)
 8004194:	0018      	movs	r0, r3
 8004196:	f7fb ffc1 	bl	800011c <strlen>
 800419a:	0003      	movs	r3, r0
 800419c:	001a      	movs	r2, r3
 800419e:	4b5f      	ldr	r3, [pc, #380]	; (800431c <send_data+0x3c0>)
 80041a0:	18d2      	adds	r2, r2, r3
 80041a2:	4b68      	ldr	r3, [pc, #416]	; (8004344 <send_data+0x3e8>)
 80041a4:	0010      	movs	r0, r2
 80041a6:	0019      	movs	r1, r3
 80041a8:	2308      	movs	r3, #8
 80041aa:	001a      	movs	r2, r3
 80041ac:	f00b feb8 	bl	800ff20 <memcpy>
  for (uint8_t i = 0; i < dp_idx+1; i++) {
 80041b0:	1cfb      	adds	r3, r7, #3
 80041b2:	2200      	movs	r2, #0
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	e01d      	b.n	80041f4 <send_data+0x298>
    sprintf((char *)buf, "%.2f", data_packets[i].accelerometerData[0]);
 80041b8:	1cfb      	adds	r3, r7, #3
 80041ba:	781a      	ldrb	r2, [r3, #0]
 80041bc:	4959      	ldr	r1, [pc, #356]	; (8004324 <send_data+0x3c8>)
 80041be:	0013      	movs	r3, r2
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	189b      	adds	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	18cb      	adds	r3, r1, r3
 80041c8:	3334      	adds	r3, #52	; 0x34
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	1c18      	adds	r0, r3, #0
 80041ce:	f7fe fd33 	bl	8002c38 <__aeabi_f2d>
 80041d2:	0002      	movs	r2, r0
 80041d4:	000b      	movs	r3, r1
 80041d6:	495c      	ldr	r1, [pc, #368]	; (8004348 <send_data+0x3ec>)
 80041d8:	4854      	ldr	r0, [pc, #336]	; (800432c <send_data+0x3d0>)
 80041da:	f00b fccd 	bl	800fb78 <siprintf>
    append_data_buf(i, true);
 80041de:	1cfb      	adds	r3, r7, #3
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2101      	movs	r1, #1
 80041e4:	0018      	movs	r0, r3
 80041e6:	f7ff fcf1 	bl	8003bcc <append_data_buf>
  for (uint8_t i = 0; i < dp_idx+1; i++) {
 80041ea:	1cfb      	adds	r3, r7, #3
 80041ec:	781a      	ldrb	r2, [r3, #0]
 80041ee:	1cfb      	adds	r3, r7, #3
 80041f0:	3201      	adds	r2, #1
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	4b46      	ldr	r3, [pc, #280]	; (8004310 <send_data+0x3b4>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	1cfa      	adds	r2, r7, #3
 80041fa:	7812      	ldrb	r2, [r2, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d9db      	bls.n	80041b8 <send_data+0x25c>
  }

  strcat(data, "accelY=");
 8004200:	4b46      	ldr	r3, [pc, #280]	; (800431c <send_data+0x3c0>)
 8004202:	0018      	movs	r0, r3
 8004204:	f7fb ff8a 	bl	800011c <strlen>
 8004208:	0003      	movs	r3, r0
 800420a:	001a      	movs	r2, r3
 800420c:	4b43      	ldr	r3, [pc, #268]	; (800431c <send_data+0x3c0>)
 800420e:	18d2      	adds	r2, r2, r3
 8004210:	4b4e      	ldr	r3, [pc, #312]	; (800434c <send_data+0x3f0>)
 8004212:	0010      	movs	r0, r2
 8004214:	0019      	movs	r1, r3
 8004216:	2308      	movs	r3, #8
 8004218:	001a      	movs	r2, r3
 800421a:	f00b fe81 	bl	800ff20 <memcpy>
  for (uint8_t i = 0; i < dp_idx+1; i++) {
 800421e:	1cbb      	adds	r3, r7, #2
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	e01d      	b.n	8004262 <send_data+0x306>
    sprintf((char *)buf, "%.2f", data_packets[i].accelerometerData[1]);
 8004226:	1cbb      	adds	r3, r7, #2
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	493e      	ldr	r1, [pc, #248]	; (8004324 <send_data+0x3c8>)
 800422c:	0013      	movs	r3, r2
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	189b      	adds	r3, r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	18cb      	adds	r3, r1, r3
 8004236:	3338      	adds	r3, #56	; 0x38
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	1c18      	adds	r0, r3, #0
 800423c:	f7fe fcfc 	bl	8002c38 <__aeabi_f2d>
 8004240:	0002      	movs	r2, r0
 8004242:	000b      	movs	r3, r1
 8004244:	4940      	ldr	r1, [pc, #256]	; (8004348 <send_data+0x3ec>)
 8004246:	4839      	ldr	r0, [pc, #228]	; (800432c <send_data+0x3d0>)
 8004248:	f00b fc96 	bl	800fb78 <siprintf>
    append_data_buf(i, true);
 800424c:	1cbb      	adds	r3, r7, #2
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2101      	movs	r1, #1
 8004252:	0018      	movs	r0, r3
 8004254:	f7ff fcba 	bl	8003bcc <append_data_buf>
  for (uint8_t i = 0; i < dp_idx+1; i++) {
 8004258:	1cbb      	adds	r3, r7, #2
 800425a:	781a      	ldrb	r2, [r3, #0]
 800425c:	1cbb      	adds	r3, r7, #2
 800425e:	3201      	adds	r2, #1
 8004260:	701a      	strb	r2, [r3, #0]
 8004262:	4b2b      	ldr	r3, [pc, #172]	; (8004310 <send_data+0x3b4>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	1cba      	adds	r2, r7, #2
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d9db      	bls.n	8004226 <send_data+0x2ca>
  }

  strcat(data, "accelZ=");
 800426e:	4b2b      	ldr	r3, [pc, #172]	; (800431c <send_data+0x3c0>)
 8004270:	0018      	movs	r0, r3
 8004272:	f7fb ff53 	bl	800011c <strlen>
 8004276:	0003      	movs	r3, r0
 8004278:	001a      	movs	r2, r3
 800427a:	4b28      	ldr	r3, [pc, #160]	; (800431c <send_data+0x3c0>)
 800427c:	18d2      	adds	r2, r2, r3
 800427e:	4b34      	ldr	r3, [pc, #208]	; (8004350 <send_data+0x3f4>)
 8004280:	0010      	movs	r0, r2
 8004282:	0019      	movs	r1, r3
 8004284:	2308      	movs	r3, #8
 8004286:	001a      	movs	r2, r3
 8004288:	f00b fe4a 	bl	800ff20 <memcpy>
  for (uint8_t i = 0; i < dp_idx+1; i++) {
 800428c:	1c7b      	adds	r3, r7, #1
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	e01d      	b.n	80042d0 <send_data+0x374>
    sprintf((char *)buf, "%.2f", data_packets[i].accelerometerData[2]);
 8004294:	1c7b      	adds	r3, r7, #1
 8004296:	781a      	ldrb	r2, [r3, #0]
 8004298:	4922      	ldr	r1, [pc, #136]	; (8004324 <send_data+0x3c8>)
 800429a:	0013      	movs	r3, r2
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	189b      	adds	r3, r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	18cb      	adds	r3, r1, r3
 80042a4:	333c      	adds	r3, #60	; 0x3c
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	1c18      	adds	r0, r3, #0
 80042aa:	f7fe fcc5 	bl	8002c38 <__aeabi_f2d>
 80042ae:	0002      	movs	r2, r0
 80042b0:	000b      	movs	r3, r1
 80042b2:	4925      	ldr	r1, [pc, #148]	; (8004348 <send_data+0x3ec>)
 80042b4:	481d      	ldr	r0, [pc, #116]	; (800432c <send_data+0x3d0>)
 80042b6:	f00b fc5f 	bl	800fb78 <siprintf>
    append_data_buf(i, true);
 80042ba:	1c7b      	adds	r3, r7, #1
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2101      	movs	r1, #1
 80042c0:	0018      	movs	r0, r3
 80042c2:	f7ff fc83 	bl	8003bcc <append_data_buf>
  for (uint8_t i = 0; i < dp_idx+1; i++) {
 80042c6:	1c7b      	adds	r3, r7, #1
 80042c8:	781a      	ldrb	r2, [r3, #0]
 80042ca:	1c7b      	adds	r3, r7, #1
 80042cc:	3201      	adds	r2, #1
 80042ce:	701a      	strb	r2, [r3, #0]
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <send_data+0x3b4>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	1c7a      	adds	r2, r7, #1
 80042d6:	7812      	ldrb	r2, [r2, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d9db      	bls.n	8004294 <send_data+0x338>
  }

  strcat(data, "satNum=");
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <send_data+0x3c0>)
 80042de:	0018      	movs	r0, r3
 80042e0:	f7fb ff1c 	bl	800011c <strlen>
 80042e4:	0003      	movs	r3, r0
 80042e6:	001a      	movs	r2, r3
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <send_data+0x3c0>)
 80042ea:	18d2      	adds	r2, r2, r3
 80042ec:	4b19      	ldr	r3, [pc, #100]	; (8004354 <send_data+0x3f8>)
 80042ee:	0010      	movs	r0, r2
 80042f0:	0019      	movs	r1, r3
 80042f2:	2308      	movs	r3, #8
 80042f4:	001a      	movs	r2, r3
 80042f6:	f00b fe13 	bl	800ff20 <memcpy>
  for (uint8_t i = 0; i < dp_idx+1; i++) {
 80042fa:	003b      	movs	r3, r7
 80042fc:	2200      	movs	r2, #0
 80042fe:	701a      	strb	r2, [r3, #0]
 8004300:	e046      	b.n	8004390 <send_data+0x434>
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	20000036 	.word	0x20000036
 8004308:	200009dc 	.word	0x200009dc
 800430c:	08013348 	.word	0x08013348
 8004310:	200009df 	.word	0x200009df
 8004314:	08013364 	.word	0x08013364
 8004318:	08013388 	.word	0x08013388
 800431c:	200019d0 	.word	0x200019d0
 8004320:	080133cc 	.word	0x080133cc
 8004324:	200009e0 	.word	0x200009e0
 8004328:	080133d8 	.word	0x080133d8
 800432c:	2000052c 	.word	0x2000052c
 8004330:	080133e0 	.word	0x080133e0
 8004334:	080133ec 	.word	0x080133ec
 8004338:	080133f4 	.word	0x080133f4
 800433c:	080133fc 	.word	0x080133fc
 8004340:	08013410 	.word	0x08013410
 8004344:	08013418 	.word	0x08013418
 8004348:	08013420 	.word	0x08013420
 800434c:	08013428 	.word	0x08013428
 8004350:	08013430 	.word	0x08013430
 8004354:	08013438 	.word	0x08013438
    sprintf((char *)buf, "%d", data_packets[i].satNum);
 8004358:	003b      	movs	r3, r7
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	4929      	ldr	r1, [pc, #164]	; (8004404 <send_data+0x4a8>)
 800435e:	2040      	movs	r0, #64	; 0x40
 8004360:	0013      	movs	r3, r2
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	189b      	adds	r3, r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	18cb      	adds	r3, r1, r3
 800436a:	181b      	adds	r3, r3, r0
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	001a      	movs	r2, r3
 8004370:	4925      	ldr	r1, [pc, #148]	; (8004408 <send_data+0x4ac>)
 8004372:	4b26      	ldr	r3, [pc, #152]	; (800440c <send_data+0x4b0>)
 8004374:	0018      	movs	r0, r3
 8004376:	f00b fbff 	bl	800fb78 <siprintf>
    append_data_buf(i, false);
 800437a:	003b      	movs	r3, r7
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2100      	movs	r1, #0
 8004380:	0018      	movs	r0, r3
 8004382:	f7ff fc23 	bl	8003bcc <append_data_buf>
  for (uint8_t i = 0; i < dp_idx+1; i++) {
 8004386:	003b      	movs	r3, r7
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	003b      	movs	r3, r7
 800438c:	3201      	adds	r2, #1
 800438e:	701a      	strb	r2, [r3, #0]
 8004390:	4b1f      	ldr	r3, [pc, #124]	; (8004410 <send_data+0x4b4>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	003a      	movs	r2, r7
 8004396:	7812      	ldrb	r2, [r2, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d9dd      	bls.n	8004358 <send_data+0x3fc>
  }

  // Send HTTP POST
  sprintf(cmd, "AT+QHTTPPOST=%d\r\n", strlen(data));
 800439c:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <send_data+0x4b8>)
 800439e:	0018      	movs	r0, r3
 80043a0:	f7fb febc 	bl	800011c <strlen>
 80043a4:	0002      	movs	r2, r0
 80043a6:	491c      	ldr	r1, [pc, #112]	; (8004418 <send_data+0x4bc>)
 80043a8:	4b1c      	ldr	r3, [pc, #112]	; (800441c <send_data+0x4c0>)
 80043aa:	0018      	movs	r0, r3
 80043ac:	f00b fbe4 	bl	800fb78 <siprintf>
  if (send_at_connect_cmd(cmd, data, "+QHTTPPOST:", "+QHTTPPOST: 0,200", 1)) {
 80043b0:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <send_data+0x4c4>)
 80043b2:	4a1c      	ldr	r2, [pc, #112]	; (8004424 <send_data+0x4c8>)
 80043b4:	4917      	ldr	r1, [pc, #92]	; (8004414 <send_data+0x4b8>)
 80043b6:	4819      	ldr	r0, [pc, #100]	; (800441c <send_data+0x4c0>)
 80043b8:	2401      	movs	r4, #1
 80043ba:	9400      	str	r4, [sp, #0]
 80043bc:	f001 f990 	bl	80056e0 <send_at_connect_cmd>
 80043c0:	1e03      	subs	r3, r0, #0
 80043c2:	d007      	beq.n	80043d4 <send_data+0x478>
    BLINK_LED(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 2, 100);
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	01d9      	lsls	r1, r3, #7
 80043c8:	4817      	ldr	r0, [pc, #92]	; (8004428 <send_data+0x4cc>)
 80043ca:	2364      	movs	r3, #100	; 0x64
 80043cc:	2202      	movs	r2, #2
 80043ce:	f001 fadd 	bl	800598c <BLINK_LED>
 80043d2:	e006      	b.n	80043e2 <send_data+0x486>
  }
  else {
    BLINK_LED(RED_LED_GPIO_Port, RED_LED_Pin, 2, 100);
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	0219      	lsls	r1, r3, #8
 80043d8:	4813      	ldr	r0, [pc, #76]	; (8004428 <send_data+0x4cc>)
 80043da:	2364      	movs	r3, #100	; 0x64
 80043dc:	2202      	movs	r2, #2
 80043de:	f001 fad5 	bl	800598c <BLINK_LED>
  }

  send_at_cmd("AT+QGPSCFG=\"priority\",0\r\n"); // Set GNSS priority
 80043e2:	4b12      	ldr	r3, [pc, #72]	; (800442c <send_data+0x4d0>)
 80043e4:	0018      	movs	r0, r3
 80043e6:	f001 f92f 	bl	8005648 <send_at_cmd>
  cmd_fail = 0;
 80043ea:	4b11      	ldr	r3, [pc, #68]	; (8004430 <send_data+0x4d4>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]
  dp_idx = 0;
 80043f0:	4b07      	ldr	r3, [pc, #28]	; (8004410 <send_data+0x4b4>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	701a      	strb	r2, [r3, #0]
  send_done = 1;
 80043f6:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <send_data+0x4d8>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]
}
 80043fc:	46c0      	nop			; (mov r8, r8)
 80043fe:	46bd      	mov	sp, r7
 8004400:	b003      	add	sp, #12
 8004402:	bd90      	pop	{r4, r7, pc}
 8004404:	200009e0 	.word	0x200009e0
 8004408:	08013440 	.word	0x08013440
 800440c:	2000052c 	.word	0x2000052c
 8004410:	200009df 	.word	0x200009df
 8004414:	200019d0 	.word	0x200019d0
 8004418:	08013444 	.word	0x08013444
 800441c:	20000914 	.word	0x20000914
 8004420:	08013458 	.word	0x08013458
 8004424:	0801346c 	.word	0x0801346c
 8004428:	50000800 	.word	0x50000800
 800442c:	08013478 	.word	0x08013478
 8004430:	200009de 	.word	0x200009de
 8004434:	20000036 	.word	0x20000036

08004438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004438:	b590      	push	{r4, r7, lr}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800443e:	f001 fd29 	bl	8005e94 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004442:	f000 fadb 	bl	80049fc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004446:	f000 fce9 	bl	8004e1c <MX_GPIO_Init>
  MX_DMA_Init();
 800444a:	f000 fcc1 	bl	8004dd0 <MX_DMA_Init>
  MX_ADC_Init();
 800444e:	f000 fb47 	bl	8004ae0 <MX_ADC_Init>
  MX_I2C1_Init();
 8004452:	f000 fba9 	bl	8004ba8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004456:	f000 fbe7 	bl	8004c28 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800445a:	f000 fc59 	bl	8004d10 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800445e:	f000 fc87 	bl	8004d70 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8004462:	f000 fc19 	bl	8004c98 <MX_TIM6_Init>
  MX_FATFS_Init();
 8004466:	f006 facd 	bl	800aa04 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  RED_LED_OFF();
 800446a:	f001 fa65 	bl	8005938 <RED_LED_OFF>
  GREEN_LED_OFF();
 800446e:	f001 fa71 	bl	8005954 <GREEN_LED_OFF>
  BLUE_LED_OFF();
 8004472:	f001 fa7d 	bl	8005970 <BLUE_LED_OFF>
  module_power_up();
 8004476:	f001 f886 	bl	8005586 <module_power_up>
  init();
 800447a:	f7ff fbf3 	bl	8003c64 <init>
  HAL_TIM_Base_Start_IT(&htim6);
 800447e:	4bb4      	ldr	r3, [pc, #720]	; (8004750 <main+0x318>)
 8004480:	0018      	movs	r0, r3
 8004482:	f005 f8ab 	bl	80095dc <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (exit_stop_mode) {
 8004486:	4bb3      	ldr	r3, [pc, #716]	; (8004754 <main+0x31c>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d006      	beq.n	800449c <main+0x64>
      module_power_up();
 800448e:	f001 f87a 	bl	8005586 <module_power_up>
      init();
 8004492:	f7ff fbe7 	bl	8003c64 <init>
      exit_stop_mode = false;
 8004496:	4baf      	ldr	r3, [pc, #700]	; (8004754 <main+0x31c>)
 8004498:	2200      	movs	r2, #0
 800449a:	701a      	strb	r2, [r3, #0]
    }
    switch(btn_event) {
 800449c:	4bae      	ldr	r3, [pc, #696]	; (8004758 <main+0x320>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d040      	beq.n	8004526 <main+0xee>
 80044a4:	dc63      	bgt.n	800456e <main+0x136>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d060      	beq.n	800456c <main+0x134>
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d15f      	bne.n	800456e <main+0x136>
      case NO_PRESS:
        break;
      case SINGLE_PRESS:
        float vbat = getBatteryVoltage();
 80044ae:	f7ff fb5b 	bl	8003b68 <getBatteryVoltage>
 80044b2:	1c03      	adds	r3, r0, #0
 80044b4:	60bb      	str	r3, [r7, #8]
        if (vbat > 3.85f) BLINK_LED(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 3, 100);
 80044b6:	49a9      	ldr	r1, [pc, #676]	; (800475c <main+0x324>)
 80044b8:	68b8      	ldr	r0, [r7, #8]
 80044ba:	f7fc f825 	bl	8000508 <__aeabi_fcmpgt>
 80044be:	1e03      	subs	r3, r0, #0
 80044c0:	d008      	beq.n	80044d4 <main+0x9c>
 80044c2:	2380      	movs	r3, #128	; 0x80
 80044c4:	0119      	lsls	r1, r3, #4
 80044c6:	23a0      	movs	r3, #160	; 0xa0
 80044c8:	05d8      	lsls	r0, r3, #23
 80044ca:	2364      	movs	r3, #100	; 0x64
 80044cc:	2203      	movs	r2, #3
 80044ce:	f001 fa5d 	bl	800598c <BLINK_LED>
 80044d2:	e024      	b.n	800451e <main+0xe6>
        else if (vbat > 3.55f) BLINK_LED(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 2, 100);
 80044d4:	49a2      	ldr	r1, [pc, #648]	; (8004760 <main+0x328>)
 80044d6:	68b8      	ldr	r0, [r7, #8]
 80044d8:	f7fc f816 	bl	8000508 <__aeabi_fcmpgt>
 80044dc:	1e03      	subs	r3, r0, #0
 80044de:	d008      	beq.n	80044f2 <main+0xba>
 80044e0:	2380      	movs	r3, #128	; 0x80
 80044e2:	0119      	lsls	r1, r3, #4
 80044e4:	23a0      	movs	r3, #160	; 0xa0
 80044e6:	05d8      	lsls	r0, r3, #23
 80044e8:	2364      	movs	r3, #100	; 0x64
 80044ea:	2202      	movs	r2, #2
 80044ec:	f001 fa4e 	bl	800598c <BLINK_LED>
 80044f0:	e015      	b.n	800451e <main+0xe6>
        else if (vbat > 3.2f) BLINK_LED(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1, 100);
 80044f2:	499c      	ldr	r1, [pc, #624]	; (8004764 <main+0x32c>)
 80044f4:	68b8      	ldr	r0, [r7, #8]
 80044f6:	f7fc f807 	bl	8000508 <__aeabi_fcmpgt>
 80044fa:	1e03      	subs	r3, r0, #0
 80044fc:	d008      	beq.n	8004510 <main+0xd8>
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	0119      	lsls	r1, r3, #4
 8004502:	23a0      	movs	r3, #160	; 0xa0
 8004504:	05d8      	lsls	r0, r3, #23
 8004506:	2364      	movs	r3, #100	; 0x64
 8004508:	2201      	movs	r2, #1
 800450a:	f001 fa3f 	bl	800598c <BLINK_LED>
 800450e:	e006      	b.n	800451e <main+0xe6>
        else BLINK_LED(RED_LED_GPIO_Port, RED_LED_Pin, 1, 100);
 8004510:	2380      	movs	r3, #128	; 0x80
 8004512:	0219      	lsls	r1, r3, #8
 8004514:	4894      	ldr	r0, [pc, #592]	; (8004768 <main+0x330>)
 8004516:	2364      	movs	r3, #100	; 0x64
 8004518:	2201      	movs	r2, #1
 800451a:	f001 fa37 	bl	800598c <BLINK_LED>
        btn_event = NO_PRESS;
 800451e:	4b8e      	ldr	r3, [pc, #568]	; (8004758 <main+0x320>)
 8004520:	2200      	movs	r2, #0
 8004522:	701a      	strb	r2, [r3, #0]
        break;
 8004524:	e023      	b.n	800456e <main+0x136>
      case LONG_PRESS:
        BLINK_LED(RED_LED_GPIO_Port, RED_LED_Pin, 1, 1000);
 8004526:	23fa      	movs	r3, #250	; 0xfa
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	2280      	movs	r2, #128	; 0x80
 800452c:	0211      	lsls	r1, r2, #8
 800452e:	488e      	ldr	r0, [pc, #568]	; (8004768 <main+0x330>)
 8004530:	2201      	movs	r2, #1
 8004532:	f001 fa2b 	bl	800598c <BLINK_LED>
        if (dp_idx > 0) {
 8004536:	4b8d      	ldr	r3, [pc, #564]	; (800476c <main+0x334>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <main+0x10a>
          send_data();
 800453e:	f7ff fd0d 	bl	8003f5c <send_data>
        }
        module_power_down();
 8004542:	f001 f83c 	bl	80055be <module_power_down>
        f_mount(NULL, "", 0); // de-mount SD card
 8004546:	4b8a      	ldr	r3, [pc, #552]	; (8004770 <main+0x338>)
 8004548:	2200      	movs	r2, #0
 800454a:	0019      	movs	r1, r3
 800454c:	2000      	movs	r0, #0
 800454e:	f008 fe49 	bl	800d1e4 <f_mount>
        HAL_SuspendTick();
 8004552:	f001 fd33 	bl	8005fbc <HAL_SuspendTick>
        enter_stop_mode = true;
 8004556:	4b87      	ldr	r3, [pc, #540]	; (8004774 <main+0x33c>)
 8004558:	2201      	movs	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]
        btn_event = NO_PRESS;
 800455c:	4b7e      	ldr	r3, [pc, #504]	; (8004758 <main+0x320>)
 800455e:	2200      	movs	r2, #0
 8004560:	701a      	strb	r2, [r3, #0]
        HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8004562:	2101      	movs	r1, #1
 8004564:	2001      	movs	r0, #1
 8004566:	f003 fbb9 	bl	8007cdc <HAL_PWR_EnterSTOPMode>
        break;
 800456a:	e000      	b.n	800456e <main+0x136>
        break;
 800456c:	46c0      	nop			; (mov r8, r8)
    }

    if (gnss_data_ready == 1) {
 800456e:	4b82      	ldr	r3, [pc, #520]	; (8004778 <main+0x340>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d000      	beq.n	8004578 <main+0x140>
 8004576:	e221      	b.n	80049bc <main+0x584>
      uint8_t err_code = 0; // 0 = success
 8004578:	2417      	movs	r4, #23
 800457a:	193b      	adds	r3, r7, r4
 800457c:	2200      	movs	r2, #0
 800457e:	701a      	strb	r2, [r3, #0]
      memset(buf, 0, sizeof(buf));
 8004580:	23fa      	movs	r3, #250	; 0xfa
 8004582:	009a      	lsls	r2, r3, #2
 8004584:	4b7d      	ldr	r3, [pc, #500]	; (800477c <main+0x344>)
 8004586:	2100      	movs	r1, #0
 8004588:	0018      	movs	r0, r3
 800458a:	f00b fb8b 	bl	800fca4 <memset>
      sprintf(cmd, "AT+QGPSLOC=1\r\n");
 800458e:	4a7c      	ldr	r2, [pc, #496]	; (8004780 <main+0x348>)
 8004590:	4b7c      	ldr	r3, [pc, #496]	; (8004784 <main+0x34c>)
 8004592:	0011      	movs	r1, r2
 8004594:	0018      	movs	r0, r3
 8004596:	f00b faef 	bl	800fb78 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)cmd, strlen(cmd), 100);
 800459a:	4b7a      	ldr	r3, [pc, #488]	; (8004784 <main+0x34c>)
 800459c:	0018      	movs	r0, r3
 800459e:	f7fb fdbd 	bl	800011c <strlen>
 80045a2:	0003      	movs	r3, r0
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	4977      	ldr	r1, [pc, #476]	; (8004784 <main+0x34c>)
 80045a8:	4877      	ldr	r0, [pc, #476]	; (8004788 <main+0x350>)
 80045aa:	2364      	movs	r3, #100	; 0x64
 80045ac:	f005 fa80 	bl	8009ab0 <HAL_UART_Transmit>
      HAL_UART_Receive_DMA(&huart1, buf, BUF_MAX_LEN);
 80045b0:	23fa      	movs	r3, #250	; 0xfa
 80045b2:	009a      	lsls	r2, r3, #2
 80045b4:	4971      	ldr	r1, [pc, #452]	; (800477c <main+0x344>)
 80045b6:	4b74      	ldr	r3, [pc, #464]	; (8004788 <main+0x350>)
 80045b8:	0018      	movs	r0, r3
 80045ba:	f005 fb19 	bl	8009bf0 <HAL_UART_Receive_DMA>
      HAL_Delay(100);
 80045be:	2064      	movs	r0, #100	; 0x64
 80045c0:	f001 fcd8 	bl	8005f74 <HAL_Delay>

      if (strstrn((char *)buf, "ERROR", BUF_MAX_LEN) != NULL) {
 80045c4:	23fa      	movs	r3, #250	; 0xfa
 80045c6:	009a      	lsls	r2, r3, #2
 80045c8:	4970      	ldr	r1, [pc, #448]	; (800478c <main+0x354>)
 80045ca:	4b6c      	ldr	r3, [pc, #432]	; (800477c <main+0x344>)
 80045cc:	0018      	movs	r0, r3
 80045ce:	f001 f973 	bl	80058b8 <strstrn>
 80045d2:	1e03      	subs	r3, r0, #0
 80045d4:	d003      	beq.n	80045de <main+0x1a6>
        err_code = 1; // waiting for position fix
 80045d6:	193b      	adds	r3, r7, r4
 80045d8:	2201      	movs	r2, #1
 80045da:	701a      	strb	r2, [r3, #0]
 80045dc:	e1d6      	b.n	800498c <main+0x554>
      }
      else if (strstrn((char *)buf, "QGPSLOC", BUF_MAX_LEN) != NULL) {
 80045de:	23fa      	movs	r3, #250	; 0xfa
 80045e0:	009a      	lsls	r2, r3, #2
 80045e2:	496b      	ldr	r1, [pc, #428]	; (8004790 <main+0x358>)
 80045e4:	4b65      	ldr	r3, [pc, #404]	; (800477c <main+0x344>)
 80045e6:	0018      	movs	r0, r3
 80045e8:	f001 f966 	bl	80058b8 <strstrn>
 80045ec:	1e03      	subs	r3, r0, #0
 80045ee:	d100      	bne.n	80045f2 <main+0x1ba>
 80045f0:	e1cc      	b.n	800498c <main+0x554>
        // Parse GNSS data
        uint16_t skip = 0;
 80045f2:	2314      	movs	r3, #20
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	2200      	movs	r2, #0
 80045f8:	801a      	strh	r2, [r3, #0]
        while (buf[skip] != ' ') {
 80045fa:	e00a      	b.n	8004612 <main+0x1da>
          if (skip+1 == BUF_MAX_LEN) break;
 80045fc:	2114      	movs	r1, #20
 80045fe:	187b      	adds	r3, r7, r1
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	4a64      	ldr	r2, [pc, #400]	; (8004794 <main+0x35c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00c      	beq.n	8004622 <main+0x1ea>
          skip++;
 8004608:	187b      	adds	r3, r7, r1
 800460a:	881a      	ldrh	r2, [r3, #0]
 800460c:	187b      	adds	r3, r7, r1
 800460e:	3201      	adds	r2, #1
 8004610:	801a      	strh	r2, [r3, #0]
        while (buf[skip] != ' ') {
 8004612:	2314      	movs	r3, #20
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	4a58      	ldr	r2, [pc, #352]	; (800477c <main+0x344>)
 800461a:	5cd3      	ldrb	r3, [r2, r3]
 800461c:	2b20      	cmp	r3, #32
 800461e:	d1ed      	bne.n	80045fc <main+0x1c4>
 8004620:	e000      	b.n	8004624 <main+0x1ec>
          if (skip+1 == BUF_MAX_LEN) break;
 8004622:	46c0      	nop			; (mov r8, r8)
        }

        if (skip+10 != BUF_MAX_LEN) {
 8004624:	2114      	movs	r1, #20
 8004626:	187b      	adds	r3, r7, r1
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	4a5b      	ldr	r2, [pc, #364]	; (8004798 <main+0x360>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d100      	bne.n	8004632 <main+0x1fa>
 8004630:	e1a8      	b.n	8004984 <main+0x54c>
          char *token = NULL;
 8004632:	2300      	movs	r3, #0
 8004634:	607b      	str	r3, [r7, #4]
          char *delimiter = "\r\n";
 8004636:	4b59      	ldr	r3, [pc, #356]	; (800479c <main+0x364>)
 8004638:	603b      	str	r3, [r7, #0]
          token = strtok((char*)buf+skip+1, delimiter);
 800463a:	187b      	adds	r3, r7, r1
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	4b4e      	ldr	r3, [pc, #312]	; (800477c <main+0x344>)
 8004642:	18d3      	adds	r3, r2, r3
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	0011      	movs	r1, r2
 8004648:	0018      	movs	r0, r3
 800464a:	f00b fb73 	bl	800fd34 <strtok>
 800464e:	0003      	movs	r3, r0
 8004650:	607b      	str	r3, [r7, #4]
          if (token != 0) {
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d100      	bne.n	800465a <main+0x222>
 8004658:	e18f      	b.n	800497a <main+0x542>
            char *token2;
            token2 = strtok(token, ","); //First token is UTC time
 800465a:	4a51      	ldr	r2, [pc, #324]	; (80047a0 <main+0x368>)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	0011      	movs	r1, r2
 8004660:	0018      	movs	r0, r3
 8004662:	f00b fb67 	bl	800fd34 <strtok>
 8004666:	0003      	movs	r3, r0
 8004668:	613b      	str	r3, [r7, #16]
            for (uint8_t i = 1; i < 14; i++) { //last item we need has 13th index
 800466a:	230f      	movs	r3, #15
 800466c:	18fb      	adds	r3, r7, r3
 800466e:	2201      	movs	r2, #1
 8004670:	701a      	strb	r2, [r3, #0]
 8004672:	e0be      	b.n	80047f2 <main+0x3ba>
              switch(i) {
 8004674:	230f      	movs	r3, #15
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b0d      	cmp	r3, #13
 800467c:	d900      	bls.n	8004680 <main+0x248>
 800467e:	e0ab      	b.n	80047d8 <main+0x3a0>
 8004680:	009a      	lsls	r2, r3, #2
 8004682:	4b48      	ldr	r3, [pc, #288]	; (80047a4 <main+0x36c>)
 8004684:	18d3      	adds	r3, r2, r3
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	469f      	mov	pc, r3
              case 1: /* UTC time */
                convertUTCtoEET(token2, data_packets[dp_idx].EET_Time);
 800468a:	4b38      	ldr	r3, [pc, #224]	; (800476c <main+0x334>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	001a      	movs	r2, r3
 8004690:	0013      	movs	r3, r2
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	189b      	adds	r3, r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4a43      	ldr	r2, [pc, #268]	; (80047a8 <main+0x370>)
 800469a:	189a      	adds	r2, r3, r2
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	0011      	movs	r1, r2
 80046a0:	0018      	movs	r0, r3
 80046a2:	f001 f9bb 	bl	8005a1c <convertUTCtoEET>
                break;
 80046a6:	e097      	b.n	80047d8 <main+0x3a0>
              case 2: /* Raw latitude */
                strcpy(data_packets[dp_idx].latitude, token2);
 80046a8:	4b30      	ldr	r3, [pc, #192]	; (800476c <main+0x334>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	001a      	movs	r2, r3
 80046ae:	0013      	movs	r3, r2
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	189b      	adds	r3, r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	3310      	adds	r3, #16
 80046b8:	001a      	movs	r2, r3
 80046ba:	4b3b      	ldr	r3, [pc, #236]	; (80047a8 <main+0x370>)
 80046bc:	18d3      	adds	r3, r2, r3
 80046be:	3306      	adds	r3, #6
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	0011      	movs	r1, r2
 80046c4:	0018      	movs	r0, r3
 80046c6:	f00b fc18 	bl	800fefa <strcpy>
                break;
 80046ca:	e085      	b.n	80047d8 <main+0x3a0>
              case 3: /* N/S */
                data_packets[dp_idx].NS = (char) token2[0];
 80046cc:	4b27      	ldr	r3, [pc, #156]	; (800476c <main+0x334>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	0019      	movs	r1, r3
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	7818      	ldrb	r0, [r3, #0]
 80046d6:	4a34      	ldr	r2, [pc, #208]	; (80047a8 <main+0x370>)
 80046d8:	000b      	movs	r3, r1
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	185b      	adds	r3, r3, r1
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	18d3      	adds	r3, r2, r3
 80046e2:	3314      	adds	r3, #20
 80046e4:	1c02      	adds	r2, r0, #0
 80046e6:	701a      	strb	r2, [r3, #0]
                break;
 80046e8:	e076      	b.n	80047d8 <main+0x3a0>
              case 4: /* Raw longtitude */
                strcpy(data_packets[dp_idx].longitude, token2);
 80046ea:	4b20      	ldr	r3, [pc, #128]	; (800476c <main+0x334>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	001a      	movs	r2, r3
 80046f0:	0013      	movs	r3, r2
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	189b      	adds	r3, r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	3320      	adds	r3, #32
 80046fa:	001a      	movs	r2, r3
 80046fc:	4b2a      	ldr	r3, [pc, #168]	; (80047a8 <main+0x370>)
 80046fe:	18d3      	adds	r3, r2, r3
 8004700:	3302      	adds	r3, #2
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	0011      	movs	r1, r2
 8004706:	0018      	movs	r0, r3
 8004708:	f00b fbf7 	bl	800fefa <strcpy>
                break;
 800470c:	e064      	b.n	80047d8 <main+0x3a0>
              case 5: /* E/W */
                data_packets[dp_idx].EW = (char) token2[0];
 800470e:	4b17      	ldr	r3, [pc, #92]	; (800476c <main+0x334>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	0019      	movs	r1, r3
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	7818      	ldrb	r0, [r3, #0]
 8004718:	4a23      	ldr	r2, [pc, #140]	; (80047a8 <main+0x370>)
 800471a:	000b      	movs	r3, r1
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	185b      	adds	r3, r3, r1
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	18d3      	adds	r3, r2, r3
 8004724:	3315      	adds	r3, #21
 8004726:	1c02      	adds	r2, r0, #0
 8004728:	701a      	strb	r2, [r3, #0]
                break;
 800472a:	e055      	b.n	80047d8 <main+0x3a0>
              case 12: /* date */
                formatDate(token2, data_packets[dp_idx].date);
 800472c:	4b0f      	ldr	r3, [pc, #60]	; (800476c <main+0x334>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	001a      	movs	r2, r3
 8004732:	0013      	movs	r3, r2
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	189b      	adds	r3, r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	3308      	adds	r3, #8
 800473c:	001a      	movs	r2, r3
 800473e:	4b1a      	ldr	r3, [pc, #104]	; (80047a8 <main+0x370>)
 8004740:	18d3      	adds	r3, r2, r3
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	0011      	movs	r1, r2
 8004748:	0018      	movs	r0, r3
 800474a:	f001 f9af 	bl	8005aac <formatDate>
                break;
 800474e:	e043      	b.n	80047d8 <main+0x3a0>
 8004750:	2000034c 	.word	0x2000034c
 8004754:	20002b6e 	.word	0x20002b6e
 8004758:	20002b6c 	.word	0x20002b6c
 800475c:	40766666 	.word	0x40766666
 8004760:	40633333 	.word	0x40633333
 8004764:	404ccccd 	.word	0x404ccccd
 8004768:	50000800 	.word	0x50000800
 800476c:	200009df 	.word	0x200009df
 8004770:	080132a0 	.word	0x080132a0
 8004774:	20002b6d 	.word	0x20002b6d
 8004778:	200009dd 	.word	0x200009dd
 800477c:	2000052c 	.word	0x2000052c
 8004780:	08013494 	.word	0x08013494
 8004784:	20000914 	.word	0x20000914
 8004788:	2000038c 	.word	0x2000038c
 800478c:	080134a4 	.word	0x080134a4
 8004790:	080134ac 	.word	0x080134ac
 8004794:	000003e7 	.word	0x000003e7
 8004798:	000003de 	.word	0x000003de
 800479c:	080134b4 	.word	0x080134b4
 80047a0:	080134b8 	.word	0x080134b8
 80047a4:	08013670 	.word	0x08013670
 80047a8:	200009e0 	.word	0x200009e0
              case 13: /* Number of satellites */
                data_packets[dp_idx].satNum = (uint8_t) strtol(token2, NULL, 10);
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	220a      	movs	r2, #10
 80047b0:	2100      	movs	r1, #0
 80047b2:	0018      	movs	r0, r3
 80047b4:	f00a fa8a 	bl	800eccc <strtol>
 80047b8:	0002      	movs	r2, r0
 80047ba:	4b87      	ldr	r3, [pc, #540]	; (80049d8 <main+0x5a0>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	0018      	movs	r0, r3
 80047c0:	b2d4      	uxtb	r4, r2
 80047c2:	4a86      	ldr	r2, [pc, #536]	; (80049dc <main+0x5a4>)
 80047c4:	2140      	movs	r1, #64	; 0x40
 80047c6:	0003      	movs	r3, r0
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	181b      	adds	r3, r3, r0
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	18d3      	adds	r3, r2, r3
 80047d0:	185b      	adds	r3, r3, r1
 80047d2:	1c22      	adds	r2, r4, #0
 80047d4:	701a      	strb	r2, [r3, #0]
                break;
 80047d6:	46c0      	nop			; (mov r8, r8)
              }
              token2 = strtok(NULL, ",");
 80047d8:	4b81      	ldr	r3, [pc, #516]	; (80049e0 <main+0x5a8>)
 80047da:	0019      	movs	r1, r3
 80047dc:	2000      	movs	r0, #0
 80047de:	f00b faa9 	bl	800fd34 <strtok>
 80047e2:	0003      	movs	r3, r0
 80047e4:	613b      	str	r3, [r7, #16]
            for (uint8_t i = 1; i < 14; i++) { //last item we need has 13th index
 80047e6:	210f      	movs	r1, #15
 80047e8:	187b      	adds	r3, r7, r1
 80047ea:	781a      	ldrb	r2, [r3, #0]
 80047ec:	187b      	adds	r3, r7, r1
 80047ee:	3201      	adds	r2, #1
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	230f      	movs	r3, #15
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b0d      	cmp	r3, #13
 80047fa:	d800      	bhi.n	80047fe <main+0x3c6>
 80047fc:	e73a      	b.n	8004674 <main+0x23c>
            }

            if (strcmp(data_packets[dp_idx].date, "0000-00-00") == 0 ||
 80047fe:	4b76      	ldr	r3, [pc, #472]	; (80049d8 <main+0x5a0>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	001a      	movs	r2, r3
 8004804:	0013      	movs	r3, r2
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	189b      	adds	r3, r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	3308      	adds	r3, #8
 800480e:	001a      	movs	r2, r3
 8004810:	4b72      	ldr	r3, [pc, #456]	; (80049dc <main+0x5a4>)
 8004812:	18d3      	adds	r3, r2, r3
 8004814:	3301      	adds	r3, #1
 8004816:	4a73      	ldr	r2, [pc, #460]	; (80049e4 <main+0x5ac>)
 8004818:	0011      	movs	r1, r2
 800481a:	0018      	movs	r0, r3
 800481c:	f7fb fc74 	bl	8000108 <strcmp>
 8004820:	1e03      	subs	r3, r0, #0
 8004822:	d100      	bne.n	8004826 <main+0x3ee>
 8004824:	e073      	b.n	800490e <main+0x4d6>
                strcmp(data_packets[dp_idx].EET_Time, "00:00:00") == 0 ||
 8004826:	4b6c      	ldr	r3, [pc, #432]	; (80049d8 <main+0x5a0>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	001a      	movs	r2, r3
 800482c:	0013      	movs	r3, r2
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	189b      	adds	r3, r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4a69      	ldr	r2, [pc, #420]	; (80049dc <main+0x5a4>)
 8004836:	189b      	adds	r3, r3, r2
 8004838:	4a6b      	ldr	r2, [pc, #428]	; (80049e8 <main+0x5b0>)
 800483a:	0011      	movs	r1, r2
 800483c:	0018      	movs	r0, r3
 800483e:	f7fb fc63 	bl	8000108 <strcmp>
 8004842:	1e03      	subs	r3, r0, #0
            if (strcmp(data_packets[dp_idx].date, "0000-00-00") == 0 ||
 8004844:	d063      	beq.n	800490e <main+0x4d6>
                valid_number(data_packets[dp_idx].latitude) == 0 ||
 8004846:	4b64      	ldr	r3, [pc, #400]	; (80049d8 <main+0x5a0>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	001a      	movs	r2, r3
 800484c:	0013      	movs	r3, r2
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	189b      	adds	r3, r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	3310      	adds	r3, #16
 8004856:	001a      	movs	r2, r3
 8004858:	4b60      	ldr	r3, [pc, #384]	; (80049dc <main+0x5a4>)
 800485a:	18d3      	adds	r3, r2, r3
 800485c:	3306      	adds	r3, #6
 800485e:	0018      	movs	r0, r3
 8004860:	f001 f96a 	bl	8005b38 <valid_number>
 8004864:	1e03      	subs	r3, r0, #0
                strcmp(data_packets[dp_idx].EET_Time, "00:00:00") == 0 ||
 8004866:	d052      	beq.n	800490e <main+0x4d6>
                valid_number(data_packets[dp_idx].longitude) == 0 ||
 8004868:	4b5b      	ldr	r3, [pc, #364]	; (80049d8 <main+0x5a0>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	001a      	movs	r2, r3
 800486e:	0013      	movs	r3, r2
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	189b      	adds	r3, r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	3320      	adds	r3, #32
 8004878:	001a      	movs	r2, r3
 800487a:	4b58      	ldr	r3, [pc, #352]	; (80049dc <main+0x5a4>)
 800487c:	18d3      	adds	r3, r2, r3
 800487e:	3302      	adds	r3, #2
 8004880:	0018      	movs	r0, r3
 8004882:	f001 f959 	bl	8005b38 <valid_number>
 8004886:	1e03      	subs	r3, r0, #0
                valid_number(data_packets[dp_idx].latitude) == 0 ||
 8004888:	d041      	beq.n	800490e <main+0x4d6>
                convertToDecimalDegrees(data_packets[dp_idx].latitude, data_packets[dp_idx].NS) == 0.f ||
 800488a:	4b53      	ldr	r3, [pc, #332]	; (80049d8 <main+0x5a0>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	001a      	movs	r2, r3
 8004890:	0013      	movs	r3, r2
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	189b      	adds	r3, r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	3310      	adds	r3, #16
 800489a:	001a      	movs	r2, r3
 800489c:	4b4f      	ldr	r3, [pc, #316]	; (80049dc <main+0x5a4>)
 800489e:	18d3      	adds	r3, r2, r3
 80048a0:	1d98      	adds	r0, r3, #6
 80048a2:	4b4d      	ldr	r3, [pc, #308]	; (80049d8 <main+0x5a0>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	0019      	movs	r1, r3
 80048a8:	4a4c      	ldr	r2, [pc, #304]	; (80049dc <main+0x5a4>)
 80048aa:	000b      	movs	r3, r1
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	185b      	adds	r3, r3, r1
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	18d3      	adds	r3, r2, r3
 80048b4:	3314      	adds	r3, #20
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	0019      	movs	r1, r3
 80048ba:	f001 fa45 	bl	8005d48 <convertToDecimalDegrees>
 80048be:	1c03      	adds	r3, r0, #0
                valid_number(data_packets[dp_idx].longitude) == 0 ||
 80048c0:	2100      	movs	r1, #0
 80048c2:	1c18      	adds	r0, r3, #0
 80048c4:	f7fb fe06 	bl	80004d4 <__aeabi_fcmpeq>
 80048c8:	1e03      	subs	r3, r0, #0
 80048ca:	d120      	bne.n	800490e <main+0x4d6>
                convertToDecimalDegrees(data_packets[dp_idx].longitude, data_packets[dp_idx].EW) == 0.f) {
 80048cc:	4b42      	ldr	r3, [pc, #264]	; (80049d8 <main+0x5a0>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	001a      	movs	r2, r3
 80048d2:	0013      	movs	r3, r2
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	189b      	adds	r3, r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	3320      	adds	r3, #32
 80048dc:	001a      	movs	r2, r3
 80048de:	4b3f      	ldr	r3, [pc, #252]	; (80049dc <main+0x5a4>)
 80048e0:	18d3      	adds	r3, r2, r3
 80048e2:	1c98      	adds	r0, r3, #2
 80048e4:	4b3c      	ldr	r3, [pc, #240]	; (80049d8 <main+0x5a0>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	0019      	movs	r1, r3
 80048ea:	4a3c      	ldr	r2, [pc, #240]	; (80049dc <main+0x5a4>)
 80048ec:	000b      	movs	r3, r1
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	185b      	adds	r3, r3, r1
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	18d3      	adds	r3, r2, r3
 80048f6:	3315      	adds	r3, #21
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	0019      	movs	r1, r3
 80048fc:	f001 fa24 	bl	8005d48 <convertToDecimalDegrees>
 8004900:	1c03      	adds	r3, r0, #0
                convertToDecimalDegrees(data_packets[dp_idx].latitude, data_packets[dp_idx].NS) == 0.f ||
 8004902:	2100      	movs	r1, #0
 8004904:	1c18      	adds	r0, r3, #0
 8004906:	f7fb fde5 	bl	80004d4 <__aeabi_fcmpeq>
 800490a:	1e03      	subs	r3, r0, #0
 800490c:	d004      	beq.n	8004918 <main+0x4e0>
              err_code = 2; // invalid data packet
 800490e:	2317      	movs	r3, #23
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	2202      	movs	r2, #2
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	e039      	b.n	800498c <main+0x554>
            }
            else {
              LIS2DW12_ReadXYZ(data_packets[dp_idx].accelerometerData);
 8004918:	4b2f      	ldr	r3, [pc, #188]	; (80049d8 <main+0x5a0>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	001a      	movs	r2, r3
 800491e:	0013      	movs	r3, r2
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	189b      	adds	r3, r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	3330      	adds	r3, #48	; 0x30
 8004928:	001a      	movs	r2, r3
 800492a:	4b2c      	ldr	r3, [pc, #176]	; (80049dc <main+0x5a4>)
 800492c:	18d3      	adds	r3, r2, r3
 800492e:	3304      	adds	r3, #4
 8004930:	0018      	movs	r0, r3
 8004932:	f7ff f8b9 	bl	8003aa8 <LIS2DW12_ReadXYZ>
              data_packets[dp_idx].batteryVoltage = getBatteryVoltage();
 8004936:	4b28      	ldr	r3, [pc, #160]	; (80049d8 <main+0x5a0>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	001c      	movs	r4, r3
 800493c:	f7ff f914 	bl	8003b68 <getBatteryVoltage>
 8004940:	1c01      	adds	r1, r0, #0
 8004942:	4a26      	ldr	r2, [pc, #152]	; (80049dc <main+0x5a4>)
 8004944:	0023      	movs	r3, r4
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	191b      	adds	r3, r3, r4
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	18d3      	adds	r3, r2, r3
 800494e:	3330      	adds	r3, #48	; 0x30
 8004950:	6019      	str	r1, [r3, #0]
              add_packet_to_sd_card(dp_idx);
 8004952:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <main+0x5a0>)
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	0018      	movs	r0, r3
 8004958:	f7ff fa0e 	bl	8003d78 <add_packet_to_sd_card>

              if (dp_idx+1 >= DATA_SEND_PERIOD) {
 800495c:	4b1e      	ldr	r3, [pc, #120]	; (80049d8 <main+0x5a0>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b3a      	cmp	r3, #58	; 0x3a
 8004962:	d903      	bls.n	800496c <main+0x534>
                send_ready = 1;
 8004964:	4b21      	ldr	r3, [pc, #132]	; (80049ec <main+0x5b4>)
 8004966:	2201      	movs	r2, #1
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	e00f      	b.n	800498c <main+0x554>
              }
              else {
                ++dp_idx;
 800496c:	4b1a      	ldr	r3, [pc, #104]	; (80049d8 <main+0x5a0>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	3301      	adds	r3, #1
 8004972:	b2da      	uxtb	r2, r3
 8004974:	4b18      	ldr	r3, [pc, #96]	; (80049d8 <main+0x5a0>)
 8004976:	701a      	strb	r2, [r3, #0]
 8004978:	e008      	b.n	800498c <main+0x554>
              }
            }
          }
          else {
            err_code = 3; // parsing error: strtok failed by \r\n
 800497a:	2317      	movs	r3, #23
 800497c:	18fb      	adds	r3, r7, r3
 800497e:	2203      	movs	r2, #3
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	e003      	b.n	800498c <main+0x554>
          }
        }
        else {
          err_code = 4; // parsing error: didn't find space char in buffer
 8004984:	2317      	movs	r3, #23
 8004986:	18fb      	adds	r3, r7, r3
 8004988:	2204      	movs	r2, #4
 800498a:	701a      	strb	r2, [r3, #0]
        }
      }

      // if success or waiting for position fix
      if (err_code == 0 || err_code == 1) {
 800498c:	2217      	movs	r2, #23
 800498e:	18bb      	adds	r3, r7, r2
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <main+0x566>
 8004996:	18bb      	adds	r3, r7, r2
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d102      	bne.n	80049a4 <main+0x56c>
        gnss_data_ready = 0;
 800499e:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <main+0x5b8>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
      }

      if (err_code > 0) {
 80049a4:	2317      	movs	r3, #23
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d006      	beq.n	80049bc <main+0x584>
        BLINK_LED(RED_LED_GPIO_Port, RED_LED_Pin, 1, 100);
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	0219      	lsls	r1, r3, #8
 80049b2:	4810      	ldr	r0, [pc, #64]	; (80049f4 <main+0x5bc>)
 80049b4:	2364      	movs	r3, #100	; 0x64
 80049b6:	2201      	movs	r2, #1
 80049b8:	f000 ffe8 	bl	800598c <BLINK_LED>
      }
    }

    if (send_ready == 1 && send_done == 1) {
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <main+0x5b4>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d000      	beq.n	80049c6 <main+0x58e>
 80049c4:	e55f      	b.n	8004486 <main+0x4e>
 80049c6:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <main+0x5c0>)
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d000      	beq.n	80049d0 <main+0x598>
 80049ce:	e55a      	b.n	8004486 <main+0x4e>
      send_data();
 80049d0:	f7ff fac4 	bl	8003f5c <send_data>
    if (exit_stop_mode) {
 80049d4:	e557      	b.n	8004486 <main+0x4e>
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	200009df 	.word	0x200009df
 80049dc:	200009e0 	.word	0x200009e0
 80049e0:	080134b8 	.word	0x080134b8
 80049e4:	080134bc 	.word	0x080134bc
 80049e8:	080134c8 	.word	0x080134c8
 80049ec:	200009dc 	.word	0x200009dc
 80049f0:	200009dd 	.word	0x200009dd
 80049f4:	50000800 	.word	0x50000800
 80049f8:	20000036 	.word	0x20000036

080049fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049fc:	b590      	push	{r4, r7, lr}
 80049fe:	b09d      	sub	sp, #116	; 0x74
 8004a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a02:	2438      	movs	r4, #56	; 0x38
 8004a04:	193b      	adds	r3, r7, r4
 8004a06:	0018      	movs	r0, r3
 8004a08:	2338      	movs	r3, #56	; 0x38
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	f00b f949 	bl	800fca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a12:	2324      	movs	r3, #36	; 0x24
 8004a14:	18fb      	adds	r3, r7, r3
 8004a16:	0018      	movs	r0, r3
 8004a18:	2314      	movs	r3, #20
 8004a1a:	001a      	movs	r2, r3
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	f00b f941 	bl	800fca4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a22:	003b      	movs	r3, r7
 8004a24:	0018      	movs	r0, r3
 8004a26:	2324      	movs	r3, #36	; 0x24
 8004a28:	001a      	movs	r2, r3
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	f00b f93a 	bl	800fca4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a30:	4b29      	ldr	r3, [pc, #164]	; (8004ad8 <SystemClock_Config+0xdc>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a29      	ldr	r2, [pc, #164]	; (8004adc <SystemClock_Config+0xe0>)
 8004a36:	401a      	ands	r2, r3
 8004a38:	4b27      	ldr	r3, [pc, #156]	; (8004ad8 <SystemClock_Config+0xdc>)
 8004a3a:	2180      	movs	r1, #128	; 0x80
 8004a3c:	0109      	lsls	r1, r1, #4
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004a42:	0021      	movs	r1, r4
 8004a44:	187b      	adds	r3, r7, r1
 8004a46:	2210      	movs	r2, #16
 8004a48:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004a4a:	187b      	adds	r3, r7, r1
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004a50:	187b      	adds	r3, r7, r1
 8004a52:	2200      	movs	r2, #0
 8004a54:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8004a56:	187b      	adds	r3, r7, r1
 8004a58:	22a0      	movs	r2, #160	; 0xa0
 8004a5a:	0212      	lsls	r2, r2, #8
 8004a5c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004a5e:	187b      	adds	r3, r7, r1
 8004a60:	2200      	movs	r2, #0
 8004a62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a64:	187b      	adds	r3, r7, r1
 8004a66:	0018      	movs	r0, r3
 8004a68:	f003 f994 	bl	8007d94 <HAL_RCC_OscConfig>
 8004a6c:	1e03      	subs	r3, r0, #0
 8004a6e:	d001      	beq.n	8004a74 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8004a70:	f000 fa86 	bl	8004f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a74:	2124      	movs	r1, #36	; 0x24
 8004a76:	187b      	adds	r3, r7, r1
 8004a78:	220f      	movs	r2, #15
 8004a7a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8004a7c:	187b      	adds	r3, r7, r1
 8004a7e:	2200      	movs	r2, #0
 8004a80:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a82:	187b      	adds	r3, r7, r1
 8004a84:	2200      	movs	r2, #0
 8004a86:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a88:	187b      	adds	r3, r7, r1
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a8e:	187b      	adds	r3, r7, r1
 8004a90:	2200      	movs	r2, #0
 8004a92:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004a94:	187b      	adds	r3, r7, r1
 8004a96:	2100      	movs	r1, #0
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f003 fd4f 	bl	800853c <HAL_RCC_ClockConfig>
 8004a9e:	1e03      	subs	r3, r0, #0
 8004aa0:	d001      	beq.n	8004aa6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8004aa2:	f000 fa6d 	bl	8004f80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8004aa6:	003b      	movs	r3, r7
 8004aa8:	220b      	movs	r2, #11
 8004aaa:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004aac:	003b      	movs	r3, r7
 8004aae:	2200      	movs	r2, #0
 8004ab0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004ab2:	003b      	movs	r3, r7
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004ab8:	003b      	movs	r3, r7
 8004aba:	2200      	movs	r2, #0
 8004abc:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004abe:	003b      	movs	r3, r7
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f003 ff5f 	bl	8008984 <HAL_RCCEx_PeriphCLKConfig>
 8004ac6:	1e03      	subs	r3, r0, #0
 8004ac8:	d001      	beq.n	8004ace <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8004aca:	f000 fa59 	bl	8004f80 <Error_Handler>
  }
}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	b01d      	add	sp, #116	; 0x74
 8004ad4:	bd90      	pop	{r4, r7, pc}
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	40007000 	.word	0x40007000
 8004adc:	ffffe7ff 	.word	0xffffe7ff

08004ae0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004ae6:	003b      	movs	r3, r7
 8004ae8:	0018      	movs	r0, r3
 8004aea:	2308      	movs	r3, #8
 8004aec:	001a      	movs	r2, r3
 8004aee:	2100      	movs	r1, #0
 8004af0:	f00b f8d8 	bl	800fca4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004af4:	4b2a      	ldr	r3, [pc, #168]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004af6:	4a2b      	ldr	r2, [pc, #172]	; (8004ba4 <MX_ADC_Init+0xc4>)
 8004af8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8004afa:	4b29      	ldr	r3, [pc, #164]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004b00:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004b02:	22c0      	movs	r2, #192	; 0xc0
 8004b04:	0612      	lsls	r2, r2, #24
 8004b06:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004b08:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004b0e:	4b24      	ldr	r3, [pc, #144]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004b14:	4b22      	ldr	r3, [pc, #136]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004b16:	2201      	movs	r2, #1
 8004b18:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b1a:	4b21      	ldr	r3, [pc, #132]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004b20:	4b1f      	ldr	r3, [pc, #124]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004b22:	2220      	movs	r2, #32
 8004b24:	2100      	movs	r1, #0
 8004b26:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004b28:	4b1d      	ldr	r3, [pc, #116]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004b2a:	2221      	movs	r2, #33	; 0x21
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004b30:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004b36:	4b1a      	ldr	r3, [pc, #104]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004b38:	22c2      	movs	r2, #194	; 0xc2
 8004b3a:	32ff      	adds	r2, #255	; 0xff
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004b3e:	4b18      	ldr	r3, [pc, #96]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004b40:	222c      	movs	r2, #44	; 0x2c
 8004b42:	2100      	movs	r1, #0
 8004b44:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004b46:	4b16      	ldr	r3, [pc, #88]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004b48:	2204      	movs	r2, #4
 8004b4a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004b4c:	4b14      	ldr	r3, [pc, #80]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004b52:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8004b58:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004b5e:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004b66:	0018      	movs	r0, r3
 8004b68:	f001 fa44 	bl	8005ff4 <HAL_ADC_Init>
 8004b6c:	1e03      	subs	r3, r0, #0
 8004b6e:	d001      	beq.n	8004b74 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8004b70:	f000 fa06 	bl	8004f80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004b74:	003b      	movs	r3, r7
 8004b76:	2201      	movs	r2, #1
 8004b78:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004b7a:	003b      	movs	r3, r7
 8004b7c:	2280      	movs	r2, #128	; 0x80
 8004b7e:	0152      	lsls	r2, r2, #5
 8004b80:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004b82:	003a      	movs	r2, r7
 8004b84:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <MX_ADC_Init+0xc0>)
 8004b86:	0011      	movs	r1, r2
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f001 fca3 	bl	80064d4 <HAL_ADC_ConfigChannel>
 8004b8e:	1e03      	subs	r3, r0, #0
 8004b90:	d001      	beq.n	8004b96 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8004b92:	f000 f9f5 	bl	8004f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	b002      	add	sp, #8
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	20000244 	.word	0x20000244
 8004ba4:	40012400 	.word	0x40012400

08004ba8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004bac:	4b1c      	ldr	r3, [pc, #112]	; (8004c20 <MX_I2C1_Init+0x78>)
 8004bae:	4a1d      	ldr	r2, [pc, #116]	; (8004c24 <MX_I2C1_Init+0x7c>)
 8004bb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8004bb2:	4b1b      	ldr	r3, [pc, #108]	; (8004c20 <MX_I2C1_Init+0x78>)
 8004bb4:	22e1      	movs	r2, #225	; 0xe1
 8004bb6:	00d2      	lsls	r2, r2, #3
 8004bb8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004bba:	4b19      	ldr	r3, [pc, #100]	; (8004c20 <MX_I2C1_Init+0x78>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004bc0:	4b17      	ldr	r3, [pc, #92]	; (8004c20 <MX_I2C1_Init+0x78>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004bc6:	4b16      	ldr	r3, [pc, #88]	; (8004c20 <MX_I2C1_Init+0x78>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004bcc:	4b14      	ldr	r3, [pc, #80]	; (8004c20 <MX_I2C1_Init+0x78>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004bd2:	4b13      	ldr	r3, [pc, #76]	; (8004c20 <MX_I2C1_Init+0x78>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004bd8:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <MX_I2C1_Init+0x78>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004bde:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <MX_I2C1_Init+0x78>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004be4:	4b0e      	ldr	r3, [pc, #56]	; (8004c20 <MX_I2C1_Init+0x78>)
 8004be6:	0018      	movs	r0, r3
 8004be8:	f002 f9ee 	bl	8006fc8 <HAL_I2C_Init>
 8004bec:	1e03      	subs	r3, r0, #0
 8004bee:	d001      	beq.n	8004bf4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004bf0:	f000 f9c6 	bl	8004f80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004bf4:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <MX_I2C1_Init+0x78>)
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f002 ffd7 	bl	8007bac <HAL_I2CEx_ConfigAnalogFilter>
 8004bfe:	1e03      	subs	r3, r0, #0
 8004c00:	d001      	beq.n	8004c06 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8004c02:	f000 f9bd 	bl	8004f80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <MX_I2C1_Init+0x78>)
 8004c08:	2100      	movs	r1, #0
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f003 f81a 	bl	8007c44 <HAL_I2CEx_ConfigDigitalFilter>
 8004c10:	1e03      	subs	r3, r0, #0
 8004c12:	d001      	beq.n	8004c18 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8004c14:	f000 f9b4 	bl	8004f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004c18:	46c0      	nop			; (mov r8, r8)
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	200002a0 	.word	0x200002a0
 8004c24:	40005400 	.word	0x40005400

08004c28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004c2c:	4b18      	ldr	r3, [pc, #96]	; (8004c90 <MX_SPI1_Init+0x68>)
 8004c2e:	4a19      	ldr	r2, [pc, #100]	; (8004c94 <MX_SPI1_Init+0x6c>)
 8004c30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004c32:	4b17      	ldr	r3, [pc, #92]	; (8004c90 <MX_SPI1_Init+0x68>)
 8004c34:	2282      	movs	r2, #130	; 0x82
 8004c36:	0052      	lsls	r2, r2, #1
 8004c38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004c3a:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <MX_SPI1_Init+0x68>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c40:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <MX_SPI1_Init+0x68>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c46:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <MX_SPI1_Init+0x68>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c4c:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <MX_SPI1_Init+0x68>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004c52:	4b0f      	ldr	r3, [pc, #60]	; (8004c90 <MX_SPI1_Init+0x68>)
 8004c54:	2280      	movs	r2, #128	; 0x80
 8004c56:	0092      	lsls	r2, r2, #2
 8004c58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c5a:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <MX_SPI1_Init+0x68>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <MX_SPI1_Init+0x68>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c66:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <MX_SPI1_Init+0x68>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c6c:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <MX_SPI1_Init+0x68>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004c72:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <MX_SPI1_Init+0x68>)
 8004c74:	2207      	movs	r2, #7
 8004c76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004c78:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <MX_SPI1_Init+0x68>)
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	f003 ffde 	bl	8008c3c <HAL_SPI_Init>
 8004c80:	1e03      	subs	r3, r0, #0
 8004c82:	d001      	beq.n	8004c88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004c84:	f000 f97c 	bl	8004f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004c88:	46c0      	nop			; (mov r8, r8)
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	200002f4 	.word	0x200002f4
 8004c94:	40013000 	.word	0x40013000

08004c98 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c9e:	003b      	movs	r3, r7
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	2308      	movs	r3, #8
 8004ca4:	001a      	movs	r2, r3
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	f00a fffc 	bl	800fca4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004cac:	4b15      	ldr	r3, [pc, #84]	; (8004d04 <MX_TIM6_Init+0x6c>)
 8004cae:	4a16      	ldr	r2, [pc, #88]	; (8004d08 <MX_TIM6_Init+0x70>)
 8004cb0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100;
 8004cb2:	4b14      	ldr	r3, [pc, #80]	; (8004d04 <MX_TIM6_Init+0x6c>)
 8004cb4:	2264      	movs	r2, #100	; 0x64
 8004cb6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cb8:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <MX_TIM6_Init+0x6c>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20970;
 8004cbe:	4b11      	ldr	r3, [pc, #68]	; (8004d04 <MX_TIM6_Init+0x6c>)
 8004cc0:	4a12      	ldr	r2, [pc, #72]	; (8004d0c <MX_TIM6_Init+0x74>)
 8004cc2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004cc4:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <MX_TIM6_Init+0x6c>)
 8004cc6:	2280      	movs	r2, #128	; 0x80
 8004cc8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004cca:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <MX_TIM6_Init+0x6c>)
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f004 fc45 	bl	800955c <HAL_TIM_Base_Init>
 8004cd2:	1e03      	subs	r3, r0, #0
 8004cd4:	d001      	beq.n	8004cda <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004cd6:	f000 f953 	bl	8004f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cda:	003b      	movs	r3, r7
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ce0:	003b      	movs	r3, r7
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004ce6:	003a      	movs	r2, r7
 8004ce8:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <MX_TIM6_Init+0x6c>)
 8004cea:	0011      	movs	r1, r2
 8004cec:	0018      	movs	r0, r3
 8004cee:	f004 fe2d 	bl	800994c <HAL_TIMEx_MasterConfigSynchronization>
 8004cf2:	1e03      	subs	r3, r0, #0
 8004cf4:	d001      	beq.n	8004cfa <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8004cf6:	f000 f943 	bl	8004f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b002      	add	sp, #8
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	2000034c 	.word	0x2000034c
 8004d08:	40001000 	.word	0x40001000
 8004d0c:	000051ea 	.word	0x000051ea

08004d10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d14:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <MX_USART1_UART_Init+0x58>)
 8004d16:	4a15      	ldr	r2, [pc, #84]	; (8004d6c <MX_USART1_UART_Init+0x5c>)
 8004d18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004d1a:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <MX_USART1_UART_Init+0x58>)
 8004d1c:	22e1      	movs	r2, #225	; 0xe1
 8004d1e:	0252      	lsls	r2, r2, #9
 8004d20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d22:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <MX_USART1_UART_Init+0x58>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d28:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <MX_USART1_UART_Init+0x58>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d2e:	4b0e      	ldr	r3, [pc, #56]	; (8004d68 <MX_USART1_UART_Init+0x58>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <MX_USART1_UART_Init+0x58>)
 8004d36:	220c      	movs	r2, #12
 8004d38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <MX_USART1_UART_Init+0x58>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d40:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <MX_USART1_UART_Init+0x58>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d46:	4b08      	ldr	r3, [pc, #32]	; (8004d68 <MX_USART1_UART_Init+0x58>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <MX_USART1_UART_Init+0x58>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d52:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <MX_USART1_UART_Init+0x58>)
 8004d54:	0018      	movs	r0, r3
 8004d56:	f004 fe57 	bl	8009a08 <HAL_UART_Init>
 8004d5a:	1e03      	subs	r3, r0, #0
 8004d5c:	d001      	beq.n	8004d62 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004d5e:	f000 f90f 	bl	8004f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	2000038c 	.word	0x2000038c
 8004d6c:	40013800 	.word	0x40013800

08004d70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d74:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <MX_USART2_UART_Init+0x58>)
 8004d76:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <MX_USART2_UART_Init+0x5c>)
 8004d78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004d7a:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <MX_USART2_UART_Init+0x58>)
 8004d7c:	22e1      	movs	r2, #225	; 0xe1
 8004d7e:	0252      	lsls	r2, r2, #9
 8004d80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d82:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <MX_USART2_UART_Init+0x58>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d88:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <MX_USART2_UART_Init+0x58>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d8e:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <MX_USART2_UART_Init+0x58>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d94:	4b0c      	ldr	r3, [pc, #48]	; (8004dc8 <MX_USART2_UART_Init+0x58>)
 8004d96:	220c      	movs	r2, #12
 8004d98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <MX_USART2_UART_Init+0x58>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004da0:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <MX_USART2_UART_Init+0x58>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004da6:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <MX_USART2_UART_Init+0x58>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004dac:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <MX_USART2_UART_Init+0x58>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004db2:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <MX_USART2_UART_Init+0x58>)
 8004db4:	0018      	movs	r0, r3
 8004db6:	f004 fe27 	bl	8009a08 <HAL_UART_Init>
 8004dba:	1e03      	subs	r3, r0, #0
 8004dbc:	d001      	beq.n	8004dc2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004dbe:	f000 f8df 	bl	8004f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	20000414 	.word	0x20000414
 8004dcc:	40004400 	.word	0x40004400

08004dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004dd6:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <MX_DMA_Init+0x48>)
 8004dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dda:	4b0f      	ldr	r3, [pc, #60]	; (8004e18 <MX_DMA_Init+0x48>)
 8004ddc:	2101      	movs	r1, #1
 8004dde:	430a      	orrs	r2, r1
 8004de0:	631a      	str	r2, [r3, #48]	; 0x30
 8004de2:	4b0d      	ldr	r3, [pc, #52]	; (8004e18 <MX_DMA_Init+0x48>)
 8004de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de6:	2201      	movs	r2, #1
 8004de8:	4013      	ands	r3, r2
 8004dea:	607b      	str	r3, [r7, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004dee:	2200      	movs	r2, #0
 8004df0:	2100      	movs	r1, #0
 8004df2:	200a      	movs	r0, #10
 8004df4:	f001 fd28 	bl	8006848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004df8:	200a      	movs	r0, #10
 8004dfa:	f001 fd3a 	bl	8006872 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2100      	movs	r1, #0
 8004e02:	200b      	movs	r0, #11
 8004e04:	f001 fd20 	bl	8006848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8004e08:	200b      	movs	r0, #11
 8004e0a:	f001 fd32 	bl	8006872 <HAL_NVIC_EnableIRQ>

}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b002      	add	sp, #8
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	40021000 	.word	0x40021000

08004e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b089      	sub	sp, #36	; 0x24
 8004e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e22:	240c      	movs	r4, #12
 8004e24:	193b      	adds	r3, r7, r4
 8004e26:	0018      	movs	r0, r3
 8004e28:	2314      	movs	r3, #20
 8004e2a:	001a      	movs	r2, r3
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	f00a ff39 	bl	800fca4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e32:	4b4f      	ldr	r3, [pc, #316]	; (8004f70 <MX_GPIO_Init+0x154>)
 8004e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e36:	4b4e      	ldr	r3, [pc, #312]	; (8004f70 <MX_GPIO_Init+0x154>)
 8004e38:	2104      	movs	r1, #4
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e3e:	4b4c      	ldr	r3, [pc, #304]	; (8004f70 <MX_GPIO_Init+0x154>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	2204      	movs	r2, #4
 8004e44:	4013      	ands	r3, r2
 8004e46:	60bb      	str	r3, [r7, #8]
 8004e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e4a:	4b49      	ldr	r3, [pc, #292]	; (8004f70 <MX_GPIO_Init+0x154>)
 8004e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4e:	4b48      	ldr	r3, [pc, #288]	; (8004f70 <MX_GPIO_Init+0x154>)
 8004e50:	2101      	movs	r1, #1
 8004e52:	430a      	orrs	r2, r1
 8004e54:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e56:	4b46      	ldr	r3, [pc, #280]	; (8004f70 <MX_GPIO_Init+0x154>)
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	607b      	str	r3, [r7, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e62:	4b43      	ldr	r3, [pc, #268]	; (8004f70 <MX_GPIO_Init+0x154>)
 8004e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e66:	4b42      	ldr	r3, [pc, #264]	; (8004f70 <MX_GPIO_Init+0x154>)
 8004e68:	2102      	movs	r1, #2
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e6e:	4b40      	ldr	r3, [pc, #256]	; (8004f70 <MX_GPIO_Init+0x154>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	2202      	movs	r2, #2
 8004e74:	4013      	ands	r3, r2
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8004e7a:	23c0      	movs	r3, #192	; 0xc0
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	483d      	ldr	r0, [pc, #244]	; (8004f74 <MX_GPIO_Init+0x158>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	0019      	movs	r1, r3
 8004e84:	f002 f867 	bl	8006f56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWRKEY_Pin|GREEN_LED_Pin|GNNS_LNA_EN_Pin, GPIO_PIN_RESET);
 8004e88:	493b      	ldr	r1, [pc, #236]	; (8004f78 <MX_GPIO_Init+0x15c>)
 8004e8a:	23a0      	movs	r3, #160	; 0xa0
 8004e8c:	05db      	lsls	r3, r3, #23
 8004e8e:	2200      	movs	r2, #0
 8004e90:	0018      	movs	r0, r3
 8004e92:	f002 f860 	bl	8006f56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|MAIN_DTR_Pin|FPWM_EN_Pin|BUCK_BOOST_EN_Pin, GPIO_PIN_RESET);
 8004e96:	4b39      	ldr	r3, [pc, #228]	; (8004f7c <MX_GPIO_Init+0x160>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2133      	movs	r1, #51	; 0x33
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	f002 f85a 	bl	8006f56 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLUE_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin|RED_LED_Pin;
 8004ea2:	193b      	adds	r3, r7, r4
 8004ea4:	22c0      	movs	r2, #192	; 0xc0
 8004ea6:	0212      	lsls	r2, r2, #8
 8004ea8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004eaa:	193b      	adds	r3, r7, r4
 8004eac:	2201      	movs	r2, #1
 8004eae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb0:	193b      	adds	r3, r7, r4
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eb6:	193b      	adds	r3, r7, r4
 8004eb8:	2200      	movs	r2, #0
 8004eba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ebc:	193b      	adds	r3, r7, r4
 8004ebe:	4a2d      	ldr	r2, [pc, #180]	; (8004f74 <MX_GPIO_Init+0x158>)
 8004ec0:	0019      	movs	r1, r3
 8004ec2:	0010      	movs	r0, r2
 8004ec4:	f001 feac 	bl	8006c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BTN_Pin */
  GPIO_InitStruct.Pin = PUSH_BTN_Pin;
 8004ec8:	193b      	adds	r3, r7, r4
 8004eca:	2202      	movs	r2, #2
 8004ecc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004ece:	193b      	adds	r3, r7, r4
 8004ed0:	22c4      	movs	r2, #196	; 0xc4
 8004ed2:	0392      	lsls	r2, r2, #14
 8004ed4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ed6:	193b      	adds	r3, r7, r4
 8004ed8:	2201      	movs	r2, #1
 8004eda:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PUSH_BTN_GPIO_Port, &GPIO_InitStruct);
 8004edc:	193a      	adds	r2, r7, r4
 8004ede:	23a0      	movs	r3, #160	; 0xa0
 8004ee0:	05db      	lsls	r3, r3, #23
 8004ee2:	0011      	movs	r1, r2
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f001 fe9b 	bl	8006c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRKEY_Pin GREEN_LED_Pin GNNS_LNA_EN_Pin */
  GPIO_InitStruct.Pin = PWRKEY_Pin|GREEN_LED_Pin|GNNS_LNA_EN_Pin;
 8004eea:	193b      	adds	r3, r7, r4
 8004eec:	4a22      	ldr	r2, [pc, #136]	; (8004f78 <MX_GPIO_Init+0x15c>)
 8004eee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ef0:	193b      	adds	r3, r7, r4
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef6:	193b      	adds	r3, r7, r4
 8004ef8:	2200      	movs	r2, #0
 8004efa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004efc:	193b      	adds	r3, r7, r4
 8004efe:	2200      	movs	r2, #0
 8004f00:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f02:	193a      	adds	r2, r7, r4
 8004f04:	23a0      	movs	r3, #160	; 0xa0
 8004f06:	05db      	lsls	r3, r3, #23
 8004f08:	0011      	movs	r1, r2
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	f001 fe88 	bl	8006c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin MAIN_DTR_Pin FPWM_EN_Pin BUCK_BOOST_EN_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|MAIN_DTR_Pin|FPWM_EN_Pin|BUCK_BOOST_EN_Pin;
 8004f10:	193b      	adds	r3, r7, r4
 8004f12:	2233      	movs	r2, #51	; 0x33
 8004f14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f16:	193b      	adds	r3, r7, r4
 8004f18:	2201      	movs	r2, #1
 8004f1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1c:	193b      	adds	r3, r7, r4
 8004f1e:	2200      	movs	r2, #0
 8004f20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f22:	193b      	adds	r3, r7, r4
 8004f24:	2200      	movs	r2, #0
 8004f26:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f28:	193b      	adds	r3, r7, r4
 8004f2a:	4a14      	ldr	r2, [pc, #80]	; (8004f7c <MX_GPIO_Init+0x160>)
 8004f2c:	0019      	movs	r1, r3
 8004f2e:	0010      	movs	r0, r2
 8004f30:	f001 fe76 	bl	8006c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_INT1_Pin */
  GPIO_InitStruct.Pin = ACCEL_INT1_Pin;
 8004f34:	0021      	movs	r1, r4
 8004f36:	187b      	adds	r3, r7, r1
 8004f38:	2280      	movs	r2, #128	; 0x80
 8004f3a:	0052      	lsls	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f3e:	187b      	adds	r3, r7, r1
 8004f40:	2200      	movs	r2, #0
 8004f42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f44:	187b      	adds	r3, r7, r1
 8004f46:	2200      	movs	r2, #0
 8004f48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACCEL_INT1_GPIO_Port, &GPIO_InitStruct);
 8004f4a:	187a      	adds	r2, r7, r1
 8004f4c:	23a0      	movs	r3, #160	; 0xa0
 8004f4e:	05db      	lsls	r3, r3, #23
 8004f50:	0011      	movs	r1, r2
 8004f52:	0018      	movs	r0, r3
 8004f54:	f001 fe64 	bl	8006c20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	2005      	movs	r0, #5
 8004f5e:	f001 fc73 	bl	8006848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8004f62:	2005      	movs	r0, #5
 8004f64:	f001 fc85 	bl	8006872 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004f68:	46c0      	nop			; (mov r8, r8)
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	b009      	add	sp, #36	; 0x24
 8004f6e:	bd90      	pop	{r4, r7, pc}
 8004f70:	40021000 	.word	0x40021000
 8004f74:	50000800 	.word	0x50000800
 8004f78:	00001810 	.word	0x00001810
 8004f7c:	50000400 	.word	0x50000400

08004f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f84:	b672      	cpsid	i
}
 8004f86:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f88:	e7fe      	b.n	8004f88 <Error_Handler+0x8>
	...

08004f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f90:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <HAL_MspInit+0x24>)
 8004f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f94:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <HAL_MspInit+0x24>)
 8004f96:	2101      	movs	r1, #1
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f9c:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <HAL_MspInit+0x24>)
 8004f9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa0:	4b03      	ldr	r3, [pc, #12]	; (8004fb0 <HAL_MspInit+0x24>)
 8004fa2:	2180      	movs	r1, #128	; 0x80
 8004fa4:	0549      	lsls	r1, r1, #21
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004faa:	46c0      	nop			; (mov r8, r8)
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40021000 	.word	0x40021000

08004fb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004fb4:	b590      	push	{r4, r7, lr}
 8004fb6:	b089      	sub	sp, #36	; 0x24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fbc:	240c      	movs	r4, #12
 8004fbe:	193b      	adds	r3, r7, r4
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	2314      	movs	r3, #20
 8004fc4:	001a      	movs	r2, r3
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	f00a fe6c 	bl	800fca4 <memset>
  if(hadc->Instance==ADC1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a14      	ldr	r2, [pc, #80]	; (8005024 <HAL_ADC_MspInit+0x70>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d122      	bne.n	800501c <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004fd6:	4b14      	ldr	r3, [pc, #80]	; (8005028 <HAL_ADC_MspInit+0x74>)
 8004fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fda:	4b13      	ldr	r3, [pc, #76]	; (8005028 <HAL_ADC_MspInit+0x74>)
 8004fdc:	2180      	movs	r1, #128	; 0x80
 8004fde:	0089      	lsls	r1, r1, #2
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fe4:	4b10      	ldr	r3, [pc, #64]	; (8005028 <HAL_ADC_MspInit+0x74>)
 8004fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe8:	4b0f      	ldr	r3, [pc, #60]	; (8005028 <HAL_ADC_MspInit+0x74>)
 8004fea:	2101      	movs	r1, #1
 8004fec:	430a      	orrs	r2, r1
 8004fee:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ff0:	4b0d      	ldr	r3, [pc, #52]	; (8005028 <HAL_ADC_MspInit+0x74>)
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = ADC_IN_Pin;
 8004ffc:	193b      	adds	r3, r7, r4
 8004ffe:	2201      	movs	r2, #1
 8005000:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005002:	193b      	adds	r3, r7, r4
 8005004:	2203      	movs	r2, #3
 8005006:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005008:	193b      	adds	r3, r7, r4
 800500a:	2200      	movs	r2, #0
 800500c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 800500e:	193a      	adds	r2, r7, r4
 8005010:	23a0      	movs	r3, #160	; 0xa0
 8005012:	05db      	lsls	r3, r3, #23
 8005014:	0011      	movs	r1, r2
 8005016:	0018      	movs	r0, r3
 8005018:	f001 fe02 	bl	8006c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800501c:	46c0      	nop			; (mov r8, r8)
 800501e:	46bd      	mov	sp, r7
 8005020:	b009      	add	sp, #36	; 0x24
 8005022:	bd90      	pop	{r4, r7, pc}
 8005024:	40012400 	.word	0x40012400
 8005028:	40021000 	.word	0x40021000

0800502c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800502c:	b590      	push	{r4, r7, lr}
 800502e:	b089      	sub	sp, #36	; 0x24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005034:	240c      	movs	r4, #12
 8005036:	193b      	adds	r3, r7, r4
 8005038:	0018      	movs	r0, r3
 800503a:	2314      	movs	r3, #20
 800503c:	001a      	movs	r2, r3
 800503e:	2100      	movs	r1, #0
 8005040:	f00a fe30 	bl	800fca4 <memset>
  if(hi2c->Instance==I2C1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a18      	ldr	r2, [pc, #96]	; (80050ac <HAL_I2C_MspInit+0x80>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d12a      	bne.n	80050a4 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800504e:	4b18      	ldr	r3, [pc, #96]	; (80050b0 <HAL_I2C_MspInit+0x84>)
 8005050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005052:	4b17      	ldr	r3, [pc, #92]	; (80050b0 <HAL_I2C_MspInit+0x84>)
 8005054:	2101      	movs	r1, #1
 8005056:	430a      	orrs	r2, r1
 8005058:	62da      	str	r2, [r3, #44]	; 0x2c
 800505a:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <HAL_I2C_MspInit+0x84>)
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	2201      	movs	r2, #1
 8005060:	4013      	ands	r3, r2
 8005062:	60bb      	str	r3, [r7, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005066:	193b      	adds	r3, r7, r4
 8005068:	22c0      	movs	r2, #192	; 0xc0
 800506a:	00d2      	lsls	r2, r2, #3
 800506c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800506e:	0021      	movs	r1, r4
 8005070:	187b      	adds	r3, r7, r1
 8005072:	2212      	movs	r2, #18
 8005074:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005076:	187b      	adds	r3, r7, r1
 8005078:	2200      	movs	r2, #0
 800507a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800507c:	187b      	adds	r3, r7, r1
 800507e:	2203      	movs	r2, #3
 8005080:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8005082:	187b      	adds	r3, r7, r1
 8005084:	2206      	movs	r2, #6
 8005086:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005088:	187a      	adds	r2, r7, r1
 800508a:	23a0      	movs	r3, #160	; 0xa0
 800508c:	05db      	lsls	r3, r3, #23
 800508e:	0011      	movs	r1, r2
 8005090:	0018      	movs	r0, r3
 8005092:	f001 fdc5 	bl	8006c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <HAL_I2C_MspInit+0x84>)
 8005098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800509a:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <HAL_I2C_MspInit+0x84>)
 800509c:	2180      	movs	r1, #128	; 0x80
 800509e:	0389      	lsls	r1, r1, #14
 80050a0:	430a      	orrs	r2, r1
 80050a2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80050a4:	46c0      	nop			; (mov r8, r8)
 80050a6:	46bd      	mov	sp, r7
 80050a8:	b009      	add	sp, #36	; 0x24
 80050aa:	bd90      	pop	{r4, r7, pc}
 80050ac:	40005400 	.word	0x40005400
 80050b0:	40021000 	.word	0x40021000

080050b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80050b4:	b590      	push	{r4, r7, lr}
 80050b6:	b089      	sub	sp, #36	; 0x24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050bc:	240c      	movs	r4, #12
 80050be:	193b      	adds	r3, r7, r4
 80050c0:	0018      	movs	r0, r3
 80050c2:	2314      	movs	r3, #20
 80050c4:	001a      	movs	r2, r3
 80050c6:	2100      	movs	r1, #0
 80050c8:	f00a fdec 	bl	800fca4 <memset>
  if(hspi->Instance==SPI1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a18      	ldr	r2, [pc, #96]	; (8005134 <HAL_SPI_MspInit+0x80>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d129      	bne.n	800512a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80050d6:	4b18      	ldr	r3, [pc, #96]	; (8005138 <HAL_SPI_MspInit+0x84>)
 80050d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050da:	4b17      	ldr	r3, [pc, #92]	; (8005138 <HAL_SPI_MspInit+0x84>)
 80050dc:	2180      	movs	r1, #128	; 0x80
 80050de:	0149      	lsls	r1, r1, #5
 80050e0:	430a      	orrs	r2, r1
 80050e2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050e4:	4b14      	ldr	r3, [pc, #80]	; (8005138 <HAL_SPI_MspInit+0x84>)
 80050e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e8:	4b13      	ldr	r3, [pc, #76]	; (8005138 <HAL_SPI_MspInit+0x84>)
 80050ea:	2101      	movs	r1, #1
 80050ec:	430a      	orrs	r2, r1
 80050ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80050f0:	4b11      	ldr	r3, [pc, #68]	; (8005138 <HAL_SPI_MspInit+0x84>)
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	2201      	movs	r2, #1
 80050f6:	4013      	ands	r3, r2
 80050f8:	60bb      	str	r3, [r7, #8]
 80050fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80050fc:	0021      	movs	r1, r4
 80050fe:	187b      	adds	r3, r7, r1
 8005100:	22e0      	movs	r2, #224	; 0xe0
 8005102:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005104:	187b      	adds	r3, r7, r1
 8005106:	2202      	movs	r2, #2
 8005108:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510a:	187b      	adds	r3, r7, r1
 800510c:	2200      	movs	r2, #0
 800510e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005110:	187b      	adds	r3, r7, r1
 8005112:	2203      	movs	r2, #3
 8005114:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8005116:	187b      	adds	r3, r7, r1
 8005118:	2200      	movs	r2, #0
 800511a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800511c:	187a      	adds	r2, r7, r1
 800511e:	23a0      	movs	r3, #160	; 0xa0
 8005120:	05db      	lsls	r3, r3, #23
 8005122:	0011      	movs	r1, r2
 8005124:	0018      	movs	r0, r3
 8005126:	f001 fd7b 	bl	8006c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	46bd      	mov	sp, r7
 800512e:	b009      	add	sp, #36	; 0x24
 8005130:	bd90      	pop	{r4, r7, pc}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	40013000 	.word	0x40013000
 8005138:	40021000 	.word	0x40021000

0800513c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a0a      	ldr	r2, [pc, #40]	; (8005174 <HAL_TIM_Base_MspInit+0x38>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d10d      	bne.n	800516a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800514e:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <HAL_TIM_Base_MspInit+0x3c>)
 8005150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005152:	4b09      	ldr	r3, [pc, #36]	; (8005178 <HAL_TIM_Base_MspInit+0x3c>)
 8005154:	2110      	movs	r1, #16
 8005156:	430a      	orrs	r2, r1
 8005158:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800515a:	2200      	movs	r2, #0
 800515c:	2100      	movs	r1, #0
 800515e:	2011      	movs	r0, #17
 8005160:	f001 fb72 	bl	8006848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005164:	2011      	movs	r0, #17
 8005166:	f001 fb84 	bl	8006872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	46bd      	mov	sp, r7
 800516e:	b002      	add	sp, #8
 8005170:	bd80      	pop	{r7, pc}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	40001000 	.word	0x40001000
 8005178:	40021000 	.word	0x40021000

0800517c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800517c:	b590      	push	{r4, r7, lr}
 800517e:	b08b      	sub	sp, #44	; 0x2c
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005184:	2414      	movs	r4, #20
 8005186:	193b      	adds	r3, r7, r4
 8005188:	0018      	movs	r0, r3
 800518a:	2314      	movs	r3, #20
 800518c:	001a      	movs	r2, r3
 800518e:	2100      	movs	r1, #0
 8005190:	f00a fd88 	bl	800fca4 <memset>
  if(huart->Instance==USART1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a59      	ldr	r2, [pc, #356]	; (8005300 <HAL_UART_MspInit+0x184>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d153      	bne.n	8005246 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800519e:	4b59      	ldr	r3, [pc, #356]	; (8005304 <HAL_UART_MspInit+0x188>)
 80051a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051a2:	4b58      	ldr	r3, [pc, #352]	; (8005304 <HAL_UART_MspInit+0x188>)
 80051a4:	2180      	movs	r1, #128	; 0x80
 80051a6:	01c9      	lsls	r1, r1, #7
 80051a8:	430a      	orrs	r2, r1
 80051aa:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051ac:	4b55      	ldr	r3, [pc, #340]	; (8005304 <HAL_UART_MspInit+0x188>)
 80051ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b0:	4b54      	ldr	r3, [pc, #336]	; (8005304 <HAL_UART_MspInit+0x188>)
 80051b2:	2102      	movs	r1, #2
 80051b4:	430a      	orrs	r2, r1
 80051b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80051b8:	4b52      	ldr	r3, [pc, #328]	; (8005304 <HAL_UART_MspInit+0x188>)
 80051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051bc:	2202      	movs	r2, #2
 80051be:	4013      	ands	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80051c4:	0021      	movs	r1, r4
 80051c6:	187b      	adds	r3, r7, r1
 80051c8:	22c0      	movs	r2, #192	; 0xc0
 80051ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051cc:	187b      	adds	r3, r7, r1
 80051ce:	2202      	movs	r2, #2
 80051d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d2:	187b      	adds	r3, r7, r1
 80051d4:	2200      	movs	r2, #0
 80051d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	2203      	movs	r2, #3
 80051dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80051de:	187b      	adds	r3, r7, r1
 80051e0:	2200      	movs	r2, #0
 80051e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051e4:	187b      	adds	r3, r7, r1
 80051e6:	4a48      	ldr	r2, [pc, #288]	; (8005308 <HAL_UART_MspInit+0x18c>)
 80051e8:	0019      	movs	r1, r3
 80051ea:	0010      	movs	r0, r2
 80051ec:	f001 fd18 	bl	8006c20 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80051f0:	4b46      	ldr	r3, [pc, #280]	; (800530c <HAL_UART_MspInit+0x190>)
 80051f2:	4a47      	ldr	r2, [pc, #284]	; (8005310 <HAL_UART_MspInit+0x194>)
 80051f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 80051f6:	4b45      	ldr	r3, [pc, #276]	; (800530c <HAL_UART_MspInit+0x190>)
 80051f8:	2203      	movs	r2, #3
 80051fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051fc:	4b43      	ldr	r3, [pc, #268]	; (800530c <HAL_UART_MspInit+0x190>)
 80051fe:	2200      	movs	r2, #0
 8005200:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005202:	4b42      	ldr	r3, [pc, #264]	; (800530c <HAL_UART_MspInit+0x190>)
 8005204:	2200      	movs	r2, #0
 8005206:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005208:	4b40      	ldr	r3, [pc, #256]	; (800530c <HAL_UART_MspInit+0x190>)
 800520a:	2280      	movs	r2, #128	; 0x80
 800520c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800520e:	4b3f      	ldr	r3, [pc, #252]	; (800530c <HAL_UART_MspInit+0x190>)
 8005210:	2200      	movs	r2, #0
 8005212:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005214:	4b3d      	ldr	r3, [pc, #244]	; (800530c <HAL_UART_MspInit+0x190>)
 8005216:	2200      	movs	r2, #0
 8005218:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800521a:	4b3c      	ldr	r3, [pc, #240]	; (800530c <HAL_UART_MspInit+0x190>)
 800521c:	2200      	movs	r2, #0
 800521e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005220:	4b3a      	ldr	r3, [pc, #232]	; (800530c <HAL_UART_MspInit+0x190>)
 8005222:	2280      	movs	r2, #128	; 0x80
 8005224:	0192      	lsls	r2, r2, #6
 8005226:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005228:	4b38      	ldr	r3, [pc, #224]	; (800530c <HAL_UART_MspInit+0x190>)
 800522a:	0018      	movs	r0, r3
 800522c:	f001 fb3e 	bl	80068ac <HAL_DMA_Init>
 8005230:	1e03      	subs	r3, r0, #0
 8005232:	d001      	beq.n	8005238 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8005234:	f7ff fea4 	bl	8004f80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a34      	ldr	r2, [pc, #208]	; (800530c <HAL_UART_MspInit+0x190>)
 800523c:	675a      	str	r2, [r3, #116]	; 0x74
 800523e:	4b33      	ldr	r3, [pc, #204]	; (800530c <HAL_UART_MspInit+0x190>)
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005244:	e057      	b.n	80052f6 <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==USART2)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a32      	ldr	r2, [pc, #200]	; (8005314 <HAL_UART_MspInit+0x198>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d152      	bne.n	80052f6 <HAL_UART_MspInit+0x17a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005250:	4b2c      	ldr	r3, [pc, #176]	; (8005304 <HAL_UART_MspInit+0x188>)
 8005252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005254:	4b2b      	ldr	r3, [pc, #172]	; (8005304 <HAL_UART_MspInit+0x188>)
 8005256:	2180      	movs	r1, #128	; 0x80
 8005258:	0289      	lsls	r1, r1, #10
 800525a:	430a      	orrs	r2, r1
 800525c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800525e:	4b29      	ldr	r3, [pc, #164]	; (8005304 <HAL_UART_MspInit+0x188>)
 8005260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005262:	4b28      	ldr	r3, [pc, #160]	; (8005304 <HAL_UART_MspInit+0x188>)
 8005264:	2101      	movs	r1, #1
 8005266:	430a      	orrs	r2, r1
 8005268:	62da      	str	r2, [r3, #44]	; 0x2c
 800526a:	4b26      	ldr	r3, [pc, #152]	; (8005304 <HAL_UART_MspInit+0x188>)
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	2201      	movs	r2, #1
 8005270:	4013      	ands	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005276:	2114      	movs	r1, #20
 8005278:	187b      	adds	r3, r7, r1
 800527a:	220c      	movs	r2, #12
 800527c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800527e:	187b      	adds	r3, r7, r1
 8005280:	2202      	movs	r2, #2
 8005282:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005284:	187b      	adds	r3, r7, r1
 8005286:	2200      	movs	r2, #0
 8005288:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800528a:	187b      	adds	r3, r7, r1
 800528c:	2203      	movs	r2, #3
 800528e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8005290:	187b      	adds	r3, r7, r1
 8005292:	2204      	movs	r2, #4
 8005294:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005296:	187a      	adds	r2, r7, r1
 8005298:	23a0      	movs	r3, #160	; 0xa0
 800529a:	05db      	lsls	r3, r3, #23
 800529c:	0011      	movs	r1, r2
 800529e:	0018      	movs	r0, r3
 80052a0:	f001 fcbe 	bl	8006c20 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80052a4:	4b1c      	ldr	r3, [pc, #112]	; (8005318 <HAL_UART_MspInit+0x19c>)
 80052a6:	4a1d      	ldr	r2, [pc, #116]	; (800531c <HAL_UART_MspInit+0x1a0>)
 80052a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 80052aa:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <HAL_UART_MspInit+0x19c>)
 80052ac:	2204      	movs	r2, #4
 80052ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052b0:	4b19      	ldr	r3, [pc, #100]	; (8005318 <HAL_UART_MspInit+0x19c>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052b6:	4b18      	ldr	r3, [pc, #96]	; (8005318 <HAL_UART_MspInit+0x19c>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052bc:	4b16      	ldr	r3, [pc, #88]	; (8005318 <HAL_UART_MspInit+0x19c>)
 80052be:	2280      	movs	r2, #128	; 0x80
 80052c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052c2:	4b15      	ldr	r3, [pc, #84]	; (8005318 <HAL_UART_MspInit+0x19c>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052c8:	4b13      	ldr	r3, [pc, #76]	; (8005318 <HAL_UART_MspInit+0x19c>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80052ce:	4b12      	ldr	r3, [pc, #72]	; (8005318 <HAL_UART_MspInit+0x19c>)
 80052d0:	2220      	movs	r2, #32
 80052d2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80052d4:	4b10      	ldr	r3, [pc, #64]	; (8005318 <HAL_UART_MspInit+0x19c>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80052da:	4b0f      	ldr	r3, [pc, #60]	; (8005318 <HAL_UART_MspInit+0x19c>)
 80052dc:	0018      	movs	r0, r3
 80052de:	f001 fae5 	bl	80068ac <HAL_DMA_Init>
 80052e2:	1e03      	subs	r3, r0, #0
 80052e4:	d001      	beq.n	80052ea <HAL_UART_MspInit+0x16e>
      Error_Handler();
 80052e6:	f7ff fe4b 	bl	8004f80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a0a      	ldr	r2, [pc, #40]	; (8005318 <HAL_UART_MspInit+0x19c>)
 80052ee:	675a      	str	r2, [r3, #116]	; 0x74
 80052f0:	4b09      	ldr	r3, [pc, #36]	; (8005318 <HAL_UART_MspInit+0x19c>)
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b00b      	add	sp, #44	; 0x2c
 80052fc:	bd90      	pop	{r4, r7, pc}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	40013800 	.word	0x40013800
 8005304:	40021000 	.word	0x40021000
 8005308:	50000400 	.word	0x50000400
 800530c:	2000049c 	.word	0x2000049c
 8005310:	40020030 	.word	0x40020030
 8005314:	40004400 	.word	0x40004400
 8005318:	200004e4 	.word	0x200004e4
 800531c:	40020058 	.word	0x40020058

08005320 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005324:	f3bf 8f4f 	dsb	sy
}
 8005328:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800532a:	4b04      	ldr	r3, [pc, #16]	; (800533c <__NVIC_SystemReset+0x1c>)
 800532c:	4a04      	ldr	r2, [pc, #16]	; (8005340 <__NVIC_SystemReset+0x20>)
 800532e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005330:	f3bf 8f4f 	dsb	sy
}
 8005334:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	e7fd      	b.n	8005336 <__NVIC_SystemReset+0x16>
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	e000ed00 	.word	0xe000ed00
 8005340:	05fa0004 	.word	0x05fa0004

08005344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005348:	e7fe      	b.n	8005348 <NMI_Handler+0x4>

0800534a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  NVIC_SystemReset();
 800534e:	f7ff ffe7 	bl	8005320 <__NVIC_SystemReset>

08005352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005360:	46c0      	nop			; (mov r8, r8)
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if (Timer1 > 0) {
 800536c:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <SysTick_Handler+0x38>)
 800536e:	881b      	ldrh	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <SysTick_Handler+0x18>
    Timer1--;
 8005374:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <SysTick_Handler+0x38>)
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	4b08      	ldr	r3, [pc, #32]	; (80053a0 <SysTick_Handler+0x38>)
 800537e:	801a      	strh	r2, [r3, #0]
  }
  if (Timer2 > 0) {
 8005380:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <SysTick_Handler+0x3c>)
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <SysTick_Handler+0x2c>
    Timer2--;
 8005388:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <SysTick_Handler+0x3c>)
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	4b04      	ldr	r3, [pc, #16]	; (80053a4 <SysTick_Handler+0x3c>)
 8005392:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005394:	f000 fdd2 	bl	8005f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005398:	46c0      	nop			; (mov r8, r8)
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	2000023c 	.word	0x2000023c
 80053a4:	2000023e 	.word	0x2000023e

080053a8 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BTN_Pin);
 80053ac:	2002      	movs	r0, #2
 80053ae:	f001 fdef 	bl	8006f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80053bc:	4b03      	ldr	r3, [pc, #12]	; (80053cc <DMA1_Channel2_3_IRQHandler+0x14>)
 80053be:	0018      	movs	r0, r3
 80053c0:	f001 fb52 	bl	8006a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80053c4:	46c0      	nop			; (mov r8, r8)
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	2000049c 	.word	0x2000049c

080053d0 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80053d4:	4b03      	ldr	r3, [pc, #12]	; (80053e4 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80053d6:	0018      	movs	r0, r3
 80053d8:	f001 fb46 	bl	8006a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80053dc:	46c0      	nop			; (mov r8, r8)
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	200004e4 	.word	0x200004e4

080053e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80053ec:	4b03      	ldr	r3, [pc, #12]	; (80053fc <TIM6_DAC_IRQHandler+0x14>)
 80053ee:	0018      	movs	r0, r3
 80053f0:	f004 f946 	bl	8009680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80053f4:	46c0      	nop			; (mov r8, r8)
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	46c0      	nop			; (mov r8, r8)
 80053fc:	2000034c 	.word	0x2000034c

08005400 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  return 1;
 8005404:	2301      	movs	r3, #1
}
 8005406:	0018      	movs	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <_kill>:

int _kill(int pid, int sig)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005416:	f00a fd43 	bl	800fea0 <__errno>
 800541a:	0003      	movs	r3, r0
 800541c:	2216      	movs	r2, #22
 800541e:	601a      	str	r2, [r3, #0]
  return -1;
 8005420:	2301      	movs	r3, #1
 8005422:	425b      	negs	r3, r3
}
 8005424:	0018      	movs	r0, r3
 8005426:	46bd      	mov	sp, r7
 8005428:	b002      	add	sp, #8
 800542a:	bd80      	pop	{r7, pc}

0800542c <_exit>:

void _exit (int status)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005434:	2301      	movs	r3, #1
 8005436:	425a      	negs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	0011      	movs	r1, r2
 800543c:	0018      	movs	r0, r3
 800543e:	f7ff ffe5 	bl	800540c <_kill>
  while (1) {}    /* Make sure we hang here */
 8005442:	e7fe      	b.n	8005442 <_exit+0x16>

08005444 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005450:	2300      	movs	r3, #0
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e00a      	b.n	800546c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005456:	e000      	b.n	800545a <_read+0x16>
 8005458:	bf00      	nop
 800545a:	0001      	movs	r1, r0
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	60ba      	str	r2, [r7, #8]
 8005462:	b2ca      	uxtb	r2, r1
 8005464:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	3301      	adds	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	429a      	cmp	r2, r3
 8005472:	dbf0      	blt.n	8005456 <_read+0x12>
  }

  return len;
 8005474:	687b      	ldr	r3, [r7, #4]
}
 8005476:	0018      	movs	r0, r3
 8005478:	46bd      	mov	sp, r7
 800547a:	b006      	add	sp, #24
 800547c:	bd80      	pop	{r7, pc}

0800547e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b086      	sub	sp, #24
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	e009      	b.n	80054a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	60ba      	str	r2, [r7, #8]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	0018      	movs	r0, r3
 800549a:	e000      	b.n	800549e <_write+0x20>
 800549c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	3301      	adds	r3, #1
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	dbf1      	blt.n	8005490 <_write+0x12>
  }
  return len;
 80054ac:	687b      	ldr	r3, [r7, #4]
}
 80054ae:	0018      	movs	r0, r3
 80054b0:	46bd      	mov	sp, r7
 80054b2:	b006      	add	sp, #24
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <_close>:

int _close(int file)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80054be:	2301      	movs	r3, #1
 80054c0:	425b      	negs	r3, r3
}
 80054c2:	0018      	movs	r0, r3
 80054c4:	46bd      	mov	sp, r7
 80054c6:	b002      	add	sp, #8
 80054c8:	bd80      	pop	{r7, pc}

080054ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b082      	sub	sp, #8
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2280      	movs	r2, #128	; 0x80
 80054d8:	0192      	lsls	r2, r2, #6
 80054da:	605a      	str	r2, [r3, #4]
  return 0;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	0018      	movs	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b002      	add	sp, #8
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <_isatty>:

int _isatty(int file)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b082      	sub	sp, #8
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80054ee:	2301      	movs	r3, #1
}
 80054f0:	0018      	movs	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b002      	add	sp, #8
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005504:	2300      	movs	r3, #0
}
 8005506:	0018      	movs	r0, r3
 8005508:	46bd      	mov	sp, r7
 800550a:	b004      	add	sp, #16
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005518:	4a14      	ldr	r2, [pc, #80]	; (800556c <_sbrk+0x5c>)
 800551a:	4b15      	ldr	r3, [pc, #84]	; (8005570 <_sbrk+0x60>)
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005524:	4b13      	ldr	r3, [pc, #76]	; (8005574 <_sbrk+0x64>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d102      	bne.n	8005532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800552c:	4b11      	ldr	r3, [pc, #68]	; (8005574 <_sbrk+0x64>)
 800552e:	4a12      	ldr	r2, [pc, #72]	; (8005578 <_sbrk+0x68>)
 8005530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005532:	4b10      	ldr	r3, [pc, #64]	; (8005574 <_sbrk+0x64>)
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	18d3      	adds	r3, r2, r3
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	429a      	cmp	r2, r3
 800553e:	d207      	bcs.n	8005550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005540:	f00a fcae 	bl	800fea0 <__errno>
 8005544:	0003      	movs	r3, r0
 8005546:	220c      	movs	r2, #12
 8005548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800554a:	2301      	movs	r3, #1
 800554c:	425b      	negs	r3, r3
 800554e:	e009      	b.n	8005564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005550:	4b08      	ldr	r3, [pc, #32]	; (8005574 <_sbrk+0x64>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005556:	4b07      	ldr	r3, [pc, #28]	; (8005574 <_sbrk+0x64>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	18d2      	adds	r2, r2, r3
 800555e:	4b05      	ldr	r3, [pc, #20]	; (8005574 <_sbrk+0x64>)
 8005560:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005562:	68fb      	ldr	r3, [r7, #12]
}
 8005564:	0018      	movs	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	b006      	add	sp, #24
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20005000 	.word	0x20005000
 8005570:	00000400 	.word	0x00000400
 8005574:	20003bdc 	.word	0x20003bdc
 8005578:	20003f70 	.word	0x20003f70

0800557c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005580:	46c0      	nop			; (mov r8, r8)
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <module_power_up>:
#include "utils.h"


void module_power_up()
{
 8005586:	b580      	push	{r7, lr}
 8005588:	af00      	add	r7, sp, #0
  BLINK_LED(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1, 1000);
 800558a:	23fa      	movs	r3, #250	; 0xfa
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	2280      	movs	r2, #128	; 0x80
 8005590:	0111      	lsls	r1, r2, #4
 8005592:	22a0      	movs	r2, #160	; 0xa0
 8005594:	05d0      	lsls	r0, r2, #23
 8005596:	2201      	movs	r2, #1
 8005598:	f000 f9f8 	bl	800598c <BLINK_LED>
  HAL_Delay(500);
 800559c:	23fa      	movs	r3, #250	; 0xfa
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	0018      	movs	r0, r3
 80055a2:	f000 fce7 	bl	8005f74 <HAL_Delay>
  buck_boost_enable();
 80055a6:	f000 fc23 	bl	8005df0 <buck_boost_enable>
  HAL_Delay(1000);
 80055aa:	23fa      	movs	r3, #250	; 0xfa
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	0018      	movs	r0, r3
 80055b0:	f000 fce0 	bl	8005f74 <HAL_Delay>
  module_turn_on();
 80055b4:	f000 f80c 	bl	80055d0 <module_turn_on>
}
 80055b8:	46c0      	nop			; (mov r8, r8)
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <module_power_down>:

void module_power_down()
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	af00      	add	r7, sp, #0
  module_turn_off();
 80055c2:	f000 f823 	bl	800560c <module_turn_off>
  buck_boost_disable();
 80055c6:	f000 fc27 	bl	8005e18 <buck_boost_disable>
}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <module_turn_on>:

void module_turn_on()
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, GPIO_PIN_SET);
 80055d4:	23a0      	movs	r3, #160	; 0xa0
 80055d6:	05db      	lsls	r3, r3, #23
 80055d8:	2201      	movs	r2, #1
 80055da:	2110      	movs	r1, #16
 80055dc:	0018      	movs	r0, r3
 80055de:	f001 fcba 	bl	8006f56 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80055e2:	23fa      	movs	r3, #250	; 0xfa
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	0018      	movs	r0, r3
 80055e8:	f000 fcc4 	bl	8005f74 <HAL_Delay>
  HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, GPIO_PIN_RESET);
 80055ec:	23a0      	movs	r3, #160	; 0xa0
 80055ee:	05db      	lsls	r3, r3, #23
 80055f0:	2200      	movs	r2, #0
 80055f2:	2110      	movs	r1, #16
 80055f4:	0018      	movs	r0, r3
 80055f6:	f001 fcae 	bl	8006f56 <HAL_GPIO_WritePin>
  HAL_Delay(10000); //wait for boot
 80055fa:	4b03      	ldr	r3, [pc, #12]	; (8005608 <module_turn_on+0x38>)
 80055fc:	0018      	movs	r0, r3
 80055fe:	f000 fcb9 	bl	8005f74 <HAL_Delay>
}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	00002710 	.word	0x00002710

0800560c <module_turn_off>:

void module_turn_off()
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, GPIO_PIN_SET);
 8005610:	23a0      	movs	r3, #160	; 0xa0
 8005612:	05db      	lsls	r3, r3, #23
 8005614:	2201      	movs	r2, #1
 8005616:	2110      	movs	r1, #16
 8005618:	0018      	movs	r0, r3
 800561a:	f001 fc9c 	bl	8006f56 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800561e:	23fa      	movs	r3, #250	; 0xfa
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	0018      	movs	r0, r3
 8005624:	f000 fca6 	bl	8005f74 <HAL_Delay>
  HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, GPIO_PIN_RESET);
 8005628:	23a0      	movs	r3, #160	; 0xa0
 800562a:	05db      	lsls	r3, r3, #23
 800562c:	2200      	movs	r2, #0
 800562e:	2110      	movs	r1, #16
 8005630:	0018      	movs	r0, r3
 8005632:	f001 fc90 	bl	8006f56 <HAL_GPIO_WritePin>
  HAL_Delay(2000); //wait for shutdown
 8005636:	23fa      	movs	r3, #250	; 0xfa
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	0018      	movs	r0, r3
 800563c:	f000 fc9a 	bl	8005f74 <HAL_Delay>
}
 8005640:	46c0      	nop			; (mov r8, r8)
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <send_at_cmd>:

bool send_at_cmd(char *cmd)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint16_t tries = 0;
 8005650:	230e      	movs	r3, #14
 8005652:	18fb      	adds	r3, r7, r3
 8005654:	2200      	movs	r2, #0
 8005656:	801a      	strh	r2, [r3, #0]

  while (1) {
    memset(buf, 0, sizeof(buf));
 8005658:	23fa      	movs	r3, #250	; 0xfa
 800565a:	009a      	lsls	r2, r3, #2
 800565c:	4b1d      	ldr	r3, [pc, #116]	; (80056d4 <send_at_cmd+0x8c>)
 800565e:	2100      	movs	r1, #0
 8005660:	0018      	movs	r0, r3
 8005662:	f00a fb1f 	bl	800fca4 <memset>
    HAL_UART_Transmit(&huart1, (uint8_t*)cmd, strlen(cmd), 100);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	0018      	movs	r0, r3
 800566a:	f7fa fd57 	bl	800011c <strlen>
 800566e:	0003      	movs	r3, r0
 8005670:	b29a      	uxth	r2, r3
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	4818      	ldr	r0, [pc, #96]	; (80056d8 <send_at_cmd+0x90>)
 8005676:	2364      	movs	r3, #100	; 0x64
 8005678:	f004 fa1a 	bl	8009ab0 <HAL_UART_Transmit>
    HAL_UART_Receive_DMA(&huart1, buf, BUF_MAX_LEN);
 800567c:	23fa      	movs	r3, #250	; 0xfa
 800567e:	009a      	lsls	r2, r3, #2
 8005680:	4914      	ldr	r1, [pc, #80]	; (80056d4 <send_at_cmd+0x8c>)
 8005682:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <send_at_cmd+0x90>)
 8005684:	0018      	movs	r0, r3
 8005686:	f004 fab3 	bl	8009bf0 <HAL_UART_Receive_DMA>
    HAL_Delay(150);
 800568a:	2096      	movs	r0, #150	; 0x96
 800568c:	f000 fc72 	bl	8005f74 <HAL_Delay>
    if (strstrn((char *)buf, "OK", BUF_MAX_LEN) != NULL) {
 8005690:	23fa      	movs	r3, #250	; 0xfa
 8005692:	009a      	lsls	r2, r3, #2
 8005694:	4911      	ldr	r1, [pc, #68]	; (80056dc <send_at_cmd+0x94>)
 8005696:	4b0f      	ldr	r3, [pc, #60]	; (80056d4 <send_at_cmd+0x8c>)
 8005698:	0018      	movs	r0, r3
 800569a:	f000 f90d 	bl	80058b8 <strstrn>
 800569e:	1e03      	subs	r3, r0, #0
 80056a0:	d001      	beq.n	80056a6 <send_at_cmd+0x5e>
      return true;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e011      	b.n	80056ca <send_at_cmd+0x82>
    }

    if (++tries >= 5) break;
 80056a6:	210e      	movs	r1, #14
 80056a8:	187b      	adds	r3, r7, r1
 80056aa:	187a      	adds	r2, r7, r1
 80056ac:	8812      	ldrh	r2, [r2, #0]
 80056ae:	3201      	adds	r2, #1
 80056b0:	801a      	strh	r2, [r3, #0]
 80056b2:	187b      	adds	r3, r7, r1
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d805      	bhi.n	80056c6 <send_at_cmd+0x7e>
    HAL_Delay(1000);
 80056ba:	23fa      	movs	r3, #250	; 0xfa
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	0018      	movs	r0, r3
 80056c0:	f000 fc58 	bl	8005f74 <HAL_Delay>
    memset(buf, 0, sizeof(buf));
 80056c4:	e7c8      	b.n	8005658 <send_at_cmd+0x10>
    if (++tries >= 5) break;
 80056c6:	46c0      	nop			; (mov r8, r8)
  }

  return false;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	0018      	movs	r0, r3
 80056cc:	46bd      	mov	sp, r7
 80056ce:	b004      	add	sp, #16
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	2000052c 	.word	0x2000052c
 80056d8:	2000038c 	.word	0x2000038c
 80056dc:	080134d4 	.word	0x080134d4

080056e0 <send_at_connect_cmd>:

bool send_at_connect_cmd(char *cmd, char *data, char *key, char *keyval, uint8_t max_cmd_retries)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
  uint8_t cmd_retries = 0;
 80056ee:	2317      	movs	r3, #23
 80056f0:	18fb      	adds	r3, r7, r3
 80056f2:	2200      	movs	r2, #0
 80056f4:	701a      	strb	r2, [r3, #0]
  uint8_t ok_rx_retries = 0;
 80056f6:	2316      	movs	r3, #22
 80056f8:	18fb      	adds	r3, r7, r3
 80056fa:	2200      	movs	r2, #0
 80056fc:	701a      	strb	r2, [r3, #0]
  uint8_t connect_rx_retries = 0;
 80056fe:	2315      	movs	r3, #21
 8005700:	18fb      	adds	r3, r7, r3
 8005702:	2200      	movs	r2, #0
 8005704:	701a      	strb	r2, [r3, #0]

  while (1) {
    memset(buf, 0, sizeof(buf));
 8005706:	23fa      	movs	r3, #250	; 0xfa
 8005708:	009a      	lsls	r2, r3, #2
 800570a:	4b66      	ldr	r3, [pc, #408]	; (80058a4 <send_at_connect_cmd+0x1c4>)
 800570c:	2100      	movs	r1, #0
 800570e:	0018      	movs	r0, r3
 8005710:	f00a fac8 	bl	800fca4 <memset>
    HAL_UART_Transmit(&huart1, (uint8_t*)cmd, strlen(cmd), 100);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	0018      	movs	r0, r3
 8005718:	f7fa fd00 	bl	800011c <strlen>
 800571c:	0003      	movs	r3, r0
 800571e:	b29a      	uxth	r2, r3
 8005720:	68f9      	ldr	r1, [r7, #12]
 8005722:	4861      	ldr	r0, [pc, #388]	; (80058a8 <send_at_connect_cmd+0x1c8>)
 8005724:	2364      	movs	r3, #100	; 0x64
 8005726:	f004 f9c3 	bl	8009ab0 <HAL_UART_Transmit>
    while (strstrn((char *)buf, "CONNECT", BUF_MAX_LEN) == NULL) {
 800572a:	e013      	b.n	8005754 <send_at_connect_cmd+0x74>
      HAL_UART_Receive_DMA(&huart1, buf, BUF_MAX_LEN);
 800572c:	23fa      	movs	r3, #250	; 0xfa
 800572e:	009a      	lsls	r2, r3, #2
 8005730:	495c      	ldr	r1, [pc, #368]	; (80058a4 <send_at_connect_cmd+0x1c4>)
 8005732:	4b5d      	ldr	r3, [pc, #372]	; (80058a8 <send_at_connect_cmd+0x1c8>)
 8005734:	0018      	movs	r0, r3
 8005736:	f004 fa5b 	bl	8009bf0 <HAL_UART_Receive_DMA>
      HAL_Delay(200);
 800573a:	20c8      	movs	r0, #200	; 0xc8
 800573c:	f000 fc1a 	bl	8005f74 <HAL_Delay>
      if (++ok_rx_retries >= 20) break;
 8005740:	2116      	movs	r1, #22
 8005742:	187b      	adds	r3, r7, r1
 8005744:	187a      	adds	r2, r7, r1
 8005746:	7812      	ldrb	r2, [r2, #0]
 8005748:	3201      	adds	r2, #1
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	187b      	adds	r3, r7, r1
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b13      	cmp	r3, #19
 8005752:	d809      	bhi.n	8005768 <send_at_connect_cmd+0x88>
    while (strstrn((char *)buf, "CONNECT", BUF_MAX_LEN) == NULL) {
 8005754:	23fa      	movs	r3, #250	; 0xfa
 8005756:	009a      	lsls	r2, r3, #2
 8005758:	4954      	ldr	r1, [pc, #336]	; (80058ac <send_at_connect_cmd+0x1cc>)
 800575a:	4b52      	ldr	r3, [pc, #328]	; (80058a4 <send_at_connect_cmd+0x1c4>)
 800575c:	0018      	movs	r0, r3
 800575e:	f000 f8ab 	bl	80058b8 <strstrn>
 8005762:	1e03      	subs	r3, r0, #0
 8005764:	d0e2      	beq.n	800572c <send_at_connect_cmd+0x4c>
 8005766:	e000      	b.n	800576a <send_at_connect_cmd+0x8a>
      if (++ok_rx_retries >= 20) break;
 8005768:	46c0      	nop			; (mov r8, r8)
    }

    if (strstrn((char *)buf, "CONNECT", BUF_MAX_LEN) != NULL) {
 800576a:	23fa      	movs	r3, #250	; 0xfa
 800576c:	009a      	lsls	r2, r3, #2
 800576e:	494f      	ldr	r1, [pc, #316]	; (80058ac <send_at_connect_cmd+0x1cc>)
 8005770:	4b4c      	ldr	r3, [pc, #304]	; (80058a4 <send_at_connect_cmd+0x1c4>)
 8005772:	0018      	movs	r0, r3
 8005774:	f000 f8a0 	bl	80058b8 <strstrn>
 8005778:	1e03      	subs	r3, r0, #0
 800577a:	d100      	bne.n	800577e <send_at_connect_cmd+0x9e>
 800577c:	e079      	b.n	8005872 <send_at_connect_cmd+0x192>
      memset(buf, 0, sizeof(buf));
 800577e:	23fa      	movs	r3, #250	; 0xfa
 8005780:	009a      	lsls	r2, r3, #2
 8005782:	4b48      	ldr	r3, [pc, #288]	; (80058a4 <send_at_connect_cmd+0x1c4>)
 8005784:	2100      	movs	r1, #0
 8005786:	0018      	movs	r0, r3
 8005788:	f00a fa8c 	bl	800fca4 <memset>
      HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data), 5000);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	0018      	movs	r0, r3
 8005790:	f7fa fcc4 	bl	800011c <strlen>
 8005794:	0003      	movs	r3, r0
 8005796:	b29a      	uxth	r2, r3
 8005798:	4b45      	ldr	r3, [pc, #276]	; (80058b0 <send_at_connect_cmd+0x1d0>)
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	4842      	ldr	r0, [pc, #264]	; (80058a8 <send_at_connect_cmd+0x1c8>)
 800579e:	f004 f987 	bl	8009ab0 <HAL_UART_Transmit>
      while (strstrn((char *)buf, "OK", BUF_MAX_LEN) == NULL) {
 80057a2:	e013      	b.n	80057cc <send_at_connect_cmd+0xec>
        HAL_UART_Receive_DMA(&huart1, buf, BUF_MAX_LEN);
 80057a4:	23fa      	movs	r3, #250	; 0xfa
 80057a6:	009a      	lsls	r2, r3, #2
 80057a8:	493e      	ldr	r1, [pc, #248]	; (80058a4 <send_at_connect_cmd+0x1c4>)
 80057aa:	4b3f      	ldr	r3, [pc, #252]	; (80058a8 <send_at_connect_cmd+0x1c8>)
 80057ac:	0018      	movs	r0, r3
 80057ae:	f004 fa1f 	bl	8009bf0 <HAL_UART_Receive_DMA>
        HAL_Delay(200);
 80057b2:	20c8      	movs	r0, #200	; 0xc8
 80057b4:	f000 fbde 	bl	8005f74 <HAL_Delay>
        if (++connect_rx_retries >= 20) break;
 80057b8:	2115      	movs	r1, #21
 80057ba:	187b      	adds	r3, r7, r1
 80057bc:	187a      	adds	r2, r7, r1
 80057be:	7812      	ldrb	r2, [r2, #0]
 80057c0:	3201      	adds	r2, #1
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	187b      	adds	r3, r7, r1
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b13      	cmp	r3, #19
 80057ca:	d809      	bhi.n	80057e0 <send_at_connect_cmd+0x100>
      while (strstrn((char *)buf, "OK", BUF_MAX_LEN) == NULL) {
 80057cc:	23fa      	movs	r3, #250	; 0xfa
 80057ce:	009a      	lsls	r2, r3, #2
 80057d0:	4938      	ldr	r1, [pc, #224]	; (80058b4 <send_at_connect_cmd+0x1d4>)
 80057d2:	4b34      	ldr	r3, [pc, #208]	; (80058a4 <send_at_connect_cmd+0x1c4>)
 80057d4:	0018      	movs	r0, r3
 80057d6:	f000 f86f 	bl	80058b8 <strstrn>
 80057da:	1e03      	subs	r3, r0, #0
 80057dc:	d0e2      	beq.n	80057a4 <send_at_connect_cmd+0xc4>
 80057de:	e000      	b.n	80057e2 <send_at_connect_cmd+0x102>
        if (++connect_rx_retries >= 20) break;
 80057e0:	46c0      	nop			; (mov r8, r8)
      }

      if (strstrn((char *)buf, "OK", BUF_MAX_LEN) != NULL) {
 80057e2:	23fa      	movs	r3, #250	; 0xfa
 80057e4:	009a      	lsls	r2, r3, #2
 80057e6:	4933      	ldr	r1, [pc, #204]	; (80058b4 <send_at_connect_cmd+0x1d4>)
 80057e8:	4b2e      	ldr	r3, [pc, #184]	; (80058a4 <send_at_connect_cmd+0x1c4>)
 80057ea:	0018      	movs	r0, r3
 80057ec:	f000 f864 	bl	80058b8 <strstrn>
 80057f0:	1e03      	subs	r3, r0, #0
 80057f2:	d03e      	beq.n	8005872 <send_at_connect_cmd+0x192>
        if (key != NULL && keyval != NULL) {
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d039      	beq.n	800586e <send_at_connect_cmd+0x18e>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d036      	beq.n	800586e <send_at_connect_cmd+0x18e>
          uint8_t keyval_retries = 0;
 8005800:	2314      	movs	r3, #20
 8005802:	18fb      	adds	r3, r7, r3
 8005804:	2200      	movs	r2, #0
 8005806:	701a      	strb	r2, [r3, #0]
          memset(buf, 0, sizeof(buf));
 8005808:	23fa      	movs	r3, #250	; 0xfa
 800580a:	009a      	lsls	r2, r3, #2
 800580c:	4b25      	ldr	r3, [pc, #148]	; (80058a4 <send_at_connect_cmd+0x1c4>)
 800580e:	2100      	movs	r1, #0
 8005810:	0018      	movs	r0, r3
 8005812:	f00a fa47 	bl	800fca4 <memset>
          while (strstrn((char *)buf, key, BUF_MAX_LEN) == NULL) {
 8005816:	e01e      	b.n	8005856 <send_at_connect_cmd+0x176>
            HAL_UART_Receive_DMA(&huart1, buf, BUF_MAX_LEN);
 8005818:	23fa      	movs	r3, #250	; 0xfa
 800581a:	009a      	lsls	r2, r3, #2
 800581c:	4921      	ldr	r1, [pc, #132]	; (80058a4 <send_at_connect_cmd+0x1c4>)
 800581e:	4b22      	ldr	r3, [pc, #136]	; (80058a8 <send_at_connect_cmd+0x1c8>)
 8005820:	0018      	movs	r0, r3
 8005822:	f004 f9e5 	bl	8009bf0 <HAL_UART_Receive_DMA>
            HAL_Delay(200);
 8005826:	20c8      	movs	r0, #200	; 0xc8
 8005828:	f000 fba4 	bl	8005f74 <HAL_Delay>
            if (strstrn((char *)buf, keyval, BUF_MAX_LEN) != NULL) {
 800582c:	23fa      	movs	r3, #250	; 0xfa
 800582e:	009a      	lsls	r2, r3, #2
 8005830:	6839      	ldr	r1, [r7, #0]
 8005832:	4b1c      	ldr	r3, [pc, #112]	; (80058a4 <send_at_connect_cmd+0x1c4>)
 8005834:	0018      	movs	r0, r3
 8005836:	f000 f83f 	bl	80058b8 <strstrn>
 800583a:	1e03      	subs	r3, r0, #0
 800583c:	d001      	beq.n	8005842 <send_at_connect_cmd+0x162>
              return true;
 800583e:	2301      	movs	r3, #1
 8005840:	e02c      	b.n	800589c <send_at_connect_cmd+0x1bc>
            }
            if (++keyval_retries >= 20) break;
 8005842:	2114      	movs	r1, #20
 8005844:	187b      	adds	r3, r7, r1
 8005846:	187a      	adds	r2, r7, r1
 8005848:	7812      	ldrb	r2, [r2, #0]
 800584a:	3201      	adds	r2, #1
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	187b      	adds	r3, r7, r1
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b13      	cmp	r3, #19
 8005854:	d809      	bhi.n	800586a <send_at_connect_cmd+0x18a>
          while (strstrn((char *)buf, key, BUF_MAX_LEN) == NULL) {
 8005856:	23fa      	movs	r3, #250	; 0xfa
 8005858:	009a      	lsls	r2, r3, #2
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <send_at_connect_cmd+0x1c4>)
 800585e:	0018      	movs	r0, r3
 8005860:	f000 f82a 	bl	80058b8 <strstrn>
 8005864:	1e03      	subs	r3, r0, #0
 8005866:	d0d7      	beq.n	8005818 <send_at_connect_cmd+0x138>
        if (key != NULL && keyval != NULL) {
 8005868:	e003      	b.n	8005872 <send_at_connect_cmd+0x192>
            if (++keyval_retries >= 20) break;
 800586a:	46c0      	nop			; (mov r8, r8)
        if (key != NULL && keyval != NULL) {
 800586c:	e001      	b.n	8005872 <send_at_connect_cmd+0x192>
          }
        } else {
          return true;
 800586e:	2301      	movs	r3, #1
 8005870:	e014      	b.n	800589c <send_at_connect_cmd+0x1bc>
        }
      }
    }

    if (++cmd_retries >= max_cmd_retries) break;
 8005872:	2117      	movs	r1, #23
 8005874:	187b      	adds	r3, r7, r1
 8005876:	187a      	adds	r2, r7, r1
 8005878:	7812      	ldrb	r2, [r2, #0]
 800587a:	3201      	adds	r2, #1
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	187a      	adds	r2, r7, r1
 8005880:	2320      	movs	r3, #32
 8005882:	18fb      	adds	r3, r7, r3
 8005884:	7812      	ldrb	r2, [r2, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d205      	bcs.n	8005898 <send_at_connect_cmd+0x1b8>
    HAL_Delay(1000);
 800588c:	23fa      	movs	r3, #250	; 0xfa
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	0018      	movs	r0, r3
 8005892:	f000 fb6f 	bl	8005f74 <HAL_Delay>
    memset(buf, 0, sizeof(buf));
 8005896:	e736      	b.n	8005706 <send_at_connect_cmd+0x26>
    if (++cmd_retries >= max_cmd_retries) break;
 8005898:	46c0      	nop			; (mov r8, r8)
  }

  return false;
 800589a:	2300      	movs	r3, #0
}
 800589c:	0018      	movs	r0, r3
 800589e:	46bd      	mov	sp, r7
 80058a0:	b006      	add	sp, #24
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	2000052c 	.word	0x2000052c
 80058a8:	2000038c 	.word	0x2000038c
 80058ac:	080134d8 	.word	0x080134d8
 80058b0:	00001388 	.word	0x00001388
 80058b4:	080134d4 	.word	0x080134d4

080058b8 <strstrn>:


char *strstrn(const char *mainStr, const char *subStr, size_t mainStrSize)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
  char *s1, *s2;
  size_t i = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]

  while (i < mainStrSize) { // Iterate over the main string
 80058c8:	e02c      	b.n	8005924 <strstrn+0x6c>
    if (*mainStr == *subStr) { // search for the first character in substring
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	781a      	ldrb	r2, [r3, #0]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d120      	bne.n	8005918 <strstrn+0x60>
      // The first character of substring is matched.
      // Check if all characters of substring.
      s1 = mainStr;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	61fb      	str	r3, [r7, #28]
      s2 = subStr;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	61bb      	str	r3, [r7, #24]

      while (*s1 && *s2) {
 80058de:	e00b      	b.n	80058f8 <strstrn+0x40>
        if (*s1 != *s2) break; // not matched
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	781a      	ldrb	r2, [r3, #0]
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d10e      	bne.n	800590a <strstrn+0x52>
        s1++;
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	3301      	adds	r3, #1
 80058f0:	61fb      	str	r3, [r7, #28]
        s2++;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	3301      	adds	r3, #1
 80058f6:	61bb      	str	r3, [r7, #24]
      while (*s1 && *s2) {
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <strstrn+0x54>
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1eb      	bne.n	80058e0 <strstrn+0x28>
 8005908:	e000      	b.n	800590c <strstrn+0x54>
        if (*s1 != *s2) break; // not matched
 800590a:	46c0      	nop			; (mov r8, r8)
      }

      if(*s2 == NULL) return mainStr; // we reached end of subStr
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <strstrn+0x60>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	e00a      	b.n	800592e <strstrn+0x76>
    }

    mainStr++; // go to next element
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3301      	adds	r3, #1
 800591c:	60fb      	str	r3, [r7, #12]
    i++;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	3301      	adds	r3, #1
 8005922:	617b      	str	r3, [r7, #20]
  while (i < mainStrSize) { // Iterate over the main string
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	429a      	cmp	r2, r3
 800592a:	d3ce      	bcc.n	80058ca <strstrn+0x12>
  }

  return NULL;
 800592c:	2300      	movs	r3, #0
}
 800592e:	0018      	movs	r0, r3
 8005930:	46bd      	mov	sp, r7
 8005932:	b008      	add	sp, #32
 8005934:	bd80      	pop	{r7, pc}
	...

08005938 <RED_LED_OFF>:
{
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
}

void RED_LED_OFF()
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	021b      	lsls	r3, r3, #8
 8005940:	4803      	ldr	r0, [pc, #12]	; (8005950 <RED_LED_OFF+0x18>)
 8005942:	2201      	movs	r2, #1
 8005944:	0019      	movs	r1, r3
 8005946:	f001 fb06 	bl	8006f56 <HAL_GPIO_WritePin>
}
 800594a:	46c0      	nop			; (mov r8, r8)
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	50000800 	.word	0x50000800

08005954 <GREEN_LED_OFF>:
{
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
}

void GREEN_LED_OFF()
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8005958:	2380      	movs	r3, #128	; 0x80
 800595a:	0119      	lsls	r1, r3, #4
 800595c:	23a0      	movs	r3, #160	; 0xa0
 800595e:	05db      	lsls	r3, r3, #23
 8005960:	2201      	movs	r2, #1
 8005962:	0018      	movs	r0, r3
 8005964:	f001 faf7 	bl	8006f56 <HAL_GPIO_WritePin>
}
 8005968:	46c0      	nop			; (mov r8, r8)
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <BLUE_LED_OFF>:
{
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
}

void BLUE_LED_OFF()
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8005974:	2380      	movs	r3, #128	; 0x80
 8005976:	01db      	lsls	r3, r3, #7
 8005978:	4803      	ldr	r0, [pc, #12]	; (8005988 <BLUE_LED_OFF+0x18>)
 800597a:	2201      	movs	r2, #1
 800597c:	0019      	movs	r1, r3
 800597e:	f001 faea 	bl	8006f56 <HAL_GPIO_WritePin>
}
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	50000800 	.word	0x50000800

0800598c <BLINK_LED>:

void BLINK_LED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t times, uint32_t delay)
{
 800598c:	b590      	push	{r4, r7, lr}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	0008      	movs	r0, r1
 8005996:	0011      	movs	r1, r2
 8005998:	607b      	str	r3, [r7, #4]
 800599a:	230a      	movs	r3, #10
 800599c:	18fb      	adds	r3, r7, r3
 800599e:	1c02      	adds	r2, r0, #0
 80059a0:	801a      	strh	r2, [r3, #0]
 80059a2:	2309      	movs	r3, #9
 80059a4:	18fb      	adds	r3, r7, r3
 80059a6:	1c0a      	adds	r2, r1, #0
 80059a8:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < times; i++) {
 80059aa:	2317      	movs	r3, #23
 80059ac:	18fb      	adds	r3, r7, r3
 80059ae:	2200      	movs	r2, #0
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	e025      	b.n	8005a00 <BLINK_LED+0x74>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80059b4:	240a      	movs	r4, #10
 80059b6:	193b      	adds	r3, r7, r4
 80059b8:	8819      	ldrh	r1, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	0018      	movs	r0, r3
 80059c0:	f001 fac9 	bl	8006f56 <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	0018      	movs	r0, r3
 80059c8:	f000 fad4 	bl	8005f74 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80059cc:	193b      	adds	r3, r7, r4
 80059ce:	8819      	ldrh	r1, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	0018      	movs	r0, r3
 80059d6:	f001 fabe 	bl	8006f56 <HAL_GPIO_WritePin>
    if (i != times-1) HAL_Delay(delay);
 80059da:	2317      	movs	r3, #23
 80059dc:	18fb      	adds	r3, r7, r3
 80059de:	781a      	ldrb	r2, [r3, #0]
 80059e0:	2309      	movs	r3, #9
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d003      	beq.n	80059f4 <BLINK_LED+0x68>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	0018      	movs	r0, r3
 80059f0:	f000 fac0 	bl	8005f74 <HAL_Delay>
  for (uint8_t i = 0; i < times; i++) {
 80059f4:	2117      	movs	r1, #23
 80059f6:	187b      	adds	r3, r7, r1
 80059f8:	781a      	ldrb	r2, [r3, #0]
 80059fa:	187b      	adds	r3, r7, r1
 80059fc:	3201      	adds	r2, #1
 80059fe:	701a      	strb	r2, [r3, #0]
 8005a00:	2317      	movs	r3, #23
 8005a02:	18fa      	adds	r2, r7, r3
 8005a04:	2309      	movs	r3, #9
 8005a06:	18fb      	adds	r3, r7, r3
 8005a08:	7812      	ldrb	r2, [r2, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d3d1      	bcc.n	80059b4 <BLINK_LED+0x28>
  }
}
 8005a10:	46c0      	nop			; (mov r8, r8)
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	46bd      	mov	sp, r7
 8005a16:	b007      	add	sp, #28
 8005a18:	bd90      	pop	{r4, r7, pc}
	...

08005a1c <convertUTCtoEET>:

void convertUTCtoEET(char *utcStr, char *eetStr)
{
 8005a1c:	b590      	push	{r4, r7, lr}
 8005a1e:	b089      	sub	sp, #36	; 0x24
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  if (strlen(utcStr) != 10) { // If input string is not in the expected format
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f7fa fb77 	bl	800011c <strlen>
 8005a2e:	0003      	movs	r3, r0
 8005a30:	2b0a      	cmp	r3, #10
 8005a32:	d008      	beq.n	8005a46 <convertUTCtoEET+0x2a>
    strcpy(eetStr, "00:00:00");
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	4b1a      	ldr	r3, [pc, #104]	; (8005aa0 <convertUTCtoEET+0x84>)
 8005a38:	0010      	movs	r0, r2
 8005a3a:	0019      	movs	r1, r3
 8005a3c:	2309      	movs	r3, #9
 8005a3e:	001a      	movs	r2, r3
 8005a40:	f00a fa6e 	bl	800ff20 <memcpy>
    return;
 8005a44:	e028      	b.n	8005a98 <convertUTCtoEET+0x7c>
  }

  int hh, mm, ss;
  if (sscanf(utcStr, "%2d%2d%2d", &hh, &mm, &ss) != 3) { // Parse the UTC time
 8005a46:	2310      	movs	r3, #16
 8005a48:	18fc      	adds	r4, r7, r3
 8005a4a:	2314      	movs	r3, #20
 8005a4c:	18fa      	adds	r2, r7, r3
 8005a4e:	4915      	ldr	r1, [pc, #84]	; (8005aa4 <convertUTCtoEET+0x88>)
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	230c      	movs	r3, #12
 8005a54:	18fb      	adds	r3, r7, r3
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	0023      	movs	r3, r4
 8005a5a:	f00a f8ad 	bl	800fbb8 <siscanf>
 8005a5e:	0003      	movs	r3, r0
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d008      	beq.n	8005a76 <convertUTCtoEET+0x5a>
    strcpy(eetStr, "00:00:00");
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <convertUTCtoEET+0x84>)
 8005a68:	0010      	movs	r0, r2
 8005a6a:	0019      	movs	r1, r3
 8005a6c:	2309      	movs	r3, #9
 8005a6e:	001a      	movs	r2, r3
 8005a70:	f00a fa56 	bl	800ff20 <memcpy>
    return;
 8005a74:	e010      	b.n	8005a98 <convertUTCtoEET+0x7c>
  }

  hh = (hh + 3) % 24; // Add 3 hours for the EET timezone
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	3303      	adds	r3, #3
 8005a7a:	2118      	movs	r1, #24
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	f7fa fcd9 	bl	8000434 <__aeabi_idivmod>
 8005a82:	000b      	movs	r3, r1
 8005a84:	617b      	str	r3, [r7, #20]
  sprintf(eetStr, "%02d:%02d:%02d", hh, mm, ss); // Format the EET time
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	693c      	ldr	r4, [r7, #16]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4906      	ldr	r1, [pc, #24]	; (8005aa8 <convertUTCtoEET+0x8c>)
 8005a8e:	6838      	ldr	r0, [r7, #0]
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	0023      	movs	r3, r4
 8005a94:	f00a f870 	bl	800fb78 <siprintf>
}
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	b007      	add	sp, #28
 8005a9c:	bd90      	pop	{r4, r7, pc}
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	080134e0 	.word	0x080134e0
 8005aa4:	080134ec 	.word	0x080134ec
 8005aa8:	080134f8 	.word	0x080134f8

08005aac <formatDate>:

void formatDate(char *date, char *formattedDate)
{
 8005aac:	b590      	push	{r4, r7, lr}
 8005aae:	b089      	sub	sp, #36	; 0x24
 8005ab0:	af02      	add	r7, sp, #8
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  if (strlen(date) != 6) {
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f7fa fb2f 	bl	800011c <strlen>
 8005abe:	0003      	movs	r3, r0
 8005ac0:	2b06      	cmp	r3, #6
 8005ac2:	d008      	beq.n	8005ad6 <formatDate+0x2a>
    strcpy(formattedDate, "0000-00-00");
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	4b19      	ldr	r3, [pc, #100]	; (8005b2c <formatDate+0x80>)
 8005ac8:	0010      	movs	r0, r2
 8005aca:	0019      	movs	r1, r3
 8005acc:	230b      	movs	r3, #11
 8005ace:	001a      	movs	r2, r3
 8005ad0:	f00a fa26 	bl	800ff20 <memcpy>
    return;
 8005ad4:	e026      	b.n	8005b24 <formatDate+0x78>
  }

  int y, m, d;
  if (sscanf(date, "%2d%2d%2d", &d, &m, &y) != 3) {
 8005ad6:	2310      	movs	r3, #16
 8005ad8:	18fc      	adds	r4, r7, r3
 8005ada:	230c      	movs	r3, #12
 8005adc:	18fa      	adds	r2, r7, r3
 8005ade:	4914      	ldr	r1, [pc, #80]	; (8005b30 <formatDate+0x84>)
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	2314      	movs	r3, #20
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	0023      	movs	r3, r4
 8005aea:	f00a f865 	bl	800fbb8 <siscanf>
 8005aee:	0003      	movs	r3, r0
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d008      	beq.n	8005b06 <formatDate+0x5a>
    strcpy(formattedDate, "0000-00-00");
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <formatDate+0x80>)
 8005af8:	0010      	movs	r0, r2
 8005afa:	0019      	movs	r1, r3
 8005afc:	230b      	movs	r3, #11
 8005afe:	001a      	movs	r2, r3
 8005b00:	f00a fa0e 	bl	800ff20 <memcpy>
    return;
 8005b04:	e00e      	b.n	8005b24 <formatDate+0x78>
  }

  y += 2000;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	22fa      	movs	r2, #250	; 0xfa
 8005b0a:	00d2      	lsls	r2, r2, #3
 8005b0c:	4694      	mov	ip, r2
 8005b0e:	4463      	add	r3, ip
 8005b10:	617b      	str	r3, [r7, #20]
  sprintf(formattedDate, "%04d-%02d-%02d", y, m, d);
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	693c      	ldr	r4, [r7, #16]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4906      	ldr	r1, [pc, #24]	; (8005b34 <formatDate+0x88>)
 8005b1a:	6838      	ldr	r0, [r7, #0]
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	0023      	movs	r3, r4
 8005b20:	f00a f82a 	bl	800fb78 <siprintf>
}
 8005b24:	46bd      	mov	sp, r7
 8005b26:	b007      	add	sp, #28
 8005b28:	bd90      	pop	{r4, r7, pc}
 8005b2a:	46c0      	nop			; (mov r8, r8)
 8005b2c:	08013508 	.word	0x08013508
 8005b30:	080134ec 	.word	0x080134ec
 8005b34:	08013514 	.word	0x08013514

08005b38 <valid_number>:

int valid_number(char *str)
{
 8005b38:	b590      	push	{r4, r7, lr}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
    int i = 0, j = strlen(str) - 1;
 8005b40:	2300      	movs	r3, #0
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	0018      	movs	r0, r3
 8005b48:	f7fa fae8 	bl	800011c <strlen>
 8005b4c:	0003      	movs	r3, r0
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	613b      	str	r3, [r7, #16]

    // Handling whitespaces
    while (i < strlen(str) && str[i] == ' ')
 8005b52:	e002      	b.n	8005b5a <valid_number+0x22>
        i++;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	3301      	adds	r3, #1
 8005b58:	617b      	str	r3, [r7, #20]
    while (i < strlen(str) && str[i] == ' ')
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	f7fa fadd 	bl	800011c <strlen>
 8005b62:	0002      	movs	r2, r0
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d909      	bls.n	8005b7e <valid_number+0x46>
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	18d3      	adds	r3, r2, r3
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	d0ee      	beq.n	8005b54 <valid_number+0x1c>
    while (j >= 0 && str[j] == ' ')
 8005b76:	e002      	b.n	8005b7e <valid_number+0x46>
        j--;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	613b      	str	r3, [r7, #16]
    while (j >= 0 && str[j] == ' ')
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	db05      	blt.n	8005b90 <valid_number+0x58>
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	18d3      	adds	r3, r2, r3
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d0f3      	beq.n	8005b78 <valid_number+0x40>

    if (i > j)
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	dd01      	ble.n	8005b9c <valid_number+0x64>
        return 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e0d1      	b.n	8005d40 <valid_number+0x208>

    // if string is of length 1 and the only
    // character is not a digit
    if (i == j && !(str[i] >= '0' && str[i] <= '9'))
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d10d      	bne.n	8005bc0 <valid_number+0x88>
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	18d3      	adds	r3, r2, r3
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b2f      	cmp	r3, #47	; 0x2f
 8005bae:	d905      	bls.n	8005bbc <valid_number+0x84>
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	18d3      	adds	r3, r2, r3
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b39      	cmp	r3, #57	; 0x39
 8005bba:	d901      	bls.n	8005bc0 <valid_number+0x88>
        return 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e0bf      	b.n	8005d40 <valid_number+0x208>

    // If the 1st char is not '+', '-', '.' or digit
    if (str[i] != '.' && str[i] != '+'
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	18d3      	adds	r3, r2, r3
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b2e      	cmp	r3, #46	; 0x2e
 8005bca:	d019      	beq.n	8005c00 <valid_number+0xc8>
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	18d3      	adds	r3, r2, r3
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b2b      	cmp	r3, #43	; 0x2b
 8005bd6:	d013      	beq.n	8005c00 <valid_number+0xc8>
        && str[i] != '-' && !(str[i] >= '0' && str[i] <= '9'))
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	18d3      	adds	r3, r2, r3
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b2d      	cmp	r3, #45	; 0x2d
 8005be2:	d00d      	beq.n	8005c00 <valid_number+0xc8>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	18d3      	adds	r3, r2, r3
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b2f      	cmp	r3, #47	; 0x2f
 8005bee:	d905      	bls.n	8005bfc <valid_number+0xc4>
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	18d3      	adds	r3, r2, r3
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b39      	cmp	r3, #57	; 0x39
 8005bfa:	d901      	bls.n	8005c00 <valid_number+0xc8>
        return 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	e09f      	b.n	8005d40 <valid_number+0x208>

    // To check if a '.' or 'e' is found in given
    // string. We use this flag to make sure that
    // either of them appear only once.
    bool flagDotOrE = false;
 8005c00:	230f      	movs	r3, #15
 8005c02:	18fb      	adds	r3, r7, r3
 8005c04:	2200      	movs	r2, #0
 8005c06:	701a      	strb	r2, [r3, #0]

    for (i; i <= j; i++) {
 8005c08:	e094      	b.n	8005d34 <valid_number+0x1fc>
        // If any of the char does not belong to
        // {digit, +, -, ., e}
        if (str[i] != 'e' && str[i] != '.'
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	18d3      	adds	r3, r2, r3
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b65      	cmp	r3, #101	; 0x65
 8005c14:	d01f      	beq.n	8005c56 <valid_number+0x11e>
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	18d3      	adds	r3, r2, r3
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8005c20:	d019      	beq.n	8005c56 <valid_number+0x11e>
            && str[i] != '+' && str[i] != '-'
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	18d3      	adds	r3, r2, r3
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b2b      	cmp	r3, #43	; 0x2b
 8005c2c:	d013      	beq.n	8005c56 <valid_number+0x11e>
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	18d3      	adds	r3, r2, r3
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b2d      	cmp	r3, #45	; 0x2d
 8005c38:	d00d      	beq.n	8005c56 <valid_number+0x11e>
            && !(str[i] >= '0' && str[i] <= '9'))
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	18d3      	adds	r3, r2, r3
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b2f      	cmp	r3, #47	; 0x2f
 8005c44:	d905      	bls.n	8005c52 <valid_number+0x11a>
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	18d3      	adds	r3, r2, r3
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b39      	cmp	r3, #57	; 0x39
 8005c50:	d901      	bls.n	8005c56 <valid_number+0x11e>
            return 0;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e074      	b.n	8005d40 <valid_number+0x208>

        if (str[i] == '.') {
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	18d3      	adds	r3, r2, r3
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8005c60:	d122      	bne.n	8005ca8 <valid_number+0x170>
            // checks if the char 'e' has already
            // occurred before '.' If yes, return 0.
            if (flagDotOrE == true)
 8005c62:	230f      	movs	r3, #15
 8005c64:	18fb      	adds	r3, r7, r3
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <valid_number+0x138>
                return 0;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	e067      	b.n	8005d40 <valid_number+0x208>

            // If '.' is the last character.
            if (i + 1 > strlen(str))
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	3301      	adds	r3, #1
 8005c74:	001c      	movs	r4, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	0018      	movs	r0, r3
 8005c7a:	f7fa fa4f 	bl	800011c <strlen>
 8005c7e:	0003      	movs	r3, r0
 8005c80:	429c      	cmp	r4, r3
 8005c82:	d901      	bls.n	8005c88 <valid_number+0x150>
                return 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	e05b      	b.n	8005d40 <valid_number+0x208>

            // if '.' is not followed by a digit.
            if (!(str[i + 1] >= '0' && str[i + 1] <= '9'))
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	18d3      	adds	r3, r2, r3
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b2f      	cmp	r3, #47	; 0x2f
 8005c94:	d906      	bls.n	8005ca4 <valid_number+0x16c>
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	18d3      	adds	r3, r2, r3
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b39      	cmp	r3, #57	; 0x39
 8005ca2:	d944      	bls.n	8005d2e <valid_number+0x1f6>
                return 0;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	e04b      	b.n	8005d40 <valid_number+0x208>
        }

        else if (str[i] == 'e') {
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	18d3      	adds	r3, r2, r3
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b65      	cmp	r3, #101	; 0x65
 8005cb2:	d13c      	bne.n	8005d2e <valid_number+0x1f6>
            // set flagDotOrE = 1 when e is encountered.
            flagDotOrE = true;
 8005cb4:	230f      	movs	r3, #15
 8005cb6:	18fb      	adds	r3, r7, r3
 8005cb8:	2201      	movs	r2, #1
 8005cba:	701a      	strb	r2, [r3, #0]

            // if there is no digit before 'e'.
            if (!(str[i - 1] >= '0' && str[i - 1] <= '9'))
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	18d3      	adds	r3, r2, r3
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b2f      	cmp	r3, #47	; 0x2f
 8005cc8:	d906      	bls.n	8005cd8 <valid_number+0x1a0>
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	18d3      	adds	r3, r2, r3
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b39      	cmp	r3, #57	; 0x39
 8005cd6:	d901      	bls.n	8005cdc <valid_number+0x1a4>
                return 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	e031      	b.n	8005d40 <valid_number+0x208>

            // If 'e' is the last Character
            if (i + 1 > strlen(str))
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	001c      	movs	r4, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f7fa fa19 	bl	800011c <strlen>
 8005cea:	0003      	movs	r3, r0
 8005cec:	429c      	cmp	r4, r3
 8005cee:	d901      	bls.n	8005cf4 <valid_number+0x1bc>
                return 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e025      	b.n	8005d40 <valid_number+0x208>

            // if e is not followed either by
            // '+', '-' or a digit
            if (str[i + 1] != '+' && str[i + 1] != '-'
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	18d3      	adds	r3, r2, r3
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b2b      	cmp	r3, #43	; 0x2b
 8005d00:	d015      	beq.n	8005d2e <valid_number+0x1f6>
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	3301      	adds	r3, #1
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	18d3      	adds	r3, r2, r3
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b2d      	cmp	r3, #45	; 0x2d
 8005d0e:	d00e      	beq.n	8005d2e <valid_number+0x1f6>
                && (str[i + 1] >= '0' && str[i] <= '9'))
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	3301      	adds	r3, #1
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	18d3      	adds	r3, r2, r3
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b2f      	cmp	r3, #47	; 0x2f
 8005d1c:	d907      	bls.n	8005d2e <valid_number+0x1f6>
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	18d3      	adds	r3, r2, r3
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	2b39      	cmp	r3, #57	; 0x39
 8005d28:	d801      	bhi.n	8005d2e <valid_number+0x1f6>
                return 0;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e008      	b.n	8005d40 <valid_number+0x208>
    for (i; i <= j; i++) {
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	3301      	adds	r3, #1
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	dc00      	bgt.n	8005d3e <valid_number+0x206>
 8005d3c:	e765      	b.n	8005c0a <valid_number+0xd2>
        }
    }

    /* If the string skips all above cases, then
    it is numeric*/
    return 1;
 8005d3e:	2301      	movs	r3, #1
}
 8005d40:	0018      	movs	r0, r3
 8005d42:	46bd      	mov	sp, r7
 8005d44:	b007      	add	sp, #28
 8005d46:	bd90      	pop	{r4, r7, pc}

08005d48 <convertToDecimalDegrees>:

float convertToDecimalDegrees(const char *latLon, char direction)
{
 8005d48:	b5b0      	push	{r4, r5, r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	000a      	movs	r2, r1
 8005d52:	1cfb      	adds	r3, r7, #3
 8005d54:	701a      	strb	r2, [r3, #0]
  char deg[4] = {0};
 8005d56:	240c      	movs	r4, #12
 8005d58:	193b      	adds	r3, r7, r4
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]
  char *dot, *min;
  int len;
  float dec = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61fb      	str	r3, [r7, #28]

  if ((dot = strchr(latLon, '.'))) { /* if decimal point was found */
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	212e      	movs	r1, #46	; 0x2e
 8005d66:	0018      	movs	r0, r3
 8005d68:	f009 ffb1 	bl	800fcce <strchr>
 8005d6c:	0003      	movs	r3, r0
 8005d6e:	61bb      	str	r3, [r7, #24]
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d035      	beq.n	8005de2 <convertToDecimalDegrees+0x9a>
    min = dot - 2; /* mark the start of minutes 2 chars back */
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	3b02      	subs	r3, #2
 8005d7a:	617b      	str	r3, [r7, #20]
    len = min - latLon; /* find the length of degrees */
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	613b      	str	r3, [r7, #16]
    strncpy(deg, latLon, len); /* copy the degree string to allow conversion to float */
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	193b      	adds	r3, r7, r4
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f009 ffbe 	bl	800fd0c <strncpy>

    dec = atof(deg) + atof(min) / 60; /* convert to float */
 8005d90:	193b      	adds	r3, r7, r4
 8005d92:	0018      	movs	r0, r3
 8005d94:	f008 f8d2 	bl	800df3c <atof>
 8005d98:	0004      	movs	r4, r0
 8005d9a:	000d      	movs	r5, r1
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	0018      	movs	r0, r3
 8005da0:	f008 f8cc 	bl	800df3c <atof>
 8005da4:	2200      	movs	r2, #0
 8005da6:	4b11      	ldr	r3, [pc, #68]	; (8005dec <convertToDecimalDegrees+0xa4>)
 8005da8:	f7fb fc5e 	bl	8001668 <__aeabi_ddiv>
 8005dac:	0002      	movs	r2, r0
 8005dae:	000b      	movs	r3, r1
 8005db0:	0020      	movs	r0, r4
 8005db2:	0029      	movs	r1, r5
 8005db4:	f7fb f8f8 	bl	8000fa8 <__aeabi_dadd>
 8005db8:	0002      	movs	r2, r0
 8005dba:	000b      	movs	r3, r1
 8005dbc:	0010      	movs	r0, r2
 8005dbe:	0019      	movs	r1, r3
 8005dc0:	f7fc ff82 	bl	8002cc8 <__aeabi_d2f>
 8005dc4:	1c03      	adds	r3, r0, #0
 8005dc6:	61fb      	str	r3, [r7, #28]
    if (direction == 'S' || direction == 'W') dec *= -1;
 8005dc8:	1cfb      	adds	r3, r7, #3
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b53      	cmp	r3, #83	; 0x53
 8005dce:	d003      	beq.n	8005dd8 <convertToDecimalDegrees+0x90>
 8005dd0:	1cfb      	adds	r3, r7, #3
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b57      	cmp	r3, #87	; 0x57
 8005dd6:	d104      	bne.n	8005de2 <convertToDecimalDegrees+0x9a>
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	2280      	movs	r2, #128	; 0x80
 8005ddc:	0612      	lsls	r2, r2, #24
 8005dde:	4053      	eors	r3, r2
 8005de0:	61fb      	str	r3, [r7, #28]
  }

  return dec;
 8005de2:	69fb      	ldr	r3, [r7, #28]
}
 8005de4:	1c18      	adds	r0, r3, #0
 8005de6:	46bd      	mov	sp, r7
 8005de8:	b008      	add	sp, #32
 8005dea:	bdb0      	pop	{r4, r5, r7, pc}
 8005dec:	404e0000 	.word	0x404e0000

08005df0 <buck_boost_enable>:

void buck_boost_enable()
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(FPWM_EN_GPIO_Port, FPWM_EN_Pin, GPIO_PIN_SET);
 8005df4:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <buck_boost_enable+0x24>)
 8005df6:	2201      	movs	r2, #1
 8005df8:	2110      	movs	r1, #16
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f001 f8ab 	bl	8006f56 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BUCK_BOOST_EN_GPIO_Port, BUCK_BOOST_EN_Pin, GPIO_PIN_SET);
 8005e00:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <buck_boost_enable+0x24>)
 8005e02:	2201      	movs	r2, #1
 8005e04:	2120      	movs	r1, #32
 8005e06:	0018      	movs	r0, r3
 8005e08:	f001 f8a5 	bl	8006f56 <HAL_GPIO_WritePin>
}
 8005e0c:	46c0      	nop			; (mov r8, r8)
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	50000400 	.word	0x50000400

08005e18 <buck_boost_disable>:

void buck_boost_disable()
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(FPWM_EN_GPIO_Port, FPWM_EN_Pin, GPIO_PIN_RESET);
 8005e1c:	4b07      	ldr	r3, [pc, #28]	; (8005e3c <buck_boost_disable+0x24>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2110      	movs	r1, #16
 8005e22:	0018      	movs	r0, r3
 8005e24:	f001 f897 	bl	8006f56 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BUCK_BOOST_EN_GPIO_Port, BUCK_BOOST_EN_Pin, GPIO_PIN_RESET);
 8005e28:	4b04      	ldr	r3, [pc, #16]	; (8005e3c <buck_boost_disable+0x24>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2120      	movs	r1, #32
 8005e2e:	0018      	movs	r0, r3
 8005e30:	f001 f891 	bl	8006f56 <HAL_GPIO_WritePin>
}
 8005e34:	46c0      	nop			; (mov r8, r8)
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	50000400 	.word	0x50000400

08005e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005e40:	480d      	ldr	r0, [pc, #52]	; (8005e78 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8005e42:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005e44:	f7ff fb9a 	bl	800557c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e48:	480c      	ldr	r0, [pc, #48]	; (8005e7c <LoopForever+0x6>)
  ldr r1, =_edata
 8005e4a:	490d      	ldr	r1, [pc, #52]	; (8005e80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005e4c:	4a0d      	ldr	r2, [pc, #52]	; (8005e84 <LoopForever+0xe>)
  movs r3, #0
 8005e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e50:	e002      	b.n	8005e58 <LoopCopyDataInit>

08005e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e56:	3304      	adds	r3, #4

08005e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e5c:	d3f9      	bcc.n	8005e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e5e:	4a0a      	ldr	r2, [pc, #40]	; (8005e88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005e60:	4c0a      	ldr	r4, [pc, #40]	; (8005e8c <LoopForever+0x16>)
  movs r3, #0
 8005e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e64:	e001      	b.n	8005e6a <LoopFillZerobss>

08005e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e68:	3204      	adds	r2, #4

08005e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e6c:	d3fb      	bcc.n	8005e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005e6e:	f00a f81d 	bl	800feac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e72:	f7fe fae1 	bl	8004438 <main>

08005e76 <LoopForever>:

LoopForever:
    b LoopForever
 8005e76:	e7fe      	b.n	8005e76 <LoopForever>
   ldr   r0, =_estack
 8005e78:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8005e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e80:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8005e84:	08014028 	.word	0x08014028
  ldr r2, =_sbss
 8005e88:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8005e8c:	20003f6c 	.word	0x20003f6c

08005e90 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e90:	e7fe      	b.n	8005e90 <ADC1_COMP_IRQHandler>
	...

08005e94 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005e9a:	1dfb      	adds	r3, r7, #7
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005ea0:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <HAL_Init+0x3c>)
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	4b0a      	ldr	r3, [pc, #40]	; (8005ed0 <HAL_Init+0x3c>)
 8005ea6:	2140      	movs	r1, #64	; 0x40
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005eac:	2003      	movs	r0, #3
 8005eae:	f000 f811 	bl	8005ed4 <HAL_InitTick>
 8005eb2:	1e03      	subs	r3, r0, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8005eb6:	1dfb      	adds	r3, r7, #7
 8005eb8:	2201      	movs	r2, #1
 8005eba:	701a      	strb	r2, [r3, #0]
 8005ebc:	e001      	b.n	8005ec2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005ebe:	f7ff f865 	bl	8004f8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005ec2:	1dfb      	adds	r3, r7, #7
 8005ec4:	781b      	ldrb	r3, [r3, #0]
}
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	b002      	add	sp, #8
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	46c0      	nop			; (mov r8, r8)
 8005ed0:	40022000 	.word	0x40022000

08005ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ed4:	b590      	push	{r4, r7, lr}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005edc:	4b14      	ldr	r3, [pc, #80]	; (8005f30 <HAL_InitTick+0x5c>)
 8005ede:	681c      	ldr	r4, [r3, #0]
 8005ee0:	4b14      	ldr	r3, [pc, #80]	; (8005f34 <HAL_InitTick+0x60>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	0019      	movs	r1, r3
 8005ee6:	23fa      	movs	r3, #250	; 0xfa
 8005ee8:	0098      	lsls	r0, r3, #2
 8005eea:	f7fa f933 	bl	8000154 <__udivsi3>
 8005eee:	0003      	movs	r3, r0
 8005ef0:	0019      	movs	r1, r3
 8005ef2:	0020      	movs	r0, r4
 8005ef4:	f7fa f92e 	bl	8000154 <__udivsi3>
 8005ef8:	0003      	movs	r3, r0
 8005efa:	0018      	movs	r0, r3
 8005efc:	f000 fcc9 	bl	8006892 <HAL_SYSTICK_Config>
 8005f00:	1e03      	subs	r3, r0, #0
 8005f02:	d001      	beq.n	8005f08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e00f      	b.n	8005f28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d80b      	bhi.n	8005f26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	2301      	movs	r3, #1
 8005f12:	425b      	negs	r3, r3
 8005f14:	2200      	movs	r2, #0
 8005f16:	0018      	movs	r0, r3
 8005f18:	f000 fc96 	bl	8006848 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f1c:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <HAL_InitTick+0x64>)
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	e000      	b.n	8005f28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
}
 8005f28:	0018      	movs	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	b003      	add	sp, #12
 8005f2e:	bd90      	pop	{r4, r7, pc}
 8005f30:	20000038 	.word	0x20000038
 8005f34:	20000040 	.word	0x20000040
 8005f38:	2000003c 	.word	0x2000003c

08005f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f40:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <HAL_IncTick+0x1c>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	001a      	movs	r2, r3
 8005f46:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <HAL_IncTick+0x20>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	18d2      	adds	r2, r2, r3
 8005f4c:	4b03      	ldr	r3, [pc, #12]	; (8005f5c <HAL_IncTick+0x20>)
 8005f4e:	601a      	str	r2, [r3, #0]
}
 8005f50:	46c0      	nop			; (mov r8, r8)
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	20000040 	.word	0x20000040
 8005f5c:	20003be0 	.word	0x20003be0

08005f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  return uwTick;
 8005f64:	4b02      	ldr	r3, [pc, #8]	; (8005f70 <HAL_GetTick+0x10>)
 8005f66:	681b      	ldr	r3, [r3, #0]
}
 8005f68:	0018      	movs	r0, r3
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	20003be0 	.word	0x20003be0

08005f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f7c:	f7ff fff0 	bl	8005f60 <HAL_GetTick>
 8005f80:	0003      	movs	r3, r0
 8005f82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	d005      	beq.n	8005f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f8e:	4b0a      	ldr	r3, [pc, #40]	; (8005fb8 <HAL_Delay+0x44>)
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	001a      	movs	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	189b      	adds	r3, r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005f9a:	46c0      	nop			; (mov r8, r8)
 8005f9c:	f7ff ffe0 	bl	8005f60 <HAL_GetTick>
 8005fa0:	0002      	movs	r2, r0
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d8f7      	bhi.n	8005f9c <HAL_Delay+0x28>
  {
  }
}
 8005fac:	46c0      	nop			; (mov r8, r8)
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	b004      	add	sp, #16
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	46c0      	nop			; (mov r8, r8)
 8005fb8:	20000040 	.word	0x20000040

08005fbc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8005fc0:	4b04      	ldr	r3, [pc, #16]	; (8005fd4 <HAL_SuspendTick+0x18>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	4b03      	ldr	r3, [pc, #12]	; (8005fd4 <HAL_SuspendTick+0x18>)
 8005fc6:	2102      	movs	r1, #2
 8005fc8:	438a      	bics	r2, r1
 8005fca:	601a      	str	r2, [r3, #0]
}
 8005fcc:	46c0      	nop			; (mov r8, r8)
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	e000e010 	.word	0xe000e010

08005fd8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8005fdc:	4b04      	ldr	r3, [pc, #16]	; (8005ff0 <HAL_ResumeTick+0x18>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <HAL_ResumeTick+0x18>)
 8005fe2:	2102      	movs	r1, #2
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	601a      	str	r2, [r3, #0]
}
 8005fe8:	46c0      	nop			; (mov r8, r8)
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	46c0      	nop			; (mov r8, r8)
 8005ff0:	e000e010 	.word	0xe000e010

08005ff4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e159      	b.n	80062ba <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2250      	movs	r2, #80	; 0x50
 8006018:	2100      	movs	r1, #0
 800601a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	0018      	movs	r0, r3
 8006020:	f7fe ffc8 	bl	8004fb4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006028:	2210      	movs	r2, #16
 800602a:	4013      	ands	r3, r2
 800602c:	2b10      	cmp	r3, #16
 800602e:	d005      	beq.n	800603c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	2204      	movs	r2, #4
 8006038:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800603a:	d00b      	beq.n	8006054 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006040:	2210      	movs	r2, #16
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2250      	movs	r2, #80	; 0x50
 800604c:	2100      	movs	r1, #0
 800604e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e132      	b.n	80062ba <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006058:	4a9a      	ldr	r2, [pc, #616]	; (80062c4 <HAL_ADC_Init+0x2d0>)
 800605a:	4013      	ands	r3, r2
 800605c:	2202      	movs	r2, #2
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	2203      	movs	r2, #3
 800606c:	4013      	ands	r3, r2
 800606e:	2b01      	cmp	r3, #1
 8006070:	d108      	bne.n	8006084 <HAL_ADC_Init+0x90>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2201      	movs	r2, #1
 800607a:	4013      	ands	r3, r2
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_ADC_Init+0x90>
 8006080:	2301      	movs	r3, #1
 8006082:	e000      	b.n	8006086 <HAL_ADC_Init+0x92>
 8006084:	2300      	movs	r3, #0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d149      	bne.n	800611e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	23c0      	movs	r3, #192	; 0xc0
 8006090:	061b      	lsls	r3, r3, #24
 8006092:	429a      	cmp	r2, r3
 8006094:	d00b      	beq.n	80060ae <HAL_ADC_Init+0xba>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	2380      	movs	r3, #128	; 0x80
 800609c:	05db      	lsls	r3, r3, #23
 800609e:	429a      	cmp	r2, r3
 80060a0:	d005      	beq.n	80060ae <HAL_ADC_Init+0xba>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	2380      	movs	r3, #128	; 0x80
 80060a8:	061b      	lsls	r3, r3, #24
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d111      	bne.n	80060d2 <HAL_ADC_Init+0xde>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	691a      	ldr	r2, [r3, #16]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	0092      	lsls	r2, r2, #2
 80060ba:	0892      	lsrs	r2, r2, #2
 80060bc:	611a      	str	r2, [r3, #16]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6919      	ldr	r1, [r3, #16]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	611a      	str	r2, [r3, #16]
 80060d0:	e014      	b.n	80060fc <HAL_ADC_Init+0x108>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	0092      	lsls	r2, r2, #2
 80060de:	0892      	lsrs	r2, r2, #2
 80060e0:	611a      	str	r2, [r3, #16]
 80060e2:	4b79      	ldr	r3, [pc, #484]	; (80062c8 <HAL_ADC_Init+0x2d4>)
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	4b78      	ldr	r3, [pc, #480]	; (80062c8 <HAL_ADC_Init+0x2d4>)
 80060e8:	4978      	ldr	r1, [pc, #480]	; (80062cc <HAL_ADC_Init+0x2d8>)
 80060ea:	400a      	ands	r2, r1
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	4b76      	ldr	r3, [pc, #472]	; (80062c8 <HAL_ADC_Init+0x2d4>)
 80060f0:	6819      	ldr	r1, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	4b74      	ldr	r3, [pc, #464]	; (80062c8 <HAL_ADC_Init+0x2d4>)
 80060f8:	430a      	orrs	r2, r1
 80060fa:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68da      	ldr	r2, [r3, #12]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2118      	movs	r1, #24
 8006108:	438a      	bics	r2, r1
 800610a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68d9      	ldr	r1, [r3, #12]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689a      	ldr	r2, [r3, #8]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800611e:	4b6a      	ldr	r3, [pc, #424]	; (80062c8 <HAL_ADC_Init+0x2d4>)
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b69      	ldr	r3, [pc, #420]	; (80062c8 <HAL_ADC_Init+0x2d4>)
 8006124:	496a      	ldr	r1, [pc, #424]	; (80062d0 <HAL_ADC_Init+0x2dc>)
 8006126:	400a      	ands	r2, r1
 8006128:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800612a:	4b67      	ldr	r3, [pc, #412]	; (80062c8 <HAL_ADC_Init+0x2d4>)
 800612c:	6819      	ldr	r1, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006132:	065a      	lsls	r2, r3, #25
 8006134:	4b64      	ldr	r3, [pc, #400]	; (80062c8 <HAL_ADC_Init+0x2d4>)
 8006136:	430a      	orrs	r2, r1
 8006138:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	2380      	movs	r3, #128	; 0x80
 8006142:	055b      	lsls	r3, r3, #21
 8006144:	4013      	ands	r3, r2
 8006146:	d108      	bne.n	800615a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2180      	movs	r1, #128	; 0x80
 8006154:	0549      	lsls	r1, r1, #21
 8006156:	430a      	orrs	r2, r1
 8006158:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	495b      	ldr	r1, [pc, #364]	; (80062d4 <HAL_ADC_Init+0x2e0>)
 8006166:	400a      	ands	r2, r1
 8006168:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68d9      	ldr	r1, [r3, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d101      	bne.n	8006180 <HAL_ADC_Init+0x18c>
 800617c:	2304      	movs	r3, #4
 800617e:	e000      	b.n	8006182 <HAL_ADC_Init+0x18e>
 8006180:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006182:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2020      	movs	r0, #32
 8006188:	5c1b      	ldrb	r3, [r3, r0]
 800618a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800618c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	202c      	movs	r0, #44	; 0x2c
 8006192:	5c1b      	ldrb	r3, [r3, r0]
 8006194:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006196:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800619c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80061a4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80061ac:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061ba:	23c2      	movs	r3, #194	; 0xc2
 80061bc:	33ff      	adds	r3, #255	; 0xff
 80061be:	429a      	cmp	r2, r3
 80061c0:	d00b      	beq.n	80061da <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68d9      	ldr	r1, [r3, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80061d0:	431a      	orrs	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2221      	movs	r2, #33	; 0x21
 80061de:	5c9b      	ldrb	r3, [r3, r2]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d11a      	bne.n	800621a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	5c9b      	ldrb	r3, [r3, r2]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d109      	bne.n	8006202 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2180      	movs	r1, #128	; 0x80
 80061fa:	0249      	lsls	r1, r1, #9
 80061fc:	430a      	orrs	r2, r1
 80061fe:	60da      	str	r2, [r3, #12]
 8006200:	e00b      	b.n	800621a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006206:	2220      	movs	r2, #32
 8006208:	431a      	orrs	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006212:	2201      	movs	r2, #1
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621e:	2b01      	cmp	r3, #1
 8006220:	d11f      	bne.n	8006262 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691a      	ldr	r2, [r3, #16]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	492a      	ldr	r1, [pc, #168]	; (80062d8 <HAL_ADC_Init+0x2e4>)
 800622e:	400a      	ands	r2, r1
 8006230:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6919      	ldr	r1, [r3, #16]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8006240:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8006246:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691a      	ldr	r2, [r3, #16]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2101      	movs	r1, #1
 800625c:	430a      	orrs	r2, r1
 800625e:	611a      	str	r2, [r3, #16]
 8006260:	e00e      	b.n	8006280 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	2201      	movs	r2, #1
 800626a:	4013      	ands	r3, r2
 800626c:	2b01      	cmp	r3, #1
 800626e:	d107      	bne.n	8006280 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2101      	movs	r1, #1
 800627c:	438a      	bics	r2, r1
 800627e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695a      	ldr	r2, [r3, #20]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2107      	movs	r1, #7
 800628c:	438a      	bics	r2, r1
 800628e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6959      	ldr	r1, [r3, #20]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ac:	2203      	movs	r2, #3
 80062ae:	4393      	bics	r3, r2
 80062b0:	2201      	movs	r2, #1
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	0018      	movs	r0, r3
 80062bc:	46bd      	mov	sp, r7
 80062be:	b002      	add	sp, #8
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	46c0      	nop			; (mov r8, r8)
 80062c4:	fffffefd 	.word	0xfffffefd
 80062c8:	40012708 	.word	0x40012708
 80062cc:	ffc3ffff 	.word	0xffc3ffff
 80062d0:	fdffffff 	.word	0xfdffffff
 80062d4:	fffe0219 	.word	0xfffe0219
 80062d8:	fffffc03 	.word	0xfffffc03

080062dc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80062dc:	b590      	push	{r4, r7, lr}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062e4:	230f      	movs	r3, #15
 80062e6:	18fb      	adds	r3, r7, r3
 80062e8:	2200      	movs	r2, #0
 80062ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	2204      	movs	r2, #4
 80062f4:	4013      	ands	r3, r2
 80062f6:	d138      	bne.n	800636a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2250      	movs	r2, #80	; 0x50
 80062fc:	5c9b      	ldrb	r3, [r3, r2]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_ADC_Start+0x2a>
 8006302:	2302      	movs	r3, #2
 8006304:	e038      	b.n	8006378 <HAL_ADC_Start+0x9c>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2250      	movs	r2, #80	; 0x50
 800630a:	2101      	movs	r1, #1
 800630c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d007      	beq.n	8006326 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006316:	230f      	movs	r3, #15
 8006318:	18fc      	adds	r4, r7, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	0018      	movs	r0, r3
 800631e:	f000 f95f 	bl	80065e0 <ADC_Enable>
 8006322:	0003      	movs	r3, r0
 8006324:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006326:	230f      	movs	r3, #15
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d120      	bne.n	8006372 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006334:	4a12      	ldr	r2, [pc, #72]	; (8006380 <HAL_ADC_Start+0xa4>)
 8006336:	4013      	ands	r3, r2
 8006338:	2280      	movs	r2, #128	; 0x80
 800633a:	0052      	lsls	r2, r2, #1
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2250      	movs	r2, #80	; 0x50
 800634c:	2100      	movs	r1, #0
 800634e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	221c      	movs	r2, #28
 8006356:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2104      	movs	r1, #4
 8006364:	430a      	orrs	r2, r1
 8006366:	609a      	str	r2, [r3, #8]
 8006368:	e003      	b.n	8006372 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800636a:	230f      	movs	r3, #15
 800636c:	18fb      	adds	r3, r7, r3
 800636e:	2202      	movs	r2, #2
 8006370:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8006372:	230f      	movs	r3, #15
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	781b      	ldrb	r3, [r3, #0]
}
 8006378:	0018      	movs	r0, r3
 800637a:	46bd      	mov	sp, r7
 800637c:	b005      	add	sp, #20
 800637e:	bd90      	pop	{r4, r7, pc}
 8006380:	fffff0fe 	.word	0xfffff0fe

08006384 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8006392:	2300      	movs	r3, #0
 8006394:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	2b08      	cmp	r3, #8
 800639c:	d102      	bne.n	80063a4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800639e:	2308      	movs	r3, #8
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	e014      	b.n	80063ce <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	2201      	movs	r2, #1
 80063ac:	4013      	ands	r3, r2
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d10b      	bne.n	80063ca <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b6:	2220      	movs	r2, #32
 80063b8:	431a      	orrs	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2250      	movs	r2, #80	; 0x50
 80063c2:	2100      	movs	r1, #0
 80063c4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e072      	b.n	80064b0 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80063ca:	230c      	movs	r3, #12
 80063cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80063ce:	f7ff fdc7 	bl	8005f60 <HAL_GetTick>
 80063d2:	0003      	movs	r3, r0
 80063d4:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80063d6:	e01f      	b.n	8006418 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	3301      	adds	r3, #1
 80063dc:	d01c      	beq.n	8006418 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d007      	beq.n	80063f4 <HAL_ADC_PollForConversion+0x70>
 80063e4:	f7ff fdbc 	bl	8005f60 <HAL_GetTick>
 80063e8:	0002      	movs	r2, r0
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d211      	bcs.n	8006418 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	4013      	ands	r3, r2
 80063fe:	d10b      	bne.n	8006418 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006404:	2204      	movs	r2, #4
 8006406:	431a      	orrs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2250      	movs	r2, #80	; 0x50
 8006410:	2100      	movs	r1, #0
 8006412:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e04b      	b.n	80064b0 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	4013      	ands	r3, r2
 8006422:	d0d9      	beq.n	80063d8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006428:	2280      	movs	r2, #128	; 0x80
 800642a:	0092      	lsls	r2, r2, #2
 800642c:	431a      	orrs	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	23c0      	movs	r3, #192	; 0xc0
 800643a:	011b      	lsls	r3, r3, #4
 800643c:	4013      	ands	r3, r2
 800643e:	d12e      	bne.n	800649e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8006446:	2b00      	cmp	r3, #0
 8006448:	d129      	bne.n	800649e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2208      	movs	r2, #8
 8006452:	4013      	ands	r3, r2
 8006454:	2b08      	cmp	r3, #8
 8006456:	d122      	bne.n	800649e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	2204      	movs	r2, #4
 8006460:	4013      	ands	r3, r2
 8006462:	d110      	bne.n	8006486 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	210c      	movs	r1, #12
 8006470:	438a      	bics	r2, r1
 8006472:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006478:	4a0f      	ldr	r2, [pc, #60]	; (80064b8 <HAL_ADC_PollForConversion+0x134>)
 800647a:	4013      	ands	r3, r2
 800647c:	2201      	movs	r2, #1
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	655a      	str	r2, [r3, #84]	; 0x54
 8006484:	e00b      	b.n	800649e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648a:	2220      	movs	r2, #32
 800648c:	431a      	orrs	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006496:	2201      	movs	r2, #1
 8006498:	431a      	orrs	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d103      	bne.n	80064ae <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	220c      	movs	r2, #12
 80064ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	0018      	movs	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	b004      	add	sp, #16
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	fffffefe 	.word	0xfffffefe

080064bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80064ca:	0018      	movs	r0, r3
 80064cc:	46bd      	mov	sp, r7
 80064ce:	b002      	add	sp, #8
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2250      	movs	r2, #80	; 0x50
 80064e2:	5c9b      	ldrb	r3, [r3, r2]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d101      	bne.n	80064ec <HAL_ADC_ConfigChannel+0x18>
 80064e8:	2302      	movs	r3, #2
 80064ea:	e06c      	b.n	80065c6 <HAL_ADC_ConfigChannel+0xf2>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2250      	movs	r2, #80	; 0x50
 80064f0:	2101      	movs	r1, #1
 80064f2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	2204      	movs	r2, #4
 80064fc:	4013      	ands	r3, r2
 80064fe:	d00b      	beq.n	8006518 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006504:	2220      	movs	r2, #32
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2250      	movs	r2, #80	; 0x50
 8006510:	2100      	movs	r1, #0
 8006512:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e056      	b.n	80065c6 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	4a2c      	ldr	r2, [pc, #176]	; (80065d0 <HAL_ADC_ConfigChannel+0xfc>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d028      	beq.n	8006574 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	035b      	lsls	r3, r3, #13
 800652e:	0b5a      	lsrs	r2, r3, #13
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	2380      	movs	r3, #128	; 0x80
 800653e:	02db      	lsls	r3, r3, #11
 8006540:	4013      	ands	r3, r2
 8006542:	d009      	beq.n	8006558 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8006544:	4b23      	ldr	r3, [pc, #140]	; (80065d4 <HAL_ADC_ConfigChannel+0x100>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4b22      	ldr	r3, [pc, #136]	; (80065d4 <HAL_ADC_ConfigChannel+0x100>)
 800654a:	2180      	movs	r1, #128	; 0x80
 800654c:	0409      	lsls	r1, r1, #16
 800654e:	430a      	orrs	r2, r1
 8006550:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8006552:	200a      	movs	r0, #10
 8006554:	f000 f8ac 	bl	80066b0 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	2380      	movs	r3, #128	; 0x80
 800655e:	029b      	lsls	r3, r3, #10
 8006560:	4013      	ands	r3, r2
 8006562:	d02b      	beq.n	80065bc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8006564:	4b1b      	ldr	r3, [pc, #108]	; (80065d4 <HAL_ADC_ConfigChannel+0x100>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	4b1a      	ldr	r3, [pc, #104]	; (80065d4 <HAL_ADC_ConfigChannel+0x100>)
 800656a:	2180      	movs	r1, #128	; 0x80
 800656c:	03c9      	lsls	r1, r1, #15
 800656e:	430a      	orrs	r2, r1
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	e023      	b.n	80065bc <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	035b      	lsls	r3, r3, #13
 8006580:	0b5b      	lsrs	r3, r3, #13
 8006582:	43d9      	mvns	r1, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	400a      	ands	r2, r1
 800658a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	2380      	movs	r3, #128	; 0x80
 8006592:	02db      	lsls	r3, r3, #11
 8006594:	4013      	ands	r3, r2
 8006596:	d005      	beq.n	80065a4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8006598:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <HAL_ADC_ConfigChannel+0x100>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <HAL_ADC_ConfigChannel+0x100>)
 800659e:	490e      	ldr	r1, [pc, #56]	; (80065d8 <HAL_ADC_ConfigChannel+0x104>)
 80065a0:	400a      	ands	r2, r1
 80065a2:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	2380      	movs	r3, #128	; 0x80
 80065aa:	029b      	lsls	r3, r3, #10
 80065ac:	4013      	ands	r3, r2
 80065ae:	d005      	beq.n	80065bc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80065b0:	4b08      	ldr	r3, [pc, #32]	; (80065d4 <HAL_ADC_ConfigChannel+0x100>)
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <HAL_ADC_ConfigChannel+0x100>)
 80065b6:	4909      	ldr	r1, [pc, #36]	; (80065dc <HAL_ADC_ConfigChannel+0x108>)
 80065b8:	400a      	ands	r2, r1
 80065ba:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2250      	movs	r2, #80	; 0x50
 80065c0:	2100      	movs	r1, #0
 80065c2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	0018      	movs	r0, r3
 80065c8:	46bd      	mov	sp, r7
 80065ca:	b002      	add	sp, #8
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	46c0      	nop			; (mov r8, r8)
 80065d0:	00001001 	.word	0x00001001
 80065d4:	40012708 	.word	0x40012708
 80065d8:	ff7fffff 	.word	0xff7fffff
 80065dc:	ffbfffff 	.word	0xffbfffff

080065e0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2203      	movs	r2, #3
 80065f4:	4013      	ands	r3, r2
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d108      	bne.n	800660c <ADC_Enable+0x2c>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2201      	movs	r2, #1
 8006602:	4013      	ands	r3, r2
 8006604:	2b01      	cmp	r3, #1
 8006606:	d101      	bne.n	800660c <ADC_Enable+0x2c>
 8006608:	2301      	movs	r3, #1
 800660a:	e000      	b.n	800660e <ADC_Enable+0x2e>
 800660c:	2300      	movs	r3, #0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d146      	bne.n	80066a0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	4a24      	ldr	r2, [pc, #144]	; (80066ac <ADC_Enable+0xcc>)
 800661a:	4013      	ands	r3, r2
 800661c:	d00d      	beq.n	800663a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006622:	2210      	movs	r2, #16
 8006624:	431a      	orrs	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662e:	2201      	movs	r2, #1
 8006630:	431a      	orrs	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e033      	b.n	80066a2 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2101      	movs	r1, #1
 8006646:	430a      	orrs	r2, r1
 8006648:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800664a:	2001      	movs	r0, #1
 800664c:	f000 f830 	bl	80066b0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006650:	f7ff fc86 	bl	8005f60 <HAL_GetTick>
 8006654:	0003      	movs	r3, r0
 8006656:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006658:	e01b      	b.n	8006692 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800665a:	f7ff fc81 	bl	8005f60 <HAL_GetTick>
 800665e:	0002      	movs	r2, r0
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b0a      	cmp	r3, #10
 8006666:	d914      	bls.n	8006692 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2201      	movs	r2, #1
 8006670:	4013      	ands	r3, r2
 8006672:	2b01      	cmp	r3, #1
 8006674:	d00d      	beq.n	8006692 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667a:	2210      	movs	r2, #16
 800667c:	431a      	orrs	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006686:	2201      	movs	r2, #1
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e007      	b.n	80066a2 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2201      	movs	r2, #1
 800669a:	4013      	ands	r3, r2
 800669c:	2b01      	cmp	r3, #1
 800669e:	d1dc      	bne.n	800665a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	0018      	movs	r0, r3
 80066a4:	46bd      	mov	sp, r7
 80066a6:	b004      	add	sp, #16
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	46c0      	nop			; (mov r8, r8)
 80066ac:	80000017 	.word	0x80000017

080066b0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80066b8:	4b0b      	ldr	r3, [pc, #44]	; (80066e8 <ADC_DelayMicroSecond+0x38>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	490b      	ldr	r1, [pc, #44]	; (80066ec <ADC_DelayMicroSecond+0x3c>)
 80066be:	0018      	movs	r0, r3
 80066c0:	f7f9 fd48 	bl	8000154 <__udivsi3>
 80066c4:	0003      	movs	r3, r0
 80066c6:	001a      	movs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4353      	muls	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80066ce:	e002      	b.n	80066d6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3b01      	subs	r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1f9      	bne.n	80066d0 <ADC_DelayMicroSecond+0x20>
  }
}
 80066dc:	46c0      	nop			; (mov r8, r8)
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	46bd      	mov	sp, r7
 80066e2:	b004      	add	sp, #16
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	20000038 	.word	0x20000038
 80066ec:	000f4240 	.word	0x000f4240

080066f0 <__NVIC_EnableIRQ>:
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	0002      	movs	r2, r0
 80066f8:	1dfb      	adds	r3, r7, #7
 80066fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80066fc:	1dfb      	adds	r3, r7, #7
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b7f      	cmp	r3, #127	; 0x7f
 8006702:	d809      	bhi.n	8006718 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006704:	1dfb      	adds	r3, r7, #7
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	001a      	movs	r2, r3
 800670a:	231f      	movs	r3, #31
 800670c:	401a      	ands	r2, r3
 800670e:	4b04      	ldr	r3, [pc, #16]	; (8006720 <__NVIC_EnableIRQ+0x30>)
 8006710:	2101      	movs	r1, #1
 8006712:	4091      	lsls	r1, r2
 8006714:	000a      	movs	r2, r1
 8006716:	601a      	str	r2, [r3, #0]
}
 8006718:	46c0      	nop			; (mov r8, r8)
 800671a:	46bd      	mov	sp, r7
 800671c:	b002      	add	sp, #8
 800671e:	bd80      	pop	{r7, pc}
 8006720:	e000e100 	.word	0xe000e100

08006724 <__NVIC_SetPriority>:
{
 8006724:	b590      	push	{r4, r7, lr}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	0002      	movs	r2, r0
 800672c:	6039      	str	r1, [r7, #0]
 800672e:	1dfb      	adds	r3, r7, #7
 8006730:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006732:	1dfb      	adds	r3, r7, #7
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	2b7f      	cmp	r3, #127	; 0x7f
 8006738:	d828      	bhi.n	800678c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800673a:	4a2f      	ldr	r2, [pc, #188]	; (80067f8 <__NVIC_SetPriority+0xd4>)
 800673c:	1dfb      	adds	r3, r7, #7
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	b25b      	sxtb	r3, r3
 8006742:	089b      	lsrs	r3, r3, #2
 8006744:	33c0      	adds	r3, #192	; 0xc0
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	589b      	ldr	r3, [r3, r2]
 800674a:	1dfa      	adds	r2, r7, #7
 800674c:	7812      	ldrb	r2, [r2, #0]
 800674e:	0011      	movs	r1, r2
 8006750:	2203      	movs	r2, #3
 8006752:	400a      	ands	r2, r1
 8006754:	00d2      	lsls	r2, r2, #3
 8006756:	21ff      	movs	r1, #255	; 0xff
 8006758:	4091      	lsls	r1, r2
 800675a:	000a      	movs	r2, r1
 800675c:	43d2      	mvns	r2, r2
 800675e:	401a      	ands	r2, r3
 8006760:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	019b      	lsls	r3, r3, #6
 8006766:	22ff      	movs	r2, #255	; 0xff
 8006768:	401a      	ands	r2, r3
 800676a:	1dfb      	adds	r3, r7, #7
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	0018      	movs	r0, r3
 8006770:	2303      	movs	r3, #3
 8006772:	4003      	ands	r3, r0
 8006774:	00db      	lsls	r3, r3, #3
 8006776:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006778:	481f      	ldr	r0, [pc, #124]	; (80067f8 <__NVIC_SetPriority+0xd4>)
 800677a:	1dfb      	adds	r3, r7, #7
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	b25b      	sxtb	r3, r3
 8006780:	089b      	lsrs	r3, r3, #2
 8006782:	430a      	orrs	r2, r1
 8006784:	33c0      	adds	r3, #192	; 0xc0
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	501a      	str	r2, [r3, r0]
}
 800678a:	e031      	b.n	80067f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800678c:	4a1b      	ldr	r2, [pc, #108]	; (80067fc <__NVIC_SetPriority+0xd8>)
 800678e:	1dfb      	adds	r3, r7, #7
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	0019      	movs	r1, r3
 8006794:	230f      	movs	r3, #15
 8006796:	400b      	ands	r3, r1
 8006798:	3b08      	subs	r3, #8
 800679a:	089b      	lsrs	r3, r3, #2
 800679c:	3306      	adds	r3, #6
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	18d3      	adds	r3, r2, r3
 80067a2:	3304      	adds	r3, #4
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	1dfa      	adds	r2, r7, #7
 80067a8:	7812      	ldrb	r2, [r2, #0]
 80067aa:	0011      	movs	r1, r2
 80067ac:	2203      	movs	r2, #3
 80067ae:	400a      	ands	r2, r1
 80067b0:	00d2      	lsls	r2, r2, #3
 80067b2:	21ff      	movs	r1, #255	; 0xff
 80067b4:	4091      	lsls	r1, r2
 80067b6:	000a      	movs	r2, r1
 80067b8:	43d2      	mvns	r2, r2
 80067ba:	401a      	ands	r2, r3
 80067bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	019b      	lsls	r3, r3, #6
 80067c2:	22ff      	movs	r2, #255	; 0xff
 80067c4:	401a      	ands	r2, r3
 80067c6:	1dfb      	adds	r3, r7, #7
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	0018      	movs	r0, r3
 80067cc:	2303      	movs	r3, #3
 80067ce:	4003      	ands	r3, r0
 80067d0:	00db      	lsls	r3, r3, #3
 80067d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80067d4:	4809      	ldr	r0, [pc, #36]	; (80067fc <__NVIC_SetPriority+0xd8>)
 80067d6:	1dfb      	adds	r3, r7, #7
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	001c      	movs	r4, r3
 80067dc:	230f      	movs	r3, #15
 80067de:	4023      	ands	r3, r4
 80067e0:	3b08      	subs	r3, #8
 80067e2:	089b      	lsrs	r3, r3, #2
 80067e4:	430a      	orrs	r2, r1
 80067e6:	3306      	adds	r3, #6
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	18c3      	adds	r3, r0, r3
 80067ec:	3304      	adds	r3, #4
 80067ee:	601a      	str	r2, [r3, #0]
}
 80067f0:	46c0      	nop			; (mov r8, r8)
 80067f2:	46bd      	mov	sp, r7
 80067f4:	b003      	add	sp, #12
 80067f6:	bd90      	pop	{r4, r7, pc}
 80067f8:	e000e100 	.word	0xe000e100
 80067fc:	e000ed00 	.word	0xe000ed00

08006800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	1e5a      	subs	r2, r3, #1
 800680c:	2380      	movs	r3, #128	; 0x80
 800680e:	045b      	lsls	r3, r3, #17
 8006810:	429a      	cmp	r2, r3
 8006812:	d301      	bcc.n	8006818 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006814:	2301      	movs	r3, #1
 8006816:	e010      	b.n	800683a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006818:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <SysTick_Config+0x44>)
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	3a01      	subs	r2, #1
 800681e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006820:	2301      	movs	r3, #1
 8006822:	425b      	negs	r3, r3
 8006824:	2103      	movs	r1, #3
 8006826:	0018      	movs	r0, r3
 8006828:	f7ff ff7c 	bl	8006724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800682c:	4b05      	ldr	r3, [pc, #20]	; (8006844 <SysTick_Config+0x44>)
 800682e:	2200      	movs	r2, #0
 8006830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006832:	4b04      	ldr	r3, [pc, #16]	; (8006844 <SysTick_Config+0x44>)
 8006834:	2207      	movs	r2, #7
 8006836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006838:	2300      	movs	r3, #0
}
 800683a:	0018      	movs	r0, r3
 800683c:	46bd      	mov	sp, r7
 800683e:	b002      	add	sp, #8
 8006840:	bd80      	pop	{r7, pc}
 8006842:	46c0      	nop			; (mov r8, r8)
 8006844:	e000e010 	.word	0xe000e010

08006848 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60b9      	str	r1, [r7, #8]
 8006850:	607a      	str	r2, [r7, #4]
 8006852:	210f      	movs	r1, #15
 8006854:	187b      	adds	r3, r7, r1
 8006856:	1c02      	adds	r2, r0, #0
 8006858:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	187b      	adds	r3, r7, r1
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	b25b      	sxtb	r3, r3
 8006862:	0011      	movs	r1, r2
 8006864:	0018      	movs	r0, r3
 8006866:	f7ff ff5d 	bl	8006724 <__NVIC_SetPriority>
}
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	46bd      	mov	sp, r7
 800686e:	b004      	add	sp, #16
 8006870:	bd80      	pop	{r7, pc}

08006872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b082      	sub	sp, #8
 8006876:	af00      	add	r7, sp, #0
 8006878:	0002      	movs	r2, r0
 800687a:	1dfb      	adds	r3, r7, #7
 800687c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800687e:	1dfb      	adds	r3, r7, #7
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	b25b      	sxtb	r3, r3
 8006884:	0018      	movs	r0, r3
 8006886:	f7ff ff33 	bl	80066f0 <__NVIC_EnableIRQ>
}
 800688a:	46c0      	nop			; (mov r8, r8)
 800688c:	46bd      	mov	sp, r7
 800688e:	b002      	add	sp, #8
 8006890:	bd80      	pop	{r7, pc}

08006892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b082      	sub	sp, #8
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	0018      	movs	r0, r3
 800689e:	f7ff ffaf 	bl	8006800 <SysTick_Config>
 80068a2:	0003      	movs	r3, r0
}
 80068a4:	0018      	movs	r0, r3
 80068a6:	46bd      	mov	sp, r7
 80068a8:	b002      	add	sp, #8
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e061      	b.n	8006982 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a32      	ldr	r2, [pc, #200]	; (800698c <HAL_DMA_Init+0xe0>)
 80068c4:	4694      	mov	ip, r2
 80068c6:	4463      	add	r3, ip
 80068c8:	2114      	movs	r1, #20
 80068ca:	0018      	movs	r0, r3
 80068cc:	f7f9 fc42 	bl	8000154 <__udivsi3>
 80068d0:	0003      	movs	r3, r0
 80068d2:	009a      	lsls	r2, r3, #2
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a2d      	ldr	r2, [pc, #180]	; (8006990 <HAL_DMA_Init+0xe4>)
 80068dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2225      	movs	r2, #37	; 0x25
 80068e2:	2102      	movs	r1, #2
 80068e4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4a28      	ldr	r2, [pc, #160]	; (8006994 <HAL_DMA_Init+0xe8>)
 80068f2:	4013      	ands	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80068fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800690a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006916:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	4313      	orrs	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	2380      	movs	r3, #128	; 0x80
 8006932:	01db      	lsls	r3, r3, #7
 8006934:	429a      	cmp	r2, r3
 8006936:	d018      	beq.n	800696a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006938:	4b17      	ldr	r3, [pc, #92]	; (8006998 <HAL_DMA_Init+0xec>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006940:	211c      	movs	r1, #28
 8006942:	400b      	ands	r3, r1
 8006944:	210f      	movs	r1, #15
 8006946:	4099      	lsls	r1, r3
 8006948:	000b      	movs	r3, r1
 800694a:	43d9      	mvns	r1, r3
 800694c:	4b12      	ldr	r3, [pc, #72]	; (8006998 <HAL_DMA_Init+0xec>)
 800694e:	400a      	ands	r2, r1
 8006950:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006952:	4b11      	ldr	r3, [pc, #68]	; (8006998 <HAL_DMA_Init+0xec>)
 8006954:	6819      	ldr	r1, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695e:	201c      	movs	r0, #28
 8006960:	4003      	ands	r3, r0
 8006962:	409a      	lsls	r2, r3
 8006964:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <HAL_DMA_Init+0xec>)
 8006966:	430a      	orrs	r2, r1
 8006968:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2225      	movs	r2, #37	; 0x25
 8006974:	2101      	movs	r1, #1
 8006976:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2224      	movs	r2, #36	; 0x24
 800697c:	2100      	movs	r1, #0
 800697e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	0018      	movs	r0, r3
 8006984:	46bd      	mov	sp, r7
 8006986:	b004      	add	sp, #16
 8006988:	bd80      	pop	{r7, pc}
 800698a:	46c0      	nop			; (mov r8, r8)
 800698c:	bffdfff8 	.word	0xbffdfff8
 8006990:	40020000 	.word	0x40020000
 8006994:	ffff800f 	.word	0xffff800f
 8006998:	400200a8 	.word	0x400200a8

0800699c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069aa:	2317      	movs	r3, #23
 80069ac:	18fb      	adds	r3, r7, r3
 80069ae:	2200      	movs	r2, #0
 80069b0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2224      	movs	r2, #36	; 0x24
 80069b6:	5c9b      	ldrb	r3, [r3, r2]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d101      	bne.n	80069c0 <HAL_DMA_Start_IT+0x24>
 80069bc:	2302      	movs	r3, #2
 80069be:	e04f      	b.n	8006a60 <HAL_DMA_Start_IT+0xc4>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2224      	movs	r2, #36	; 0x24
 80069c4:	2101      	movs	r1, #1
 80069c6:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2225      	movs	r2, #37	; 0x25
 80069cc:	5c9b      	ldrb	r3, [r3, r2]
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d13a      	bne.n	8006a4a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2225      	movs	r2, #37	; 0x25
 80069d8:	2102      	movs	r1, #2
 80069da:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2101      	movs	r1, #1
 80069ee:	438a      	bics	r2, r1
 80069f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	68b9      	ldr	r1, [r7, #8]
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 f8e3 	bl	8006bc4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d008      	beq.n	8006a18 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	210e      	movs	r1, #14
 8006a12:	430a      	orrs	r2, r1
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	e00f      	b.n	8006a38 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2104      	movs	r1, #4
 8006a24:	438a      	bics	r2, r1
 8006a26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	210a      	movs	r1, #10
 8006a34:	430a      	orrs	r2, r1
 8006a36:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2101      	movs	r1, #1
 8006a44:	430a      	orrs	r2, r1
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	e007      	b.n	8006a5a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2224      	movs	r2, #36	; 0x24
 8006a4e:	2100      	movs	r1, #0
 8006a50:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006a52:	2317      	movs	r3, #23
 8006a54:	18fb      	adds	r3, r7, r3
 8006a56:	2202      	movs	r2, #2
 8006a58:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8006a5a:	2317      	movs	r3, #23
 8006a5c:	18fb      	adds	r3, r7, r3
 8006a5e:	781b      	ldrb	r3, [r3, #0]
}
 8006a60:	0018      	movs	r0, r3
 8006a62:	46bd      	mov	sp, r7
 8006a64:	b006      	add	sp, #24
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a84:	221c      	movs	r2, #28
 8006a86:	4013      	ands	r3, r2
 8006a88:	2204      	movs	r2, #4
 8006a8a:	409a      	lsls	r2, r3
 8006a8c:	0013      	movs	r3, r2
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	4013      	ands	r3, r2
 8006a92:	d026      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x7a>
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2204      	movs	r2, #4
 8006a98:	4013      	ands	r3, r2
 8006a9a:	d022      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	d107      	bne.n	8006ab8 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2104      	movs	r1, #4
 8006ab4:	438a      	bics	r2, r1
 8006ab6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006abc:	221c      	movs	r2, #28
 8006abe:	401a      	ands	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac4:	2104      	movs	r1, #4
 8006ac6:	4091      	lsls	r1, r2
 8006ac8:	000a      	movs	r2, r1
 8006aca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d100      	bne.n	8006ad6 <HAL_DMA_IRQHandler+0x6e>
 8006ad4:	e071      	b.n	8006bba <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	0010      	movs	r0, r2
 8006ade:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8006ae0:	e06b      	b.n	8006bba <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae6:	221c      	movs	r2, #28
 8006ae8:	4013      	ands	r3, r2
 8006aea:	2202      	movs	r2, #2
 8006aec:	409a      	lsls	r2, r3
 8006aee:	0013      	movs	r3, r2
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4013      	ands	r3, r2
 8006af4:	d02d      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xea>
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2202      	movs	r2, #2
 8006afa:	4013      	ands	r3, r2
 8006afc:	d029      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2220      	movs	r2, #32
 8006b06:	4013      	ands	r3, r2
 8006b08:	d10b      	bne.n	8006b22 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	210a      	movs	r1, #10
 8006b16:	438a      	bics	r2, r1
 8006b18:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2225      	movs	r2, #37	; 0x25
 8006b1e:	2101      	movs	r1, #1
 8006b20:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b26:	221c      	movs	r2, #28
 8006b28:	401a      	ands	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	2102      	movs	r1, #2
 8006b30:	4091      	lsls	r1, r2
 8006b32:	000a      	movs	r2, r1
 8006b34:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2224      	movs	r2, #36	; 0x24
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d039      	beq.n	8006bba <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	0010      	movs	r0, r2
 8006b4e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006b50:	e033      	b.n	8006bba <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b56:	221c      	movs	r2, #28
 8006b58:	4013      	ands	r3, r2
 8006b5a:	2208      	movs	r2, #8
 8006b5c:	409a      	lsls	r2, r3
 8006b5e:	0013      	movs	r3, r2
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4013      	ands	r3, r2
 8006b64:	d02a      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x154>
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2208      	movs	r2, #8
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	d026      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	210e      	movs	r1, #14
 8006b7a:	438a      	bics	r2, r1
 8006b7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b82:	221c      	movs	r2, #28
 8006b84:	401a      	ands	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	4091      	lsls	r1, r2
 8006b8e:	000a      	movs	r2, r1
 8006b90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2225      	movs	r2, #37	; 0x25
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2224      	movs	r2, #36	; 0x24
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	0010      	movs	r0, r2
 8006bb8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006bba:	46c0      	nop			; (mov r8, r8)
 8006bbc:	46c0      	nop			; (mov r8, r8)
}
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	b004      	add	sp, #16
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd6:	221c      	movs	r2, #28
 8006bd8:	401a      	ands	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	2101      	movs	r1, #1
 8006be0:	4091      	lsls	r1, r2
 8006be2:	000a      	movs	r2, r1
 8006be4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	2b10      	cmp	r3, #16
 8006bf4:	d108      	bne.n	8006c08 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006c06:	e007      	b.n	8006c18 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	60da      	str	r2, [r3, #12]
}
 8006c18:	46c0      	nop			; (mov r8, r8)
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	b004      	add	sp, #16
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8006c36:	e155      	b.n	8006ee4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	4091      	lsls	r1, r2
 8006c42:	000a      	movs	r2, r1
 8006c44:	4013      	ands	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d100      	bne.n	8006c50 <HAL_GPIO_Init+0x30>
 8006c4e:	e146      	b.n	8006ede <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	2203      	movs	r2, #3
 8006c56:	4013      	ands	r3, r2
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d005      	beq.n	8006c68 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	2203      	movs	r2, #3
 8006c62:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d130      	bne.n	8006cca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	2203      	movs	r2, #3
 8006c74:	409a      	lsls	r2, r3
 8006c76:	0013      	movs	r3, r2
 8006c78:	43da      	mvns	r2, r3
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	68da      	ldr	r2, [r3, #12]
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	005b      	lsls	r3, r3, #1
 8006c88:	409a      	lsls	r2, r3
 8006c8a:	0013      	movs	r3, r2
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	409a      	lsls	r2, r3
 8006ca4:	0013      	movs	r3, r2
 8006ca6:	43da      	mvns	r2, r3
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	4013      	ands	r3, r2
 8006cac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	091b      	lsrs	r3, r3, #4
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	401a      	ands	r2, r3
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	409a      	lsls	r2, r3
 8006cbc:	0013      	movs	r3, r2
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	2203      	movs	r2, #3
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d017      	beq.n	8006d06 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	2203      	movs	r2, #3
 8006ce2:	409a      	lsls	r2, r3
 8006ce4:	0013      	movs	r3, r2
 8006ce6:	43da      	mvns	r2, r3
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	4013      	ands	r3, r2
 8006cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	689a      	ldr	r2, [r3, #8]
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	409a      	lsls	r2, r3
 8006cf8:	0013      	movs	r3, r2
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	2203      	movs	r2, #3
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d123      	bne.n	8006d5a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	08da      	lsrs	r2, r3, #3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	3208      	adds	r2, #8
 8006d1a:	0092      	lsls	r2, r2, #2
 8006d1c:	58d3      	ldr	r3, [r2, r3]
 8006d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2207      	movs	r2, #7
 8006d24:	4013      	ands	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	220f      	movs	r2, #15
 8006d2a:	409a      	lsls	r2, r3
 8006d2c:	0013      	movs	r3, r2
 8006d2e:	43da      	mvns	r2, r3
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	4013      	ands	r3, r2
 8006d34:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	691a      	ldr	r2, [r3, #16]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2107      	movs	r1, #7
 8006d3e:	400b      	ands	r3, r1
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	409a      	lsls	r2, r3
 8006d44:	0013      	movs	r3, r2
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	08da      	lsrs	r2, r3, #3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3208      	adds	r2, #8
 8006d54:	0092      	lsls	r2, r2, #2
 8006d56:	6939      	ldr	r1, [r7, #16]
 8006d58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	2203      	movs	r2, #3
 8006d66:	409a      	lsls	r2, r3
 8006d68:	0013      	movs	r3, r2
 8006d6a:	43da      	mvns	r2, r3
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	2203      	movs	r2, #3
 8006d78:	401a      	ands	r2, r3
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	409a      	lsls	r2, r3
 8006d80:	0013      	movs	r3, r2
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	23c0      	movs	r3, #192	; 0xc0
 8006d94:	029b      	lsls	r3, r3, #10
 8006d96:	4013      	ands	r3, r2
 8006d98:	d100      	bne.n	8006d9c <HAL_GPIO_Init+0x17c>
 8006d9a:	e0a0      	b.n	8006ede <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d9c:	4b57      	ldr	r3, [pc, #348]	; (8006efc <HAL_GPIO_Init+0x2dc>)
 8006d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006da0:	4b56      	ldr	r3, [pc, #344]	; (8006efc <HAL_GPIO_Init+0x2dc>)
 8006da2:	2101      	movs	r1, #1
 8006da4:	430a      	orrs	r2, r1
 8006da6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8006da8:	4a55      	ldr	r2, [pc, #340]	; (8006f00 <HAL_GPIO_Init+0x2e0>)
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	089b      	lsrs	r3, r3, #2
 8006dae:	3302      	adds	r3, #2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	589b      	ldr	r3, [r3, r2]
 8006db4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2203      	movs	r2, #3
 8006dba:	4013      	ands	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	220f      	movs	r2, #15
 8006dc0:	409a      	lsls	r2, r3
 8006dc2:	0013      	movs	r3, r2
 8006dc4:	43da      	mvns	r2, r3
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	4013      	ands	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	23a0      	movs	r3, #160	; 0xa0
 8006dd0:	05db      	lsls	r3, r3, #23
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d01f      	beq.n	8006e16 <HAL_GPIO_Init+0x1f6>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a4a      	ldr	r2, [pc, #296]	; (8006f04 <HAL_GPIO_Init+0x2e4>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d019      	beq.n	8006e12 <HAL_GPIO_Init+0x1f2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a49      	ldr	r2, [pc, #292]	; (8006f08 <HAL_GPIO_Init+0x2e8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d013      	beq.n	8006e0e <HAL_GPIO_Init+0x1ee>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a48      	ldr	r2, [pc, #288]	; (8006f0c <HAL_GPIO_Init+0x2ec>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00d      	beq.n	8006e0a <HAL_GPIO_Init+0x1ea>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a47      	ldr	r2, [pc, #284]	; (8006f10 <HAL_GPIO_Init+0x2f0>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d007      	beq.n	8006e06 <HAL_GPIO_Init+0x1e6>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a46      	ldr	r2, [pc, #280]	; (8006f14 <HAL_GPIO_Init+0x2f4>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d101      	bne.n	8006e02 <HAL_GPIO_Init+0x1e2>
 8006dfe:	2305      	movs	r3, #5
 8006e00:	e00a      	b.n	8006e18 <HAL_GPIO_Init+0x1f8>
 8006e02:	2306      	movs	r3, #6
 8006e04:	e008      	b.n	8006e18 <HAL_GPIO_Init+0x1f8>
 8006e06:	2304      	movs	r3, #4
 8006e08:	e006      	b.n	8006e18 <HAL_GPIO_Init+0x1f8>
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e004      	b.n	8006e18 <HAL_GPIO_Init+0x1f8>
 8006e0e:	2302      	movs	r3, #2
 8006e10:	e002      	b.n	8006e18 <HAL_GPIO_Init+0x1f8>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <HAL_GPIO_Init+0x1f8>
 8006e16:	2300      	movs	r3, #0
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	2103      	movs	r1, #3
 8006e1c:	400a      	ands	r2, r1
 8006e1e:	0092      	lsls	r2, r2, #2
 8006e20:	4093      	lsls	r3, r2
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e28:	4935      	ldr	r1, [pc, #212]	; (8006f00 <HAL_GPIO_Init+0x2e0>)
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	089b      	lsrs	r3, r3, #2
 8006e2e:	3302      	adds	r3, #2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e36:	4b38      	ldr	r3, [pc, #224]	; (8006f18 <HAL_GPIO_Init+0x2f8>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	43da      	mvns	r2, r3
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	4013      	ands	r3, r2
 8006e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	2380      	movs	r3, #128	; 0x80
 8006e4c:	035b      	lsls	r3, r3, #13
 8006e4e:	4013      	ands	r3, r2
 8006e50:	d003      	beq.n	8006e5a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006e5a:	4b2f      	ldr	r3, [pc, #188]	; (8006f18 <HAL_GPIO_Init+0x2f8>)
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8006e60:	4b2d      	ldr	r3, [pc, #180]	; (8006f18 <HAL_GPIO_Init+0x2f8>)
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	43da      	mvns	r2, r3
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	2380      	movs	r3, #128	; 0x80
 8006e76:	039b      	lsls	r3, r3, #14
 8006e78:	4013      	ands	r3, r2
 8006e7a:	d003      	beq.n	8006e84 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006e84:	4b24      	ldr	r3, [pc, #144]	; (8006f18 <HAL_GPIO_Init+0x2f8>)
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8006e8a:	4b23      	ldr	r3, [pc, #140]	; (8006f18 <HAL_GPIO_Init+0x2f8>)
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	43da      	mvns	r2, r3
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	4013      	ands	r3, r2
 8006e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	2380      	movs	r3, #128	; 0x80
 8006ea0:	029b      	lsls	r3, r3, #10
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	d003      	beq.n	8006eae <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006eae:	4b1a      	ldr	r3, [pc, #104]	; (8006f18 <HAL_GPIO_Init+0x2f8>)
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006eb4:	4b18      	ldr	r3, [pc, #96]	; (8006f18 <HAL_GPIO_Init+0x2f8>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	43da      	mvns	r2, r3
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	2380      	movs	r3, #128	; 0x80
 8006eca:	025b      	lsls	r3, r3, #9
 8006ecc:	4013      	ands	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006ed8:	4b0f      	ldr	r3, [pc, #60]	; (8006f18 <HAL_GPIO_Init+0x2f8>)
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	40da      	lsrs	r2, r3
 8006eec:	1e13      	subs	r3, r2, #0
 8006eee:	d000      	beq.n	8006ef2 <HAL_GPIO_Init+0x2d2>
 8006ef0:	e6a2      	b.n	8006c38 <HAL_GPIO_Init+0x18>
  }
}
 8006ef2:	46c0      	nop			; (mov r8, r8)
 8006ef4:	46c0      	nop			; (mov r8, r8)
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	b006      	add	sp, #24
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	40021000 	.word	0x40021000
 8006f00:	40010000 	.word	0x40010000
 8006f04:	50000400 	.word	0x50000400
 8006f08:	50000800 	.word	0x50000800
 8006f0c:	50000c00 	.word	0x50000c00
 8006f10:	50001000 	.word	0x50001000
 8006f14:	50001c00 	.word	0x50001c00
 8006f18:	40010400 	.word	0x40010400

08006f1c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	000a      	movs	r2, r1
 8006f26:	1cbb      	adds	r3, r7, #2
 8006f28:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	1cba      	adds	r2, r7, #2
 8006f30:	8812      	ldrh	r2, [r2, #0]
 8006f32:	4013      	ands	r3, r2
 8006f34:	d004      	beq.n	8006f40 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006f36:	230f      	movs	r3, #15
 8006f38:	18fb      	adds	r3, r7, r3
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	701a      	strb	r2, [r3, #0]
 8006f3e:	e003      	b.n	8006f48 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f40:	230f      	movs	r3, #15
 8006f42:	18fb      	adds	r3, r7, r3
 8006f44:	2200      	movs	r2, #0
 8006f46:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006f48:	230f      	movs	r3, #15
 8006f4a:	18fb      	adds	r3, r7, r3
 8006f4c:	781b      	ldrb	r3, [r3, #0]
}
 8006f4e:	0018      	movs	r0, r3
 8006f50:	46bd      	mov	sp, r7
 8006f52:	b004      	add	sp, #16
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	0008      	movs	r0, r1
 8006f60:	0011      	movs	r1, r2
 8006f62:	1cbb      	adds	r3, r7, #2
 8006f64:	1c02      	adds	r2, r0, #0
 8006f66:	801a      	strh	r2, [r3, #0]
 8006f68:	1c7b      	adds	r3, r7, #1
 8006f6a:	1c0a      	adds	r2, r1, #0
 8006f6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f6e:	1c7b      	adds	r3, r7, #1
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d004      	beq.n	8006f80 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f76:	1cbb      	adds	r3, r7, #2
 8006f78:	881a      	ldrh	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8006f7e:	e003      	b.n	8006f88 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8006f80:	1cbb      	adds	r3, r7, #2
 8006f82:	881a      	ldrh	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006f88:	46c0      	nop			; (mov r8, r8)
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	b002      	add	sp, #8
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	0002      	movs	r2, r0
 8006f98:	1dbb      	adds	r3, r7, #6
 8006f9a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006f9c:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	1dba      	adds	r2, r7, #6
 8006fa2:	8812      	ldrh	r2, [r2, #0]
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	d008      	beq.n	8006fba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006fa8:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006faa:	1dba      	adds	r2, r7, #6
 8006fac:	8812      	ldrh	r2, [r2, #0]
 8006fae:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006fb0:	1dbb      	adds	r3, r7, #6
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	0018      	movs	r0, r3
 8006fb6:	f7fc fc79 	bl	80038ac <HAL_GPIO_EXTI_Callback>
  }
}
 8006fba:	46c0      	nop			; (mov r8, r8)
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	b002      	add	sp, #8
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	46c0      	nop			; (mov r8, r8)
 8006fc4:	40010400 	.word	0x40010400

08006fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e082      	b.n	80070e0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2241      	movs	r2, #65	; 0x41
 8006fde:	5c9b      	ldrb	r3, [r3, r2]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d107      	bne.n	8006ff6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2240      	movs	r2, #64	; 0x40
 8006fea:	2100      	movs	r1, #0
 8006fec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	f7fe f81b 	bl	800502c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2241      	movs	r2, #65	; 0x41
 8006ffa:	2124      	movs	r1, #36	; 0x24
 8006ffc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2101      	movs	r1, #1
 800700a:	438a      	bics	r2, r1
 800700c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4934      	ldr	r1, [pc, #208]	; (80070e8 <HAL_I2C_Init+0x120>)
 8007018:	400a      	ands	r2, r1
 800701a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	689a      	ldr	r2, [r3, #8]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4931      	ldr	r1, [pc, #196]	; (80070ec <HAL_I2C_Init+0x124>)
 8007028:	400a      	ands	r2, r1
 800702a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d108      	bne.n	8007046 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2180      	movs	r1, #128	; 0x80
 800703e:	0209      	lsls	r1, r1, #8
 8007040:	430a      	orrs	r2, r1
 8007042:	609a      	str	r2, [r3, #8]
 8007044:	e007      	b.n	8007056 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689a      	ldr	r2, [r3, #8]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2184      	movs	r1, #132	; 0x84
 8007050:	0209      	lsls	r1, r1, #8
 8007052:	430a      	orrs	r2, r1
 8007054:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	2b02      	cmp	r3, #2
 800705c:	d104      	bne.n	8007068 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2280      	movs	r2, #128	; 0x80
 8007064:	0112      	lsls	r2, r2, #4
 8007066:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685a      	ldr	r2, [r3, #4]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	491f      	ldr	r1, [pc, #124]	; (80070f0 <HAL_I2C_Init+0x128>)
 8007074:	430a      	orrs	r2, r1
 8007076:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68da      	ldr	r2, [r3, #12]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	491a      	ldr	r1, [pc, #104]	; (80070ec <HAL_I2C_Init+0x124>)
 8007084:	400a      	ands	r2, r1
 8007086:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	431a      	orrs	r2, r3
 8007092:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	69d9      	ldr	r1, [r3, #28]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1a      	ldr	r2, [r3, #32]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2101      	movs	r1, #1
 80070be:	430a      	orrs	r2, r1
 80070c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2241      	movs	r2, #65	; 0x41
 80070cc:	2120      	movs	r1, #32
 80070ce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2242      	movs	r2, #66	; 0x42
 80070da:	2100      	movs	r1, #0
 80070dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	0018      	movs	r0, r3
 80070e2:	46bd      	mov	sp, r7
 80070e4:	b002      	add	sp, #8
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	f0ffffff 	.word	0xf0ffffff
 80070ec:	ffff7fff 	.word	0xffff7fff
 80070f0:	02008000 	.word	0x02008000

080070f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070f4:	b590      	push	{r4, r7, lr}
 80070f6:	b089      	sub	sp, #36	; 0x24
 80070f8:	af02      	add	r7, sp, #8
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	000c      	movs	r4, r1
 80070fe:	0010      	movs	r0, r2
 8007100:	0019      	movs	r1, r3
 8007102:	230a      	movs	r3, #10
 8007104:	18fb      	adds	r3, r7, r3
 8007106:	1c22      	adds	r2, r4, #0
 8007108:	801a      	strh	r2, [r3, #0]
 800710a:	2308      	movs	r3, #8
 800710c:	18fb      	adds	r3, r7, r3
 800710e:	1c02      	adds	r2, r0, #0
 8007110:	801a      	strh	r2, [r3, #0]
 8007112:	1dbb      	adds	r3, r7, #6
 8007114:	1c0a      	adds	r2, r1, #0
 8007116:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2241      	movs	r2, #65	; 0x41
 800711c:	5c9b      	ldrb	r3, [r3, r2]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b20      	cmp	r3, #32
 8007122:	d000      	beq.n	8007126 <HAL_I2C_Mem_Write+0x32>
 8007124:	e10c      	b.n	8007340 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <HAL_I2C_Mem_Write+0x42>
 800712c:	232c      	movs	r3, #44	; 0x2c
 800712e:	18fb      	adds	r3, r7, r3
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d105      	bne.n	8007142 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2280      	movs	r2, #128	; 0x80
 800713a:	0092      	lsls	r2, r2, #2
 800713c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e0ff      	b.n	8007342 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2240      	movs	r2, #64	; 0x40
 8007146:	5c9b      	ldrb	r3, [r3, r2]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_I2C_Mem_Write+0x5c>
 800714c:	2302      	movs	r3, #2
 800714e:	e0f8      	b.n	8007342 <HAL_I2C_Mem_Write+0x24e>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2240      	movs	r2, #64	; 0x40
 8007154:	2101      	movs	r1, #1
 8007156:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007158:	f7fe ff02 	bl	8005f60 <HAL_GetTick>
 800715c:	0003      	movs	r3, r0
 800715e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007160:	2380      	movs	r3, #128	; 0x80
 8007162:	0219      	lsls	r1, r3, #8
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	2319      	movs	r3, #25
 800716c:	2201      	movs	r2, #1
 800716e:	f000 fb0b 	bl	8007788 <I2C_WaitOnFlagUntilTimeout>
 8007172:	1e03      	subs	r3, r0, #0
 8007174:	d001      	beq.n	800717a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e0e3      	b.n	8007342 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2241      	movs	r2, #65	; 0x41
 800717e:	2121      	movs	r1, #33	; 0x21
 8007180:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2242      	movs	r2, #66	; 0x42
 8007186:	2140      	movs	r1, #64	; 0x40
 8007188:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007194:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	222c      	movs	r2, #44	; 0x2c
 800719a:	18ba      	adds	r2, r7, r2
 800719c:	8812      	ldrh	r2, [r2, #0]
 800719e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071a6:	1dbb      	adds	r3, r7, #6
 80071a8:	881c      	ldrh	r4, [r3, #0]
 80071aa:	2308      	movs	r3, #8
 80071ac:	18fb      	adds	r3, r7, r3
 80071ae:	881a      	ldrh	r2, [r3, #0]
 80071b0:	230a      	movs	r3, #10
 80071b2:	18fb      	adds	r3, r7, r3
 80071b4:	8819      	ldrh	r1, [r3, #0]
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	9301      	str	r3, [sp, #4]
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	0023      	movs	r3, r4
 80071c2:	f000 f9f9 	bl	80075b8 <I2C_RequestMemoryWrite>
 80071c6:	1e03      	subs	r3, r0, #0
 80071c8:	d005      	beq.n	80071d6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2240      	movs	r2, #64	; 0x40
 80071ce:	2100      	movs	r1, #0
 80071d0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e0b5      	b.n	8007342 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071da:	b29b      	uxth	r3, r3
 80071dc:	2bff      	cmp	r3, #255	; 0xff
 80071de:	d911      	bls.n	8007204 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	22ff      	movs	r2, #255	; 0xff
 80071e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	2380      	movs	r3, #128	; 0x80
 80071ee:	045c      	lsls	r4, r3, #17
 80071f0:	230a      	movs	r3, #10
 80071f2:	18fb      	adds	r3, r7, r3
 80071f4:	8819      	ldrh	r1, [r3, #0]
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	2300      	movs	r3, #0
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	0023      	movs	r3, r4
 80071fe:	f000 fc9b 	bl	8007b38 <I2C_TransferConfig>
 8007202:	e012      	b.n	800722a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007208:	b29a      	uxth	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007212:	b2da      	uxtb	r2, r3
 8007214:	2380      	movs	r3, #128	; 0x80
 8007216:	049c      	lsls	r4, r3, #18
 8007218:	230a      	movs	r3, #10
 800721a:	18fb      	adds	r3, r7, r3
 800721c:	8819      	ldrh	r1, [r3, #0]
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	2300      	movs	r3, #0
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	0023      	movs	r3, r4
 8007226:	f000 fc87 	bl	8007b38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	0018      	movs	r0, r3
 8007232:	f000 faf7 	bl	8007824 <I2C_WaitOnTXISFlagUntilTimeout>
 8007236:	1e03      	subs	r3, r0, #0
 8007238:	d001      	beq.n	800723e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e081      	b.n	8007342 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	781a      	ldrb	r2, [r3, #0]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007258:	b29b      	uxth	r3, r3
 800725a:	3b01      	subs	r3, #1
 800725c:	b29a      	uxth	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007266:	3b01      	subs	r3, #1
 8007268:	b29a      	uxth	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007272:	b29b      	uxth	r3, r3
 8007274:	2b00      	cmp	r3, #0
 8007276:	d03a      	beq.n	80072ee <HAL_I2C_Mem_Write+0x1fa>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800727c:	2b00      	cmp	r3, #0
 800727e:	d136      	bne.n	80072ee <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	0013      	movs	r3, r2
 800728a:	2200      	movs	r2, #0
 800728c:	2180      	movs	r1, #128	; 0x80
 800728e:	f000 fa7b 	bl	8007788 <I2C_WaitOnFlagUntilTimeout>
 8007292:	1e03      	subs	r3, r0, #0
 8007294:	d001      	beq.n	800729a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e053      	b.n	8007342 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800729e:	b29b      	uxth	r3, r3
 80072a0:	2bff      	cmp	r3, #255	; 0xff
 80072a2:	d911      	bls.n	80072c8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	22ff      	movs	r2, #255	; 0xff
 80072a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	2380      	movs	r3, #128	; 0x80
 80072b2:	045c      	lsls	r4, r3, #17
 80072b4:	230a      	movs	r3, #10
 80072b6:	18fb      	adds	r3, r7, r3
 80072b8:	8819      	ldrh	r1, [r3, #0]
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	2300      	movs	r3, #0
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	0023      	movs	r3, r4
 80072c2:	f000 fc39 	bl	8007b38 <I2C_TransferConfig>
 80072c6:	e012      	b.n	80072ee <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	2380      	movs	r3, #128	; 0x80
 80072da:	049c      	lsls	r4, r3, #18
 80072dc:	230a      	movs	r3, #10
 80072de:	18fb      	adds	r3, r7, r3
 80072e0:	8819      	ldrh	r1, [r3, #0]
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	2300      	movs	r3, #0
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	0023      	movs	r3, r4
 80072ea:	f000 fc25 	bl	8007b38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d198      	bne.n	800722a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	0018      	movs	r0, r3
 8007300:	f000 fad6 	bl	80078b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007304:	1e03      	subs	r3, r0, #0
 8007306:	d001      	beq.n	800730c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e01a      	b.n	8007342 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2220      	movs	r2, #32
 8007312:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	490b      	ldr	r1, [pc, #44]	; (800734c <HAL_I2C_Mem_Write+0x258>)
 8007320:	400a      	ands	r2, r1
 8007322:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2241      	movs	r2, #65	; 0x41
 8007328:	2120      	movs	r1, #32
 800732a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2242      	movs	r2, #66	; 0x42
 8007330:	2100      	movs	r1, #0
 8007332:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2240      	movs	r2, #64	; 0x40
 8007338:	2100      	movs	r1, #0
 800733a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	e000      	b.n	8007342 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8007340:	2302      	movs	r3, #2
  }
}
 8007342:	0018      	movs	r0, r3
 8007344:	46bd      	mov	sp, r7
 8007346:	b007      	add	sp, #28
 8007348:	bd90      	pop	{r4, r7, pc}
 800734a:	46c0      	nop			; (mov r8, r8)
 800734c:	fe00e800 	.word	0xfe00e800

08007350 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007350:	b590      	push	{r4, r7, lr}
 8007352:	b089      	sub	sp, #36	; 0x24
 8007354:	af02      	add	r7, sp, #8
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	000c      	movs	r4, r1
 800735a:	0010      	movs	r0, r2
 800735c:	0019      	movs	r1, r3
 800735e:	230a      	movs	r3, #10
 8007360:	18fb      	adds	r3, r7, r3
 8007362:	1c22      	adds	r2, r4, #0
 8007364:	801a      	strh	r2, [r3, #0]
 8007366:	2308      	movs	r3, #8
 8007368:	18fb      	adds	r3, r7, r3
 800736a:	1c02      	adds	r2, r0, #0
 800736c:	801a      	strh	r2, [r3, #0]
 800736e:	1dbb      	adds	r3, r7, #6
 8007370:	1c0a      	adds	r2, r1, #0
 8007372:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2241      	movs	r2, #65	; 0x41
 8007378:	5c9b      	ldrb	r3, [r3, r2]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b20      	cmp	r3, #32
 800737e:	d000      	beq.n	8007382 <HAL_I2C_Mem_Read+0x32>
 8007380:	e110      	b.n	80075a4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	2b00      	cmp	r3, #0
 8007386:	d004      	beq.n	8007392 <HAL_I2C_Mem_Read+0x42>
 8007388:	232c      	movs	r3, #44	; 0x2c
 800738a:	18fb      	adds	r3, r7, r3
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d105      	bne.n	800739e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2280      	movs	r2, #128	; 0x80
 8007396:	0092      	lsls	r2, r2, #2
 8007398:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e103      	b.n	80075a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2240      	movs	r2, #64	; 0x40
 80073a2:	5c9b      	ldrb	r3, [r3, r2]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d101      	bne.n	80073ac <HAL_I2C_Mem_Read+0x5c>
 80073a8:	2302      	movs	r3, #2
 80073aa:	e0fc      	b.n	80075a6 <HAL_I2C_Mem_Read+0x256>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2240      	movs	r2, #64	; 0x40
 80073b0:	2101      	movs	r1, #1
 80073b2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80073b4:	f7fe fdd4 	bl	8005f60 <HAL_GetTick>
 80073b8:	0003      	movs	r3, r0
 80073ba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80073bc:	2380      	movs	r3, #128	; 0x80
 80073be:	0219      	lsls	r1, r3, #8
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	2319      	movs	r3, #25
 80073c8:	2201      	movs	r2, #1
 80073ca:	f000 f9dd 	bl	8007788 <I2C_WaitOnFlagUntilTimeout>
 80073ce:	1e03      	subs	r3, r0, #0
 80073d0:	d001      	beq.n	80073d6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e0e7      	b.n	80075a6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2241      	movs	r2, #65	; 0x41
 80073da:	2122      	movs	r1, #34	; 0x22
 80073dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2242      	movs	r2, #66	; 0x42
 80073e2:	2140      	movs	r1, #64	; 0x40
 80073e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	222c      	movs	r2, #44	; 0x2c
 80073f6:	18ba      	adds	r2, r7, r2
 80073f8:	8812      	ldrh	r2, [r2, #0]
 80073fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007402:	1dbb      	adds	r3, r7, #6
 8007404:	881c      	ldrh	r4, [r3, #0]
 8007406:	2308      	movs	r3, #8
 8007408:	18fb      	adds	r3, r7, r3
 800740a:	881a      	ldrh	r2, [r3, #0]
 800740c:	230a      	movs	r3, #10
 800740e:	18fb      	adds	r3, r7, r3
 8007410:	8819      	ldrh	r1, [r3, #0]
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	9301      	str	r3, [sp, #4]
 8007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	0023      	movs	r3, r4
 800741e:	f000 f92f 	bl	8007680 <I2C_RequestMemoryRead>
 8007422:	1e03      	subs	r3, r0, #0
 8007424:	d005      	beq.n	8007432 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2240      	movs	r2, #64	; 0x40
 800742a:	2100      	movs	r1, #0
 800742c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e0b9      	b.n	80075a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007436:	b29b      	uxth	r3, r3
 8007438:	2bff      	cmp	r3, #255	; 0xff
 800743a:	d911      	bls.n	8007460 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	22ff      	movs	r2, #255	; 0xff
 8007440:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007446:	b2da      	uxtb	r2, r3
 8007448:	2380      	movs	r3, #128	; 0x80
 800744a:	045c      	lsls	r4, r3, #17
 800744c:	230a      	movs	r3, #10
 800744e:	18fb      	adds	r3, r7, r3
 8007450:	8819      	ldrh	r1, [r3, #0]
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	4b56      	ldr	r3, [pc, #344]	; (80075b0 <HAL_I2C_Mem_Read+0x260>)
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	0023      	movs	r3, r4
 800745a:	f000 fb6d 	bl	8007b38 <I2C_TransferConfig>
 800745e:	e012      	b.n	8007486 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007464:	b29a      	uxth	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800746e:	b2da      	uxtb	r2, r3
 8007470:	2380      	movs	r3, #128	; 0x80
 8007472:	049c      	lsls	r4, r3, #18
 8007474:	230a      	movs	r3, #10
 8007476:	18fb      	adds	r3, r7, r3
 8007478:	8819      	ldrh	r1, [r3, #0]
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	4b4c      	ldr	r3, [pc, #304]	; (80075b0 <HAL_I2C_Mem_Read+0x260>)
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	0023      	movs	r3, r4
 8007482:	f000 fb59 	bl	8007b38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	0013      	movs	r3, r2
 8007490:	2200      	movs	r2, #0
 8007492:	2104      	movs	r1, #4
 8007494:	f000 f978 	bl	8007788 <I2C_WaitOnFlagUntilTimeout>
 8007498:	1e03      	subs	r3, r0, #0
 800749a:	d001      	beq.n	80074a0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e082      	b.n	80075a6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074bc:	3b01      	subs	r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d03a      	beq.n	8007552 <HAL_I2C_Mem_Read+0x202>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d136      	bne.n	8007552 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80074e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	0013      	movs	r3, r2
 80074ee:	2200      	movs	r2, #0
 80074f0:	2180      	movs	r1, #128	; 0x80
 80074f2:	f000 f949 	bl	8007788 <I2C_WaitOnFlagUntilTimeout>
 80074f6:	1e03      	subs	r3, r0, #0
 80074f8:	d001      	beq.n	80074fe <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e053      	b.n	80075a6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007502:	b29b      	uxth	r3, r3
 8007504:	2bff      	cmp	r3, #255	; 0xff
 8007506:	d911      	bls.n	800752c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	22ff      	movs	r2, #255	; 0xff
 800750c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007512:	b2da      	uxtb	r2, r3
 8007514:	2380      	movs	r3, #128	; 0x80
 8007516:	045c      	lsls	r4, r3, #17
 8007518:	230a      	movs	r3, #10
 800751a:	18fb      	adds	r3, r7, r3
 800751c:	8819      	ldrh	r1, [r3, #0]
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	2300      	movs	r3, #0
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	0023      	movs	r3, r4
 8007526:	f000 fb07 	bl	8007b38 <I2C_TransferConfig>
 800752a:	e012      	b.n	8007552 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007530:	b29a      	uxth	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800753a:	b2da      	uxtb	r2, r3
 800753c:	2380      	movs	r3, #128	; 0x80
 800753e:	049c      	lsls	r4, r3, #18
 8007540:	230a      	movs	r3, #10
 8007542:	18fb      	adds	r3, r7, r3
 8007544:	8819      	ldrh	r1, [r3, #0]
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	2300      	movs	r3, #0
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	0023      	movs	r3, r4
 800754e:	f000 faf3 	bl	8007b38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007556:	b29b      	uxth	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	d194      	bne.n	8007486 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	0018      	movs	r0, r3
 8007564:	f000 f9a4 	bl	80078b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007568:	1e03      	subs	r3, r0, #0
 800756a:	d001      	beq.n	8007570 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e01a      	b.n	80075a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2220      	movs	r2, #32
 8007576:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	490c      	ldr	r1, [pc, #48]	; (80075b4 <HAL_I2C_Mem_Read+0x264>)
 8007584:	400a      	ands	r2, r1
 8007586:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2241      	movs	r2, #65	; 0x41
 800758c:	2120      	movs	r1, #32
 800758e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2242      	movs	r2, #66	; 0x42
 8007594:	2100      	movs	r1, #0
 8007596:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2240      	movs	r2, #64	; 0x40
 800759c:	2100      	movs	r1, #0
 800759e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	e000      	b.n	80075a6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80075a4:	2302      	movs	r3, #2
  }
}
 80075a6:	0018      	movs	r0, r3
 80075a8:	46bd      	mov	sp, r7
 80075aa:	b007      	add	sp, #28
 80075ac:	bd90      	pop	{r4, r7, pc}
 80075ae:	46c0      	nop			; (mov r8, r8)
 80075b0:	80002400 	.word	0x80002400
 80075b4:	fe00e800 	.word	0xfe00e800

080075b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80075b8:	b5b0      	push	{r4, r5, r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af02      	add	r7, sp, #8
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	000c      	movs	r4, r1
 80075c2:	0010      	movs	r0, r2
 80075c4:	0019      	movs	r1, r3
 80075c6:	250a      	movs	r5, #10
 80075c8:	197b      	adds	r3, r7, r5
 80075ca:	1c22      	adds	r2, r4, #0
 80075cc:	801a      	strh	r2, [r3, #0]
 80075ce:	2308      	movs	r3, #8
 80075d0:	18fb      	adds	r3, r7, r3
 80075d2:	1c02      	adds	r2, r0, #0
 80075d4:	801a      	strh	r2, [r3, #0]
 80075d6:	1dbb      	adds	r3, r7, #6
 80075d8:	1c0a      	adds	r2, r1, #0
 80075da:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80075dc:	1dbb      	adds	r3, r7, #6
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	2380      	movs	r3, #128	; 0x80
 80075e4:	045c      	lsls	r4, r3, #17
 80075e6:	197b      	adds	r3, r7, r5
 80075e8:	8819      	ldrh	r1, [r3, #0]
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	4b23      	ldr	r3, [pc, #140]	; (800767c <I2C_RequestMemoryWrite+0xc4>)
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	0023      	movs	r3, r4
 80075f2:	f000 faa1 	bl	8007b38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f8:	6a39      	ldr	r1, [r7, #32]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	0018      	movs	r0, r3
 80075fe:	f000 f911 	bl	8007824 <I2C_WaitOnTXISFlagUntilTimeout>
 8007602:	1e03      	subs	r3, r0, #0
 8007604:	d001      	beq.n	800760a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e033      	b.n	8007672 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800760a:	1dbb      	adds	r3, r7, #6
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d107      	bne.n	8007622 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007612:	2308      	movs	r3, #8
 8007614:	18fb      	adds	r3, r7, r3
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	b2da      	uxtb	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	629a      	str	r2, [r3, #40]	; 0x28
 8007620:	e019      	b.n	8007656 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007622:	2308      	movs	r3, #8
 8007624:	18fb      	adds	r3, r7, r3
 8007626:	881b      	ldrh	r3, [r3, #0]
 8007628:	0a1b      	lsrs	r3, r3, #8
 800762a:	b29b      	uxth	r3, r3
 800762c:	b2da      	uxtb	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007636:	6a39      	ldr	r1, [r7, #32]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	0018      	movs	r0, r3
 800763c:	f000 f8f2 	bl	8007824 <I2C_WaitOnTXISFlagUntilTimeout>
 8007640:	1e03      	subs	r3, r0, #0
 8007642:	d001      	beq.n	8007648 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e014      	b.n	8007672 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007648:	2308      	movs	r3, #8
 800764a:	18fb      	adds	r3, r7, r3
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	b2da      	uxtb	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007656:	6a3a      	ldr	r2, [r7, #32]
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	0013      	movs	r3, r2
 8007660:	2200      	movs	r2, #0
 8007662:	2180      	movs	r1, #128	; 0x80
 8007664:	f000 f890 	bl	8007788 <I2C_WaitOnFlagUntilTimeout>
 8007668:	1e03      	subs	r3, r0, #0
 800766a:	d001      	beq.n	8007670 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e000      	b.n	8007672 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	0018      	movs	r0, r3
 8007674:	46bd      	mov	sp, r7
 8007676:	b004      	add	sp, #16
 8007678:	bdb0      	pop	{r4, r5, r7, pc}
 800767a:	46c0      	nop			; (mov r8, r8)
 800767c:	80002000 	.word	0x80002000

08007680 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007680:	b5b0      	push	{r4, r5, r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af02      	add	r7, sp, #8
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	000c      	movs	r4, r1
 800768a:	0010      	movs	r0, r2
 800768c:	0019      	movs	r1, r3
 800768e:	250a      	movs	r5, #10
 8007690:	197b      	adds	r3, r7, r5
 8007692:	1c22      	adds	r2, r4, #0
 8007694:	801a      	strh	r2, [r3, #0]
 8007696:	2308      	movs	r3, #8
 8007698:	18fb      	adds	r3, r7, r3
 800769a:	1c02      	adds	r2, r0, #0
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	1dbb      	adds	r3, r7, #6
 80076a0:	1c0a      	adds	r2, r1, #0
 80076a2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80076a4:	1dbb      	adds	r3, r7, #6
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	197b      	adds	r3, r7, r5
 80076ac:	8819      	ldrh	r1, [r3, #0]
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	4b23      	ldr	r3, [pc, #140]	; (8007740 <I2C_RequestMemoryRead+0xc0>)
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	2300      	movs	r3, #0
 80076b6:	f000 fa3f 	bl	8007b38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076bc:	6a39      	ldr	r1, [r7, #32]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	0018      	movs	r0, r3
 80076c2:	f000 f8af 	bl	8007824 <I2C_WaitOnTXISFlagUntilTimeout>
 80076c6:	1e03      	subs	r3, r0, #0
 80076c8:	d001      	beq.n	80076ce <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e033      	b.n	8007736 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076ce:	1dbb      	adds	r3, r7, #6
 80076d0:	881b      	ldrh	r3, [r3, #0]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d107      	bne.n	80076e6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076d6:	2308      	movs	r3, #8
 80076d8:	18fb      	adds	r3, r7, r3
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	629a      	str	r2, [r3, #40]	; 0x28
 80076e4:	e019      	b.n	800771a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80076e6:	2308      	movs	r3, #8
 80076e8:	18fb      	adds	r3, r7, r3
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	0a1b      	lsrs	r3, r3, #8
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fa:	6a39      	ldr	r1, [r7, #32]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	0018      	movs	r0, r3
 8007700:	f000 f890 	bl	8007824 <I2C_WaitOnTXISFlagUntilTimeout>
 8007704:	1e03      	subs	r3, r0, #0
 8007706:	d001      	beq.n	800770c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e014      	b.n	8007736 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800770c:	2308      	movs	r3, #8
 800770e:	18fb      	adds	r3, r7, r3
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	b2da      	uxtb	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800771a:	6a3a      	ldr	r2, [r7, #32]
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	0013      	movs	r3, r2
 8007724:	2200      	movs	r2, #0
 8007726:	2140      	movs	r1, #64	; 0x40
 8007728:	f000 f82e 	bl	8007788 <I2C_WaitOnFlagUntilTimeout>
 800772c:	1e03      	subs	r3, r0, #0
 800772e:	d001      	beq.n	8007734 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e000      	b.n	8007736 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	0018      	movs	r0, r3
 8007738:	46bd      	mov	sp, r7
 800773a:	b004      	add	sp, #16
 800773c:	bdb0      	pop	{r4, r5, r7, pc}
 800773e:	46c0      	nop			; (mov r8, r8)
 8007740:	80002000 	.word	0x80002000

08007744 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	2202      	movs	r2, #2
 8007754:	4013      	ands	r3, r2
 8007756:	2b02      	cmp	r3, #2
 8007758:	d103      	bne.n	8007762 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2200      	movs	r2, #0
 8007760:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	2201      	movs	r2, #1
 800776a:	4013      	ands	r3, r2
 800776c:	2b01      	cmp	r3, #1
 800776e:	d007      	beq.n	8007780 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	699a      	ldr	r2, [r3, #24]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2101      	movs	r1, #1
 800777c:	430a      	orrs	r2, r1
 800777e:	619a      	str	r2, [r3, #24]
  }
}
 8007780:	46c0      	nop			; (mov r8, r8)
 8007782:	46bd      	mov	sp, r7
 8007784:	b002      	add	sp, #8
 8007786:	bd80      	pop	{r7, pc}

08007788 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	603b      	str	r3, [r7, #0]
 8007794:	1dfb      	adds	r3, r7, #7
 8007796:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007798:	e030      	b.n	80077fc <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	3301      	adds	r3, #1
 800779e:	d02d      	beq.n	80077fc <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077a0:	f7fe fbde 	bl	8005f60 <HAL_GetTick>
 80077a4:	0002      	movs	r2, r0
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d302      	bcc.n	80077b6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d122      	bne.n	80077fc <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	4013      	ands	r3, r2
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	425a      	negs	r2, r3
 80077c6:	4153      	adcs	r3, r2
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	001a      	movs	r2, r3
 80077cc:	1dfb      	adds	r3, r7, #7
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d113      	bne.n	80077fc <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d8:	2220      	movs	r2, #32
 80077da:	431a      	orrs	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2241      	movs	r2, #65	; 0x41
 80077e4:	2120      	movs	r1, #32
 80077e6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2242      	movs	r2, #66	; 0x42
 80077ec:	2100      	movs	r1, #0
 80077ee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2240      	movs	r2, #64	; 0x40
 80077f4:	2100      	movs	r1, #0
 80077f6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e00f      	b.n	800781c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	4013      	ands	r3, r2
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	425a      	negs	r2, r3
 800780c:	4153      	adcs	r3, r2
 800780e:	b2db      	uxtb	r3, r3
 8007810:	001a      	movs	r2, r3
 8007812:	1dfb      	adds	r3, r7, #7
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d0bf      	beq.n	800779a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	0018      	movs	r0, r3
 800781e:	46bd      	mov	sp, r7
 8007820:	b004      	add	sp, #16
 8007822:	bd80      	pop	{r7, pc}

08007824 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007830:	e032      	b.n	8007898 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	68b9      	ldr	r1, [r7, #8]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	0018      	movs	r0, r3
 800783a:	f000 f87d 	bl	8007938 <I2C_IsErrorOccurred>
 800783e:	1e03      	subs	r3, r0, #0
 8007840:	d001      	beq.n	8007846 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e030      	b.n	80078a8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	3301      	adds	r3, #1
 800784a:	d025      	beq.n	8007898 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800784c:	f7fe fb88 	bl	8005f60 <HAL_GetTick>
 8007850:	0002      	movs	r2, r0
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	429a      	cmp	r2, r3
 800785a:	d302      	bcc.n	8007862 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d11a      	bne.n	8007898 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	2202      	movs	r2, #2
 800786a:	4013      	ands	r3, r2
 800786c:	2b02      	cmp	r3, #2
 800786e:	d013      	beq.n	8007898 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007874:	2220      	movs	r2, #32
 8007876:	431a      	orrs	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2241      	movs	r2, #65	; 0x41
 8007880:	2120      	movs	r1, #32
 8007882:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2242      	movs	r2, #66	; 0x42
 8007888:	2100      	movs	r1, #0
 800788a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2240      	movs	r2, #64	; 0x40
 8007890:	2100      	movs	r1, #0
 8007892:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e007      	b.n	80078a8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	2202      	movs	r2, #2
 80078a0:	4013      	ands	r3, r2
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d1c5      	bne.n	8007832 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	0018      	movs	r0, r3
 80078aa:	46bd      	mov	sp, r7
 80078ac:	b004      	add	sp, #16
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078bc:	e02f      	b.n	800791e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	68b9      	ldr	r1, [r7, #8]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	0018      	movs	r0, r3
 80078c6:	f000 f837 	bl	8007938 <I2C_IsErrorOccurred>
 80078ca:	1e03      	subs	r3, r0, #0
 80078cc:	d001      	beq.n	80078d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e02d      	b.n	800792e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078d2:	f7fe fb45 	bl	8005f60 <HAL_GetTick>
 80078d6:	0002      	movs	r2, r0
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d302      	bcc.n	80078e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d11a      	bne.n	800791e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	2220      	movs	r2, #32
 80078f0:	4013      	ands	r3, r2
 80078f2:	2b20      	cmp	r3, #32
 80078f4:	d013      	beq.n	800791e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fa:	2220      	movs	r2, #32
 80078fc:	431a      	orrs	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2241      	movs	r2, #65	; 0x41
 8007906:	2120      	movs	r1, #32
 8007908:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2242      	movs	r2, #66	; 0x42
 800790e:	2100      	movs	r1, #0
 8007910:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2240      	movs	r2, #64	; 0x40
 8007916:	2100      	movs	r1, #0
 8007918:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e007      	b.n	800792e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	2220      	movs	r2, #32
 8007926:	4013      	ands	r3, r2
 8007928:	2b20      	cmp	r3, #32
 800792a:	d1c8      	bne.n	80078be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	0018      	movs	r0, r3
 8007930:	46bd      	mov	sp, r7
 8007932:	b004      	add	sp, #16
 8007934:	bd80      	pop	{r7, pc}
	...

08007938 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007938:	b590      	push	{r4, r7, lr}
 800793a:	b08b      	sub	sp, #44	; 0x2c
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007944:	2327      	movs	r3, #39	; 0x27
 8007946:	18fb      	adds	r3, r7, r3
 8007948:	2200      	movs	r2, #0
 800794a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007954:	2300      	movs	r3, #0
 8007956:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	2210      	movs	r2, #16
 8007960:	4013      	ands	r3, r2
 8007962:	d100      	bne.n	8007966 <I2C_IsErrorOccurred+0x2e>
 8007964:	e082      	b.n	8007a6c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2210      	movs	r2, #16
 800796c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800796e:	e060      	b.n	8007a32 <I2C_IsErrorOccurred+0xfa>
 8007970:	2427      	movs	r4, #39	; 0x27
 8007972:	193b      	adds	r3, r7, r4
 8007974:	193a      	adds	r2, r7, r4
 8007976:	7812      	ldrb	r2, [r2, #0]
 8007978:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	3301      	adds	r3, #1
 800797e:	d058      	beq.n	8007a32 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007980:	f7fe faee 	bl	8005f60 <HAL_GetTick>
 8007984:	0002      	movs	r2, r0
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	429a      	cmp	r2, r3
 800798e:	d306      	bcc.n	800799e <I2C_IsErrorOccurred+0x66>
 8007990:	193b      	adds	r3, r7, r4
 8007992:	193a      	adds	r2, r7, r4
 8007994:	7812      	ldrb	r2, [r2, #0]
 8007996:	701a      	strb	r2, [r3, #0]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d149      	bne.n	8007a32 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	2380      	movs	r3, #128	; 0x80
 80079a6:	01db      	lsls	r3, r3, #7
 80079a8:	4013      	ands	r3, r2
 80079aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80079ac:	2013      	movs	r0, #19
 80079ae:	183b      	adds	r3, r7, r0
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	2142      	movs	r1, #66	; 0x42
 80079b4:	5c52      	ldrb	r2, [r2, r1]
 80079b6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	699a      	ldr	r2, [r3, #24]
 80079be:	2380      	movs	r3, #128	; 0x80
 80079c0:	021b      	lsls	r3, r3, #8
 80079c2:	401a      	ands	r2, r3
 80079c4:	2380      	movs	r3, #128	; 0x80
 80079c6:	021b      	lsls	r3, r3, #8
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d126      	bne.n	8007a1a <I2C_IsErrorOccurred+0xe2>
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	2380      	movs	r3, #128	; 0x80
 80079d0:	01db      	lsls	r3, r3, #7
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d021      	beq.n	8007a1a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80079d6:	183b      	adds	r3, r7, r0
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b20      	cmp	r3, #32
 80079dc:	d01d      	beq.n	8007a1a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2180      	movs	r1, #128	; 0x80
 80079ea:	01c9      	lsls	r1, r1, #7
 80079ec:	430a      	orrs	r2, r1
 80079ee:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80079f0:	f7fe fab6 	bl	8005f60 <HAL_GetTick>
 80079f4:	0003      	movs	r3, r0
 80079f6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079f8:	e00f      	b.n	8007a1a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80079fa:	f7fe fab1 	bl	8005f60 <HAL_GetTick>
 80079fe:	0002      	movs	r2, r0
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b19      	cmp	r3, #25
 8007a06:	d908      	bls.n	8007a1a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007a10:	2327      	movs	r3, #39	; 0x27
 8007a12:	18fb      	adds	r3, r7, r3
 8007a14:	2201      	movs	r2, #1
 8007a16:	701a      	strb	r2, [r3, #0]

              break;
 8007a18:	e00b      	b.n	8007a32 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	2220      	movs	r2, #32
 8007a22:	4013      	ands	r3, r2
 8007a24:	2127      	movs	r1, #39	; 0x27
 8007a26:	187a      	adds	r2, r7, r1
 8007a28:	1879      	adds	r1, r7, r1
 8007a2a:	7809      	ldrb	r1, [r1, #0]
 8007a2c:	7011      	strb	r1, [r2, #0]
 8007a2e:	2b20      	cmp	r3, #32
 8007a30:	d1e3      	bne.n	80079fa <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	2b20      	cmp	r3, #32
 8007a3e:	d004      	beq.n	8007a4a <I2C_IsErrorOccurred+0x112>
 8007a40:	2327      	movs	r3, #39	; 0x27
 8007a42:	18fb      	adds	r3, r7, r3
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d092      	beq.n	8007970 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007a4a:	2327      	movs	r3, #39	; 0x27
 8007a4c:	18fb      	adds	r3, r7, r3
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d103      	bne.n	8007a5c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	2204      	movs	r2, #4
 8007a60:	4313      	orrs	r3, r2
 8007a62:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007a64:	2327      	movs	r3, #39	; 0x27
 8007a66:	18fb      	adds	r3, r7, r3
 8007a68:	2201      	movs	r2, #1
 8007a6a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	2380      	movs	r3, #128	; 0x80
 8007a78:	005b      	lsls	r3, r3, #1
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	d00c      	beq.n	8007a98 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	2201      	movs	r2, #1
 8007a82:	4313      	orrs	r3, r2
 8007a84:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2280      	movs	r2, #128	; 0x80
 8007a8c:	0052      	lsls	r2, r2, #1
 8007a8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a90:	2327      	movs	r3, #39	; 0x27
 8007a92:	18fb      	adds	r3, r7, r3
 8007a94:	2201      	movs	r2, #1
 8007a96:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	2380      	movs	r3, #128	; 0x80
 8007a9c:	00db      	lsls	r3, r3, #3
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	d00c      	beq.n	8007abc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	2208      	movs	r2, #8
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2280      	movs	r2, #128	; 0x80
 8007ab0:	00d2      	lsls	r2, r2, #3
 8007ab2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ab4:	2327      	movs	r3, #39	; 0x27
 8007ab6:	18fb      	adds	r3, r7, r3
 8007ab8:	2201      	movs	r2, #1
 8007aba:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	2380      	movs	r3, #128	; 0x80
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	d00c      	beq.n	8007ae0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	2202      	movs	r2, #2
 8007aca:	4313      	orrs	r3, r2
 8007acc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2280      	movs	r2, #128	; 0x80
 8007ad4:	0092      	lsls	r2, r2, #2
 8007ad6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ad8:	2327      	movs	r3, #39	; 0x27
 8007ada:	18fb      	adds	r3, r7, r3
 8007adc:	2201      	movs	r2, #1
 8007ade:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007ae0:	2327      	movs	r3, #39	; 0x27
 8007ae2:	18fb      	adds	r3, r7, r3
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d01d      	beq.n	8007b26 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	0018      	movs	r0, r3
 8007aee:	f7ff fe29 	bl	8007744 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	490d      	ldr	r1, [pc, #52]	; (8007b34 <I2C_IsErrorOccurred+0x1fc>)
 8007afe:	400a      	ands	r2, r1
 8007b00:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2241      	movs	r2, #65	; 0x41
 8007b12:	2120      	movs	r1, #32
 8007b14:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2242      	movs	r2, #66	; 0x42
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2240      	movs	r2, #64	; 0x40
 8007b22:	2100      	movs	r1, #0
 8007b24:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8007b26:	2327      	movs	r3, #39	; 0x27
 8007b28:	18fb      	adds	r3, r7, r3
 8007b2a:	781b      	ldrb	r3, [r3, #0]
}
 8007b2c:	0018      	movs	r0, r3
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	b00b      	add	sp, #44	; 0x2c
 8007b32:	bd90      	pop	{r4, r7, pc}
 8007b34:	fe00e800 	.word	0xfe00e800

08007b38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007b38:	b590      	push	{r4, r7, lr}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	0008      	movs	r0, r1
 8007b42:	0011      	movs	r1, r2
 8007b44:	607b      	str	r3, [r7, #4]
 8007b46:	240a      	movs	r4, #10
 8007b48:	193b      	adds	r3, r7, r4
 8007b4a:	1c02      	adds	r2, r0, #0
 8007b4c:	801a      	strh	r2, [r3, #0]
 8007b4e:	2009      	movs	r0, #9
 8007b50:	183b      	adds	r3, r7, r0
 8007b52:	1c0a      	adds	r2, r1, #0
 8007b54:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b56:	193b      	adds	r3, r7, r4
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	059b      	lsls	r3, r3, #22
 8007b5c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b5e:	183b      	adds	r3, r7, r0
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	0419      	lsls	r1, r3, #16
 8007b64:	23ff      	movs	r3, #255	; 0xff
 8007b66:	041b      	lsls	r3, r3, #16
 8007b68:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b6a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	4313      	orrs	r3, r2
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	085b      	lsrs	r3, r3, #1
 8007b78:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b82:	0d51      	lsrs	r1, r2, #21
 8007b84:	2280      	movs	r2, #128	; 0x80
 8007b86:	00d2      	lsls	r2, r2, #3
 8007b88:	400a      	ands	r2, r1
 8007b8a:	4907      	ldr	r1, [pc, #28]	; (8007ba8 <I2C_TransferConfig+0x70>)
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	43d2      	mvns	r2, r2
 8007b90:	401a      	ands	r2, r3
 8007b92:	0011      	movs	r1, r2
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007b9e:	46c0      	nop			; (mov r8, r8)
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	b007      	add	sp, #28
 8007ba4:	bd90      	pop	{r4, r7, pc}
 8007ba6:	46c0      	nop			; (mov r8, r8)
 8007ba8:	03ff63ff 	.word	0x03ff63ff

08007bac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2241      	movs	r2, #65	; 0x41
 8007bba:	5c9b      	ldrb	r3, [r3, r2]
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b20      	cmp	r3, #32
 8007bc0:	d138      	bne.n	8007c34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2240      	movs	r2, #64	; 0x40
 8007bc6:	5c9b      	ldrb	r3, [r3, r2]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d101      	bne.n	8007bd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e032      	b.n	8007c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2240      	movs	r2, #64	; 0x40
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2241      	movs	r2, #65	; 0x41
 8007bdc:	2124      	movs	r1, #36	; 0x24
 8007bde:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2101      	movs	r1, #1
 8007bec:	438a      	bics	r2, r1
 8007bee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4911      	ldr	r1, [pc, #68]	; (8007c40 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007bfc:	400a      	ands	r2, r1
 8007bfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6819      	ldr	r1, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2241      	movs	r2, #65	; 0x41
 8007c24:	2120      	movs	r1, #32
 8007c26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2240      	movs	r2, #64	; 0x40
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	e000      	b.n	8007c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c34:	2302      	movs	r3, #2
  }
}
 8007c36:	0018      	movs	r0, r3
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	b002      	add	sp, #8
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	46c0      	nop			; (mov r8, r8)
 8007c40:	ffffefff 	.word	0xffffefff

08007c44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2241      	movs	r2, #65	; 0x41
 8007c52:	5c9b      	ldrb	r3, [r3, r2]
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b20      	cmp	r3, #32
 8007c58:	d139      	bne.n	8007cce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2240      	movs	r2, #64	; 0x40
 8007c5e:	5c9b      	ldrb	r3, [r3, r2]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d101      	bne.n	8007c68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c64:	2302      	movs	r3, #2
 8007c66:	e033      	b.n	8007cd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2240      	movs	r2, #64	; 0x40
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2241      	movs	r2, #65	; 0x41
 8007c74:	2124      	movs	r1, #36	; 0x24
 8007c76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2101      	movs	r1, #1
 8007c84:	438a      	bics	r2, r1
 8007c86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4a11      	ldr	r2, [pc, #68]	; (8007cd8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007c94:	4013      	ands	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	021b      	lsls	r3, r3, #8
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2241      	movs	r2, #65	; 0x41
 8007cbe:	2120      	movs	r1, #32
 8007cc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2240      	movs	r2, #64	; 0x40
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	e000      	b.n	8007cd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007cce:	2302      	movs	r3, #2
  }
}
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	b004      	add	sp, #16
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	fffff0ff 	.word	0xfffff0ff

08007cdc <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	000a      	movs	r2, r1
 8007ce6:	1cfb      	adds	r3, r7, #3
 8007ce8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8007cee:	4b25      	ldr	r3, [pc, #148]	; (8007d84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	2380      	movs	r3, #128	; 0x80
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8007cfa:	4b23      	ldr	r3, [pc, #140]	; (8007d88 <HAL_PWR_EnterSTOPMode+0xac>)
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	4013      	ands	r3, r2
 8007d02:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d008      	beq.n	8007d1c <HAL_PWR_EnterSTOPMode+0x40>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d005      	beq.n	8007d1c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8007d10:	4b1c      	ldr	r3, [pc, #112]	; (8007d84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	4b1b      	ldr	r3, [pc, #108]	; (8007d84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8007d16:	491d      	ldr	r1, [pc, #116]	; (8007d8c <HAL_PWR_EnterSTOPMode+0xb0>)
 8007d18:	400a      	ands	r2, r1
 8007d1a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8007d1c:	4b19      	ldr	r3, [pc, #100]	; (8007d84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2203      	movs	r2, #3
 8007d26:	4393      	bics	r3, r2
 8007d28:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8007d32:	4b14      	ldr	r3, [pc, #80]	; (8007d84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007d38:	4b15      	ldr	r3, [pc, #84]	; (8007d90 <HAL_PWR_EnterSTOPMode+0xb4>)
 8007d3a:	691a      	ldr	r2, [r3, #16]
 8007d3c:	4b14      	ldr	r3, [pc, #80]	; (8007d90 <HAL_PWR_EnterSTOPMode+0xb4>)
 8007d3e:	2104      	movs	r1, #4
 8007d40:	430a      	orrs	r2, r1
 8007d42:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8007d44:	1cfb      	adds	r3, r7, #3
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d101      	bne.n	8007d50 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8007d4c:	bf30      	wfi
 8007d4e:	e002      	b.n	8007d56 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007d50:	bf40      	sev
    __WFE();
 8007d52:	bf20      	wfe
    __WFE();
 8007d54:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007d56:	4b0e      	ldr	r3, [pc, #56]	; (8007d90 <HAL_PWR_EnterSTOPMode+0xb4>)
 8007d58:	691a      	ldr	r2, [r3, #16]
 8007d5a:	4b0d      	ldr	r3, [pc, #52]	; (8007d90 <HAL_PWR_EnterSTOPMode+0xb4>)
 8007d5c:	2104      	movs	r1, #4
 8007d5e:	438a      	bics	r2, r1
 8007d60:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d009      	beq.n	8007d7c <HAL_PWR_EnterSTOPMode+0xa0>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d006      	beq.n	8007d7c <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8007d6e:	4b05      	ldr	r3, [pc, #20]	; (8007d84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	4b04      	ldr	r3, [pc, #16]	; (8007d84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8007d74:	2180      	movs	r1, #128	; 0x80
 8007d76:	0089      	lsls	r1, r1, #2
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	601a      	str	r2, [r3, #0]
  }
}
 8007d7c:	46c0      	nop			; (mov r8, r8)
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	b006      	add	sp, #24
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	40007000 	.word	0x40007000
 8007d88:	40010000 	.word	0x40010000
 8007d8c:	fffffdff 	.word	0xfffffdff
 8007d90:	e000ed00 	.word	0xe000ed00

08007d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d94:	b5b0      	push	{r4, r5, r7, lr}
 8007d96:	b08a      	sub	sp, #40	; 0x28
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d102      	bne.n	8007da8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	f000 fbbf 	bl	8008526 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007da8:	4bc9      	ldr	r3, [pc, #804]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	220c      	movs	r2, #12
 8007dae:	4013      	ands	r3, r2
 8007db0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007db2:	4bc7      	ldr	r3, [pc, #796]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007db4:	68da      	ldr	r2, [r3, #12]
 8007db6:	2380      	movs	r3, #128	; 0x80
 8007db8:	025b      	lsls	r3, r3, #9
 8007dba:	4013      	ands	r3, r2
 8007dbc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	d100      	bne.n	8007dca <HAL_RCC_OscConfig+0x36>
 8007dc8:	e07e      	b.n	8007ec8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	2b08      	cmp	r3, #8
 8007dce:	d007      	beq.n	8007de0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	2b0c      	cmp	r3, #12
 8007dd4:	d112      	bne.n	8007dfc <HAL_RCC_OscConfig+0x68>
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	2380      	movs	r3, #128	; 0x80
 8007dda:	025b      	lsls	r3, r3, #9
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d10d      	bne.n	8007dfc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007de0:	4bbb      	ldr	r3, [pc, #748]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	2380      	movs	r3, #128	; 0x80
 8007de6:	029b      	lsls	r3, r3, #10
 8007de8:	4013      	ands	r3, r2
 8007dea:	d100      	bne.n	8007dee <HAL_RCC_OscConfig+0x5a>
 8007dec:	e06b      	b.n	8007ec6 <HAL_RCC_OscConfig+0x132>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d167      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	f000 fb95 	bl	8008526 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	2380      	movs	r3, #128	; 0x80
 8007e02:	025b      	lsls	r3, r3, #9
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d107      	bne.n	8007e18 <HAL_RCC_OscConfig+0x84>
 8007e08:	4bb1      	ldr	r3, [pc, #708]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	4bb0      	ldr	r3, [pc, #704]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007e0e:	2180      	movs	r1, #128	; 0x80
 8007e10:	0249      	lsls	r1, r1, #9
 8007e12:	430a      	orrs	r2, r1
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	e027      	b.n	8007e68 <HAL_RCC_OscConfig+0xd4>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	23a0      	movs	r3, #160	; 0xa0
 8007e1e:	02db      	lsls	r3, r3, #11
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d10e      	bne.n	8007e42 <HAL_RCC_OscConfig+0xae>
 8007e24:	4baa      	ldr	r3, [pc, #680]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	4ba9      	ldr	r3, [pc, #676]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007e2a:	2180      	movs	r1, #128	; 0x80
 8007e2c:	02c9      	lsls	r1, r1, #11
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	4ba7      	ldr	r3, [pc, #668]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	4ba6      	ldr	r3, [pc, #664]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007e38:	2180      	movs	r1, #128	; 0x80
 8007e3a:	0249      	lsls	r1, r1, #9
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	601a      	str	r2, [r3, #0]
 8007e40:	e012      	b.n	8007e68 <HAL_RCC_OscConfig+0xd4>
 8007e42:	4ba3      	ldr	r3, [pc, #652]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	4ba2      	ldr	r3, [pc, #648]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007e48:	49a2      	ldr	r1, [pc, #648]	; (80080d4 <HAL_RCC_OscConfig+0x340>)
 8007e4a:	400a      	ands	r2, r1
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	4ba0      	ldr	r3, [pc, #640]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	2380      	movs	r3, #128	; 0x80
 8007e54:	025b      	lsls	r3, r3, #9
 8007e56:	4013      	ands	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4b9c      	ldr	r3, [pc, #624]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	4b9b      	ldr	r3, [pc, #620]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007e62:	499d      	ldr	r1, [pc, #628]	; (80080d8 <HAL_RCC_OscConfig+0x344>)
 8007e64:	400a      	ands	r2, r1
 8007e66:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d015      	beq.n	8007e9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e70:	f7fe f876 	bl	8005f60 <HAL_GetTick>
 8007e74:	0003      	movs	r3, r0
 8007e76:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e78:	e009      	b.n	8007e8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e7a:	f7fe f871 	bl	8005f60 <HAL_GetTick>
 8007e7e:	0002      	movs	r2, r0
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	2b64      	cmp	r3, #100	; 0x64
 8007e86:	d902      	bls.n	8007e8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	f000 fb4c 	bl	8008526 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e8e:	4b90      	ldr	r3, [pc, #576]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	2380      	movs	r3, #128	; 0x80
 8007e94:	029b      	lsls	r3, r3, #10
 8007e96:	4013      	ands	r3, r2
 8007e98:	d0ef      	beq.n	8007e7a <HAL_RCC_OscConfig+0xe6>
 8007e9a:	e015      	b.n	8007ec8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e9c:	f7fe f860 	bl	8005f60 <HAL_GetTick>
 8007ea0:	0003      	movs	r3, r0
 8007ea2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ea4:	e008      	b.n	8007eb8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ea6:	f7fe f85b 	bl	8005f60 <HAL_GetTick>
 8007eaa:	0002      	movs	r2, r0
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	2b64      	cmp	r3, #100	; 0x64
 8007eb2:	d901      	bls.n	8007eb8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e336      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007eb8:	4b85      	ldr	r3, [pc, #532]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	2380      	movs	r3, #128	; 0x80
 8007ebe:	029b      	lsls	r3, r3, #10
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	d1f0      	bne.n	8007ea6 <HAL_RCC_OscConfig+0x112>
 8007ec4:	e000      	b.n	8007ec8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ec6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2202      	movs	r2, #2
 8007ece:	4013      	ands	r3, r2
 8007ed0:	d100      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x140>
 8007ed2:	e099      	b.n	8008008 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	2220      	movs	r2, #32
 8007ede:	4013      	ands	r3, r2
 8007ee0:	d009      	beq.n	8007ef6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8007ee2:	4b7b      	ldr	r3, [pc, #492]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	4b7a      	ldr	r3, [pc, #488]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007ee8:	2120      	movs	r1, #32
 8007eea:	430a      	orrs	r2, r1
 8007eec:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8007eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef0:	2220      	movs	r2, #32
 8007ef2:	4393      	bics	r3, r2
 8007ef4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	d005      	beq.n	8007f08 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	2b0c      	cmp	r3, #12
 8007f00:	d13e      	bne.n	8007f80 <HAL_RCC_OscConfig+0x1ec>
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d13b      	bne.n	8007f80 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8007f08:	4b71      	ldr	r3, [pc, #452]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2204      	movs	r2, #4
 8007f0e:	4013      	ands	r3, r2
 8007f10:	d004      	beq.n	8007f1c <HAL_RCC_OscConfig+0x188>
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e304      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f1c:	4b6c      	ldr	r3, [pc, #432]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	4a6e      	ldr	r2, [pc, #440]	; (80080dc <HAL_RCC_OscConfig+0x348>)
 8007f22:	4013      	ands	r3, r2
 8007f24:	0019      	movs	r1, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	021a      	lsls	r2, r3, #8
 8007f2c:	4b68      	ldr	r3, [pc, #416]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007f32:	4b67      	ldr	r3, [pc, #412]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2209      	movs	r2, #9
 8007f38:	4393      	bics	r3, r2
 8007f3a:	0019      	movs	r1, r3
 8007f3c:	4b64      	ldr	r3, [pc, #400]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f40:	430a      	orrs	r2, r1
 8007f42:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f44:	f000 fc42 	bl	80087cc <HAL_RCC_GetSysClockFreq>
 8007f48:	0001      	movs	r1, r0
 8007f4a:	4b61      	ldr	r3, [pc, #388]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	091b      	lsrs	r3, r3, #4
 8007f50:	220f      	movs	r2, #15
 8007f52:	4013      	ands	r3, r2
 8007f54:	4a62      	ldr	r2, [pc, #392]	; (80080e0 <HAL_RCC_OscConfig+0x34c>)
 8007f56:	5cd3      	ldrb	r3, [r2, r3]
 8007f58:	000a      	movs	r2, r1
 8007f5a:	40da      	lsrs	r2, r3
 8007f5c:	4b61      	ldr	r3, [pc, #388]	; (80080e4 <HAL_RCC_OscConfig+0x350>)
 8007f5e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8007f60:	4b61      	ldr	r3, [pc, #388]	; (80080e8 <HAL_RCC_OscConfig+0x354>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2513      	movs	r5, #19
 8007f66:	197c      	adds	r4, r7, r5
 8007f68:	0018      	movs	r0, r3
 8007f6a:	f7fd ffb3 	bl	8005ed4 <HAL_InitTick>
 8007f6e:	0003      	movs	r3, r0
 8007f70:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8007f72:	197b      	adds	r3, r7, r5
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d046      	beq.n	8008008 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8007f7a:	197b      	adds	r3, r7, r5
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	e2d2      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d027      	beq.n	8007fd6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007f86:	4b52      	ldr	r3, [pc, #328]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2209      	movs	r2, #9
 8007f8c:	4393      	bics	r3, r2
 8007f8e:	0019      	movs	r1, r3
 8007f90:	4b4f      	ldr	r3, [pc, #316]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f94:	430a      	orrs	r2, r1
 8007f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f98:	f7fd ffe2 	bl	8005f60 <HAL_GetTick>
 8007f9c:	0003      	movs	r3, r0
 8007f9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fa0:	e008      	b.n	8007fb4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fa2:	f7fd ffdd 	bl	8005f60 <HAL_GetTick>
 8007fa6:	0002      	movs	r2, r0
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d901      	bls.n	8007fb4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e2b8      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fb4:	4b46      	ldr	r3, [pc, #280]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2204      	movs	r2, #4
 8007fba:	4013      	ands	r3, r2
 8007fbc:	d0f1      	beq.n	8007fa2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fbe:	4b44      	ldr	r3, [pc, #272]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	4a46      	ldr	r2, [pc, #280]	; (80080dc <HAL_RCC_OscConfig+0x348>)
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	0019      	movs	r1, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	021a      	lsls	r2, r3, #8
 8007fce:	4b40      	ldr	r3, [pc, #256]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	605a      	str	r2, [r3, #4]
 8007fd4:	e018      	b.n	8008008 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fd6:	4b3e      	ldr	r3, [pc, #248]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	4b3d      	ldr	r3, [pc, #244]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8007fdc:	2101      	movs	r1, #1
 8007fde:	438a      	bics	r2, r1
 8007fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fe2:	f7fd ffbd 	bl	8005f60 <HAL_GetTick>
 8007fe6:	0003      	movs	r3, r0
 8007fe8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007fea:	e008      	b.n	8007ffe <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fec:	f7fd ffb8 	bl	8005f60 <HAL_GetTick>
 8007ff0:	0002      	movs	r2, r0
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d901      	bls.n	8007ffe <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e293      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ffe:	4b34      	ldr	r3, [pc, #208]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2204      	movs	r2, #4
 8008004:	4013      	ands	r3, r2
 8008006:	d1f1      	bne.n	8007fec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2210      	movs	r2, #16
 800800e:	4013      	ands	r3, r2
 8008010:	d100      	bne.n	8008014 <HAL_RCC_OscConfig+0x280>
 8008012:	e0a2      	b.n	800815a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d140      	bne.n	800809c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800801a:	4b2d      	ldr	r3, [pc, #180]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	2380      	movs	r3, #128	; 0x80
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4013      	ands	r3, r2
 8008024:	d005      	beq.n	8008032 <HAL_RCC_OscConfig+0x29e>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	69db      	ldr	r3, [r3, #28]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d101      	bne.n	8008032 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e279      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008032:	4b27      	ldr	r3, [pc, #156]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	4a2d      	ldr	r2, [pc, #180]	; (80080ec <HAL_RCC_OscConfig+0x358>)
 8008038:	4013      	ands	r3, r2
 800803a:	0019      	movs	r1, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008040:	4b23      	ldr	r3, [pc, #140]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8008042:	430a      	orrs	r2, r1
 8008044:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008046:	4b22      	ldr	r3, [pc, #136]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	021b      	lsls	r3, r3, #8
 800804c:	0a19      	lsrs	r1, r3, #8
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	061a      	lsls	r2, r3, #24
 8008054:	4b1e      	ldr	r3, [pc, #120]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 8008056:	430a      	orrs	r2, r1
 8008058:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	0b5b      	lsrs	r3, r3, #13
 8008060:	3301      	adds	r3, #1
 8008062:	2280      	movs	r2, #128	; 0x80
 8008064:	0212      	lsls	r2, r2, #8
 8008066:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008068:	4b19      	ldr	r3, [pc, #100]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	091b      	lsrs	r3, r3, #4
 800806e:	210f      	movs	r1, #15
 8008070:	400b      	ands	r3, r1
 8008072:	491b      	ldr	r1, [pc, #108]	; (80080e0 <HAL_RCC_OscConfig+0x34c>)
 8008074:	5ccb      	ldrb	r3, [r1, r3]
 8008076:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008078:	4b1a      	ldr	r3, [pc, #104]	; (80080e4 <HAL_RCC_OscConfig+0x350>)
 800807a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800807c:	4b1a      	ldr	r3, [pc, #104]	; (80080e8 <HAL_RCC_OscConfig+0x354>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2513      	movs	r5, #19
 8008082:	197c      	adds	r4, r7, r5
 8008084:	0018      	movs	r0, r3
 8008086:	f7fd ff25 	bl	8005ed4 <HAL_InitTick>
 800808a:	0003      	movs	r3, r0
 800808c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800808e:	197b      	adds	r3, r7, r5
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d061      	beq.n	800815a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8008096:	197b      	adds	r3, r7, r5
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	e244      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	69db      	ldr	r3, [r3, #28]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d040      	beq.n	8008126 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80080a4:	4b0a      	ldr	r3, [pc, #40]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	4b09      	ldr	r3, [pc, #36]	; (80080d0 <HAL_RCC_OscConfig+0x33c>)
 80080aa:	2180      	movs	r1, #128	; 0x80
 80080ac:	0049      	lsls	r1, r1, #1
 80080ae:	430a      	orrs	r2, r1
 80080b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080b2:	f7fd ff55 	bl	8005f60 <HAL_GetTick>
 80080b6:	0003      	movs	r3, r0
 80080b8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80080ba:	e019      	b.n	80080f0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80080bc:	f7fd ff50 	bl	8005f60 <HAL_GetTick>
 80080c0:	0002      	movs	r2, r0
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d912      	bls.n	80080f0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e22b      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
 80080ce:	46c0      	nop			; (mov r8, r8)
 80080d0:	40021000 	.word	0x40021000
 80080d4:	fffeffff 	.word	0xfffeffff
 80080d8:	fffbffff 	.word	0xfffbffff
 80080dc:	ffffe0ff 	.word	0xffffe0ff
 80080e0:	080136a8 	.word	0x080136a8
 80080e4:	20000038 	.word	0x20000038
 80080e8:	2000003c 	.word	0x2000003c
 80080ec:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80080f0:	4bca      	ldr	r3, [pc, #808]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	2380      	movs	r3, #128	; 0x80
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4013      	ands	r3, r2
 80080fa:	d0df      	beq.n	80080bc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80080fc:	4bc7      	ldr	r3, [pc, #796]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	4ac7      	ldr	r2, [pc, #796]	; (8008420 <HAL_RCC_OscConfig+0x68c>)
 8008102:	4013      	ands	r3, r2
 8008104:	0019      	movs	r1, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800810a:	4bc4      	ldr	r3, [pc, #784]	; (800841c <HAL_RCC_OscConfig+0x688>)
 800810c:	430a      	orrs	r2, r1
 800810e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008110:	4bc2      	ldr	r3, [pc, #776]	; (800841c <HAL_RCC_OscConfig+0x688>)
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	021b      	lsls	r3, r3, #8
 8008116:	0a19      	lsrs	r1, r3, #8
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	061a      	lsls	r2, r3, #24
 800811e:	4bbf      	ldr	r3, [pc, #764]	; (800841c <HAL_RCC_OscConfig+0x688>)
 8008120:	430a      	orrs	r2, r1
 8008122:	605a      	str	r2, [r3, #4]
 8008124:	e019      	b.n	800815a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008126:	4bbd      	ldr	r3, [pc, #756]	; (800841c <HAL_RCC_OscConfig+0x688>)
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	4bbc      	ldr	r3, [pc, #752]	; (800841c <HAL_RCC_OscConfig+0x688>)
 800812c:	49bd      	ldr	r1, [pc, #756]	; (8008424 <HAL_RCC_OscConfig+0x690>)
 800812e:	400a      	ands	r2, r1
 8008130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008132:	f7fd ff15 	bl	8005f60 <HAL_GetTick>
 8008136:	0003      	movs	r3, r0
 8008138:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800813a:	e008      	b.n	800814e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800813c:	f7fd ff10 	bl	8005f60 <HAL_GetTick>
 8008140:	0002      	movs	r2, r0
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	2b02      	cmp	r3, #2
 8008148:	d901      	bls.n	800814e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e1eb      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800814e:	4bb3      	ldr	r3, [pc, #716]	; (800841c <HAL_RCC_OscConfig+0x688>)
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	2380      	movs	r3, #128	; 0x80
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4013      	ands	r3, r2
 8008158:	d1f0      	bne.n	800813c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2208      	movs	r2, #8
 8008160:	4013      	ands	r3, r2
 8008162:	d036      	beq.n	80081d2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d019      	beq.n	80081a0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800816c:	4bab      	ldr	r3, [pc, #684]	; (800841c <HAL_RCC_OscConfig+0x688>)
 800816e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008170:	4baa      	ldr	r3, [pc, #680]	; (800841c <HAL_RCC_OscConfig+0x688>)
 8008172:	2101      	movs	r1, #1
 8008174:	430a      	orrs	r2, r1
 8008176:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008178:	f7fd fef2 	bl	8005f60 <HAL_GetTick>
 800817c:	0003      	movs	r3, r0
 800817e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008180:	e008      	b.n	8008194 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008182:	f7fd feed 	bl	8005f60 <HAL_GetTick>
 8008186:	0002      	movs	r2, r0
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	2b02      	cmp	r3, #2
 800818e:	d901      	bls.n	8008194 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e1c8      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008194:	4ba1      	ldr	r3, [pc, #644]	; (800841c <HAL_RCC_OscConfig+0x688>)
 8008196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008198:	2202      	movs	r2, #2
 800819a:	4013      	ands	r3, r2
 800819c:	d0f1      	beq.n	8008182 <HAL_RCC_OscConfig+0x3ee>
 800819e:	e018      	b.n	80081d2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081a0:	4b9e      	ldr	r3, [pc, #632]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80081a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081a4:	4b9d      	ldr	r3, [pc, #628]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80081a6:	2101      	movs	r1, #1
 80081a8:	438a      	bics	r2, r1
 80081aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081ac:	f7fd fed8 	bl	8005f60 <HAL_GetTick>
 80081b0:	0003      	movs	r3, r0
 80081b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80081b4:	e008      	b.n	80081c8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081b6:	f7fd fed3 	bl	8005f60 <HAL_GetTick>
 80081ba:	0002      	movs	r2, r0
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d901      	bls.n	80081c8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e1ae      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80081c8:	4b94      	ldr	r3, [pc, #592]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80081ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081cc:	2202      	movs	r2, #2
 80081ce:	4013      	ands	r3, r2
 80081d0:	d1f1      	bne.n	80081b6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2204      	movs	r2, #4
 80081d8:	4013      	ands	r3, r2
 80081da:	d100      	bne.n	80081de <HAL_RCC_OscConfig+0x44a>
 80081dc:	e0ae      	b.n	800833c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081de:	2023      	movs	r0, #35	; 0x23
 80081e0:	183b      	adds	r3, r7, r0
 80081e2:	2200      	movs	r2, #0
 80081e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081e6:	4b8d      	ldr	r3, [pc, #564]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80081e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081ea:	2380      	movs	r3, #128	; 0x80
 80081ec:	055b      	lsls	r3, r3, #21
 80081ee:	4013      	ands	r3, r2
 80081f0:	d109      	bne.n	8008206 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081f2:	4b8a      	ldr	r3, [pc, #552]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80081f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081f6:	4b89      	ldr	r3, [pc, #548]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80081f8:	2180      	movs	r1, #128	; 0x80
 80081fa:	0549      	lsls	r1, r1, #21
 80081fc:	430a      	orrs	r2, r1
 80081fe:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008200:	183b      	adds	r3, r7, r0
 8008202:	2201      	movs	r2, #1
 8008204:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008206:	4b88      	ldr	r3, [pc, #544]	; (8008428 <HAL_RCC_OscConfig+0x694>)
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	2380      	movs	r3, #128	; 0x80
 800820c:	005b      	lsls	r3, r3, #1
 800820e:	4013      	ands	r3, r2
 8008210:	d11a      	bne.n	8008248 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008212:	4b85      	ldr	r3, [pc, #532]	; (8008428 <HAL_RCC_OscConfig+0x694>)
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	4b84      	ldr	r3, [pc, #528]	; (8008428 <HAL_RCC_OscConfig+0x694>)
 8008218:	2180      	movs	r1, #128	; 0x80
 800821a:	0049      	lsls	r1, r1, #1
 800821c:	430a      	orrs	r2, r1
 800821e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008220:	f7fd fe9e 	bl	8005f60 <HAL_GetTick>
 8008224:	0003      	movs	r3, r0
 8008226:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008228:	e008      	b.n	800823c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800822a:	f7fd fe99 	bl	8005f60 <HAL_GetTick>
 800822e:	0002      	movs	r2, r0
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	2b64      	cmp	r3, #100	; 0x64
 8008236:	d901      	bls.n	800823c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e174      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800823c:	4b7a      	ldr	r3, [pc, #488]	; (8008428 <HAL_RCC_OscConfig+0x694>)
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	2380      	movs	r3, #128	; 0x80
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	4013      	ands	r3, r2
 8008246:	d0f0      	beq.n	800822a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	2380      	movs	r3, #128	; 0x80
 800824e:	005b      	lsls	r3, r3, #1
 8008250:	429a      	cmp	r2, r3
 8008252:	d107      	bne.n	8008264 <HAL_RCC_OscConfig+0x4d0>
 8008254:	4b71      	ldr	r3, [pc, #452]	; (800841c <HAL_RCC_OscConfig+0x688>)
 8008256:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008258:	4b70      	ldr	r3, [pc, #448]	; (800841c <HAL_RCC_OscConfig+0x688>)
 800825a:	2180      	movs	r1, #128	; 0x80
 800825c:	0049      	lsls	r1, r1, #1
 800825e:	430a      	orrs	r2, r1
 8008260:	651a      	str	r2, [r3, #80]	; 0x50
 8008262:	e031      	b.n	80082c8 <HAL_RCC_OscConfig+0x534>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10c      	bne.n	8008286 <HAL_RCC_OscConfig+0x4f2>
 800826c:	4b6b      	ldr	r3, [pc, #428]	; (800841c <HAL_RCC_OscConfig+0x688>)
 800826e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008270:	4b6a      	ldr	r3, [pc, #424]	; (800841c <HAL_RCC_OscConfig+0x688>)
 8008272:	496c      	ldr	r1, [pc, #432]	; (8008424 <HAL_RCC_OscConfig+0x690>)
 8008274:	400a      	ands	r2, r1
 8008276:	651a      	str	r2, [r3, #80]	; 0x50
 8008278:	4b68      	ldr	r3, [pc, #416]	; (800841c <HAL_RCC_OscConfig+0x688>)
 800827a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800827c:	4b67      	ldr	r3, [pc, #412]	; (800841c <HAL_RCC_OscConfig+0x688>)
 800827e:	496b      	ldr	r1, [pc, #428]	; (800842c <HAL_RCC_OscConfig+0x698>)
 8008280:	400a      	ands	r2, r1
 8008282:	651a      	str	r2, [r3, #80]	; 0x50
 8008284:	e020      	b.n	80082c8 <HAL_RCC_OscConfig+0x534>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689a      	ldr	r2, [r3, #8]
 800828a:	23a0      	movs	r3, #160	; 0xa0
 800828c:	00db      	lsls	r3, r3, #3
 800828e:	429a      	cmp	r2, r3
 8008290:	d10e      	bne.n	80082b0 <HAL_RCC_OscConfig+0x51c>
 8008292:	4b62      	ldr	r3, [pc, #392]	; (800841c <HAL_RCC_OscConfig+0x688>)
 8008294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008296:	4b61      	ldr	r3, [pc, #388]	; (800841c <HAL_RCC_OscConfig+0x688>)
 8008298:	2180      	movs	r1, #128	; 0x80
 800829a:	00c9      	lsls	r1, r1, #3
 800829c:	430a      	orrs	r2, r1
 800829e:	651a      	str	r2, [r3, #80]	; 0x50
 80082a0:	4b5e      	ldr	r3, [pc, #376]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80082a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082a4:	4b5d      	ldr	r3, [pc, #372]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80082a6:	2180      	movs	r1, #128	; 0x80
 80082a8:	0049      	lsls	r1, r1, #1
 80082aa:	430a      	orrs	r2, r1
 80082ac:	651a      	str	r2, [r3, #80]	; 0x50
 80082ae:	e00b      	b.n	80082c8 <HAL_RCC_OscConfig+0x534>
 80082b0:	4b5a      	ldr	r3, [pc, #360]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80082b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082b4:	4b59      	ldr	r3, [pc, #356]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80082b6:	495b      	ldr	r1, [pc, #364]	; (8008424 <HAL_RCC_OscConfig+0x690>)
 80082b8:	400a      	ands	r2, r1
 80082ba:	651a      	str	r2, [r3, #80]	; 0x50
 80082bc:	4b57      	ldr	r3, [pc, #348]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80082be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082c0:	4b56      	ldr	r3, [pc, #344]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80082c2:	495a      	ldr	r1, [pc, #360]	; (800842c <HAL_RCC_OscConfig+0x698>)
 80082c4:	400a      	ands	r2, r1
 80082c6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d015      	beq.n	80082fc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082d0:	f7fd fe46 	bl	8005f60 <HAL_GetTick>
 80082d4:	0003      	movs	r3, r0
 80082d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082d8:	e009      	b.n	80082ee <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082da:	f7fd fe41 	bl	8005f60 <HAL_GetTick>
 80082de:	0002      	movs	r2, r0
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	4a52      	ldr	r2, [pc, #328]	; (8008430 <HAL_RCC_OscConfig+0x69c>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d901      	bls.n	80082ee <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e11b      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082ee:	4b4b      	ldr	r3, [pc, #300]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80082f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082f2:	2380      	movs	r3, #128	; 0x80
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4013      	ands	r3, r2
 80082f8:	d0ef      	beq.n	80082da <HAL_RCC_OscConfig+0x546>
 80082fa:	e014      	b.n	8008326 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082fc:	f7fd fe30 	bl	8005f60 <HAL_GetTick>
 8008300:	0003      	movs	r3, r0
 8008302:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008304:	e009      	b.n	800831a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008306:	f7fd fe2b 	bl	8005f60 <HAL_GetTick>
 800830a:	0002      	movs	r2, r0
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	4a47      	ldr	r2, [pc, #284]	; (8008430 <HAL_RCC_OscConfig+0x69c>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d901      	bls.n	800831a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	e105      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800831a:	4b40      	ldr	r3, [pc, #256]	; (800841c <HAL_RCC_OscConfig+0x688>)
 800831c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800831e:	2380      	movs	r3, #128	; 0x80
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4013      	ands	r3, r2
 8008324:	d1ef      	bne.n	8008306 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008326:	2323      	movs	r3, #35	; 0x23
 8008328:	18fb      	adds	r3, r7, r3
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d105      	bne.n	800833c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008330:	4b3a      	ldr	r3, [pc, #232]	; (800841c <HAL_RCC_OscConfig+0x688>)
 8008332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008334:	4b39      	ldr	r3, [pc, #228]	; (800841c <HAL_RCC_OscConfig+0x688>)
 8008336:	493f      	ldr	r1, [pc, #252]	; (8008434 <HAL_RCC_OscConfig+0x6a0>)
 8008338:	400a      	ands	r2, r1
 800833a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2220      	movs	r2, #32
 8008342:	4013      	ands	r3, r2
 8008344:	d049      	beq.n	80083da <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d026      	beq.n	800839c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800834e:	4b33      	ldr	r3, [pc, #204]	; (800841c <HAL_RCC_OscConfig+0x688>)
 8008350:	689a      	ldr	r2, [r3, #8]
 8008352:	4b32      	ldr	r3, [pc, #200]	; (800841c <HAL_RCC_OscConfig+0x688>)
 8008354:	2101      	movs	r1, #1
 8008356:	430a      	orrs	r2, r1
 8008358:	609a      	str	r2, [r3, #8]
 800835a:	4b30      	ldr	r3, [pc, #192]	; (800841c <HAL_RCC_OscConfig+0x688>)
 800835c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800835e:	4b2f      	ldr	r3, [pc, #188]	; (800841c <HAL_RCC_OscConfig+0x688>)
 8008360:	2101      	movs	r1, #1
 8008362:	430a      	orrs	r2, r1
 8008364:	635a      	str	r2, [r3, #52]	; 0x34
 8008366:	4b34      	ldr	r3, [pc, #208]	; (8008438 <HAL_RCC_OscConfig+0x6a4>)
 8008368:	6a1a      	ldr	r2, [r3, #32]
 800836a:	4b33      	ldr	r3, [pc, #204]	; (8008438 <HAL_RCC_OscConfig+0x6a4>)
 800836c:	2180      	movs	r1, #128	; 0x80
 800836e:	0189      	lsls	r1, r1, #6
 8008370:	430a      	orrs	r2, r1
 8008372:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008374:	f7fd fdf4 	bl	8005f60 <HAL_GetTick>
 8008378:	0003      	movs	r3, r0
 800837a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800837c:	e008      	b.n	8008390 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800837e:	f7fd fdef 	bl	8005f60 <HAL_GetTick>
 8008382:	0002      	movs	r2, r0
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	2b02      	cmp	r3, #2
 800838a:	d901      	bls.n	8008390 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e0ca      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008390:	4b22      	ldr	r3, [pc, #136]	; (800841c <HAL_RCC_OscConfig+0x688>)
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	2202      	movs	r2, #2
 8008396:	4013      	ands	r3, r2
 8008398:	d0f1      	beq.n	800837e <HAL_RCC_OscConfig+0x5ea>
 800839a:	e01e      	b.n	80083da <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800839c:	4b1f      	ldr	r3, [pc, #124]	; (800841c <HAL_RCC_OscConfig+0x688>)
 800839e:	689a      	ldr	r2, [r3, #8]
 80083a0:	4b1e      	ldr	r3, [pc, #120]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80083a2:	2101      	movs	r1, #1
 80083a4:	438a      	bics	r2, r1
 80083a6:	609a      	str	r2, [r3, #8]
 80083a8:	4b23      	ldr	r3, [pc, #140]	; (8008438 <HAL_RCC_OscConfig+0x6a4>)
 80083aa:	6a1a      	ldr	r2, [r3, #32]
 80083ac:	4b22      	ldr	r3, [pc, #136]	; (8008438 <HAL_RCC_OscConfig+0x6a4>)
 80083ae:	4923      	ldr	r1, [pc, #140]	; (800843c <HAL_RCC_OscConfig+0x6a8>)
 80083b0:	400a      	ands	r2, r1
 80083b2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083b4:	f7fd fdd4 	bl	8005f60 <HAL_GetTick>
 80083b8:	0003      	movs	r3, r0
 80083ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80083bc:	e008      	b.n	80083d0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083be:	f7fd fdcf 	bl	8005f60 <HAL_GetTick>
 80083c2:	0002      	movs	r2, r0
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d901      	bls.n	80083d0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e0aa      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80083d0:	4b12      	ldr	r3, [pc, #72]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	2202      	movs	r2, #2
 80083d6:	4013      	ands	r3, r2
 80083d8:	d1f1      	bne.n	80083be <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d100      	bne.n	80083e4 <HAL_RCC_OscConfig+0x650>
 80083e2:	e09f      	b.n	8008524 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	2b0c      	cmp	r3, #12
 80083e8:	d100      	bne.n	80083ec <HAL_RCC_OscConfig+0x658>
 80083ea:	e078      	b.n	80084de <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d159      	bne.n	80084a8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083f4:	4b09      	ldr	r3, [pc, #36]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	4b08      	ldr	r3, [pc, #32]	; (800841c <HAL_RCC_OscConfig+0x688>)
 80083fa:	4911      	ldr	r1, [pc, #68]	; (8008440 <HAL_RCC_OscConfig+0x6ac>)
 80083fc:	400a      	ands	r2, r1
 80083fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008400:	f7fd fdae 	bl	8005f60 <HAL_GetTick>
 8008404:	0003      	movs	r3, r0
 8008406:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008408:	e01c      	b.n	8008444 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800840a:	f7fd fda9 	bl	8005f60 <HAL_GetTick>
 800840e:	0002      	movs	r2, r0
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	2b02      	cmp	r3, #2
 8008416:	d915      	bls.n	8008444 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e084      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
 800841c:	40021000 	.word	0x40021000
 8008420:	ffff1fff 	.word	0xffff1fff
 8008424:	fffffeff 	.word	0xfffffeff
 8008428:	40007000 	.word	0x40007000
 800842c:	fffffbff 	.word	0xfffffbff
 8008430:	00001388 	.word	0x00001388
 8008434:	efffffff 	.word	0xefffffff
 8008438:	40010000 	.word	0x40010000
 800843c:	ffffdfff 	.word	0xffffdfff
 8008440:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008444:	4b3a      	ldr	r3, [pc, #232]	; (8008530 <HAL_RCC_OscConfig+0x79c>)
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	2380      	movs	r3, #128	; 0x80
 800844a:	049b      	lsls	r3, r3, #18
 800844c:	4013      	ands	r3, r2
 800844e:	d1dc      	bne.n	800840a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008450:	4b37      	ldr	r3, [pc, #220]	; (8008530 <HAL_RCC_OscConfig+0x79c>)
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	4a37      	ldr	r2, [pc, #220]	; (8008534 <HAL_RCC_OscConfig+0x7a0>)
 8008456:	4013      	ands	r3, r2
 8008458:	0019      	movs	r1, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008462:	431a      	orrs	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008468:	431a      	orrs	r2, r3
 800846a:	4b31      	ldr	r3, [pc, #196]	; (8008530 <HAL_RCC_OscConfig+0x79c>)
 800846c:	430a      	orrs	r2, r1
 800846e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008470:	4b2f      	ldr	r3, [pc, #188]	; (8008530 <HAL_RCC_OscConfig+0x79c>)
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	4b2e      	ldr	r3, [pc, #184]	; (8008530 <HAL_RCC_OscConfig+0x79c>)
 8008476:	2180      	movs	r1, #128	; 0x80
 8008478:	0449      	lsls	r1, r1, #17
 800847a:	430a      	orrs	r2, r1
 800847c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800847e:	f7fd fd6f 	bl	8005f60 <HAL_GetTick>
 8008482:	0003      	movs	r3, r0
 8008484:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008486:	e008      	b.n	800849a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008488:	f7fd fd6a 	bl	8005f60 <HAL_GetTick>
 800848c:	0002      	movs	r2, r0
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	2b02      	cmp	r3, #2
 8008494:	d901      	bls.n	800849a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e045      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800849a:	4b25      	ldr	r3, [pc, #148]	; (8008530 <HAL_RCC_OscConfig+0x79c>)
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	2380      	movs	r3, #128	; 0x80
 80084a0:	049b      	lsls	r3, r3, #18
 80084a2:	4013      	ands	r3, r2
 80084a4:	d0f0      	beq.n	8008488 <HAL_RCC_OscConfig+0x6f4>
 80084a6:	e03d      	b.n	8008524 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084a8:	4b21      	ldr	r3, [pc, #132]	; (8008530 <HAL_RCC_OscConfig+0x79c>)
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	4b20      	ldr	r3, [pc, #128]	; (8008530 <HAL_RCC_OscConfig+0x79c>)
 80084ae:	4922      	ldr	r1, [pc, #136]	; (8008538 <HAL_RCC_OscConfig+0x7a4>)
 80084b0:	400a      	ands	r2, r1
 80084b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084b4:	f7fd fd54 	bl	8005f60 <HAL_GetTick>
 80084b8:	0003      	movs	r3, r0
 80084ba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80084bc:	e008      	b.n	80084d0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084be:	f7fd fd4f 	bl	8005f60 <HAL_GetTick>
 80084c2:	0002      	movs	r2, r0
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d901      	bls.n	80084d0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e02a      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80084d0:	4b17      	ldr	r3, [pc, #92]	; (8008530 <HAL_RCC_OscConfig+0x79c>)
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	2380      	movs	r3, #128	; 0x80
 80084d6:	049b      	lsls	r3, r3, #18
 80084d8:	4013      	ands	r3, r2
 80084da:	d1f0      	bne.n	80084be <HAL_RCC_OscConfig+0x72a>
 80084dc:	e022      	b.n	8008524 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d101      	bne.n	80084ea <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e01d      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80084ea:	4b11      	ldr	r3, [pc, #68]	; (8008530 <HAL_RCC_OscConfig+0x79c>)
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084f0:	69ba      	ldr	r2, [r7, #24]
 80084f2:	2380      	movs	r3, #128	; 0x80
 80084f4:	025b      	lsls	r3, r3, #9
 80084f6:	401a      	ands	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d10f      	bne.n	8008520 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008500:	69ba      	ldr	r2, [r7, #24]
 8008502:	23f0      	movs	r3, #240	; 0xf0
 8008504:	039b      	lsls	r3, r3, #14
 8008506:	401a      	ands	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800850c:	429a      	cmp	r2, r3
 800850e:	d107      	bne.n	8008520 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	23c0      	movs	r3, #192	; 0xc0
 8008514:	041b      	lsls	r3, r3, #16
 8008516:	401a      	ands	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800851c:	429a      	cmp	r2, r3
 800851e:	d001      	beq.n	8008524 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e000      	b.n	8008526 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	0018      	movs	r0, r3
 8008528:	46bd      	mov	sp, r7
 800852a:	b00a      	add	sp, #40	; 0x28
 800852c:	bdb0      	pop	{r4, r5, r7, pc}
 800852e:	46c0      	nop			; (mov r8, r8)
 8008530:	40021000 	.word	0x40021000
 8008534:	ff02ffff 	.word	0xff02ffff
 8008538:	feffffff 	.word	0xfeffffff

0800853c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800853c:	b5b0      	push	{r4, r5, r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d101      	bne.n	8008550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e128      	b.n	80087a2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008550:	4b96      	ldr	r3, [pc, #600]	; (80087ac <HAL_RCC_ClockConfig+0x270>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2201      	movs	r2, #1
 8008556:	4013      	ands	r3, r2
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	429a      	cmp	r2, r3
 800855c:	d91e      	bls.n	800859c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800855e:	4b93      	ldr	r3, [pc, #588]	; (80087ac <HAL_RCC_ClockConfig+0x270>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2201      	movs	r2, #1
 8008564:	4393      	bics	r3, r2
 8008566:	0019      	movs	r1, r3
 8008568:	4b90      	ldr	r3, [pc, #576]	; (80087ac <HAL_RCC_ClockConfig+0x270>)
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	430a      	orrs	r2, r1
 800856e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008570:	f7fd fcf6 	bl	8005f60 <HAL_GetTick>
 8008574:	0003      	movs	r3, r0
 8008576:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008578:	e009      	b.n	800858e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800857a:	f7fd fcf1 	bl	8005f60 <HAL_GetTick>
 800857e:	0002      	movs	r2, r0
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	4a8a      	ldr	r2, [pc, #552]	; (80087b0 <HAL_RCC_ClockConfig+0x274>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d901      	bls.n	800858e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e109      	b.n	80087a2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800858e:	4b87      	ldr	r3, [pc, #540]	; (80087ac <HAL_RCC_ClockConfig+0x270>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2201      	movs	r2, #1
 8008594:	4013      	ands	r3, r2
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	429a      	cmp	r2, r3
 800859a:	d1ee      	bne.n	800857a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2202      	movs	r2, #2
 80085a2:	4013      	ands	r3, r2
 80085a4:	d009      	beq.n	80085ba <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085a6:	4b83      	ldr	r3, [pc, #524]	; (80087b4 <HAL_RCC_ClockConfig+0x278>)
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	22f0      	movs	r2, #240	; 0xf0
 80085ac:	4393      	bics	r3, r2
 80085ae:	0019      	movs	r1, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689a      	ldr	r2, [r3, #8]
 80085b4:	4b7f      	ldr	r3, [pc, #508]	; (80087b4 <HAL_RCC_ClockConfig+0x278>)
 80085b6:	430a      	orrs	r2, r1
 80085b8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2201      	movs	r2, #1
 80085c0:	4013      	ands	r3, r2
 80085c2:	d100      	bne.n	80085c6 <HAL_RCC_ClockConfig+0x8a>
 80085c4:	e089      	b.n	80086da <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d107      	bne.n	80085de <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085ce:	4b79      	ldr	r3, [pc, #484]	; (80087b4 <HAL_RCC_ClockConfig+0x278>)
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	2380      	movs	r3, #128	; 0x80
 80085d4:	029b      	lsls	r3, r3, #10
 80085d6:	4013      	ands	r3, r2
 80085d8:	d120      	bne.n	800861c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e0e1      	b.n	80087a2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	d107      	bne.n	80085f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085e6:	4b73      	ldr	r3, [pc, #460]	; (80087b4 <HAL_RCC_ClockConfig+0x278>)
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	2380      	movs	r3, #128	; 0x80
 80085ec:	049b      	lsls	r3, r3, #18
 80085ee:	4013      	ands	r3, r2
 80085f0:	d114      	bne.n	800861c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e0d5      	b.n	80087a2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d106      	bne.n	800860c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085fe:	4b6d      	ldr	r3, [pc, #436]	; (80087b4 <HAL_RCC_ClockConfig+0x278>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2204      	movs	r2, #4
 8008604:	4013      	ands	r3, r2
 8008606:	d109      	bne.n	800861c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e0ca      	b.n	80087a2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800860c:	4b69      	ldr	r3, [pc, #420]	; (80087b4 <HAL_RCC_ClockConfig+0x278>)
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	2380      	movs	r3, #128	; 0x80
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4013      	ands	r3, r2
 8008616:	d101      	bne.n	800861c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e0c2      	b.n	80087a2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800861c:	4b65      	ldr	r3, [pc, #404]	; (80087b4 <HAL_RCC_ClockConfig+0x278>)
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	2203      	movs	r2, #3
 8008622:	4393      	bics	r3, r2
 8008624:	0019      	movs	r1, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685a      	ldr	r2, [r3, #4]
 800862a:	4b62      	ldr	r3, [pc, #392]	; (80087b4 <HAL_RCC_ClockConfig+0x278>)
 800862c:	430a      	orrs	r2, r1
 800862e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008630:	f7fd fc96 	bl	8005f60 <HAL_GetTick>
 8008634:	0003      	movs	r3, r0
 8008636:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	2b02      	cmp	r3, #2
 800863e:	d111      	bne.n	8008664 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008640:	e009      	b.n	8008656 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008642:	f7fd fc8d 	bl	8005f60 <HAL_GetTick>
 8008646:	0002      	movs	r2, r0
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	4a58      	ldr	r2, [pc, #352]	; (80087b0 <HAL_RCC_ClockConfig+0x274>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d901      	bls.n	8008656 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e0a5      	b.n	80087a2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008656:	4b57      	ldr	r3, [pc, #348]	; (80087b4 <HAL_RCC_ClockConfig+0x278>)
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	220c      	movs	r2, #12
 800865c:	4013      	ands	r3, r2
 800865e:	2b08      	cmp	r3, #8
 8008660:	d1ef      	bne.n	8008642 <HAL_RCC_ClockConfig+0x106>
 8008662:	e03a      	b.n	80086da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	2b03      	cmp	r3, #3
 800866a:	d111      	bne.n	8008690 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800866c:	e009      	b.n	8008682 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800866e:	f7fd fc77 	bl	8005f60 <HAL_GetTick>
 8008672:	0002      	movs	r2, r0
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	4a4d      	ldr	r2, [pc, #308]	; (80087b0 <HAL_RCC_ClockConfig+0x274>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d901      	bls.n	8008682 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e08f      	b.n	80087a2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008682:	4b4c      	ldr	r3, [pc, #304]	; (80087b4 <HAL_RCC_ClockConfig+0x278>)
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	220c      	movs	r2, #12
 8008688:	4013      	ands	r3, r2
 800868a:	2b0c      	cmp	r3, #12
 800868c:	d1ef      	bne.n	800866e <HAL_RCC_ClockConfig+0x132>
 800868e:	e024      	b.n	80086da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d11b      	bne.n	80086d0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008698:	e009      	b.n	80086ae <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800869a:	f7fd fc61 	bl	8005f60 <HAL_GetTick>
 800869e:	0002      	movs	r2, r0
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	4a42      	ldr	r2, [pc, #264]	; (80087b0 <HAL_RCC_ClockConfig+0x274>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d901      	bls.n	80086ae <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e079      	b.n	80087a2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80086ae:	4b41      	ldr	r3, [pc, #260]	; (80087b4 <HAL_RCC_ClockConfig+0x278>)
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	220c      	movs	r2, #12
 80086b4:	4013      	ands	r3, r2
 80086b6:	2b04      	cmp	r3, #4
 80086b8:	d1ef      	bne.n	800869a <HAL_RCC_ClockConfig+0x15e>
 80086ba:	e00e      	b.n	80086da <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086bc:	f7fd fc50 	bl	8005f60 <HAL_GetTick>
 80086c0:	0002      	movs	r2, r0
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	4a3a      	ldr	r2, [pc, #232]	; (80087b0 <HAL_RCC_ClockConfig+0x274>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d901      	bls.n	80086d0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e068      	b.n	80087a2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80086d0:	4b38      	ldr	r3, [pc, #224]	; (80087b4 <HAL_RCC_ClockConfig+0x278>)
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	220c      	movs	r2, #12
 80086d6:	4013      	ands	r3, r2
 80086d8:	d1f0      	bne.n	80086bc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80086da:	4b34      	ldr	r3, [pc, #208]	; (80087ac <HAL_RCC_ClockConfig+0x270>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2201      	movs	r2, #1
 80086e0:	4013      	ands	r3, r2
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d21e      	bcs.n	8008726 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086e8:	4b30      	ldr	r3, [pc, #192]	; (80087ac <HAL_RCC_ClockConfig+0x270>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2201      	movs	r2, #1
 80086ee:	4393      	bics	r3, r2
 80086f0:	0019      	movs	r1, r3
 80086f2:	4b2e      	ldr	r3, [pc, #184]	; (80087ac <HAL_RCC_ClockConfig+0x270>)
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	430a      	orrs	r2, r1
 80086f8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80086fa:	f7fd fc31 	bl	8005f60 <HAL_GetTick>
 80086fe:	0003      	movs	r3, r0
 8008700:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008702:	e009      	b.n	8008718 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008704:	f7fd fc2c 	bl	8005f60 <HAL_GetTick>
 8008708:	0002      	movs	r2, r0
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	4a28      	ldr	r2, [pc, #160]	; (80087b0 <HAL_RCC_ClockConfig+0x274>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d901      	bls.n	8008718 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e044      	b.n	80087a2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008718:	4b24      	ldr	r3, [pc, #144]	; (80087ac <HAL_RCC_ClockConfig+0x270>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2201      	movs	r2, #1
 800871e:	4013      	ands	r3, r2
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	429a      	cmp	r2, r3
 8008724:	d1ee      	bne.n	8008704 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2204      	movs	r2, #4
 800872c:	4013      	ands	r3, r2
 800872e:	d009      	beq.n	8008744 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008730:	4b20      	ldr	r3, [pc, #128]	; (80087b4 <HAL_RCC_ClockConfig+0x278>)
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	4a20      	ldr	r2, [pc, #128]	; (80087b8 <HAL_RCC_ClockConfig+0x27c>)
 8008736:	4013      	ands	r3, r2
 8008738:	0019      	movs	r1, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68da      	ldr	r2, [r3, #12]
 800873e:	4b1d      	ldr	r3, [pc, #116]	; (80087b4 <HAL_RCC_ClockConfig+0x278>)
 8008740:	430a      	orrs	r2, r1
 8008742:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2208      	movs	r2, #8
 800874a:	4013      	ands	r3, r2
 800874c:	d00a      	beq.n	8008764 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800874e:	4b19      	ldr	r3, [pc, #100]	; (80087b4 <HAL_RCC_ClockConfig+0x278>)
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	4a1a      	ldr	r2, [pc, #104]	; (80087bc <HAL_RCC_ClockConfig+0x280>)
 8008754:	4013      	ands	r3, r2
 8008756:	0019      	movs	r1, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	00da      	lsls	r2, r3, #3
 800875e:	4b15      	ldr	r3, [pc, #84]	; (80087b4 <HAL_RCC_ClockConfig+0x278>)
 8008760:	430a      	orrs	r2, r1
 8008762:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008764:	f000 f832 	bl	80087cc <HAL_RCC_GetSysClockFreq>
 8008768:	0001      	movs	r1, r0
 800876a:	4b12      	ldr	r3, [pc, #72]	; (80087b4 <HAL_RCC_ClockConfig+0x278>)
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	091b      	lsrs	r3, r3, #4
 8008770:	220f      	movs	r2, #15
 8008772:	4013      	ands	r3, r2
 8008774:	4a12      	ldr	r2, [pc, #72]	; (80087c0 <HAL_RCC_ClockConfig+0x284>)
 8008776:	5cd3      	ldrb	r3, [r2, r3]
 8008778:	000a      	movs	r2, r1
 800877a:	40da      	lsrs	r2, r3
 800877c:	4b11      	ldr	r3, [pc, #68]	; (80087c4 <HAL_RCC_ClockConfig+0x288>)
 800877e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008780:	4b11      	ldr	r3, [pc, #68]	; (80087c8 <HAL_RCC_ClockConfig+0x28c>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	250b      	movs	r5, #11
 8008786:	197c      	adds	r4, r7, r5
 8008788:	0018      	movs	r0, r3
 800878a:	f7fd fba3 	bl	8005ed4 <HAL_InitTick>
 800878e:	0003      	movs	r3, r0
 8008790:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8008792:	197b      	adds	r3, r7, r5
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800879a:	197b      	adds	r3, r7, r5
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	e000      	b.n	80087a2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	0018      	movs	r0, r3
 80087a4:	46bd      	mov	sp, r7
 80087a6:	b004      	add	sp, #16
 80087a8:	bdb0      	pop	{r4, r5, r7, pc}
 80087aa:	46c0      	nop			; (mov r8, r8)
 80087ac:	40022000 	.word	0x40022000
 80087b0:	00001388 	.word	0x00001388
 80087b4:	40021000 	.word	0x40021000
 80087b8:	fffff8ff 	.word	0xfffff8ff
 80087bc:	ffffc7ff 	.word	0xffffc7ff
 80087c0:	080136a8 	.word	0x080136a8
 80087c4:	20000038 	.word	0x20000038
 80087c8:	2000003c 	.word	0x2000003c

080087cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087cc:	b5b0      	push	{r4, r5, r7, lr}
 80087ce:	b08e      	sub	sp, #56	; 0x38
 80087d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80087d2:	4b4c      	ldr	r3, [pc, #304]	; (8008904 <HAL_RCC_GetSysClockFreq+0x138>)
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80087d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087da:	230c      	movs	r3, #12
 80087dc:	4013      	ands	r3, r2
 80087de:	2b0c      	cmp	r3, #12
 80087e0:	d014      	beq.n	800880c <HAL_RCC_GetSysClockFreq+0x40>
 80087e2:	d900      	bls.n	80087e6 <HAL_RCC_GetSysClockFreq+0x1a>
 80087e4:	e07b      	b.n	80088de <HAL_RCC_GetSysClockFreq+0x112>
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	d002      	beq.n	80087f0 <HAL_RCC_GetSysClockFreq+0x24>
 80087ea:	2b08      	cmp	r3, #8
 80087ec:	d00b      	beq.n	8008806 <HAL_RCC_GetSysClockFreq+0x3a>
 80087ee:	e076      	b.n	80088de <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80087f0:	4b44      	ldr	r3, [pc, #272]	; (8008904 <HAL_RCC_GetSysClockFreq+0x138>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2210      	movs	r2, #16
 80087f6:	4013      	ands	r3, r2
 80087f8:	d002      	beq.n	8008800 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80087fa:	4b43      	ldr	r3, [pc, #268]	; (8008908 <HAL_RCC_GetSysClockFreq+0x13c>)
 80087fc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80087fe:	e07c      	b.n	80088fa <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8008800:	4b42      	ldr	r3, [pc, #264]	; (800890c <HAL_RCC_GetSysClockFreq+0x140>)
 8008802:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008804:	e079      	b.n	80088fa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008806:	4b42      	ldr	r3, [pc, #264]	; (8008910 <HAL_RCC_GetSysClockFreq+0x144>)
 8008808:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800880a:	e076      	b.n	80088fa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800880c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880e:	0c9a      	lsrs	r2, r3, #18
 8008810:	230f      	movs	r3, #15
 8008812:	401a      	ands	r2, r3
 8008814:	4b3f      	ldr	r3, [pc, #252]	; (8008914 <HAL_RCC_GetSysClockFreq+0x148>)
 8008816:	5c9b      	ldrb	r3, [r3, r2]
 8008818:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800881a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881c:	0d9a      	lsrs	r2, r3, #22
 800881e:	2303      	movs	r3, #3
 8008820:	4013      	ands	r3, r2
 8008822:	3301      	adds	r3, #1
 8008824:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008826:	4b37      	ldr	r3, [pc, #220]	; (8008904 <HAL_RCC_GetSysClockFreq+0x138>)
 8008828:	68da      	ldr	r2, [r3, #12]
 800882a:	2380      	movs	r3, #128	; 0x80
 800882c:	025b      	lsls	r3, r3, #9
 800882e:	4013      	ands	r3, r2
 8008830:	d01a      	beq.n	8008868 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008834:	61bb      	str	r3, [r7, #24]
 8008836:	2300      	movs	r3, #0
 8008838:	61fb      	str	r3, [r7, #28]
 800883a:	4a35      	ldr	r2, [pc, #212]	; (8008910 <HAL_RCC_GetSysClockFreq+0x144>)
 800883c:	2300      	movs	r3, #0
 800883e:	69b8      	ldr	r0, [r7, #24]
 8008840:	69f9      	ldr	r1, [r7, #28]
 8008842:	f7f7 fe95 	bl	8000570 <__aeabi_lmul>
 8008846:	0002      	movs	r2, r0
 8008848:	000b      	movs	r3, r1
 800884a:	0010      	movs	r0, r2
 800884c:	0019      	movs	r1, r3
 800884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008850:	613b      	str	r3, [r7, #16]
 8008852:	2300      	movs	r3, #0
 8008854:	617b      	str	r3, [r7, #20]
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f7f7 fe69 	bl	8000530 <__aeabi_uldivmod>
 800885e:	0002      	movs	r2, r0
 8008860:	000b      	movs	r3, r1
 8008862:	0013      	movs	r3, r2
 8008864:	637b      	str	r3, [r7, #52]	; 0x34
 8008866:	e037      	b.n	80088d8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008868:	4b26      	ldr	r3, [pc, #152]	; (8008904 <HAL_RCC_GetSysClockFreq+0x138>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2210      	movs	r2, #16
 800886e:	4013      	ands	r3, r2
 8008870:	d01a      	beq.n	80088a8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	60bb      	str	r3, [r7, #8]
 8008876:	2300      	movs	r3, #0
 8008878:	60fb      	str	r3, [r7, #12]
 800887a:	4a23      	ldr	r2, [pc, #140]	; (8008908 <HAL_RCC_GetSysClockFreq+0x13c>)
 800887c:	2300      	movs	r3, #0
 800887e:	68b8      	ldr	r0, [r7, #8]
 8008880:	68f9      	ldr	r1, [r7, #12]
 8008882:	f7f7 fe75 	bl	8000570 <__aeabi_lmul>
 8008886:	0002      	movs	r2, r0
 8008888:	000b      	movs	r3, r1
 800888a:	0010      	movs	r0, r2
 800888c:	0019      	movs	r1, r3
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	603b      	str	r3, [r7, #0]
 8008892:	2300      	movs	r3, #0
 8008894:	607b      	str	r3, [r7, #4]
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f7f7 fe49 	bl	8000530 <__aeabi_uldivmod>
 800889e:	0002      	movs	r2, r0
 80088a0:	000b      	movs	r3, r1
 80088a2:	0013      	movs	r3, r2
 80088a4:	637b      	str	r3, [r7, #52]	; 0x34
 80088a6:	e017      	b.n	80088d8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	0018      	movs	r0, r3
 80088ac:	2300      	movs	r3, #0
 80088ae:	0019      	movs	r1, r3
 80088b0:	4a16      	ldr	r2, [pc, #88]	; (800890c <HAL_RCC_GetSysClockFreq+0x140>)
 80088b2:	2300      	movs	r3, #0
 80088b4:	f7f7 fe5c 	bl	8000570 <__aeabi_lmul>
 80088b8:	0002      	movs	r2, r0
 80088ba:	000b      	movs	r3, r1
 80088bc:	0010      	movs	r0, r2
 80088be:	0019      	movs	r1, r3
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	001c      	movs	r4, r3
 80088c4:	2300      	movs	r3, #0
 80088c6:	001d      	movs	r5, r3
 80088c8:	0022      	movs	r2, r4
 80088ca:	002b      	movs	r3, r5
 80088cc:	f7f7 fe30 	bl	8000530 <__aeabi_uldivmod>
 80088d0:	0002      	movs	r2, r0
 80088d2:	000b      	movs	r3, r1
 80088d4:	0013      	movs	r3, r2
 80088d6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80088d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80088dc:	e00d      	b.n	80088fa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80088de:	4b09      	ldr	r3, [pc, #36]	; (8008904 <HAL_RCC_GetSysClockFreq+0x138>)
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	0b5b      	lsrs	r3, r3, #13
 80088e4:	2207      	movs	r2, #7
 80088e6:	4013      	ands	r3, r2
 80088e8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	3301      	adds	r3, #1
 80088ee:	2280      	movs	r2, #128	; 0x80
 80088f0:	0212      	lsls	r2, r2, #8
 80088f2:	409a      	lsls	r2, r3
 80088f4:	0013      	movs	r3, r2
 80088f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80088f8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80088fc:	0018      	movs	r0, r3
 80088fe:	46bd      	mov	sp, r7
 8008900:	b00e      	add	sp, #56	; 0x38
 8008902:	bdb0      	pop	{r4, r5, r7, pc}
 8008904:	40021000 	.word	0x40021000
 8008908:	003d0900 	.word	0x003d0900
 800890c:	00f42400 	.word	0x00f42400
 8008910:	007a1200 	.word	0x007a1200
 8008914:	080136c0 	.word	0x080136c0

08008918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800891c:	4b02      	ldr	r3, [pc, #8]	; (8008928 <HAL_RCC_GetHCLKFreq+0x10>)
 800891e:	681b      	ldr	r3, [r3, #0]
}
 8008920:	0018      	movs	r0, r3
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	46c0      	nop			; (mov r8, r8)
 8008928:	20000038 	.word	0x20000038

0800892c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008930:	f7ff fff2 	bl	8008918 <HAL_RCC_GetHCLKFreq>
 8008934:	0001      	movs	r1, r0
 8008936:	4b06      	ldr	r3, [pc, #24]	; (8008950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	0a1b      	lsrs	r3, r3, #8
 800893c:	2207      	movs	r2, #7
 800893e:	4013      	ands	r3, r2
 8008940:	4a04      	ldr	r2, [pc, #16]	; (8008954 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008942:	5cd3      	ldrb	r3, [r2, r3]
 8008944:	40d9      	lsrs	r1, r3
 8008946:	000b      	movs	r3, r1
}
 8008948:	0018      	movs	r0, r3
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	46c0      	nop			; (mov r8, r8)
 8008950:	40021000 	.word	0x40021000
 8008954:	080136b8 	.word	0x080136b8

08008958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800895c:	f7ff ffdc 	bl	8008918 <HAL_RCC_GetHCLKFreq>
 8008960:	0001      	movs	r1, r0
 8008962:	4b06      	ldr	r3, [pc, #24]	; (800897c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	0adb      	lsrs	r3, r3, #11
 8008968:	2207      	movs	r2, #7
 800896a:	4013      	ands	r3, r2
 800896c:	4a04      	ldr	r2, [pc, #16]	; (8008980 <HAL_RCC_GetPCLK2Freq+0x28>)
 800896e:	5cd3      	ldrb	r3, [r2, r3]
 8008970:	40d9      	lsrs	r1, r3
 8008972:	000b      	movs	r3, r1
}
 8008974:	0018      	movs	r0, r3
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	46c0      	nop			; (mov r8, r8)
 800897c:	40021000 	.word	0x40021000
 8008980:	080136b8 	.word	0x080136b8

08008984 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800898c:	2017      	movs	r0, #23
 800898e:	183b      	adds	r3, r7, r0
 8008990:	2200      	movs	r2, #0
 8008992:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2220      	movs	r2, #32
 800899a:	4013      	ands	r3, r2
 800899c:	d100      	bne.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800899e:	e0c7      	b.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089a0:	4b9b      	ldr	r3, [pc, #620]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80089a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089a4:	2380      	movs	r3, #128	; 0x80
 80089a6:	055b      	lsls	r3, r3, #21
 80089a8:	4013      	ands	r3, r2
 80089aa:	d109      	bne.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089ac:	4b98      	ldr	r3, [pc, #608]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80089ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089b0:	4b97      	ldr	r3, [pc, #604]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80089b2:	2180      	movs	r1, #128	; 0x80
 80089b4:	0549      	lsls	r1, r1, #21
 80089b6:	430a      	orrs	r2, r1
 80089b8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80089ba:	183b      	adds	r3, r7, r0
 80089bc:	2201      	movs	r2, #1
 80089be:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089c0:	4b94      	ldr	r3, [pc, #592]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	2380      	movs	r3, #128	; 0x80
 80089c6:	005b      	lsls	r3, r3, #1
 80089c8:	4013      	ands	r3, r2
 80089ca:	d11a      	bne.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089cc:	4b91      	ldr	r3, [pc, #580]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	4b90      	ldr	r3, [pc, #576]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80089d2:	2180      	movs	r1, #128	; 0x80
 80089d4:	0049      	lsls	r1, r1, #1
 80089d6:	430a      	orrs	r2, r1
 80089d8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089da:	f7fd fac1 	bl	8005f60 <HAL_GetTick>
 80089de:	0003      	movs	r3, r0
 80089e0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089e2:	e008      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089e4:	f7fd fabc 	bl	8005f60 <HAL_GetTick>
 80089e8:	0002      	movs	r2, r0
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	2b64      	cmp	r3, #100	; 0x64
 80089f0:	d901      	bls.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80089f2:	2303      	movs	r3, #3
 80089f4:	e107      	b.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089f6:	4b87      	ldr	r3, [pc, #540]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	2380      	movs	r3, #128	; 0x80
 80089fc:	005b      	lsls	r3, r3, #1
 80089fe:	4013      	ands	r3, r2
 8008a00:	d0f0      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8008a02:	4b83      	ldr	r3, [pc, #524]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	23c0      	movs	r3, #192	; 0xc0
 8008a08:	039b      	lsls	r3, r3, #14
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	23c0      	movs	r3, #192	; 0xc0
 8008a14:	039b      	lsls	r3, r3, #14
 8008a16:	4013      	ands	r3, r2
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d013      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	23c0      	movs	r3, #192	; 0xc0
 8008a24:	029b      	lsls	r3, r3, #10
 8008a26:	401a      	ands	r2, r3
 8008a28:	23c0      	movs	r3, #192	; 0xc0
 8008a2a:	029b      	lsls	r3, r3, #10
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d10a      	bne.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a30:	4b77      	ldr	r3, [pc, #476]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	2380      	movs	r3, #128	; 0x80
 8008a36:	029b      	lsls	r3, r3, #10
 8008a38:	401a      	ands	r2, r3
 8008a3a:	2380      	movs	r3, #128	; 0x80
 8008a3c:	029b      	lsls	r3, r3, #10
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d101      	bne.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e0df      	b.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8008a46:	4b72      	ldr	r3, [pc, #456]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008a48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a4a:	23c0      	movs	r3, #192	; 0xc0
 8008a4c:	029b      	lsls	r3, r3, #10
 8008a4e:	4013      	ands	r3, r2
 8008a50:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d03b      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	23c0      	movs	r3, #192	; 0xc0
 8008a5e:	029b      	lsls	r3, r3, #10
 8008a60:	4013      	ands	r3, r2
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d033      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2220      	movs	r2, #32
 8008a6e:	4013      	ands	r3, r2
 8008a70:	d02e      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8008a72:	4b67      	ldr	r3, [pc, #412]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a76:	4a68      	ldr	r2, [pc, #416]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008a78:	4013      	ands	r3, r2
 8008a7a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008a7c:	4b64      	ldr	r3, [pc, #400]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008a7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a80:	4b63      	ldr	r3, [pc, #396]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008a82:	2180      	movs	r1, #128	; 0x80
 8008a84:	0309      	lsls	r1, r1, #12
 8008a86:	430a      	orrs	r2, r1
 8008a88:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008a8a:	4b61      	ldr	r3, [pc, #388]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008a8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a8e:	4b60      	ldr	r3, [pc, #384]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008a90:	4962      	ldr	r1, [pc, #392]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8008a92:	400a      	ands	r2, r1
 8008a94:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8008a96:	4b5e      	ldr	r3, [pc, #376]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	2380      	movs	r3, #128	; 0x80
 8008aa0:	005b      	lsls	r3, r3, #1
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	d014      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008aa6:	f7fd fa5b 	bl	8005f60 <HAL_GetTick>
 8008aaa:	0003      	movs	r3, r0
 8008aac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008aae:	e009      	b.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ab0:	f7fd fa56 	bl	8005f60 <HAL_GetTick>
 8008ab4:	0002      	movs	r2, r0
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	4a59      	ldr	r2, [pc, #356]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d901      	bls.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e0a0      	b.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ac4:	4b52      	ldr	r3, [pc, #328]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008ac6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ac8:	2380      	movs	r3, #128	; 0x80
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4013      	ands	r3, r2
 8008ace:	d0ef      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	d01f      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	23c0      	movs	r3, #192	; 0xc0
 8008ae0:	029b      	lsls	r3, r3, #10
 8008ae2:	401a      	ands	r2, r3
 8008ae4:	23c0      	movs	r3, #192	; 0xc0
 8008ae6:	029b      	lsls	r3, r3, #10
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d10c      	bne.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8008aec:	4b48      	ldr	r3, [pc, #288]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a4c      	ldr	r2, [pc, #304]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8008af2:	4013      	ands	r3, r2
 8008af4:	0019      	movs	r1, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	685a      	ldr	r2, [r3, #4]
 8008afa:	23c0      	movs	r3, #192	; 0xc0
 8008afc:	039b      	lsls	r3, r3, #14
 8008afe:	401a      	ands	r2, r3
 8008b00:	4b43      	ldr	r3, [pc, #268]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008b02:	430a      	orrs	r2, r1
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	4b42      	ldr	r3, [pc, #264]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008b08:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	685a      	ldr	r2, [r3, #4]
 8008b0e:	23c0      	movs	r3, #192	; 0xc0
 8008b10:	029b      	lsls	r3, r3, #10
 8008b12:	401a      	ands	r2, r3
 8008b14:	4b3e      	ldr	r3, [pc, #248]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008b16:	430a      	orrs	r2, r1
 8008b18:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008b1a:	2317      	movs	r3, #23
 8008b1c:	18fb      	adds	r3, r7, r3
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d105      	bne.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b24:	4b3a      	ldr	r3, [pc, #232]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b28:	4b39      	ldr	r3, [pc, #228]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008b2a:	493f      	ldr	r1, [pc, #252]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8008b2c:	400a      	ands	r2, r1
 8008b2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2201      	movs	r2, #1
 8008b36:	4013      	ands	r3, r2
 8008b38:	d009      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008b3a:	4b35      	ldr	r3, [pc, #212]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b3e:	2203      	movs	r2, #3
 8008b40:	4393      	bics	r3, r2
 8008b42:	0019      	movs	r1, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	689a      	ldr	r2, [r3, #8]
 8008b48:	4b31      	ldr	r3, [pc, #196]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2202      	movs	r2, #2
 8008b54:	4013      	ands	r3, r2
 8008b56:	d009      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008b58:	4b2d      	ldr	r3, [pc, #180]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b5c:	220c      	movs	r2, #12
 8008b5e:	4393      	bics	r3, r2
 8008b60:	0019      	movs	r1, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	68da      	ldr	r2, [r3, #12]
 8008b66:	4b2a      	ldr	r3, [pc, #168]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008b68:	430a      	orrs	r2, r1
 8008b6a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2204      	movs	r2, #4
 8008b72:	4013      	ands	r3, r2
 8008b74:	d009      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b76:	4b26      	ldr	r3, [pc, #152]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b7a:	4a2c      	ldr	r2, [pc, #176]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	0019      	movs	r1, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	691a      	ldr	r2, [r3, #16]
 8008b84:	4b22      	ldr	r3, [pc, #136]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008b86:	430a      	orrs	r2, r1
 8008b88:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2208      	movs	r2, #8
 8008b90:	4013      	ands	r3, r2
 8008b92:	d009      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b94:	4b1e      	ldr	r3, [pc, #120]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b98:	4a25      	ldr	r2, [pc, #148]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	0019      	movs	r1, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	695a      	ldr	r2, [r3, #20]
 8008ba2:	4b1b      	ldr	r3, [pc, #108]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	2380      	movs	r3, #128	; 0x80
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	d009      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008bb4:	4b16      	ldr	r3, [pc, #88]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bb8:	4a17      	ldr	r2, [pc, #92]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008bba:	4013      	ands	r3, r2
 8008bbc:	0019      	movs	r1, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	699a      	ldr	r2, [r3, #24]
 8008bc2:	4b13      	ldr	r3, [pc, #76]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2240      	movs	r2, #64	; 0x40
 8008bce:	4013      	ands	r3, r2
 8008bd0:	d009      	beq.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008bd2:	4b0f      	ldr	r3, [pc, #60]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bd6:	4a17      	ldr	r2, [pc, #92]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8008bd8:	4013      	ands	r3, r2
 8008bda:	0019      	movs	r1, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a1a      	ldr	r2, [r3, #32]
 8008be0:	4b0b      	ldr	r3, [pc, #44]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008be2:	430a      	orrs	r2, r1
 8008be4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2280      	movs	r2, #128	; 0x80
 8008bec:	4013      	ands	r3, r2
 8008bee:	d009      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8008bf0:	4b07      	ldr	r3, [pc, #28]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bf4:	4a10      	ldr	r2, [pc, #64]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	0019      	movs	r1, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	69da      	ldr	r2, [r3, #28]
 8008bfe:	4b04      	ldr	r3, [pc, #16]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008c00:	430a      	orrs	r2, r1
 8008c02:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	0018      	movs	r0, r3
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	b006      	add	sp, #24
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	46c0      	nop			; (mov r8, r8)
 8008c10:	40021000 	.word	0x40021000
 8008c14:	40007000 	.word	0x40007000
 8008c18:	fffcffff 	.word	0xfffcffff
 8008c1c:	fff7ffff 	.word	0xfff7ffff
 8008c20:	00001388 	.word	0x00001388
 8008c24:	ffcfffff 	.word	0xffcfffff
 8008c28:	efffffff 	.word	0xefffffff
 8008c2c:	fffff3ff 	.word	0xfffff3ff
 8008c30:	ffffcfff 	.word	0xffffcfff
 8008c34:	fbffffff 	.word	0xfbffffff
 8008c38:	fff3ffff 	.word	0xfff3ffff

08008c3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e083      	b.n	8008d56 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d109      	bne.n	8008c6a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685a      	ldr	r2, [r3, #4]
 8008c5a:	2382      	movs	r3, #130	; 0x82
 8008c5c:	005b      	lsls	r3, r3, #1
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d009      	beq.n	8008c76 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	61da      	str	r2, [r3, #28]
 8008c68:	e005      	b.n	8008c76 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2251      	movs	r2, #81	; 0x51
 8008c80:	5c9b      	ldrb	r3, [r3, r2]
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d107      	bne.n	8008c98 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2250      	movs	r2, #80	; 0x50
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	0018      	movs	r0, r3
 8008c94:	f7fc fa0e 	bl	80050b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2251      	movs	r2, #81	; 0x51
 8008c9c:	2102      	movs	r1, #2
 8008c9e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2140      	movs	r1, #64	; 0x40
 8008cac:	438a      	bics	r2, r1
 8008cae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	2382      	movs	r3, #130	; 0x82
 8008cb6:	005b      	lsls	r3, r3, #1
 8008cb8:	401a      	ands	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6899      	ldr	r1, [r3, #8]
 8008cbe:	2384      	movs	r3, #132	; 0x84
 8008cc0:	021b      	lsls	r3, r3, #8
 8008cc2:	400b      	ands	r3, r1
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68d9      	ldr	r1, [r3, #12]
 8008cca:	2380      	movs	r3, #128	; 0x80
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	400b      	ands	r3, r1
 8008cd0:	431a      	orrs	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	2102      	movs	r1, #2
 8008cd8:	400b      	ands	r3, r1
 8008cda:	431a      	orrs	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	695b      	ldr	r3, [r3, #20]
 8008ce0:	2101      	movs	r1, #1
 8008ce2:	400b      	ands	r3, r1
 8008ce4:	431a      	orrs	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6999      	ldr	r1, [r3, #24]
 8008cea:	2380      	movs	r3, #128	; 0x80
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	400b      	ands	r3, r1
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	69db      	ldr	r3, [r3, #28]
 8008cf6:	2138      	movs	r1, #56	; 0x38
 8008cf8:	400b      	ands	r3, r1
 8008cfa:	431a      	orrs	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a1b      	ldr	r3, [r3, #32]
 8008d00:	2180      	movs	r1, #128	; 0x80
 8008d02:	400b      	ands	r3, r1
 8008d04:	431a      	orrs	r2, r3
 8008d06:	0011      	movs	r1, r2
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d0c:	2380      	movs	r3, #128	; 0x80
 8008d0e:	019b      	lsls	r3, r3, #6
 8008d10:	401a      	ands	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	430a      	orrs	r2, r1
 8008d18:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	0c1b      	lsrs	r3, r3, #16
 8008d20:	2204      	movs	r2, #4
 8008d22:	4013      	ands	r3, r2
 8008d24:	0019      	movs	r1, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2a:	2210      	movs	r2, #16
 8008d2c:	401a      	ands	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	430a      	orrs	r2, r1
 8008d34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	69da      	ldr	r2, [r3, #28]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4907      	ldr	r1, [pc, #28]	; (8008d60 <HAL_SPI_Init+0x124>)
 8008d42:	400a      	ands	r2, r1
 8008d44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2251      	movs	r2, #81	; 0x51
 8008d50:	2101      	movs	r1, #1
 8008d52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	0018      	movs	r0, r3
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	b002      	add	sp, #8
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	46c0      	nop			; (mov r8, r8)
 8008d60:	fffff7ff 	.word	0xfffff7ff

08008d64 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b088      	sub	sp, #32
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	603b      	str	r3, [r7, #0]
 8008d70:	1dbb      	adds	r3, r7, #6
 8008d72:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d74:	231f      	movs	r3, #31
 8008d76:	18fb      	adds	r3, r7, r3
 8008d78:	2200      	movs	r2, #0
 8008d7a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2250      	movs	r2, #80	; 0x50
 8008d80:	5c9b      	ldrb	r3, [r3, r2]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d101      	bne.n	8008d8a <HAL_SPI_Transmit+0x26>
 8008d86:	2302      	movs	r3, #2
 8008d88:	e145      	b.n	8009016 <HAL_SPI_Transmit+0x2b2>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2250      	movs	r2, #80	; 0x50
 8008d8e:	2101      	movs	r1, #1
 8008d90:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d92:	f7fd f8e5 	bl	8005f60 <HAL_GetTick>
 8008d96:	0003      	movs	r3, r0
 8008d98:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008d9a:	2316      	movs	r3, #22
 8008d9c:	18fb      	adds	r3, r7, r3
 8008d9e:	1dba      	adds	r2, r7, #6
 8008da0:	8812      	ldrh	r2, [r2, #0]
 8008da2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2251      	movs	r2, #81	; 0x51
 8008da8:	5c9b      	ldrb	r3, [r3, r2]
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d004      	beq.n	8008dba <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8008db0:	231f      	movs	r3, #31
 8008db2:	18fb      	adds	r3, r7, r3
 8008db4:	2202      	movs	r2, #2
 8008db6:	701a      	strb	r2, [r3, #0]
    goto error;
 8008db8:	e126      	b.n	8009008 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d003      	beq.n	8008dc8 <HAL_SPI_Transmit+0x64>
 8008dc0:	1dbb      	adds	r3, r7, #6
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d104      	bne.n	8008dd2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8008dc8:	231f      	movs	r3, #31
 8008dca:	18fb      	adds	r3, r7, r3
 8008dcc:	2201      	movs	r2, #1
 8008dce:	701a      	strb	r2, [r3, #0]
    goto error;
 8008dd0:	e11a      	b.n	8009008 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2251      	movs	r2, #81	; 0x51
 8008dd6:	2103      	movs	r1, #3
 8008dd8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	1dba      	adds	r2, r7, #6
 8008dea:	8812      	ldrh	r2, [r2, #0]
 8008dec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	1dba      	adds	r2, r7, #6
 8008df2:	8812      	ldrh	r2, [r2, #0]
 8008df4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	689a      	ldr	r2, [r3, #8]
 8008e18:	2380      	movs	r3, #128	; 0x80
 8008e1a:	021b      	lsls	r3, r3, #8
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d110      	bne.n	8008e42 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2140      	movs	r1, #64	; 0x40
 8008e2c:	438a      	bics	r2, r1
 8008e2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2180      	movs	r1, #128	; 0x80
 8008e3c:	01c9      	lsls	r1, r1, #7
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2240      	movs	r2, #64	; 0x40
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	2b40      	cmp	r3, #64	; 0x40
 8008e4e:	d007      	beq.n	8008e60 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2140      	movs	r1, #64	; 0x40
 8008e5c:	430a      	orrs	r2, r1
 8008e5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	68da      	ldr	r2, [r3, #12]
 8008e64:	2380      	movs	r3, #128	; 0x80
 8008e66:	011b      	lsls	r3, r3, #4
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d152      	bne.n	8008f12 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d004      	beq.n	8008e7e <HAL_SPI_Transmit+0x11a>
 8008e74:	2316      	movs	r3, #22
 8008e76:	18fb      	adds	r3, r7, r3
 8008e78:	881b      	ldrh	r3, [r3, #0]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d143      	bne.n	8008f06 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e82:	881a      	ldrh	r2, [r3, #0]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8e:	1c9a      	adds	r2, r3, #2
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008ea2:	e030      	b.n	8008f06 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	4013      	ands	r3, r2
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d112      	bne.n	8008ed8 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb6:	881a      	ldrh	r2, [r3, #0]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec2:	1c9a      	adds	r2, r3, #2
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	86da      	strh	r2, [r3, #54]	; 0x36
 8008ed6:	e016      	b.n	8008f06 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ed8:	f7fd f842 	bl	8005f60 <HAL_GetTick>
 8008edc:	0002      	movs	r2, r0
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d802      	bhi.n	8008eee <HAL_SPI_Transmit+0x18a>
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	3301      	adds	r3, #1
 8008eec:	d102      	bne.n	8008ef4 <HAL_SPI_Transmit+0x190>
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d108      	bne.n	8008f06 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8008ef4:	231f      	movs	r3, #31
 8008ef6:	18fb      	adds	r3, r7, r3
 8008ef8:	2203      	movs	r2, #3
 8008efa:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2251      	movs	r2, #81	; 0x51
 8008f00:	2101      	movs	r1, #1
 8008f02:	5499      	strb	r1, [r3, r2]
          goto error;
 8008f04:	e080      	b.n	8009008 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1c9      	bne.n	8008ea4 <HAL_SPI_Transmit+0x140>
 8008f10:	e053      	b.n	8008fba <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d004      	beq.n	8008f24 <HAL_SPI_Transmit+0x1c0>
 8008f1a:	2316      	movs	r3, #22
 8008f1c:	18fb      	adds	r3, r7, r3
 8008f1e:	881b      	ldrh	r3, [r3, #0]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d145      	bne.n	8008fb0 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	330c      	adds	r3, #12
 8008f2e:	7812      	ldrb	r2, [r2, #0]
 8008f30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f36:	1c5a      	adds	r2, r3, #1
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	3b01      	subs	r3, #1
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008f4a:	e031      	b.n	8008fb0 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	2202      	movs	r2, #2
 8008f54:	4013      	ands	r3, r2
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d113      	bne.n	8008f82 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	330c      	adds	r3, #12
 8008f64:	7812      	ldrb	r2, [r2, #0]
 8008f66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008f80:	e016      	b.n	8008fb0 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f82:	f7fc ffed 	bl	8005f60 <HAL_GetTick>
 8008f86:	0002      	movs	r2, r0
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d802      	bhi.n	8008f98 <HAL_SPI_Transmit+0x234>
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	3301      	adds	r3, #1
 8008f96:	d102      	bne.n	8008f9e <HAL_SPI_Transmit+0x23a>
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d108      	bne.n	8008fb0 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8008f9e:	231f      	movs	r3, #31
 8008fa0:	18fb      	adds	r3, r7, r3
 8008fa2:	2203      	movs	r2, #3
 8008fa4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2251      	movs	r2, #81	; 0x51
 8008faa:	2101      	movs	r1, #1
 8008fac:	5499      	strb	r1, [r3, r2]
          goto error;
 8008fae:	e02b      	b.n	8009008 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1c8      	bne.n	8008f4c <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008fba:	69ba      	ldr	r2, [r7, #24]
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	0018      	movs	r0, r3
 8008fc2:	f000 fa85 	bl	80094d0 <SPI_EndRxTxTransaction>
 8008fc6:	1e03      	subs	r3, r0, #0
 8008fc8:	d002      	beq.n	8008fd0 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10a      	bne.n	8008fee <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fd8:	2300      	movs	r3, #0
 8008fda:	613b      	str	r3, [r7, #16]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	613b      	str	r3, [r7, #16]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	613b      	str	r3, [r7, #16]
 8008fec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d004      	beq.n	8009000 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8008ff6:	231f      	movs	r3, #31
 8008ff8:	18fb      	adds	r3, r7, r3
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	701a      	strb	r2, [r3, #0]
 8008ffe:	e003      	b.n	8009008 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2251      	movs	r2, #81	; 0x51
 8009004:	2101      	movs	r1, #1
 8009006:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2250      	movs	r2, #80	; 0x50
 800900c:	2100      	movs	r1, #0
 800900e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009010:	231f      	movs	r3, #31
 8009012:	18fb      	adds	r3, r7, r3
 8009014:	781b      	ldrb	r3, [r3, #0]
}
 8009016:	0018      	movs	r0, r3
 8009018:	46bd      	mov	sp, r7
 800901a:	b008      	add	sp, #32
 800901c:	bd80      	pop	{r7, pc}

0800901e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b08c      	sub	sp, #48	; 0x30
 8009022:	af00      	add	r7, sp, #0
 8009024:	60f8      	str	r0, [r7, #12]
 8009026:	60b9      	str	r1, [r7, #8]
 8009028:	607a      	str	r2, [r7, #4]
 800902a:	001a      	movs	r2, r3
 800902c:	1cbb      	adds	r3, r7, #2
 800902e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009030:	2301      	movs	r3, #1
 8009032:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009034:	232b      	movs	r3, #43	; 0x2b
 8009036:	18fb      	adds	r3, r7, r3
 8009038:	2200      	movs	r2, #0
 800903a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2250      	movs	r2, #80	; 0x50
 8009040:	5c9b      	ldrb	r3, [r3, r2]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d101      	bne.n	800904a <HAL_SPI_TransmitReceive+0x2c>
 8009046:	2302      	movs	r3, #2
 8009048:	e1b0      	b.n	80093ac <HAL_SPI_TransmitReceive+0x38e>
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2250      	movs	r2, #80	; 0x50
 800904e:	2101      	movs	r1, #1
 8009050:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009052:	f7fc ff85 	bl	8005f60 <HAL_GetTick>
 8009056:	0003      	movs	r3, r0
 8009058:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800905a:	2023      	movs	r0, #35	; 0x23
 800905c:	183b      	adds	r3, r7, r0
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	2151      	movs	r1, #81	; 0x51
 8009062:	5c52      	ldrb	r2, [r2, r1]
 8009064:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800906c:	231a      	movs	r3, #26
 800906e:	18fb      	adds	r3, r7, r3
 8009070:	1cba      	adds	r2, r7, #2
 8009072:	8812      	ldrh	r2, [r2, #0]
 8009074:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009076:	183b      	adds	r3, r7, r0
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d011      	beq.n	80090a2 <HAL_SPI_TransmitReceive+0x84>
 800907e:	69fa      	ldr	r2, [r7, #28]
 8009080:	2382      	movs	r3, #130	; 0x82
 8009082:	005b      	lsls	r3, r3, #1
 8009084:	429a      	cmp	r2, r3
 8009086:	d107      	bne.n	8009098 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d103      	bne.n	8009098 <HAL_SPI_TransmitReceive+0x7a>
 8009090:	183b      	adds	r3, r7, r0
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	2b04      	cmp	r3, #4
 8009096:	d004      	beq.n	80090a2 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8009098:	232b      	movs	r3, #43	; 0x2b
 800909a:	18fb      	adds	r3, r7, r3
 800909c:	2202      	movs	r2, #2
 800909e:	701a      	strb	r2, [r3, #0]
    goto error;
 80090a0:	e17d      	b.n	800939e <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d006      	beq.n	80090b6 <HAL_SPI_TransmitReceive+0x98>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d003      	beq.n	80090b6 <HAL_SPI_TransmitReceive+0x98>
 80090ae:	1cbb      	adds	r3, r7, #2
 80090b0:	881b      	ldrh	r3, [r3, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d104      	bne.n	80090c0 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80090b6:	232b      	movs	r3, #43	; 0x2b
 80090b8:	18fb      	adds	r3, r7, r3
 80090ba:	2201      	movs	r2, #1
 80090bc:	701a      	strb	r2, [r3, #0]
    goto error;
 80090be:	e16e      	b.n	800939e <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2251      	movs	r2, #81	; 0x51
 80090c4:	5c9b      	ldrb	r3, [r3, r2]
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d003      	beq.n	80090d4 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2251      	movs	r2, #81	; 0x51
 80090d0:	2105      	movs	r1, #5
 80090d2:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	1cba      	adds	r2, r7, #2
 80090e4:	8812      	ldrh	r2, [r2, #0]
 80090e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	1cba      	adds	r2, r7, #2
 80090ec:	8812      	ldrh	r2, [r2, #0]
 80090ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	1cba      	adds	r2, r7, #2
 80090fa:	8812      	ldrh	r2, [r2, #0]
 80090fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	1cba      	adds	r2, r7, #2
 8009102:	8812      	ldrh	r2, [r2, #0]
 8009104:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2240      	movs	r2, #64	; 0x40
 800911a:	4013      	ands	r3, r2
 800911c:	2b40      	cmp	r3, #64	; 0x40
 800911e:	d007      	beq.n	8009130 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2140      	movs	r1, #64	; 0x40
 800912c:	430a      	orrs	r2, r1
 800912e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	68da      	ldr	r2, [r3, #12]
 8009134:	2380      	movs	r3, #128	; 0x80
 8009136:	011b      	lsls	r3, r3, #4
 8009138:	429a      	cmp	r2, r3
 800913a:	d000      	beq.n	800913e <HAL_SPI_TransmitReceive+0x120>
 800913c:	e07f      	b.n	800923e <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d005      	beq.n	8009152 <HAL_SPI_TransmitReceive+0x134>
 8009146:	231a      	movs	r3, #26
 8009148:	18fb      	adds	r3, r7, r3
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d000      	beq.n	8009152 <HAL_SPI_TransmitReceive+0x134>
 8009150:	e06a      	b.n	8009228 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009156:	881a      	ldrh	r2, [r3, #0]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009162:	1c9a      	adds	r2, r3, #2
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800916c:	b29b      	uxth	r3, r3
 800916e:	3b01      	subs	r3, #1
 8009170:	b29a      	uxth	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009176:	e057      	b.n	8009228 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	2202      	movs	r2, #2
 8009180:	4013      	ands	r3, r2
 8009182:	2b02      	cmp	r3, #2
 8009184:	d11b      	bne.n	80091be <HAL_SPI_TransmitReceive+0x1a0>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800918a:	b29b      	uxth	r3, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	d016      	beq.n	80091be <HAL_SPI_TransmitReceive+0x1a0>
 8009190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009192:	2b01      	cmp	r3, #1
 8009194:	d113      	bne.n	80091be <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919a:	881a      	ldrh	r2, [r3, #0]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a6:	1c9a      	adds	r2, r3, #2
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	3b01      	subs	r3, #1
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80091ba:	2300      	movs	r3, #0
 80091bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	2201      	movs	r2, #1
 80091c6:	4013      	ands	r3, r2
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d119      	bne.n	8009200 <HAL_SPI_TransmitReceive+0x1e2>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d014      	beq.n	8009200 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68da      	ldr	r2, [r3, #12]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e0:	b292      	uxth	r2, r2
 80091e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e8:	1c9a      	adds	r2, r3, #2
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	3b01      	subs	r3, #1
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80091fc:	2301      	movs	r3, #1
 80091fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009200:	f7fc feae 	bl	8005f60 <HAL_GetTick>
 8009204:	0002      	movs	r2, r0
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800920c:	429a      	cmp	r2, r3
 800920e:	d80b      	bhi.n	8009228 <HAL_SPI_TransmitReceive+0x20a>
 8009210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009212:	3301      	adds	r3, #1
 8009214:	d008      	beq.n	8009228 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8009216:	232b      	movs	r3, #43	; 0x2b
 8009218:	18fb      	adds	r3, r7, r3
 800921a:	2203      	movs	r2, #3
 800921c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2251      	movs	r2, #81	; 0x51
 8009222:	2101      	movs	r1, #1
 8009224:	5499      	strb	r1, [r3, r2]
        goto error;
 8009226:	e0ba      	b.n	800939e <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800922c:	b29b      	uxth	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1a2      	bne.n	8009178 <HAL_SPI_TransmitReceive+0x15a>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009236:	b29b      	uxth	r3, r3
 8009238:	2b00      	cmp	r3, #0
 800923a:	d19d      	bne.n	8009178 <HAL_SPI_TransmitReceive+0x15a>
 800923c:	e083      	b.n	8009346 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d005      	beq.n	8009252 <HAL_SPI_TransmitReceive+0x234>
 8009246:	231a      	movs	r3, #26
 8009248:	18fb      	adds	r3, r7, r3
 800924a:	881b      	ldrh	r3, [r3, #0]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d000      	beq.n	8009252 <HAL_SPI_TransmitReceive+0x234>
 8009250:	e06f      	b.n	8009332 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	330c      	adds	r3, #12
 800925c:	7812      	ldrb	r2, [r2, #0]
 800925e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800926e:	b29b      	uxth	r3, r3
 8009270:	3b01      	subs	r3, #1
 8009272:	b29a      	uxth	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009278:	e05b      	b.n	8009332 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	2202      	movs	r2, #2
 8009282:	4013      	ands	r3, r2
 8009284:	2b02      	cmp	r3, #2
 8009286:	d11c      	bne.n	80092c2 <HAL_SPI_TransmitReceive+0x2a4>
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800928c:	b29b      	uxth	r3, r3
 800928e:	2b00      	cmp	r3, #0
 8009290:	d017      	beq.n	80092c2 <HAL_SPI_TransmitReceive+0x2a4>
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	2b01      	cmp	r3, #1
 8009296:	d114      	bne.n	80092c2 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	330c      	adds	r3, #12
 80092a2:	7812      	ldrb	r2, [r2, #0]
 80092a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092aa:	1c5a      	adds	r2, r3, #1
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	3b01      	subs	r3, #1
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80092be:	2300      	movs	r3, #0
 80092c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	2201      	movs	r2, #1
 80092ca:	4013      	ands	r3, r2
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d119      	bne.n	8009304 <HAL_SPI_TransmitReceive+0x2e6>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d014      	beq.n	8009304 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68da      	ldr	r2, [r3, #12]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e4:	b2d2      	uxtb	r2, r2
 80092e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ec:	1c5a      	adds	r2, r3, #1
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	3b01      	subs	r3, #1
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009300:	2301      	movs	r3, #1
 8009302:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009304:	f7fc fe2c 	bl	8005f60 <HAL_GetTick>
 8009308:	0002      	movs	r2, r0
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009310:	429a      	cmp	r2, r3
 8009312:	d802      	bhi.n	800931a <HAL_SPI_TransmitReceive+0x2fc>
 8009314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009316:	3301      	adds	r3, #1
 8009318:	d102      	bne.n	8009320 <HAL_SPI_TransmitReceive+0x302>
 800931a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931c:	2b00      	cmp	r3, #0
 800931e:	d108      	bne.n	8009332 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8009320:	232b      	movs	r3, #43	; 0x2b
 8009322:	18fb      	adds	r3, r7, r3
 8009324:	2203      	movs	r2, #3
 8009326:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2251      	movs	r2, #81	; 0x51
 800932c:	2101      	movs	r1, #1
 800932e:	5499      	strb	r1, [r3, r2]
        goto error;
 8009330:	e035      	b.n	800939e <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009336:	b29b      	uxth	r3, r3
 8009338:	2b00      	cmp	r3, #0
 800933a:	d19e      	bne.n	800927a <HAL_SPI_TransmitReceive+0x25c>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009340:	b29b      	uxth	r3, r3
 8009342:	2b00      	cmp	r3, #0
 8009344:	d199      	bne.n	800927a <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009348:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	0018      	movs	r0, r3
 800934e:	f000 f8bf 	bl	80094d0 <SPI_EndRxTxTransaction>
 8009352:	1e03      	subs	r3, r0, #0
 8009354:	d007      	beq.n	8009366 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8009356:	232b      	movs	r3, #43	; 0x2b
 8009358:	18fb      	adds	r3, r7, r3
 800935a:	2201      	movs	r2, #1
 800935c:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2220      	movs	r2, #32
 8009362:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009364:	e01b      	b.n	800939e <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d10a      	bne.n	8009384 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800936e:	2300      	movs	r3, #0
 8009370:	617b      	str	r3, [r7, #20]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	617b      	str	r3, [r7, #20]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	617b      	str	r3, [r7, #20]
 8009382:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009388:	2b00      	cmp	r3, #0
 800938a:	d004      	beq.n	8009396 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 800938c:	232b      	movs	r3, #43	; 0x2b
 800938e:	18fb      	adds	r3, r7, r3
 8009390:	2201      	movs	r2, #1
 8009392:	701a      	strb	r2, [r3, #0]
 8009394:	e003      	b.n	800939e <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2251      	movs	r2, #81	; 0x51
 800939a:	2101      	movs	r1, #1
 800939c:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2250      	movs	r2, #80	; 0x50
 80093a2:	2100      	movs	r1, #0
 80093a4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80093a6:	232b      	movs	r3, #43	; 0x2b
 80093a8:	18fb      	adds	r3, r7, r3
 80093aa:	781b      	ldrb	r3, [r3, #0]
}
 80093ac:	0018      	movs	r0, r3
 80093ae:	46bd      	mov	sp, r7
 80093b0:	b00c      	add	sp, #48	; 0x30
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b088      	sub	sp, #32
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	603b      	str	r3, [r7, #0]
 80093c0:	1dfb      	adds	r3, r7, #7
 80093c2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80093c4:	f7fc fdcc 	bl	8005f60 <HAL_GetTick>
 80093c8:	0002      	movs	r2, r0
 80093ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093cc:	1a9b      	subs	r3, r3, r2
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	18d3      	adds	r3, r2, r3
 80093d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80093d4:	f7fc fdc4 	bl	8005f60 <HAL_GetTick>
 80093d8:	0003      	movs	r3, r0
 80093da:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80093dc:	4b3a      	ldr	r3, [pc, #232]	; (80094c8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	015b      	lsls	r3, r3, #5
 80093e2:	0d1b      	lsrs	r3, r3, #20
 80093e4:	69fa      	ldr	r2, [r7, #28]
 80093e6:	4353      	muls	r3, r2
 80093e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80093ea:	e058      	b.n	800949e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	3301      	adds	r3, #1
 80093f0:	d055      	beq.n	800949e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80093f2:	f7fc fdb5 	bl	8005f60 <HAL_GetTick>
 80093f6:	0002      	movs	r2, r0
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	69fa      	ldr	r2, [r7, #28]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d902      	bls.n	8009408 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d142      	bne.n	800948e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	21e0      	movs	r1, #224	; 0xe0
 8009414:	438a      	bics	r2, r1
 8009416:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	2382      	movs	r3, #130	; 0x82
 800941e:	005b      	lsls	r3, r3, #1
 8009420:	429a      	cmp	r2, r3
 8009422:	d113      	bne.n	800944c <SPI_WaitFlagStateUntilTimeout+0x98>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	2380      	movs	r3, #128	; 0x80
 800942a:	021b      	lsls	r3, r3, #8
 800942c:	429a      	cmp	r2, r3
 800942e:	d005      	beq.n	800943c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	689a      	ldr	r2, [r3, #8]
 8009434:	2380      	movs	r3, #128	; 0x80
 8009436:	00db      	lsls	r3, r3, #3
 8009438:	429a      	cmp	r2, r3
 800943a:	d107      	bne.n	800944c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2140      	movs	r1, #64	; 0x40
 8009448:	438a      	bics	r2, r1
 800944a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009450:	2380      	movs	r3, #128	; 0x80
 8009452:	019b      	lsls	r3, r3, #6
 8009454:	429a      	cmp	r2, r3
 8009456:	d110      	bne.n	800947a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	491a      	ldr	r1, [pc, #104]	; (80094cc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009464:	400a      	ands	r2, r1
 8009466:	601a      	str	r2, [r3, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2180      	movs	r1, #128	; 0x80
 8009474:	0189      	lsls	r1, r1, #6
 8009476:	430a      	orrs	r2, r1
 8009478:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2251      	movs	r2, #81	; 0x51
 800947e:	2101      	movs	r1, #1
 8009480:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2250      	movs	r2, #80	; 0x50
 8009486:	2100      	movs	r1, #0
 8009488:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e017      	b.n	80094be <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009494:	2300      	movs	r3, #0
 8009496:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	3b01      	subs	r3, #1
 800949c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	4013      	ands	r3, r2
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	425a      	negs	r2, r3
 80094ae:	4153      	adcs	r3, r2
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	001a      	movs	r2, r3
 80094b4:	1dfb      	adds	r3, r7, #7
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d197      	bne.n	80093ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	0018      	movs	r0, r3
 80094c0:	46bd      	mov	sp, r7
 80094c2:	b008      	add	sp, #32
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	46c0      	nop			; (mov r8, r8)
 80094c8:	20000038 	.word	0x20000038
 80094cc:	ffffdfff 	.word	0xffffdfff

080094d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b088      	sub	sp, #32
 80094d4:	af02      	add	r7, sp, #8
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80094dc:	4b1d      	ldr	r3, [pc, #116]	; (8009554 <SPI_EndRxTxTransaction+0x84>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	491d      	ldr	r1, [pc, #116]	; (8009558 <SPI_EndRxTxTransaction+0x88>)
 80094e2:	0018      	movs	r0, r3
 80094e4:	f7f6 fe36 	bl	8000154 <__udivsi3>
 80094e8:	0003      	movs	r3, r0
 80094ea:	001a      	movs	r2, r3
 80094ec:	0013      	movs	r3, r2
 80094ee:	015b      	lsls	r3, r3, #5
 80094f0:	1a9b      	subs	r3, r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	189b      	adds	r3, r3, r2
 80094f6:	00db      	lsls	r3, r3, #3
 80094f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	2382      	movs	r3, #130	; 0x82
 8009500:	005b      	lsls	r3, r3, #1
 8009502:	429a      	cmp	r2, r3
 8009504:	d112      	bne.n	800952c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	0013      	movs	r3, r2
 8009510:	2200      	movs	r2, #0
 8009512:	2180      	movs	r1, #128	; 0x80
 8009514:	f7ff ff4e 	bl	80093b4 <SPI_WaitFlagStateUntilTimeout>
 8009518:	1e03      	subs	r3, r0, #0
 800951a:	d016      	beq.n	800954a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009520:	2220      	movs	r2, #32
 8009522:	431a      	orrs	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	e00f      	b.n	800954c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00a      	beq.n	8009548 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	3b01      	subs	r3, #1
 8009536:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	2280      	movs	r2, #128	; 0x80
 8009540:	4013      	ands	r3, r2
 8009542:	2b80      	cmp	r3, #128	; 0x80
 8009544:	d0f2      	beq.n	800952c <SPI_EndRxTxTransaction+0x5c>
 8009546:	e000      	b.n	800954a <SPI_EndRxTxTransaction+0x7a>
        break;
 8009548:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	0018      	movs	r0, r3
 800954e:	46bd      	mov	sp, r7
 8009550:	b006      	add	sp, #24
 8009552:	bd80      	pop	{r7, pc}
 8009554:	20000038 	.word	0x20000038
 8009558:	016e3600 	.word	0x016e3600

0800955c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d101      	bne.n	800956e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e032      	b.n	80095d4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2239      	movs	r2, #57	; 0x39
 8009572:	5c9b      	ldrb	r3, [r3, r2]
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	d107      	bne.n	800958a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2238      	movs	r2, #56	; 0x38
 800957e:	2100      	movs	r1, #0
 8009580:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	0018      	movs	r0, r3
 8009586:	f7fb fdd9 	bl	800513c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2239      	movs	r2, #57	; 0x39
 800958e:	2102      	movs	r1, #2
 8009590:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	3304      	adds	r3, #4
 800959a:	0019      	movs	r1, r3
 800959c:	0010      	movs	r0, r2
 800959e:	f000 f977 	bl	8009890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	223e      	movs	r2, #62	; 0x3e
 80095a6:	2101      	movs	r1, #1
 80095a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	223a      	movs	r2, #58	; 0x3a
 80095ae:	2101      	movs	r1, #1
 80095b0:	5499      	strb	r1, [r3, r2]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	223b      	movs	r2, #59	; 0x3b
 80095b6:	2101      	movs	r1, #1
 80095b8:	5499      	strb	r1, [r3, r2]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	223c      	movs	r2, #60	; 0x3c
 80095be:	2101      	movs	r1, #1
 80095c0:	5499      	strb	r1, [r3, r2]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	223d      	movs	r2, #61	; 0x3d
 80095c6:	2101      	movs	r1, #1
 80095c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2239      	movs	r2, #57	; 0x39
 80095ce:	2101      	movs	r1, #1
 80095d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	0018      	movs	r0, r3
 80095d6:	46bd      	mov	sp, r7
 80095d8:	b002      	add	sp, #8
 80095da:	bd80      	pop	{r7, pc}

080095dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2239      	movs	r2, #57	; 0x39
 80095e8:	5c9b      	ldrb	r3, [r3, r2]
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d001      	beq.n	80095f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e03b      	b.n	800966c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2239      	movs	r2, #57	; 0x39
 80095f8:	2102      	movs	r1, #2
 80095fa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68da      	ldr	r2, [r3, #12]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2101      	movs	r1, #1
 8009608:	430a      	orrs	r2, r1
 800960a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	2380      	movs	r3, #128	; 0x80
 8009612:	05db      	lsls	r3, r3, #23
 8009614:	429a      	cmp	r2, r3
 8009616:	d00e      	beq.n	8009636 <HAL_TIM_Base_Start_IT+0x5a>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a15      	ldr	r2, [pc, #84]	; (8009674 <HAL_TIM_Base_Start_IT+0x98>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d009      	beq.n	8009636 <HAL_TIM_Base_Start_IT+0x5a>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a14      	ldr	r2, [pc, #80]	; (8009678 <HAL_TIM_Base_Start_IT+0x9c>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d004      	beq.n	8009636 <HAL_TIM_Base_Start_IT+0x5a>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a12      	ldr	r2, [pc, #72]	; (800967c <HAL_TIM_Base_Start_IT+0xa0>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d111      	bne.n	800965a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	2207      	movs	r2, #7
 800963e:	4013      	ands	r3, r2
 8009640:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2b06      	cmp	r3, #6
 8009646:	d010      	beq.n	800966a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2101      	movs	r1, #1
 8009654:	430a      	orrs	r2, r1
 8009656:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009658:	e007      	b.n	800966a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2101      	movs	r1, #1
 8009666:	430a      	orrs	r2, r1
 8009668:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	0018      	movs	r0, r3
 800966e:	46bd      	mov	sp, r7
 8009670:	b004      	add	sp, #16
 8009672:	bd80      	pop	{r7, pc}
 8009674:	40000400 	.word	0x40000400
 8009678:	40010800 	.word	0x40010800
 800967c:	40011400 	.word	0x40011400

08009680 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	2202      	movs	r2, #2
 8009690:	4013      	ands	r3, r2
 8009692:	2b02      	cmp	r3, #2
 8009694:	d124      	bne.n	80096e0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	2202      	movs	r2, #2
 800969e:	4013      	ands	r3, r2
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d11d      	bne.n	80096e0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2203      	movs	r2, #3
 80096aa:	4252      	negs	r2, r2
 80096ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2201      	movs	r2, #1
 80096b2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	2203      	movs	r2, #3
 80096bc:	4013      	ands	r3, r2
 80096be:	d004      	beq.n	80096ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	0018      	movs	r0, r3
 80096c4:	f000 f8cc 	bl	8009860 <HAL_TIM_IC_CaptureCallback>
 80096c8:	e007      	b.n	80096da <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	0018      	movs	r0, r3
 80096ce:	f000 f8bf 	bl	8009850 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	0018      	movs	r0, r3
 80096d6:	f000 f8cb 	bl	8009870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	2204      	movs	r2, #4
 80096e8:	4013      	ands	r3, r2
 80096ea:	2b04      	cmp	r3, #4
 80096ec:	d125      	bne.n	800973a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	2204      	movs	r2, #4
 80096f6:	4013      	ands	r3, r2
 80096f8:	2b04      	cmp	r3, #4
 80096fa:	d11e      	bne.n	800973a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2205      	movs	r2, #5
 8009702:	4252      	negs	r2, r2
 8009704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2202      	movs	r2, #2
 800970a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	699a      	ldr	r2, [r3, #24]
 8009712:	23c0      	movs	r3, #192	; 0xc0
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4013      	ands	r3, r2
 8009718:	d004      	beq.n	8009724 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	0018      	movs	r0, r3
 800971e:	f000 f89f 	bl	8009860 <HAL_TIM_IC_CaptureCallback>
 8009722:	e007      	b.n	8009734 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	0018      	movs	r0, r3
 8009728:	f000 f892 	bl	8009850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	0018      	movs	r0, r3
 8009730:	f000 f89e 	bl	8009870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	2208      	movs	r2, #8
 8009742:	4013      	ands	r3, r2
 8009744:	2b08      	cmp	r3, #8
 8009746:	d124      	bne.n	8009792 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	2208      	movs	r2, #8
 8009750:	4013      	ands	r3, r2
 8009752:	2b08      	cmp	r3, #8
 8009754:	d11d      	bne.n	8009792 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2209      	movs	r2, #9
 800975c:	4252      	negs	r2, r2
 800975e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2204      	movs	r2, #4
 8009764:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	69db      	ldr	r3, [r3, #28]
 800976c:	2203      	movs	r2, #3
 800976e:	4013      	ands	r3, r2
 8009770:	d004      	beq.n	800977c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	0018      	movs	r0, r3
 8009776:	f000 f873 	bl	8009860 <HAL_TIM_IC_CaptureCallback>
 800977a:	e007      	b.n	800978c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	0018      	movs	r0, r3
 8009780:	f000 f866 	bl	8009850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	0018      	movs	r0, r3
 8009788:	f000 f872 	bl	8009870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	2210      	movs	r2, #16
 800979a:	4013      	ands	r3, r2
 800979c:	2b10      	cmp	r3, #16
 800979e:	d125      	bne.n	80097ec <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	2210      	movs	r2, #16
 80097a8:	4013      	ands	r3, r2
 80097aa:	2b10      	cmp	r3, #16
 80097ac:	d11e      	bne.n	80097ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2211      	movs	r2, #17
 80097b4:	4252      	negs	r2, r2
 80097b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2208      	movs	r2, #8
 80097bc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	69da      	ldr	r2, [r3, #28]
 80097c4:	23c0      	movs	r3, #192	; 0xc0
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4013      	ands	r3, r2
 80097ca:	d004      	beq.n	80097d6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	0018      	movs	r0, r3
 80097d0:	f000 f846 	bl	8009860 <HAL_TIM_IC_CaptureCallback>
 80097d4:	e007      	b.n	80097e6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	0018      	movs	r0, r3
 80097da:	f000 f839 	bl	8009850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	0018      	movs	r0, r3
 80097e2:	f000 f845 	bl	8009870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	2201      	movs	r2, #1
 80097f4:	4013      	ands	r3, r2
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d10f      	bne.n	800981a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	2201      	movs	r2, #1
 8009802:	4013      	ands	r3, r2
 8009804:	2b01      	cmp	r3, #1
 8009806:	d108      	bne.n	800981a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2202      	movs	r2, #2
 800980e:	4252      	negs	r2, r2
 8009810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	0018      	movs	r0, r3
 8009816:	f7fa f8c5 	bl	80039a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	2240      	movs	r2, #64	; 0x40
 8009822:	4013      	ands	r3, r2
 8009824:	2b40      	cmp	r3, #64	; 0x40
 8009826:	d10f      	bne.n	8009848 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	2240      	movs	r2, #64	; 0x40
 8009830:	4013      	ands	r3, r2
 8009832:	2b40      	cmp	r3, #64	; 0x40
 8009834:	d108      	bne.n	8009848 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2241      	movs	r2, #65	; 0x41
 800983c:	4252      	negs	r2, r2
 800983e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	0018      	movs	r0, r3
 8009844:	f000 f81c 	bl	8009880 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009848:	46c0      	nop			; (mov r8, r8)
 800984a:	46bd      	mov	sp, r7
 800984c:	b002      	add	sp, #8
 800984e:	bd80      	pop	{r7, pc}

08009850 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009858:	46c0      	nop			; (mov r8, r8)
 800985a:	46bd      	mov	sp, r7
 800985c:	b002      	add	sp, #8
 800985e:	bd80      	pop	{r7, pc}

08009860 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009868:	46c0      	nop			; (mov r8, r8)
 800986a:	46bd      	mov	sp, r7
 800986c:	b002      	add	sp, #8
 800986e:	bd80      	pop	{r7, pc}

08009870 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009878:	46c0      	nop			; (mov r8, r8)
 800987a:	46bd      	mov	sp, r7
 800987c:	b002      	add	sp, #8
 800987e:	bd80      	pop	{r7, pc}

08009880 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009888:	46c0      	nop			; (mov r8, r8)
 800988a:	46bd      	mov	sp, r7
 800988c:	b002      	add	sp, #8
 800988e:	bd80      	pop	{r7, pc}

08009890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	2380      	movs	r3, #128	; 0x80
 80098a4:	05db      	lsls	r3, r3, #23
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d00b      	beq.n	80098c2 <TIM_Base_SetConfig+0x32>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a23      	ldr	r2, [pc, #140]	; (800993c <TIM_Base_SetConfig+0xac>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d007      	beq.n	80098c2 <TIM_Base_SetConfig+0x32>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a22      	ldr	r2, [pc, #136]	; (8009940 <TIM_Base_SetConfig+0xb0>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d003      	beq.n	80098c2 <TIM_Base_SetConfig+0x32>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a21      	ldr	r2, [pc, #132]	; (8009944 <TIM_Base_SetConfig+0xb4>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d108      	bne.n	80098d4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2270      	movs	r2, #112	; 0x70
 80098c6:	4393      	bics	r3, r2
 80098c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	68fa      	ldr	r2, [r7, #12]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	2380      	movs	r3, #128	; 0x80
 80098d8:	05db      	lsls	r3, r3, #23
 80098da:	429a      	cmp	r2, r3
 80098dc:	d00b      	beq.n	80098f6 <TIM_Base_SetConfig+0x66>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a16      	ldr	r2, [pc, #88]	; (800993c <TIM_Base_SetConfig+0xac>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d007      	beq.n	80098f6 <TIM_Base_SetConfig+0x66>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a15      	ldr	r2, [pc, #84]	; (8009940 <TIM_Base_SetConfig+0xb0>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d003      	beq.n	80098f6 <TIM_Base_SetConfig+0x66>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a14      	ldr	r2, [pc, #80]	; (8009944 <TIM_Base_SetConfig+0xb4>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d108      	bne.n	8009908 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	4a13      	ldr	r2, [pc, #76]	; (8009948 <TIM_Base_SetConfig+0xb8>)
 80098fa:	4013      	ands	r3, r2
 80098fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	4313      	orrs	r3, r2
 8009906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2280      	movs	r2, #128	; 0x80
 800990c:	4393      	bics	r3, r2
 800990e:	001a      	movs	r2, r3
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	4313      	orrs	r3, r2
 8009916:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	689a      	ldr	r2, [r3, #8]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	615a      	str	r2, [r3, #20]
}
 8009934:	46c0      	nop			; (mov r8, r8)
 8009936:	46bd      	mov	sp, r7
 8009938:	b004      	add	sp, #16
 800993a:	bd80      	pop	{r7, pc}
 800993c:	40000400 	.word	0x40000400
 8009940:	40010800 	.word	0x40010800
 8009944:	40011400 	.word	0x40011400
 8009948:	fffffcff 	.word	0xfffffcff

0800994c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2238      	movs	r2, #56	; 0x38
 800995a:	5c9b      	ldrb	r3, [r3, r2]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d101      	bne.n	8009964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009960:	2302      	movs	r3, #2
 8009962:	e047      	b.n	80099f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2238      	movs	r2, #56	; 0x38
 8009968:	2101      	movs	r1, #1
 800996a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2239      	movs	r2, #57	; 0x39
 8009970:	2102      	movs	r1, #2
 8009972:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2270      	movs	r2, #112	; 0x70
 8009988:	4393      	bics	r3, r2
 800998a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	4313      	orrs	r3, r2
 8009994:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	2380      	movs	r3, #128	; 0x80
 80099a4:	05db      	lsls	r3, r3, #23
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d00e      	beq.n	80099c8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a13      	ldr	r2, [pc, #76]	; (80099fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d009      	beq.n	80099c8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a11      	ldr	r2, [pc, #68]	; (8009a00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d004      	beq.n	80099c8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a10      	ldr	r2, [pc, #64]	; (8009a04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d10c      	bne.n	80099e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	2280      	movs	r2, #128	; 0x80
 80099cc:	4393      	bics	r3, r2
 80099ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	68ba      	ldr	r2, [r7, #8]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2239      	movs	r2, #57	; 0x39
 80099e6:	2101      	movs	r1, #1
 80099e8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2238      	movs	r2, #56	; 0x38
 80099ee:	2100      	movs	r1, #0
 80099f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	0018      	movs	r0, r3
 80099f6:	46bd      	mov	sp, r7
 80099f8:	b004      	add	sp, #16
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	40000400 	.word	0x40000400
 8009a00:	40010800 	.word	0x40010800
 8009a04:	40011400 	.word	0x40011400

08009a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e044      	b.n	8009aa4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d107      	bne.n	8009a32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2278      	movs	r2, #120	; 0x78
 8009a26:	2100      	movs	r1, #0
 8009a28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	0018      	movs	r0, r3
 8009a2e:	f7fb fba5 	bl	800517c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2224      	movs	r2, #36	; 0x24
 8009a36:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2101      	movs	r1, #1
 8009a44:	438a      	bics	r2, r1
 8009a46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	0018      	movs	r0, r3
 8009a4c:	f000 f952 	bl	8009cf4 <UART_SetConfig>
 8009a50:	0003      	movs	r3, r0
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d101      	bne.n	8009a5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e024      	b.n	8009aa4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d003      	beq.n	8009a6a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	0018      	movs	r0, r3
 8009a66:	f000 fbe3 	bl	800a230 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	685a      	ldr	r2, [r3, #4]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	490d      	ldr	r1, [pc, #52]	; (8009aac <HAL_UART_Init+0xa4>)
 8009a76:	400a      	ands	r2, r1
 8009a78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	689a      	ldr	r2, [r3, #8]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	212a      	movs	r1, #42	; 0x2a
 8009a86:	438a      	bics	r2, r1
 8009a88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2101      	movs	r1, #1
 8009a96:	430a      	orrs	r2, r1
 8009a98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	0018      	movs	r0, r3
 8009a9e:	f000 fc7b 	bl	800a398 <UART_CheckIdleState>
 8009aa2:	0003      	movs	r3, r0
}
 8009aa4:	0018      	movs	r0, r3
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	b002      	add	sp, #8
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	ffffb7ff 	.word	0xffffb7ff

08009ab0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b08a      	sub	sp, #40	; 0x28
 8009ab4:	af02      	add	r7, sp, #8
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	603b      	str	r3, [r7, #0]
 8009abc:	1dbb      	adds	r3, r7, #6
 8009abe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ac4:	2b20      	cmp	r3, #32
 8009ac6:	d000      	beq.n	8009aca <HAL_UART_Transmit+0x1a>
 8009ac8:	e08c      	b.n	8009be4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d003      	beq.n	8009ad8 <HAL_UART_Transmit+0x28>
 8009ad0:	1dbb      	adds	r3, r7, #6
 8009ad2:	881b      	ldrh	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d101      	bne.n	8009adc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e084      	b.n	8009be6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	689a      	ldr	r2, [r3, #8]
 8009ae0:	2380      	movs	r3, #128	; 0x80
 8009ae2:	015b      	lsls	r3, r3, #5
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d109      	bne.n	8009afc <HAL_UART_Transmit+0x4c>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d105      	bne.n	8009afc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2201      	movs	r2, #1
 8009af4:	4013      	ands	r3, r2
 8009af6:	d001      	beq.n	8009afc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e074      	b.n	8009be6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2284      	movs	r2, #132	; 0x84
 8009b00:	2100      	movs	r1, #0
 8009b02:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2221      	movs	r2, #33	; 0x21
 8009b08:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b0a:	f7fc fa29 	bl	8005f60 <HAL_GetTick>
 8009b0e:	0003      	movs	r3, r0
 8009b10:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	1dba      	adds	r2, r7, #6
 8009b16:	2150      	movs	r1, #80	; 0x50
 8009b18:	8812      	ldrh	r2, [r2, #0]
 8009b1a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	1dba      	adds	r2, r7, #6
 8009b20:	2152      	movs	r1, #82	; 0x52
 8009b22:	8812      	ldrh	r2, [r2, #0]
 8009b24:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	689a      	ldr	r2, [r3, #8]
 8009b2a:	2380      	movs	r3, #128	; 0x80
 8009b2c:	015b      	lsls	r3, r3, #5
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d108      	bne.n	8009b44 <HAL_UART_Transmit+0x94>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d104      	bne.n	8009b44 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	61bb      	str	r3, [r7, #24]
 8009b42:	e003      	b.n	8009b4c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009b4c:	e02f      	b.n	8009bae <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	0013      	movs	r3, r2
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2180      	movs	r1, #128	; 0x80
 8009b5c:	f000 fcc4 	bl	800a4e8 <UART_WaitOnFlagUntilTimeout>
 8009b60:	1e03      	subs	r3, r0, #0
 8009b62:	d004      	beq.n	8009b6e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2220      	movs	r2, #32
 8009b68:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	e03b      	b.n	8009be6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10b      	bne.n	8009b8c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	881b      	ldrh	r3, [r3, #0]
 8009b78:	001a      	movs	r2, r3
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	05d2      	lsls	r2, r2, #23
 8009b80:	0dd2      	lsrs	r2, r2, #23
 8009b82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	3302      	adds	r3, #2
 8009b88:	61bb      	str	r3, [r7, #24]
 8009b8a:	e007      	b.n	8009b9c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	781a      	ldrb	r2, [r3, #0]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2252      	movs	r2, #82	; 0x52
 8009ba0:	5a9b      	ldrh	r3, [r3, r2]
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	b299      	uxth	r1, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2252      	movs	r2, #82	; 0x52
 8009bac:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2252      	movs	r2, #82	; 0x52
 8009bb2:	5a9b      	ldrh	r3, [r3, r2]
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1c9      	bne.n	8009b4e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009bba:	697a      	ldr	r2, [r7, #20]
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	0013      	movs	r3, r2
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	2140      	movs	r1, #64	; 0x40
 8009bc8:	f000 fc8e 	bl	800a4e8 <UART_WaitOnFlagUntilTimeout>
 8009bcc:	1e03      	subs	r3, r0, #0
 8009bce:	d004      	beq.n	8009bda <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2220      	movs	r2, #32
 8009bd4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e005      	b.n	8009be6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2220      	movs	r2, #32
 8009bde:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	e000      	b.n	8009be6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8009be4:	2302      	movs	r3, #2
  }
}
 8009be6:	0018      	movs	r0, r3
 8009be8:	46bd      	mov	sp, r7
 8009bea:	b008      	add	sp, #32
 8009bec:	bd80      	pop	{r7, pc}
	...

08009bf0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	1dbb      	adds	r3, r7, #6
 8009bfc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2280      	movs	r2, #128	; 0x80
 8009c02:	589b      	ldr	r3, [r3, r2]
 8009c04:	2b20      	cmp	r3, #32
 8009c06:	d14a      	bne.n	8009c9e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <HAL_UART_Receive_DMA+0x26>
 8009c0e:	1dbb      	adds	r3, r7, #6
 8009c10:	881b      	ldrh	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d101      	bne.n	8009c1a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e042      	b.n	8009ca0 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	689a      	ldr	r2, [r3, #8]
 8009c1e:	2380      	movs	r3, #128	; 0x80
 8009c20:	015b      	lsls	r3, r3, #5
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d109      	bne.n	8009c3a <HAL_UART_Receive_DMA+0x4a>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d105      	bne.n	8009c3a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	2201      	movs	r2, #1
 8009c32:	4013      	ands	r3, r2
 8009c34:	d001      	beq.n	8009c3a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	e032      	b.n	8009ca0 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a18      	ldr	r2, [pc, #96]	; (8009ca8 <HAL_UART_Receive_DMA+0xb8>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d020      	beq.n	8009c8c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	685a      	ldr	r2, [r3, #4]
 8009c50:	2380      	movs	r3, #128	; 0x80
 8009c52:	041b      	lsls	r3, r3, #16
 8009c54:	4013      	ands	r3, r2
 8009c56:	d019      	beq.n	8009c8c <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c58:	f3ef 8310 	mrs	r3, PRIMASK
 8009c5c:	613b      	str	r3, [r7, #16]
  return(result);
 8009c5e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c60:	61fb      	str	r3, [r7, #28]
 8009c62:	2301      	movs	r3, #1
 8009c64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f383 8810 	msr	PRIMASK, r3
}
 8009c6c:	46c0      	nop			; (mov r8, r8)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2180      	movs	r1, #128	; 0x80
 8009c7a:	04c9      	lsls	r1, r1, #19
 8009c7c:	430a      	orrs	r2, r1
 8009c7e:	601a      	str	r2, [r3, #0]
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	f383 8810 	msr	PRIMASK, r3
}
 8009c8a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009c8c:	1dbb      	adds	r3, r7, #6
 8009c8e:	881a      	ldrh	r2, [r3, #0]
 8009c90:	68b9      	ldr	r1, [r7, #8]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	0018      	movs	r0, r3
 8009c96:	f000 fc91 	bl	800a5bc <UART_Start_Receive_DMA>
 8009c9a:	0003      	movs	r3, r0
 8009c9c:	e000      	b.n	8009ca0 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8009c9e:	2302      	movs	r3, #2
  }
}
 8009ca0:	0018      	movs	r0, r3
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	b008      	add	sp, #32
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	40004800 	.word	0x40004800

08009cac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009cb4:	46c0      	nop			; (mov r8, r8)
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	b002      	add	sp, #8
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009cc4:	46c0      	nop			; (mov r8, r8)
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	b002      	add	sp, #8
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009cd4:	46c0      	nop			; (mov r8, r8)
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	b002      	add	sp, #8
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	000a      	movs	r2, r1
 8009ce6:	1cbb      	adds	r3, r7, #2
 8009ce8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009cea:	46c0      	nop			; (mov r8, r8)
 8009cec:	46bd      	mov	sp, r7
 8009cee:	b002      	add	sp, #8
 8009cf0:	bd80      	pop	{r7, pc}
	...

08009cf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cf4:	b5b0      	push	{r4, r5, r7, lr}
 8009cf6:	b08e      	sub	sp, #56	; 0x38
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cfc:	231a      	movs	r3, #26
 8009cfe:	2218      	movs	r2, #24
 8009d00:	189b      	adds	r3, r3, r2
 8009d02:	19db      	adds	r3, r3, r7
 8009d04:	2200      	movs	r2, #0
 8009d06:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	689a      	ldr	r2, [r3, #8]
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	431a      	orrs	r2, r3
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	695b      	ldr	r3, [r3, #20]
 8009d16:	431a      	orrs	r2, r3
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	69db      	ldr	r3, [r3, #28]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4ac3      	ldr	r2, [pc, #780]	; (800a034 <UART_SetConfig+0x340>)
 8009d28:	4013      	ands	r3, r2
 8009d2a:	0019      	movs	r1, r3
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d32:	430a      	orrs	r2, r1
 8009d34:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	4abe      	ldr	r2, [pc, #760]	; (800a038 <UART_SetConfig+0x344>)
 8009d3e:	4013      	ands	r3, r2
 8009d40:	0019      	movs	r1, r3
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	68da      	ldr	r2, [r3, #12]
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	430a      	orrs	r2, r1
 8009d4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4ab8      	ldr	r2, [pc, #736]	; (800a03c <UART_SetConfig+0x348>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d004      	beq.n	8009d68 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d64:	4313      	orrs	r3, r2
 8009d66:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	4ab4      	ldr	r2, [pc, #720]	; (800a040 <UART_SetConfig+0x34c>)
 8009d70:	4013      	ands	r3, r2
 8009d72:	0019      	movs	r1, r3
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4ab0      	ldr	r2, [pc, #704]	; (800a044 <UART_SetConfig+0x350>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d131      	bne.n	8009dec <UART_SetConfig+0xf8>
 8009d88:	4baf      	ldr	r3, [pc, #700]	; (800a048 <UART_SetConfig+0x354>)
 8009d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d8c:	2203      	movs	r2, #3
 8009d8e:	4013      	ands	r3, r2
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	d01d      	beq.n	8009dd0 <UART_SetConfig+0xdc>
 8009d94:	d823      	bhi.n	8009dde <UART_SetConfig+0xea>
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d00c      	beq.n	8009db4 <UART_SetConfig+0xc0>
 8009d9a:	d820      	bhi.n	8009dde <UART_SetConfig+0xea>
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d002      	beq.n	8009da6 <UART_SetConfig+0xb2>
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d00e      	beq.n	8009dc2 <UART_SetConfig+0xce>
 8009da4:	e01b      	b.n	8009dde <UART_SetConfig+0xea>
 8009da6:	231b      	movs	r3, #27
 8009da8:	2218      	movs	r2, #24
 8009daa:	189b      	adds	r3, r3, r2
 8009dac:	19db      	adds	r3, r3, r7
 8009dae:	2201      	movs	r2, #1
 8009db0:	701a      	strb	r2, [r3, #0]
 8009db2:	e0b4      	b.n	8009f1e <UART_SetConfig+0x22a>
 8009db4:	231b      	movs	r3, #27
 8009db6:	2218      	movs	r2, #24
 8009db8:	189b      	adds	r3, r3, r2
 8009dba:	19db      	adds	r3, r3, r7
 8009dbc:	2202      	movs	r2, #2
 8009dbe:	701a      	strb	r2, [r3, #0]
 8009dc0:	e0ad      	b.n	8009f1e <UART_SetConfig+0x22a>
 8009dc2:	231b      	movs	r3, #27
 8009dc4:	2218      	movs	r2, #24
 8009dc6:	189b      	adds	r3, r3, r2
 8009dc8:	19db      	adds	r3, r3, r7
 8009dca:	2204      	movs	r2, #4
 8009dcc:	701a      	strb	r2, [r3, #0]
 8009dce:	e0a6      	b.n	8009f1e <UART_SetConfig+0x22a>
 8009dd0:	231b      	movs	r3, #27
 8009dd2:	2218      	movs	r2, #24
 8009dd4:	189b      	adds	r3, r3, r2
 8009dd6:	19db      	adds	r3, r3, r7
 8009dd8:	2208      	movs	r2, #8
 8009dda:	701a      	strb	r2, [r3, #0]
 8009ddc:	e09f      	b.n	8009f1e <UART_SetConfig+0x22a>
 8009dde:	231b      	movs	r3, #27
 8009de0:	2218      	movs	r2, #24
 8009de2:	189b      	adds	r3, r3, r2
 8009de4:	19db      	adds	r3, r3, r7
 8009de6:	2210      	movs	r2, #16
 8009de8:	701a      	strb	r2, [r3, #0]
 8009dea:	e098      	b.n	8009f1e <UART_SetConfig+0x22a>
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a96      	ldr	r2, [pc, #600]	; (800a04c <UART_SetConfig+0x358>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d131      	bne.n	8009e5a <UART_SetConfig+0x166>
 8009df6:	4b94      	ldr	r3, [pc, #592]	; (800a048 <UART_SetConfig+0x354>)
 8009df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dfa:	220c      	movs	r2, #12
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	2b0c      	cmp	r3, #12
 8009e00:	d01d      	beq.n	8009e3e <UART_SetConfig+0x14a>
 8009e02:	d823      	bhi.n	8009e4c <UART_SetConfig+0x158>
 8009e04:	2b08      	cmp	r3, #8
 8009e06:	d00c      	beq.n	8009e22 <UART_SetConfig+0x12e>
 8009e08:	d820      	bhi.n	8009e4c <UART_SetConfig+0x158>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d002      	beq.n	8009e14 <UART_SetConfig+0x120>
 8009e0e:	2b04      	cmp	r3, #4
 8009e10:	d00e      	beq.n	8009e30 <UART_SetConfig+0x13c>
 8009e12:	e01b      	b.n	8009e4c <UART_SetConfig+0x158>
 8009e14:	231b      	movs	r3, #27
 8009e16:	2218      	movs	r2, #24
 8009e18:	189b      	adds	r3, r3, r2
 8009e1a:	19db      	adds	r3, r3, r7
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	701a      	strb	r2, [r3, #0]
 8009e20:	e07d      	b.n	8009f1e <UART_SetConfig+0x22a>
 8009e22:	231b      	movs	r3, #27
 8009e24:	2218      	movs	r2, #24
 8009e26:	189b      	adds	r3, r3, r2
 8009e28:	19db      	adds	r3, r3, r7
 8009e2a:	2202      	movs	r2, #2
 8009e2c:	701a      	strb	r2, [r3, #0]
 8009e2e:	e076      	b.n	8009f1e <UART_SetConfig+0x22a>
 8009e30:	231b      	movs	r3, #27
 8009e32:	2218      	movs	r2, #24
 8009e34:	189b      	adds	r3, r3, r2
 8009e36:	19db      	adds	r3, r3, r7
 8009e38:	2204      	movs	r2, #4
 8009e3a:	701a      	strb	r2, [r3, #0]
 8009e3c:	e06f      	b.n	8009f1e <UART_SetConfig+0x22a>
 8009e3e:	231b      	movs	r3, #27
 8009e40:	2218      	movs	r2, #24
 8009e42:	189b      	adds	r3, r3, r2
 8009e44:	19db      	adds	r3, r3, r7
 8009e46:	2208      	movs	r2, #8
 8009e48:	701a      	strb	r2, [r3, #0]
 8009e4a:	e068      	b.n	8009f1e <UART_SetConfig+0x22a>
 8009e4c:	231b      	movs	r3, #27
 8009e4e:	2218      	movs	r2, #24
 8009e50:	189b      	adds	r3, r3, r2
 8009e52:	19db      	adds	r3, r3, r7
 8009e54:	2210      	movs	r2, #16
 8009e56:	701a      	strb	r2, [r3, #0]
 8009e58:	e061      	b.n	8009f1e <UART_SetConfig+0x22a>
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a7c      	ldr	r2, [pc, #496]	; (800a050 <UART_SetConfig+0x35c>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d106      	bne.n	8009e72 <UART_SetConfig+0x17e>
 8009e64:	231b      	movs	r3, #27
 8009e66:	2218      	movs	r2, #24
 8009e68:	189b      	adds	r3, r3, r2
 8009e6a:	19db      	adds	r3, r3, r7
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	701a      	strb	r2, [r3, #0]
 8009e70:	e055      	b.n	8009f1e <UART_SetConfig+0x22a>
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a77      	ldr	r2, [pc, #476]	; (800a054 <UART_SetConfig+0x360>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d106      	bne.n	8009e8a <UART_SetConfig+0x196>
 8009e7c:	231b      	movs	r3, #27
 8009e7e:	2218      	movs	r2, #24
 8009e80:	189b      	adds	r3, r3, r2
 8009e82:	19db      	adds	r3, r3, r7
 8009e84:	2200      	movs	r2, #0
 8009e86:	701a      	strb	r2, [r3, #0]
 8009e88:	e049      	b.n	8009f1e <UART_SetConfig+0x22a>
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a6b      	ldr	r2, [pc, #428]	; (800a03c <UART_SetConfig+0x348>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d13e      	bne.n	8009f12 <UART_SetConfig+0x21e>
 8009e94:	4b6c      	ldr	r3, [pc, #432]	; (800a048 <UART_SetConfig+0x354>)
 8009e96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e98:	23c0      	movs	r3, #192	; 0xc0
 8009e9a:	011b      	lsls	r3, r3, #4
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	22c0      	movs	r2, #192	; 0xc0
 8009ea0:	0112      	lsls	r2, r2, #4
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d027      	beq.n	8009ef6 <UART_SetConfig+0x202>
 8009ea6:	22c0      	movs	r2, #192	; 0xc0
 8009ea8:	0112      	lsls	r2, r2, #4
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d82a      	bhi.n	8009f04 <UART_SetConfig+0x210>
 8009eae:	2280      	movs	r2, #128	; 0x80
 8009eb0:	0112      	lsls	r2, r2, #4
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d011      	beq.n	8009eda <UART_SetConfig+0x1e6>
 8009eb6:	2280      	movs	r2, #128	; 0x80
 8009eb8:	0112      	lsls	r2, r2, #4
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d822      	bhi.n	8009f04 <UART_SetConfig+0x210>
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d004      	beq.n	8009ecc <UART_SetConfig+0x1d8>
 8009ec2:	2280      	movs	r2, #128	; 0x80
 8009ec4:	00d2      	lsls	r2, r2, #3
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d00e      	beq.n	8009ee8 <UART_SetConfig+0x1f4>
 8009eca:	e01b      	b.n	8009f04 <UART_SetConfig+0x210>
 8009ecc:	231b      	movs	r3, #27
 8009ece:	2218      	movs	r2, #24
 8009ed0:	189b      	adds	r3, r3, r2
 8009ed2:	19db      	adds	r3, r3, r7
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	701a      	strb	r2, [r3, #0]
 8009ed8:	e021      	b.n	8009f1e <UART_SetConfig+0x22a>
 8009eda:	231b      	movs	r3, #27
 8009edc:	2218      	movs	r2, #24
 8009ede:	189b      	adds	r3, r3, r2
 8009ee0:	19db      	adds	r3, r3, r7
 8009ee2:	2202      	movs	r2, #2
 8009ee4:	701a      	strb	r2, [r3, #0]
 8009ee6:	e01a      	b.n	8009f1e <UART_SetConfig+0x22a>
 8009ee8:	231b      	movs	r3, #27
 8009eea:	2218      	movs	r2, #24
 8009eec:	189b      	adds	r3, r3, r2
 8009eee:	19db      	adds	r3, r3, r7
 8009ef0:	2204      	movs	r2, #4
 8009ef2:	701a      	strb	r2, [r3, #0]
 8009ef4:	e013      	b.n	8009f1e <UART_SetConfig+0x22a>
 8009ef6:	231b      	movs	r3, #27
 8009ef8:	2218      	movs	r2, #24
 8009efa:	189b      	adds	r3, r3, r2
 8009efc:	19db      	adds	r3, r3, r7
 8009efe:	2208      	movs	r2, #8
 8009f00:	701a      	strb	r2, [r3, #0]
 8009f02:	e00c      	b.n	8009f1e <UART_SetConfig+0x22a>
 8009f04:	231b      	movs	r3, #27
 8009f06:	2218      	movs	r2, #24
 8009f08:	189b      	adds	r3, r3, r2
 8009f0a:	19db      	adds	r3, r3, r7
 8009f0c:	2210      	movs	r2, #16
 8009f0e:	701a      	strb	r2, [r3, #0]
 8009f10:	e005      	b.n	8009f1e <UART_SetConfig+0x22a>
 8009f12:	231b      	movs	r3, #27
 8009f14:	2218      	movs	r2, #24
 8009f16:	189b      	adds	r3, r3, r2
 8009f18:	19db      	adds	r3, r3, r7
 8009f1a:	2210      	movs	r2, #16
 8009f1c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a46      	ldr	r2, [pc, #280]	; (800a03c <UART_SetConfig+0x348>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d000      	beq.n	8009f2a <UART_SetConfig+0x236>
 8009f28:	e09a      	b.n	800a060 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f2a:	231b      	movs	r3, #27
 8009f2c:	2218      	movs	r2, #24
 8009f2e:	189b      	adds	r3, r3, r2
 8009f30:	19db      	adds	r3, r3, r7
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	2b08      	cmp	r3, #8
 8009f36:	d01d      	beq.n	8009f74 <UART_SetConfig+0x280>
 8009f38:	dc20      	bgt.n	8009f7c <UART_SetConfig+0x288>
 8009f3a:	2b04      	cmp	r3, #4
 8009f3c:	d015      	beq.n	8009f6a <UART_SetConfig+0x276>
 8009f3e:	dc1d      	bgt.n	8009f7c <UART_SetConfig+0x288>
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <UART_SetConfig+0x256>
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d005      	beq.n	8009f54 <UART_SetConfig+0x260>
 8009f48:	e018      	b.n	8009f7c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f4a:	f7fe fcef 	bl	800892c <HAL_RCC_GetPCLK1Freq>
 8009f4e:	0003      	movs	r3, r0
 8009f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f52:	e01c      	b.n	8009f8e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f54:	4b3c      	ldr	r3, [pc, #240]	; (800a048 <UART_SetConfig+0x354>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2210      	movs	r2, #16
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	d002      	beq.n	8009f64 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009f5e:	4b3e      	ldr	r3, [pc, #248]	; (800a058 <UART_SetConfig+0x364>)
 8009f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f62:	e014      	b.n	8009f8e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8009f64:	4b3d      	ldr	r3, [pc, #244]	; (800a05c <UART_SetConfig+0x368>)
 8009f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f68:	e011      	b.n	8009f8e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f6a:	f7fe fc2f 	bl	80087cc <HAL_RCC_GetSysClockFreq>
 8009f6e:	0003      	movs	r3, r0
 8009f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f72:	e00c      	b.n	8009f8e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f74:	2380      	movs	r3, #128	; 0x80
 8009f76:	021b      	lsls	r3, r3, #8
 8009f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f7a:	e008      	b.n	8009f8e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f80:	231a      	movs	r3, #26
 8009f82:	2218      	movs	r2, #24
 8009f84:	189b      	adds	r3, r3, r2
 8009f86:	19db      	adds	r3, r3, r7
 8009f88:	2201      	movs	r2, #1
 8009f8a:	701a      	strb	r2, [r3, #0]
        break;
 8009f8c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d100      	bne.n	8009f96 <UART_SetConfig+0x2a2>
 8009f94:	e133      	b.n	800a1fe <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	685a      	ldr	r2, [r3, #4]
 8009f9a:	0013      	movs	r3, r2
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	189b      	adds	r3, r3, r2
 8009fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d305      	bcc.n	8009fb2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d906      	bls.n	8009fc0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8009fb2:	231a      	movs	r3, #26
 8009fb4:	2218      	movs	r2, #24
 8009fb6:	189b      	adds	r3, r3, r2
 8009fb8:	19db      	adds	r3, r3, r7
 8009fba:	2201      	movs	r2, #1
 8009fbc:	701a      	strb	r2, [r3, #0]
 8009fbe:	e11e      	b.n	800a1fe <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc2:	613b      	str	r3, [r7, #16]
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	617b      	str	r3, [r7, #20]
 8009fc8:	6939      	ldr	r1, [r7, #16]
 8009fca:	697a      	ldr	r2, [r7, #20]
 8009fcc:	000b      	movs	r3, r1
 8009fce:	0e1b      	lsrs	r3, r3, #24
 8009fd0:	0010      	movs	r0, r2
 8009fd2:	0205      	lsls	r5, r0, #8
 8009fd4:	431d      	orrs	r5, r3
 8009fd6:	000b      	movs	r3, r1
 8009fd8:	021c      	lsls	r4, r3, #8
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	085b      	lsrs	r3, r3, #1
 8009fe0:	60bb      	str	r3, [r7, #8]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60fb      	str	r3, [r7, #12]
 8009fe6:	68b8      	ldr	r0, [r7, #8]
 8009fe8:	68f9      	ldr	r1, [r7, #12]
 8009fea:	1900      	adds	r0, r0, r4
 8009fec:	4169      	adcs	r1, r5
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	603b      	str	r3, [r7, #0]
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	607b      	str	r3, [r7, #4]
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f7f6 fa98 	bl	8000530 <__aeabi_uldivmod>
 800a000:	0002      	movs	r2, r0
 800a002:	000b      	movs	r3, r1
 800a004:	0013      	movs	r3, r2
 800a006:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a00a:	23c0      	movs	r3, #192	; 0xc0
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	429a      	cmp	r2, r3
 800a010:	d309      	bcc.n	800a026 <UART_SetConfig+0x332>
 800a012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a014:	2380      	movs	r3, #128	; 0x80
 800a016:	035b      	lsls	r3, r3, #13
 800a018:	429a      	cmp	r2, r3
 800a01a:	d204      	bcs.n	800a026 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a022:	60da      	str	r2, [r3, #12]
 800a024:	e0eb      	b.n	800a1fe <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800a026:	231a      	movs	r3, #26
 800a028:	2218      	movs	r2, #24
 800a02a:	189b      	adds	r3, r3, r2
 800a02c:	19db      	adds	r3, r3, r7
 800a02e:	2201      	movs	r2, #1
 800a030:	701a      	strb	r2, [r3, #0]
 800a032:	e0e4      	b.n	800a1fe <UART_SetConfig+0x50a>
 800a034:	efff69f3 	.word	0xefff69f3
 800a038:	ffffcfff 	.word	0xffffcfff
 800a03c:	40004800 	.word	0x40004800
 800a040:	fffff4ff 	.word	0xfffff4ff
 800a044:	40013800 	.word	0x40013800
 800a048:	40021000 	.word	0x40021000
 800a04c:	40004400 	.word	0x40004400
 800a050:	40004c00 	.word	0x40004c00
 800a054:	40005000 	.word	0x40005000
 800a058:	003d0900 	.word	0x003d0900
 800a05c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	69da      	ldr	r2, [r3, #28]
 800a064:	2380      	movs	r3, #128	; 0x80
 800a066:	021b      	lsls	r3, r3, #8
 800a068:	429a      	cmp	r2, r3
 800a06a:	d000      	beq.n	800a06e <UART_SetConfig+0x37a>
 800a06c:	e070      	b.n	800a150 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800a06e:	231b      	movs	r3, #27
 800a070:	2218      	movs	r2, #24
 800a072:	189b      	adds	r3, r3, r2
 800a074:	19db      	adds	r3, r3, r7
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	2b08      	cmp	r3, #8
 800a07a:	d822      	bhi.n	800a0c2 <UART_SetConfig+0x3ce>
 800a07c:	009a      	lsls	r2, r3, #2
 800a07e:	4b67      	ldr	r3, [pc, #412]	; (800a21c <UART_SetConfig+0x528>)
 800a080:	18d3      	adds	r3, r2, r3
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a086:	f7fe fc51 	bl	800892c <HAL_RCC_GetPCLK1Freq>
 800a08a:	0003      	movs	r3, r0
 800a08c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a08e:	e021      	b.n	800a0d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a090:	f7fe fc62 	bl	8008958 <HAL_RCC_GetPCLK2Freq>
 800a094:	0003      	movs	r3, r0
 800a096:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a098:	e01c      	b.n	800a0d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a09a:	4b61      	ldr	r3, [pc, #388]	; (800a220 <UART_SetConfig+0x52c>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2210      	movs	r2, #16
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	d002      	beq.n	800a0aa <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a0a4:	4b5f      	ldr	r3, [pc, #380]	; (800a224 <UART_SetConfig+0x530>)
 800a0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0a8:	e014      	b.n	800a0d4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800a0aa:	4b5f      	ldr	r3, [pc, #380]	; (800a228 <UART_SetConfig+0x534>)
 800a0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0ae:	e011      	b.n	800a0d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0b0:	f7fe fb8c 	bl	80087cc <HAL_RCC_GetSysClockFreq>
 800a0b4:	0003      	movs	r3, r0
 800a0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0b8:	e00c      	b.n	800a0d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0ba:	2380      	movs	r3, #128	; 0x80
 800a0bc:	021b      	lsls	r3, r3, #8
 800a0be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0c0:	e008      	b.n	800a0d4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a0c6:	231a      	movs	r3, #26
 800a0c8:	2218      	movs	r2, #24
 800a0ca:	189b      	adds	r3, r3, r2
 800a0cc:	19db      	adds	r3, r3, r7
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	701a      	strb	r2, [r3, #0]
        break;
 800a0d2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d100      	bne.n	800a0dc <UART_SetConfig+0x3e8>
 800a0da:	e090      	b.n	800a1fe <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0de:	005a      	lsls	r2, r3, #1
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	085b      	lsrs	r3, r3, #1
 800a0e6:	18d2      	adds	r2, r2, r3
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	0019      	movs	r1, r3
 800a0ee:	0010      	movs	r0, r2
 800a0f0:	f7f6 f830 	bl	8000154 <__udivsi3>
 800a0f4:	0003      	movs	r3, r0
 800a0f6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fa:	2b0f      	cmp	r3, #15
 800a0fc:	d921      	bls.n	800a142 <UART_SetConfig+0x44e>
 800a0fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a100:	2380      	movs	r3, #128	; 0x80
 800a102:	025b      	lsls	r3, r3, #9
 800a104:	429a      	cmp	r2, r3
 800a106:	d21c      	bcs.n	800a142 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	200e      	movs	r0, #14
 800a10e:	2418      	movs	r4, #24
 800a110:	1903      	adds	r3, r0, r4
 800a112:	19db      	adds	r3, r3, r7
 800a114:	210f      	movs	r1, #15
 800a116:	438a      	bics	r2, r1
 800a118:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11c:	085b      	lsrs	r3, r3, #1
 800a11e:	b29b      	uxth	r3, r3
 800a120:	2207      	movs	r2, #7
 800a122:	4013      	ands	r3, r2
 800a124:	b299      	uxth	r1, r3
 800a126:	1903      	adds	r3, r0, r4
 800a128:	19db      	adds	r3, r3, r7
 800a12a:	1902      	adds	r2, r0, r4
 800a12c:	19d2      	adds	r2, r2, r7
 800a12e:	8812      	ldrh	r2, [r2, #0]
 800a130:	430a      	orrs	r2, r1
 800a132:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	1902      	adds	r2, r0, r4
 800a13a:	19d2      	adds	r2, r2, r7
 800a13c:	8812      	ldrh	r2, [r2, #0]
 800a13e:	60da      	str	r2, [r3, #12]
 800a140:	e05d      	b.n	800a1fe <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800a142:	231a      	movs	r3, #26
 800a144:	2218      	movs	r2, #24
 800a146:	189b      	adds	r3, r3, r2
 800a148:	19db      	adds	r3, r3, r7
 800a14a:	2201      	movs	r2, #1
 800a14c:	701a      	strb	r2, [r3, #0]
 800a14e:	e056      	b.n	800a1fe <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a150:	231b      	movs	r3, #27
 800a152:	2218      	movs	r2, #24
 800a154:	189b      	adds	r3, r3, r2
 800a156:	19db      	adds	r3, r3, r7
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	2b08      	cmp	r3, #8
 800a15c:	d822      	bhi.n	800a1a4 <UART_SetConfig+0x4b0>
 800a15e:	009a      	lsls	r2, r3, #2
 800a160:	4b32      	ldr	r3, [pc, #200]	; (800a22c <UART_SetConfig+0x538>)
 800a162:	18d3      	adds	r3, r2, r3
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a168:	f7fe fbe0 	bl	800892c <HAL_RCC_GetPCLK1Freq>
 800a16c:	0003      	movs	r3, r0
 800a16e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a170:	e021      	b.n	800a1b6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a172:	f7fe fbf1 	bl	8008958 <HAL_RCC_GetPCLK2Freq>
 800a176:	0003      	movs	r3, r0
 800a178:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a17a:	e01c      	b.n	800a1b6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a17c:	4b28      	ldr	r3, [pc, #160]	; (800a220 <UART_SetConfig+0x52c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2210      	movs	r2, #16
 800a182:	4013      	ands	r3, r2
 800a184:	d002      	beq.n	800a18c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a186:	4b27      	ldr	r3, [pc, #156]	; (800a224 <UART_SetConfig+0x530>)
 800a188:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a18a:	e014      	b.n	800a1b6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800a18c:	4b26      	ldr	r3, [pc, #152]	; (800a228 <UART_SetConfig+0x534>)
 800a18e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a190:	e011      	b.n	800a1b6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a192:	f7fe fb1b 	bl	80087cc <HAL_RCC_GetSysClockFreq>
 800a196:	0003      	movs	r3, r0
 800a198:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a19a:	e00c      	b.n	800a1b6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a19c:	2380      	movs	r3, #128	; 0x80
 800a19e:	021b      	lsls	r3, r3, #8
 800a1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1a2:	e008      	b.n	800a1b6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a1a8:	231a      	movs	r3, #26
 800a1aa:	2218      	movs	r2, #24
 800a1ac:	189b      	adds	r3, r3, r2
 800a1ae:	19db      	adds	r3, r3, r7
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	701a      	strb	r2, [r3, #0]
        break;
 800a1b4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800a1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d020      	beq.n	800a1fe <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	085a      	lsrs	r2, r3, #1
 800a1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c4:	18d2      	adds	r2, r2, r3
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	0019      	movs	r1, r3
 800a1cc:	0010      	movs	r0, r2
 800a1ce:	f7f5 ffc1 	bl	8000154 <__udivsi3>
 800a1d2:	0003      	movs	r3, r0
 800a1d4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d8:	2b0f      	cmp	r3, #15
 800a1da:	d90a      	bls.n	800a1f2 <UART_SetConfig+0x4fe>
 800a1dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1de:	2380      	movs	r3, #128	; 0x80
 800a1e0:	025b      	lsls	r3, r3, #9
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d205      	bcs.n	800a1f2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	60da      	str	r2, [r3, #12]
 800a1f0:	e005      	b.n	800a1fe <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800a1f2:	231a      	movs	r3, #26
 800a1f4:	2218      	movs	r2, #24
 800a1f6:	189b      	adds	r3, r3, r2
 800a1f8:	19db      	adds	r3, r3, r7
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	2200      	movs	r2, #0
 800a202:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	2200      	movs	r2, #0
 800a208:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a20a:	231a      	movs	r3, #26
 800a20c:	2218      	movs	r2, #24
 800a20e:	189b      	adds	r3, r3, r2
 800a210:	19db      	adds	r3, r3, r7
 800a212:	781b      	ldrb	r3, [r3, #0]
}
 800a214:	0018      	movs	r0, r3
 800a216:	46bd      	mov	sp, r7
 800a218:	b00e      	add	sp, #56	; 0x38
 800a21a:	bdb0      	pop	{r4, r5, r7, pc}
 800a21c:	080136cc 	.word	0x080136cc
 800a220:	40021000 	.word	0x40021000
 800a224:	003d0900 	.word	0x003d0900
 800a228:	00f42400 	.word	0x00f42400
 800a22c:	080136f0 	.word	0x080136f0

0800a230 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23c:	2201      	movs	r2, #1
 800a23e:	4013      	ands	r3, r2
 800a240:	d00b      	beq.n	800a25a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	4a4a      	ldr	r2, [pc, #296]	; (800a374 <UART_AdvFeatureConfig+0x144>)
 800a24a:	4013      	ands	r3, r2
 800a24c:	0019      	movs	r1, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	430a      	orrs	r2, r1
 800a258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25e:	2202      	movs	r2, #2
 800a260:	4013      	ands	r3, r2
 800a262:	d00b      	beq.n	800a27c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	4a43      	ldr	r2, [pc, #268]	; (800a378 <UART_AdvFeatureConfig+0x148>)
 800a26c:	4013      	ands	r3, r2
 800a26e:	0019      	movs	r1, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	430a      	orrs	r2, r1
 800a27a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a280:	2204      	movs	r2, #4
 800a282:	4013      	ands	r3, r2
 800a284:	d00b      	beq.n	800a29e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	4a3b      	ldr	r2, [pc, #236]	; (800a37c <UART_AdvFeatureConfig+0x14c>)
 800a28e:	4013      	ands	r3, r2
 800a290:	0019      	movs	r1, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	430a      	orrs	r2, r1
 800a29c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	2208      	movs	r2, #8
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	d00b      	beq.n	800a2c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	4a34      	ldr	r2, [pc, #208]	; (800a380 <UART_AdvFeatureConfig+0x150>)
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	0019      	movs	r1, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	430a      	orrs	r2, r1
 800a2be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c4:	2210      	movs	r2, #16
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	d00b      	beq.n	800a2e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	4a2c      	ldr	r2, [pc, #176]	; (800a384 <UART_AdvFeatureConfig+0x154>)
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	0019      	movs	r1, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	430a      	orrs	r2, r1
 800a2e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e6:	2220      	movs	r2, #32
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	d00b      	beq.n	800a304 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	4a25      	ldr	r2, [pc, #148]	; (800a388 <UART_AdvFeatureConfig+0x158>)
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	0019      	movs	r1, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	430a      	orrs	r2, r1
 800a302:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a308:	2240      	movs	r2, #64	; 0x40
 800a30a:	4013      	ands	r3, r2
 800a30c:	d01d      	beq.n	800a34a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	4a1d      	ldr	r2, [pc, #116]	; (800a38c <UART_AdvFeatureConfig+0x15c>)
 800a316:	4013      	ands	r3, r2
 800a318:	0019      	movs	r1, r3
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	430a      	orrs	r2, r1
 800a324:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a32a:	2380      	movs	r3, #128	; 0x80
 800a32c:	035b      	lsls	r3, r3, #13
 800a32e:	429a      	cmp	r2, r3
 800a330:	d10b      	bne.n	800a34a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	4a15      	ldr	r2, [pc, #84]	; (800a390 <UART_AdvFeatureConfig+0x160>)
 800a33a:	4013      	ands	r3, r2
 800a33c:	0019      	movs	r1, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	430a      	orrs	r2, r1
 800a348:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34e:	2280      	movs	r2, #128	; 0x80
 800a350:	4013      	ands	r3, r2
 800a352:	d00b      	beq.n	800a36c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	4a0e      	ldr	r2, [pc, #56]	; (800a394 <UART_AdvFeatureConfig+0x164>)
 800a35c:	4013      	ands	r3, r2
 800a35e:	0019      	movs	r1, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	430a      	orrs	r2, r1
 800a36a:	605a      	str	r2, [r3, #4]
  }
}
 800a36c:	46c0      	nop			; (mov r8, r8)
 800a36e:	46bd      	mov	sp, r7
 800a370:	b002      	add	sp, #8
 800a372:	bd80      	pop	{r7, pc}
 800a374:	fffdffff 	.word	0xfffdffff
 800a378:	fffeffff 	.word	0xfffeffff
 800a37c:	fffbffff 	.word	0xfffbffff
 800a380:	ffff7fff 	.word	0xffff7fff
 800a384:	ffffefff 	.word	0xffffefff
 800a388:	ffffdfff 	.word	0xffffdfff
 800a38c:	ffefffff 	.word	0xffefffff
 800a390:	ff9fffff 	.word	0xff9fffff
 800a394:	fff7ffff 	.word	0xfff7ffff

0800a398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b092      	sub	sp, #72	; 0x48
 800a39c:	af02      	add	r7, sp, #8
 800a39e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2284      	movs	r2, #132	; 0x84
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a3a8:	f7fb fdda 	bl	8005f60 <HAL_GetTick>
 800a3ac:	0003      	movs	r3, r0
 800a3ae:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2208      	movs	r2, #8
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	2b08      	cmp	r3, #8
 800a3bc:	d12c      	bne.n	800a418 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c0:	2280      	movs	r2, #128	; 0x80
 800a3c2:	0391      	lsls	r1, r2, #14
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	4a46      	ldr	r2, [pc, #280]	; (800a4e0 <UART_CheckIdleState+0x148>)
 800a3c8:	9200      	str	r2, [sp, #0]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f000 f88c 	bl	800a4e8 <UART_WaitOnFlagUntilTimeout>
 800a3d0:	1e03      	subs	r3, r0, #0
 800a3d2:	d021      	beq.n	800a418 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3d4:	f3ef 8310 	mrs	r3, PRIMASK
 800a3d8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a3dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3de:	2301      	movs	r3, #1
 800a3e0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e4:	f383 8810 	msr	PRIMASK, r3
}
 800a3e8:	46c0      	nop			; (mov r8, r8)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2180      	movs	r1, #128	; 0x80
 800a3f6:	438a      	bics	r2, r1
 800a3f8:	601a      	str	r2, [r3, #0]
 800a3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a400:	f383 8810 	msr	PRIMASK, r3
}
 800a404:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2220      	movs	r2, #32
 800a40a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2278      	movs	r2, #120	; 0x78
 800a410:	2100      	movs	r1, #0
 800a412:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a414:	2303      	movs	r3, #3
 800a416:	e05f      	b.n	800a4d8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2204      	movs	r2, #4
 800a420:	4013      	ands	r3, r2
 800a422:	2b04      	cmp	r3, #4
 800a424:	d146      	bne.n	800a4b4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a428:	2280      	movs	r2, #128	; 0x80
 800a42a:	03d1      	lsls	r1, r2, #15
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	4a2c      	ldr	r2, [pc, #176]	; (800a4e0 <UART_CheckIdleState+0x148>)
 800a430:	9200      	str	r2, [sp, #0]
 800a432:	2200      	movs	r2, #0
 800a434:	f000 f858 	bl	800a4e8 <UART_WaitOnFlagUntilTimeout>
 800a438:	1e03      	subs	r3, r0, #0
 800a43a:	d03b      	beq.n	800a4b4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a43c:	f3ef 8310 	mrs	r3, PRIMASK
 800a440:	60fb      	str	r3, [r7, #12]
  return(result);
 800a442:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a444:	637b      	str	r3, [r7, #52]	; 0x34
 800a446:	2301      	movs	r3, #1
 800a448:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	f383 8810 	msr	PRIMASK, r3
}
 800a450:	46c0      	nop			; (mov r8, r8)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4921      	ldr	r1, [pc, #132]	; (800a4e4 <UART_CheckIdleState+0x14c>)
 800a45e:	400a      	ands	r2, r1
 800a460:	601a      	str	r2, [r3, #0]
 800a462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a464:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	f383 8810 	msr	PRIMASK, r3
}
 800a46c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a46e:	f3ef 8310 	mrs	r3, PRIMASK
 800a472:	61bb      	str	r3, [r7, #24]
  return(result);
 800a474:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a476:	633b      	str	r3, [r7, #48]	; 0x30
 800a478:	2301      	movs	r3, #1
 800a47a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	f383 8810 	msr	PRIMASK, r3
}
 800a482:	46c0      	nop			; (mov r8, r8)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	689a      	ldr	r2, [r3, #8]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2101      	movs	r1, #1
 800a490:	438a      	bics	r2, r1
 800a492:	609a      	str	r2, [r3, #8]
 800a494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a496:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a498:	6a3b      	ldr	r3, [r7, #32]
 800a49a:	f383 8810 	msr	PRIMASK, r3
}
 800a49e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2280      	movs	r2, #128	; 0x80
 800a4a4:	2120      	movs	r1, #32
 800a4a6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2278      	movs	r2, #120	; 0x78
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	e011      	b.n	800a4d8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2220      	movs	r2, #32
 800a4b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2280      	movs	r2, #128	; 0x80
 800a4be:	2120      	movs	r1, #32
 800a4c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2278      	movs	r2, #120	; 0x78
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	0018      	movs	r0, r3
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	b010      	add	sp, #64	; 0x40
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	01ffffff 	.word	0x01ffffff
 800a4e4:	fffffedf 	.word	0xfffffedf

0800a4e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	603b      	str	r3, [r7, #0]
 800a4f4:	1dfb      	adds	r3, r7, #7
 800a4f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4f8:	e04b      	b.n	800a592 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	d048      	beq.n	800a592 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a500:	f7fb fd2e 	bl	8005f60 <HAL_GetTick>
 800a504:	0002      	movs	r2, r0
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	1ad3      	subs	r3, r2, r3
 800a50a:	69ba      	ldr	r2, [r7, #24]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d302      	bcc.n	800a516 <UART_WaitOnFlagUntilTimeout+0x2e>
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d101      	bne.n	800a51a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e04b      	b.n	800a5b2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2204      	movs	r2, #4
 800a522:	4013      	ands	r3, r2
 800a524:	d035      	beq.n	800a592 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	69db      	ldr	r3, [r3, #28]
 800a52c:	2208      	movs	r2, #8
 800a52e:	4013      	ands	r3, r2
 800a530:	2b08      	cmp	r3, #8
 800a532:	d111      	bne.n	800a558 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2208      	movs	r2, #8
 800a53a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	0018      	movs	r0, r3
 800a540:	f000 f900 	bl	800a744 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2284      	movs	r2, #132	; 0x84
 800a548:	2108      	movs	r1, #8
 800a54a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2278      	movs	r2, #120	; 0x78
 800a550:	2100      	movs	r1, #0
 800a552:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	e02c      	b.n	800a5b2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	69da      	ldr	r2, [r3, #28]
 800a55e:	2380      	movs	r3, #128	; 0x80
 800a560:	011b      	lsls	r3, r3, #4
 800a562:	401a      	ands	r2, r3
 800a564:	2380      	movs	r3, #128	; 0x80
 800a566:	011b      	lsls	r3, r3, #4
 800a568:	429a      	cmp	r2, r3
 800a56a:	d112      	bne.n	800a592 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2280      	movs	r2, #128	; 0x80
 800a572:	0112      	lsls	r2, r2, #4
 800a574:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	0018      	movs	r0, r3
 800a57a:	f000 f8e3 	bl	800a744 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2284      	movs	r2, #132	; 0x84
 800a582:	2120      	movs	r1, #32
 800a584:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2278      	movs	r2, #120	; 0x78
 800a58a:	2100      	movs	r1, #0
 800a58c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a58e:	2303      	movs	r3, #3
 800a590:	e00f      	b.n	800a5b2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	69db      	ldr	r3, [r3, #28]
 800a598:	68ba      	ldr	r2, [r7, #8]
 800a59a:	4013      	ands	r3, r2
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	1ad3      	subs	r3, r2, r3
 800a5a0:	425a      	negs	r2, r3
 800a5a2:	4153      	adcs	r3, r2
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	001a      	movs	r2, r3
 800a5a8:	1dfb      	adds	r3, r7, #7
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d0a4      	beq.n	800a4fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	0018      	movs	r0, r3
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	b004      	add	sp, #16
 800a5b8:	bd80      	pop	{r7, pc}
	...

0800a5bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b090      	sub	sp, #64	; 0x40
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	1dbb      	adds	r3, r7, #6
 800a5c8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	1dba      	adds	r2, r7, #6
 800a5d4:	2158      	movs	r1, #88	; 0x58
 800a5d6:	8812      	ldrh	r2, [r2, #0]
 800a5d8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2284      	movs	r2, #132	; 0x84
 800a5de:	2100      	movs	r1, #0
 800a5e0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2280      	movs	r2, #128	; 0x80
 800a5e6:	2122      	movs	r1, #34	; 0x22
 800a5e8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d028      	beq.n	800a644 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5f6:	4a3e      	ldr	r2, [pc, #248]	; (800a6f0 <UART_Start_Receive_DMA+0x134>)
 800a5f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5fe:	4a3d      	ldr	r2, [pc, #244]	; (800a6f4 <UART_Start_Receive_DMA+0x138>)
 800a600:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a606:	4a3c      	ldr	r2, [pc, #240]	; (800a6f8 <UART_Start_Receive_DMA+0x13c>)
 800a608:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a60e:	2200      	movs	r2, #0
 800a610:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3324      	adds	r3, #36	; 0x24
 800a61c:	0019      	movs	r1, r3
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a622:	001a      	movs	r2, r3
 800a624:	1dbb      	adds	r3, r7, #6
 800a626:	881b      	ldrh	r3, [r3, #0]
 800a628:	f7fc f9b8 	bl	800699c <HAL_DMA_Start_IT>
 800a62c:	1e03      	subs	r3, r0, #0
 800a62e:	d009      	beq.n	800a644 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2284      	movs	r2, #132	; 0x84
 800a634:	2110      	movs	r1, #16
 800a636:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2280      	movs	r2, #128	; 0x80
 800a63c:	2120      	movs	r1, #32
 800a63e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	e050      	b.n	800a6e6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d019      	beq.n	800a680 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a64c:	f3ef 8310 	mrs	r3, PRIMASK
 800a650:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800a652:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a654:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a656:	2301      	movs	r3, #1
 800a658:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65c:	f383 8810 	msr	PRIMASK, r3
}
 800a660:	46c0      	nop			; (mov r8, r8)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2180      	movs	r1, #128	; 0x80
 800a66e:	0049      	lsls	r1, r1, #1
 800a670:	430a      	orrs	r2, r1
 800a672:	601a      	str	r2, [r3, #0]
 800a674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a676:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67a:	f383 8810 	msr	PRIMASK, r3
}
 800a67e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a680:	f3ef 8310 	mrs	r3, PRIMASK
 800a684:	613b      	str	r3, [r7, #16]
  return(result);
 800a686:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a688:	63bb      	str	r3, [r7, #56]	; 0x38
 800a68a:	2301      	movs	r3, #1
 800a68c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	f383 8810 	msr	PRIMASK, r3
}
 800a694:	46c0      	nop			; (mov r8, r8)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	689a      	ldr	r2, [r3, #8]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2101      	movs	r1, #1
 800a6a2:	430a      	orrs	r2, r1
 800a6a4:	609a      	str	r2, [r3, #8]
 800a6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	f383 8810 	msr	PRIMASK, r3
}
 800a6b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6b2:	f3ef 8310 	mrs	r3, PRIMASK
 800a6b6:	61fb      	str	r3, [r7, #28]
  return(result);
 800a6b8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6ba:	637b      	str	r3, [r7, #52]	; 0x34
 800a6bc:	2301      	movs	r3, #1
 800a6be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6c0:	6a3b      	ldr	r3, [r7, #32]
 800a6c2:	f383 8810 	msr	PRIMASK, r3
}
 800a6c6:	46c0      	nop			; (mov r8, r8)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	689a      	ldr	r2, [r3, #8]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2140      	movs	r1, #64	; 0x40
 800a6d4:	430a      	orrs	r2, r1
 800a6d6:	609a      	str	r2, [r3, #8]
 800a6d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6de:	f383 8810 	msr	PRIMASK, r3
}
 800a6e2:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	0018      	movs	r0, r3
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	b010      	add	sp, #64	; 0x40
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	46c0      	nop			; (mov r8, r8)
 800a6f0:	0800a80d 	.word	0x0800a80d
 800a6f4:	0800a93d 	.word	0x0800a93d
 800a6f8:	0800a97f 	.word	0x0800a97f

0800a6fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b086      	sub	sp, #24
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a704:	f3ef 8310 	mrs	r3, PRIMASK
 800a708:	60bb      	str	r3, [r7, #8]
  return(result);
 800a70a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a70c:	617b      	str	r3, [r7, #20]
 800a70e:	2301      	movs	r3, #1
 800a710:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f383 8810 	msr	PRIMASK, r3
}
 800a718:	46c0      	nop			; (mov r8, r8)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	21c0      	movs	r1, #192	; 0xc0
 800a726:	438a      	bics	r2, r1
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	f383 8810 	msr	PRIMASK, r3
}
 800a734:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2220      	movs	r2, #32
 800a73a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800a73c:	46c0      	nop			; (mov r8, r8)
 800a73e:	46bd      	mov	sp, r7
 800a740:	b006      	add	sp, #24
 800a742:	bd80      	pop	{r7, pc}

0800a744 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b08e      	sub	sp, #56	; 0x38
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a74c:	f3ef 8310 	mrs	r3, PRIMASK
 800a750:	617b      	str	r3, [r7, #20]
  return(result);
 800a752:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a754:	637b      	str	r3, [r7, #52]	; 0x34
 800a756:	2301      	movs	r3, #1
 800a758:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	f383 8810 	msr	PRIMASK, r3
}
 800a760:	46c0      	nop			; (mov r8, r8)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4926      	ldr	r1, [pc, #152]	; (800a808 <UART_EndRxTransfer+0xc4>)
 800a76e:	400a      	ands	r2, r1
 800a770:	601a      	str	r2, [r3, #0]
 800a772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a774:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	f383 8810 	msr	PRIMASK, r3
}
 800a77c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a77e:	f3ef 8310 	mrs	r3, PRIMASK
 800a782:	623b      	str	r3, [r7, #32]
  return(result);
 800a784:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a786:	633b      	str	r3, [r7, #48]	; 0x30
 800a788:	2301      	movs	r3, #1
 800a78a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78e:	f383 8810 	msr	PRIMASK, r3
}
 800a792:	46c0      	nop			; (mov r8, r8)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	689a      	ldr	r2, [r3, #8]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2101      	movs	r1, #1
 800a7a0:	438a      	bics	r2, r1
 800a7a2:	609a      	str	r2, [r3, #8]
 800a7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7aa:	f383 8810 	msr	PRIMASK, r3
}
 800a7ae:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d118      	bne.n	800a7ea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a7bc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a7be:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f383 8810 	msr	PRIMASK, r3
}
 800a7cc:	46c0      	nop			; (mov r8, r8)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2110      	movs	r1, #16
 800a7da:	438a      	bics	r2, r1
 800a7dc:	601a      	str	r2, [r3, #0]
 800a7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	f383 8810 	msr	PRIMASK, r3
}
 800a7e8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2280      	movs	r2, #128	; 0x80
 800a7ee:	2120      	movs	r1, #32
 800a7f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a7fe:	46c0      	nop			; (mov r8, r8)
 800a800:	46bd      	mov	sp, r7
 800a802:	b00e      	add	sp, #56	; 0x38
 800a804:	bd80      	pop	{r7, pc}
 800a806:	46c0      	nop			; (mov r8, r8)
 800a808:	fffffedf 	.word	0xfffffedf

0800a80c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b094      	sub	sp, #80	; 0x50
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a818:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2220      	movs	r2, #32
 800a822:	4013      	ands	r3, r2
 800a824:	d16f      	bne.n	800a906 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800a826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a828:	225a      	movs	r2, #90	; 0x5a
 800a82a:	2100      	movs	r1, #0
 800a82c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a82e:	f3ef 8310 	mrs	r3, PRIMASK
 800a832:	61bb      	str	r3, [r7, #24]
  return(result);
 800a834:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a836:	64bb      	str	r3, [r7, #72]	; 0x48
 800a838:	2301      	movs	r3, #1
 800a83a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	f383 8810 	msr	PRIMASK, r3
}
 800a842:	46c0      	nop			; (mov r8, r8)
 800a844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	493a      	ldr	r1, [pc, #232]	; (800a938 <UART_DMAReceiveCplt+0x12c>)
 800a850:	400a      	ands	r2, r1
 800a852:	601a      	str	r2, [r3, #0]
 800a854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a856:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	f383 8810 	msr	PRIMASK, r3
}
 800a85e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a860:	f3ef 8310 	mrs	r3, PRIMASK
 800a864:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a868:	647b      	str	r3, [r7, #68]	; 0x44
 800a86a:	2301      	movs	r3, #1
 800a86c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a870:	f383 8810 	msr	PRIMASK, r3
}
 800a874:	46c0      	nop			; (mov r8, r8)
 800a876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	689a      	ldr	r2, [r3, #8]
 800a87c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2101      	movs	r1, #1
 800a882:	438a      	bics	r2, r1
 800a884:	609a      	str	r2, [r3, #8]
 800a886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a888:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88c:	f383 8810 	msr	PRIMASK, r3
}
 800a890:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a892:	f3ef 8310 	mrs	r3, PRIMASK
 800a896:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a898:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a89a:	643b      	str	r3, [r7, #64]	; 0x40
 800a89c:	2301      	movs	r3, #1
 800a89e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a2:	f383 8810 	msr	PRIMASK, r3
}
 800a8a6:	46c0      	nop			; (mov r8, r8)
 800a8a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	689a      	ldr	r2, [r3, #8]
 800a8ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2140      	movs	r1, #64	; 0x40
 800a8b4:	438a      	bics	r2, r1
 800a8b6:	609a      	str	r2, [r3, #8]
 800a8b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8be:	f383 8810 	msr	PRIMASK, r3
}
 800a8c2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a8c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8c6:	2280      	movs	r2, #128	; 0x80
 800a8c8:	2120      	movs	r1, #32
 800a8ca:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d118      	bne.n	800a906 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8d4:	f3ef 8310 	mrs	r3, PRIMASK
 800a8d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8da:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8de:	2301      	movs	r3, #1
 800a8e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	f383 8810 	msr	PRIMASK, r3
}
 800a8e8:	46c0      	nop			; (mov r8, r8)
 800a8ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2110      	movs	r1, #16
 800a8f6:	438a      	bics	r2, r1
 800a8f8:	601a      	str	r2, [r3, #0]
 800a8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f383 8810 	msr	PRIMASK, r3
}
 800a904:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a908:	2200      	movs	r2, #0
 800a90a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a90c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a90e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a910:	2b01      	cmp	r3, #1
 800a912:	d108      	bne.n	800a926 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a916:	2258      	movs	r2, #88	; 0x58
 800a918:	5a9a      	ldrh	r2, [r3, r2]
 800a91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a91c:	0011      	movs	r1, r2
 800a91e:	0018      	movs	r0, r3
 800a920:	f7ff f9dc 	bl	8009cdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a924:	e003      	b.n	800a92e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800a926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a928:	0018      	movs	r0, r3
 800a92a:	f7ff f9bf 	bl	8009cac <HAL_UART_RxCpltCallback>
}
 800a92e:	46c0      	nop			; (mov r8, r8)
 800a930:	46bd      	mov	sp, r7
 800a932:	b014      	add	sp, #80	; 0x50
 800a934:	bd80      	pop	{r7, pc}
 800a936:	46c0      	nop			; (mov r8, r8)
 800a938:	fffffeff 	.word	0xfffffeff

0800a93c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a948:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2201      	movs	r2, #1
 800a94e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a954:	2b01      	cmp	r3, #1
 800a956:	d10a      	bne.n	800a96e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2258      	movs	r2, #88	; 0x58
 800a95c:	5a9b      	ldrh	r3, [r3, r2]
 800a95e:	085b      	lsrs	r3, r3, #1
 800a960:	b29a      	uxth	r2, r3
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	0011      	movs	r1, r2
 800a966:	0018      	movs	r0, r3
 800a968:	f7ff f9b8 	bl	8009cdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a96c:	e003      	b.n	800a976 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	0018      	movs	r0, r3
 800a972:	f7ff f9a3 	bl	8009cbc <HAL_UART_RxHalfCpltCallback>
}
 800a976:	46c0      	nop			; (mov r8, r8)
 800a978:	46bd      	mov	sp, r7
 800a97a:	b004      	add	sp, #16
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b086      	sub	sp, #24
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a98a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a990:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	2280      	movs	r2, #128	; 0x80
 800a996:	589b      	ldr	r3, [r3, r2]
 800a998:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	2280      	movs	r2, #128	; 0x80
 800a9a2:	4013      	ands	r3, r2
 800a9a4:	2b80      	cmp	r3, #128	; 0x80
 800a9a6:	d10a      	bne.n	800a9be <UART_DMAError+0x40>
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	2b21      	cmp	r3, #33	; 0x21
 800a9ac:	d107      	bne.n	800a9be <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	2252      	movs	r2, #82	; 0x52
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	0018      	movs	r0, r3
 800a9ba:	f7ff fe9f 	bl	800a6fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	2240      	movs	r2, #64	; 0x40
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	2b40      	cmp	r3, #64	; 0x40
 800a9ca:	d10a      	bne.n	800a9e2 <UART_DMAError+0x64>
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2b22      	cmp	r3, #34	; 0x22
 800a9d0:	d107      	bne.n	800a9e2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	225a      	movs	r2, #90	; 0x5a
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	0018      	movs	r0, r3
 800a9de:	f7ff feb1 	bl	800a744 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	2284      	movs	r2, #132	; 0x84
 800a9e6:	589b      	ldr	r3, [r3, r2]
 800a9e8:	2210      	movs	r2, #16
 800a9ea:	431a      	orrs	r2, r3
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	2184      	movs	r1, #132	; 0x84
 800a9f0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	0018      	movs	r0, r3
 800a9f6:	f7ff f969 	bl	8009ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9fa:	46c0      	nop			; (mov r8, r8)
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	b006      	add	sp, #24
 800aa00:	bd80      	pop	{r7, pc}
	...

0800aa04 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aa08:	4a06      	ldr	r2, [pc, #24]	; (800aa24 <MX_FATFS_Init+0x20>)
 800aa0a:	4b07      	ldr	r3, [pc, #28]	; (800aa28 <MX_FATFS_Init+0x24>)
 800aa0c:	0011      	movs	r1, r2
 800aa0e:	0018      	movs	r0, r3
 800aa10:	f003 f982 	bl	800dd18 <FATFS_LinkDriver>
 800aa14:	0003      	movs	r3, r0
 800aa16:	001a      	movs	r2, r3
 800aa18:	4b04      	ldr	r3, [pc, #16]	; (800aa2c <MX_FATFS_Init+0x28>)
 800aa1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aa1c:	46c0      	nop			; (mov r8, r8)
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	46c0      	nop			; (mov r8, r8)
 800aa24:	20003be8 	.word	0x20003be8
 800aa28:	20000044 	.word	0x20000044
 800aa2c:	20003be4 	.word	0x20003be4

0800aa30 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aa34:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aa36:	0018      	movs	r0, r3
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	0002      	movs	r2, r0
 800aa44:	1dfb      	adds	r3, r7, #7
 800aa46:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
  return SD_disk_initialize(pdrv);
 800aa48:	1dfb      	adds	r3, r7, #7
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	0018      	movs	r0, r3
 800aa4e:	f7f8 fbdf 	bl	8003210 <SD_disk_initialize>
 800aa52:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 800aa54:	0018      	movs	r0, r3
 800aa56:	46bd      	mov	sp, r7
 800aa58:	b002      	add	sp, #8
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	0002      	movs	r2, r0
 800aa64:	1dfb      	adds	r3, r7, #7
 800aa66:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
  return SD_disk_status(pdrv);
 800aa68:	1dfb      	adds	r3, r7, #7
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	0018      	movs	r0, r3
 800aa6e:	f7f8 fcd9 	bl	8003424 <SD_disk_status>
 800aa72:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 800aa74:	0018      	movs	r0, r3
 800aa76:	46bd      	mov	sp, r7
 800aa78:	b002      	add	sp, #8
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aa7c:	b5b0      	push	{r4, r5, r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60b9      	str	r1, [r7, #8]
 800aa84:	607a      	str	r2, [r7, #4]
 800aa86:	603b      	str	r3, [r7, #0]
 800aa88:	250f      	movs	r5, #15
 800aa8a:	197b      	adds	r3, r7, r5
 800aa8c:	1c02      	adds	r2, r0, #0
 800aa8e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
  return SD_disk_read(pdrv, buff, sector, count);
 800aa90:	683c      	ldr	r4, [r7, #0]
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	68b9      	ldr	r1, [r7, #8]
 800aa96:	197b      	adds	r3, r7, r5
 800aa98:	7818      	ldrb	r0, [r3, #0]
 800aa9a:	0023      	movs	r3, r4
 800aa9c:	f7f8 fcd8 	bl	8003450 <SD_disk_read>
 800aaa0:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 800aaa2:	0018      	movs	r0, r3
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	b004      	add	sp, #16
 800aaa8:	bdb0      	pop	{r4, r5, r7, pc}

0800aaaa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800aaaa:	b5b0      	push	{r4, r5, r7, lr}
 800aaac:	b084      	sub	sp, #16
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]
 800aab4:	603b      	str	r3, [r7, #0]
 800aab6:	250f      	movs	r5, #15
 800aab8:	197b      	adds	r3, r7, r5
 800aaba:	1c02      	adds	r2, r0, #0
 800aabc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return SD_disk_write(pdrv, buff, sector, count);
 800aabe:	683c      	ldr	r4, [r7, #0]
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	68b9      	ldr	r1, [r7, #8]
 800aac4:	197b      	adds	r3, r7, r5
 800aac6:	7818      	ldrb	r0, [r3, #0]
 800aac8:	0023      	movs	r3, r4
 800aaca:	f7f8 fd31 	bl	8003530 <SD_disk_write>
 800aace:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 800aad0:	0018      	movs	r0, r3
 800aad2:	46bd      	mov	sp, r7
 800aad4:	b004      	add	sp, #16
 800aad6:	bdb0      	pop	{r4, r5, r7, pc}

0800aad8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	603a      	str	r2, [r7, #0]
 800aae0:	1dfb      	adds	r3, r7, #7
 800aae2:	1c02      	adds	r2, r0, #0
 800aae4:	701a      	strb	r2, [r3, #0]
 800aae6:	1dbb      	adds	r3, r7, #6
 800aae8:	1c0a      	adds	r2, r1, #0
 800aaea:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
  return SD_disk_ioctl(pdrv, cmd, buff);
 800aaec:	683a      	ldr	r2, [r7, #0]
 800aaee:	1dbb      	adds	r3, r7, #6
 800aaf0:	7819      	ldrb	r1, [r3, #0]
 800aaf2:	1dfb      	adds	r3, r7, #7
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	0018      	movs	r0, r3
 800aaf8:	f7f8 fda2 	bl	8003640 <SD_disk_ioctl>
 800aafc:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 800aafe:	0018      	movs	r0, r3
 800ab00:	46bd      	mov	sp, r7
 800ab02:	b002      	add	sp, #8
 800ab04:	bd80      	pop	{r7, pc}
	...

0800ab08 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ab08:	b5b0      	push	{r4, r5, r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	0002      	movs	r2, r0
 800ab10:	1dfb      	adds	r3, r7, #7
 800ab12:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ab14:	1dfb      	adds	r3, r7, #7
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	4a0b      	ldr	r2, [pc, #44]	; (800ab48 <disk_status+0x40>)
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	18d3      	adds	r3, r2, r3
 800ab1e:	3304      	adds	r3, #4
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	1dfa      	adds	r2, r7, #7
 800ab26:	7812      	ldrb	r2, [r2, #0]
 800ab28:	4907      	ldr	r1, [pc, #28]	; (800ab48 <disk_status+0x40>)
 800ab2a:	188a      	adds	r2, r1, r2
 800ab2c:	7a12      	ldrb	r2, [r2, #8]
 800ab2e:	250f      	movs	r5, #15
 800ab30:	197c      	adds	r4, r7, r5
 800ab32:	0010      	movs	r0, r2
 800ab34:	4798      	blx	r3
 800ab36:	0003      	movs	r3, r0
 800ab38:	7023      	strb	r3, [r4, #0]
  return stat;
 800ab3a:	197b      	adds	r3, r7, r5
 800ab3c:	781b      	ldrb	r3, [r3, #0]
}
 800ab3e:	0018      	movs	r0, r3
 800ab40:	46bd      	mov	sp, r7
 800ab42:	b004      	add	sp, #16
 800ab44:	bdb0      	pop	{r4, r5, r7, pc}
 800ab46:	46c0      	nop			; (mov r8, r8)
 800ab48:	20003e14 	.word	0x20003e14

0800ab4c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ab4c:	b590      	push	{r4, r7, lr}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	0002      	movs	r2, r0
 800ab54:	1dfb      	adds	r3, r7, #7
 800ab56:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 800ab58:	200f      	movs	r0, #15
 800ab5a:	183b      	adds	r3, r7, r0
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 800ab60:	1dfb      	adds	r3, r7, #7
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	4a10      	ldr	r2, [pc, #64]	; (800aba8 <disk_initialize+0x5c>)
 800ab66:	5cd3      	ldrb	r3, [r2, r3]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d116      	bne.n	800ab9a <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 800ab6c:	1dfb      	adds	r3, r7, #7
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	4a0d      	ldr	r2, [pc, #52]	; (800aba8 <disk_initialize+0x5c>)
 800ab72:	2101      	movs	r1, #1
 800ab74:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ab76:	1dfb      	adds	r3, r7, #7
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	4a0b      	ldr	r2, [pc, #44]	; (800aba8 <disk_initialize+0x5c>)
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	18d3      	adds	r3, r2, r3
 800ab80:	3304      	adds	r3, #4
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	1dfa      	adds	r2, r7, #7
 800ab88:	7812      	ldrb	r2, [r2, #0]
 800ab8a:	4907      	ldr	r1, [pc, #28]	; (800aba8 <disk_initialize+0x5c>)
 800ab8c:	188a      	adds	r2, r1, r2
 800ab8e:	7a12      	ldrb	r2, [r2, #8]
 800ab90:	183c      	adds	r4, r7, r0
 800ab92:	0010      	movs	r0, r2
 800ab94:	4798      	blx	r3
 800ab96:	0003      	movs	r3, r0
 800ab98:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 800ab9a:	230f      	movs	r3, #15
 800ab9c:	18fb      	adds	r3, r7, r3
 800ab9e:	781b      	ldrb	r3, [r3, #0]
}
 800aba0:	0018      	movs	r0, r3
 800aba2:	46bd      	mov	sp, r7
 800aba4:	b005      	add	sp, #20
 800aba6:	bd90      	pop	{r4, r7, pc}
 800aba8:	20003e14 	.word	0x20003e14

0800abac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800abac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abae:	b087      	sub	sp, #28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60b9      	str	r1, [r7, #8]
 800abb4:	607a      	str	r2, [r7, #4]
 800abb6:	603b      	str	r3, [r7, #0]
 800abb8:	210f      	movs	r1, #15
 800abba:	187b      	adds	r3, r7, r1
 800abbc:	1c02      	adds	r2, r0, #0
 800abbe:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800abc0:	187b      	adds	r3, r7, r1
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	4a0c      	ldr	r2, [pc, #48]	; (800abf8 <disk_read+0x4c>)
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	18d3      	adds	r3, r2, r3
 800abca:	3304      	adds	r3, #4
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	689d      	ldr	r5, [r3, #8]
 800abd0:	187b      	adds	r3, r7, r1
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	4a08      	ldr	r2, [pc, #32]	; (800abf8 <disk_read+0x4c>)
 800abd6:	18d3      	adds	r3, r2, r3
 800abd8:	7a18      	ldrb	r0, [r3, #8]
 800abda:	2617      	movs	r6, #23
 800abdc:	19bc      	adds	r4, r7, r6
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	68b9      	ldr	r1, [r7, #8]
 800abe4:	47a8      	blx	r5
 800abe6:	0003      	movs	r3, r0
 800abe8:	7023      	strb	r3, [r4, #0]
  return res;
 800abea:	19bb      	adds	r3, r7, r6
 800abec:	781b      	ldrb	r3, [r3, #0]
}
 800abee:	0018      	movs	r0, r3
 800abf0:	46bd      	mov	sp, r7
 800abf2:	b007      	add	sp, #28
 800abf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abf6:	46c0      	nop			; (mov r8, r8)
 800abf8:	20003e14 	.word	0x20003e14

0800abfc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800abfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abfe:	b087      	sub	sp, #28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60b9      	str	r1, [r7, #8]
 800ac04:	607a      	str	r2, [r7, #4]
 800ac06:	603b      	str	r3, [r7, #0]
 800ac08:	210f      	movs	r1, #15
 800ac0a:	187b      	adds	r3, r7, r1
 800ac0c:	1c02      	adds	r2, r0, #0
 800ac0e:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ac10:	187b      	adds	r3, r7, r1
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	4a0c      	ldr	r2, [pc, #48]	; (800ac48 <disk_write+0x4c>)
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	18d3      	adds	r3, r2, r3
 800ac1a:	3304      	adds	r3, #4
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68dd      	ldr	r5, [r3, #12]
 800ac20:	187b      	adds	r3, r7, r1
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	4a08      	ldr	r2, [pc, #32]	; (800ac48 <disk_write+0x4c>)
 800ac26:	18d3      	adds	r3, r2, r3
 800ac28:	7a18      	ldrb	r0, [r3, #8]
 800ac2a:	2617      	movs	r6, #23
 800ac2c:	19bc      	adds	r4, r7, r6
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	68b9      	ldr	r1, [r7, #8]
 800ac34:	47a8      	blx	r5
 800ac36:	0003      	movs	r3, r0
 800ac38:	7023      	strb	r3, [r4, #0]
  return res;
 800ac3a:	19bb      	adds	r3, r7, r6
 800ac3c:	781b      	ldrb	r3, [r3, #0]
}
 800ac3e:	0018      	movs	r0, r3
 800ac40:	46bd      	mov	sp, r7
 800ac42:	b007      	add	sp, #28
 800ac44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac46:	46c0      	nop			; (mov r8, r8)
 800ac48:	20003e14 	.word	0x20003e14

0800ac4c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ac4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	603a      	str	r2, [r7, #0]
 800ac54:	1dfb      	adds	r3, r7, #7
 800ac56:	1c02      	adds	r2, r0, #0
 800ac58:	701a      	strb	r2, [r3, #0]
 800ac5a:	1dbb      	adds	r3, r7, #6
 800ac5c:	1c0a      	adds	r2, r1, #0
 800ac5e:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ac60:	1dfb      	adds	r3, r7, #7
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	4a0c      	ldr	r2, [pc, #48]	; (800ac98 <disk_ioctl+0x4c>)
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	18d3      	adds	r3, r2, r3
 800ac6a:	3304      	adds	r3, #4
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	1dfa      	adds	r2, r7, #7
 800ac72:	7812      	ldrb	r2, [r2, #0]
 800ac74:	4908      	ldr	r1, [pc, #32]	; (800ac98 <disk_ioctl+0x4c>)
 800ac76:	188a      	adds	r2, r1, r2
 800ac78:	7a10      	ldrb	r0, [r2, #8]
 800ac7a:	260f      	movs	r6, #15
 800ac7c:	19bc      	adds	r4, r7, r6
 800ac7e:	683d      	ldr	r5, [r7, #0]
 800ac80:	1dba      	adds	r2, r7, #6
 800ac82:	7811      	ldrb	r1, [r2, #0]
 800ac84:	002a      	movs	r2, r5
 800ac86:	4798      	blx	r3
 800ac88:	0003      	movs	r3, r0
 800ac8a:	7023      	strb	r3, [r4, #0]
  return res;
 800ac8c:	19bb      	adds	r3, r7, r6
 800ac8e:	781b      	ldrb	r3, [r3, #0]
}
 800ac90:	0018      	movs	r0, r3
 800ac92:	46bd      	mov	sp, r7
 800ac94:	b005      	add	sp, #20
 800ac96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac98:	20003e14 	.word	0x20003e14

0800ac9c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	3301      	adds	r3, #1
 800aca8:	781a      	ldrb	r2, [r3, #0]
 800acaa:	210e      	movs	r1, #14
 800acac:	187b      	adds	r3, r7, r1
 800acae:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 800acb0:	187b      	adds	r3, r7, r1
 800acb2:	881b      	ldrh	r3, [r3, #0]
 800acb4:	021b      	lsls	r3, r3, #8
 800acb6:	b21a      	sxth	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	b21b      	sxth	r3, r3
 800acbe:	4313      	orrs	r3, r2
 800acc0:	b21a      	sxth	r2, r3
 800acc2:	187b      	adds	r3, r7, r1
 800acc4:	801a      	strh	r2, [r3, #0]
	return rv;
 800acc6:	187b      	adds	r3, r7, r1
 800acc8:	881b      	ldrh	r3, [r3, #0]
}
 800acca:	0018      	movs	r0, r3
 800accc:	46bd      	mov	sp, r7
 800acce:	b004      	add	sp, #16
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b084      	sub	sp, #16
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	3303      	adds	r3, #3
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	021b      	lsls	r3, r3, #8
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	3202      	adds	r2, #2
 800acea:	7812      	ldrb	r2, [r2, #0]
 800acec:	4313      	orrs	r3, r2
 800acee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	021b      	lsls	r3, r3, #8
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	3201      	adds	r2, #1
 800acf8:	7812      	ldrb	r2, [r2, #0]
 800acfa:	4313      	orrs	r3, r2
 800acfc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	021b      	lsls	r3, r3, #8
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	7812      	ldrb	r2, [r2, #0]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	60fb      	str	r3, [r7, #12]
	return rv;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
}
 800ad0c:	0018      	movs	r0, r3
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	b004      	add	sp, #16
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	000a      	movs	r2, r1
 800ad1e:	1cbb      	adds	r3, r7, #2
 800ad20:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	607a      	str	r2, [r7, #4]
 800ad28:	1cba      	adds	r2, r7, #2
 800ad2a:	8812      	ldrh	r2, [r2, #0]
 800ad2c:	b2d2      	uxtb	r2, r2
 800ad2e:	701a      	strb	r2, [r3, #0]
 800ad30:	1cbb      	adds	r3, r7, #2
 800ad32:	1cba      	adds	r2, r7, #2
 800ad34:	8812      	ldrh	r2, [r2, #0]
 800ad36:	0a12      	lsrs	r2, r2, #8
 800ad38:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	1c5a      	adds	r2, r3, #1
 800ad3e:	607a      	str	r2, [r7, #4]
 800ad40:	1cba      	adds	r2, r7, #2
 800ad42:	8812      	ldrh	r2, [r2, #0]
 800ad44:	b2d2      	uxtb	r2, r2
 800ad46:	701a      	strb	r2, [r3, #0]
}
 800ad48:	46c0      	nop			; (mov r8, r8)
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	b002      	add	sp, #8
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	1c5a      	adds	r2, r3, #1
 800ad5e:	607a      	str	r2, [r7, #4]
 800ad60:	683a      	ldr	r2, [r7, #0]
 800ad62:	b2d2      	uxtb	r2, r2
 800ad64:	701a      	strb	r2, [r3, #0]
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	0a1b      	lsrs	r3, r3, #8
 800ad6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	1c5a      	adds	r2, r3, #1
 800ad70:	607a      	str	r2, [r7, #4]
 800ad72:	683a      	ldr	r2, [r7, #0]
 800ad74:	b2d2      	uxtb	r2, r2
 800ad76:	701a      	strb	r2, [r3, #0]
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	0a1b      	lsrs	r3, r3, #8
 800ad7c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	1c5a      	adds	r2, r3, #1
 800ad82:	607a      	str	r2, [r7, #4]
 800ad84:	683a      	ldr	r2, [r7, #0]
 800ad86:	b2d2      	uxtb	r2, r2
 800ad88:	701a      	strb	r2, [r3, #0]
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	0a1b      	lsrs	r3, r3, #8
 800ad8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	1c5a      	adds	r2, r3, #1
 800ad94:	607a      	str	r2, [r7, #4]
 800ad96:	683a      	ldr	r2, [r7, #0]
 800ad98:	b2d2      	uxtb	r2, r2
 800ad9a:	701a      	strb	r2, [r3, #0]
}
 800ad9c:	46c0      	nop			; (mov r8, r8)
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	b002      	add	sp, #8
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b086      	sub	sp, #24
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00d      	beq.n	800adda <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800adbe:	693a      	ldr	r2, [r7, #16]
 800adc0:	1c53      	adds	r3, r2, #1
 800adc2:	613b      	str	r3, [r7, #16]
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	1c59      	adds	r1, r3, #1
 800adc8:	6179      	str	r1, [r7, #20]
 800adca:	7812      	ldrb	r2, [r2, #0]
 800adcc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	3b01      	subs	r3, #1
 800add2:	607b      	str	r3, [r7, #4]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1f1      	bne.n	800adbe <mem_cpy+0x1a>
	}
}
 800adda:	46c0      	nop			; (mov r8, r8)
 800addc:	46bd      	mov	sp, r7
 800adde:	b006      	add	sp, #24
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b086      	sub	sp, #24
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	60f8      	str	r0, [r7, #12]
 800adea:	60b9      	str	r1, [r7, #8]
 800adec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	1c5a      	adds	r2, r3, #1
 800adf6:	617a      	str	r2, [r7, #20]
 800adf8:	68ba      	ldr	r2, [r7, #8]
 800adfa:	b2d2      	uxtb	r2, r2
 800adfc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	3b01      	subs	r3, #1
 800ae02:	607b      	str	r3, [r7, #4]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1f3      	bne.n	800adf2 <mem_set+0x10>
}
 800ae0a:	46c0      	nop			; (mov r8, r8)
 800ae0c:	46c0      	nop			; (mov r8, r8)
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	b006      	add	sp, #24
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b088      	sub	sp, #32
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	61fb      	str	r3, [r7, #28]
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	1c5a      	adds	r2, r3, #1
 800ae30:	61fa      	str	r2, [r7, #28]
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	0019      	movs	r1, r3
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	1c5a      	adds	r2, r3, #1
 800ae3a:	61ba      	str	r2, [r7, #24]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	1acb      	subs	r3, r1, r3
 800ae40:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	3b01      	subs	r3, #1
 800ae46:	607b      	str	r3, [r7, #4]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d002      	beq.n	800ae54 <mem_cmp+0x40>
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d0eb      	beq.n	800ae2c <mem_cmp+0x18>

	return r;
 800ae54:	697b      	ldr	r3, [r7, #20]
}
 800ae56:	0018      	movs	r0, r3
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	b008      	add	sp, #32
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b082      	sub	sp, #8
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ae68:	e002      	b.n	800ae70 <chk_chr+0x12>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	607b      	str	r3, [r7, #4]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d005      	beq.n	800ae84 <chk_chr+0x26>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	001a      	movs	r2, r3
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d1f2      	bne.n	800ae6a <chk_chr+0xc>
	return *str;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	781b      	ldrb	r3, [r3, #0]
}
 800ae88:	0018      	movs	r0, r3
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	b002      	add	sp, #8
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	60bb      	str	r3, [r7, #8]
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	60fb      	str	r3, [r7, #12]
 800aea2:	e027      	b.n	800aef4 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 800aea4:	4b25      	ldr	r3, [pc, #148]	; (800af3c <chk_lock+0xac>)
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	0112      	lsls	r2, r2, #4
 800aeaa:	58d3      	ldr	r3, [r2, r3]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d01c      	beq.n	800aeea <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aeb0:	4b22      	ldr	r3, [pc, #136]	; (800af3c <chk_lock+0xac>)
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	0112      	lsls	r2, r2, #4
 800aeb6:	58d2      	ldr	r2, [r2, r3]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d116      	bne.n	800aeee <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 800aec0:	4a1e      	ldr	r2, [pc, #120]	; (800af3c <chk_lock+0xac>)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	011b      	lsls	r3, r3, #4
 800aec6:	18d3      	adds	r3, r2, r3
 800aec8:	3304      	adds	r3, #4
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d10c      	bne.n	800aeee <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 800aed4:	4a19      	ldr	r2, [pc, #100]	; (800af3c <chk_lock+0xac>)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	011b      	lsls	r3, r3, #4
 800aeda:	18d3      	adds	r3, r2, r3
 800aedc:	3308      	adds	r3, #8
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d102      	bne.n	800aeee <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 800aee8:	e007      	b.n	800aefa <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 800aeea:	2301      	movs	r3, #1
 800aeec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	3301      	adds	r3, #1
 800aef2:	60fb      	str	r3, [r7, #12]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d9d4      	bls.n	800aea4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d109      	bne.n	800af14 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d102      	bne.n	800af0c <chk_lock+0x7c>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	2b02      	cmp	r3, #2
 800af0a:	d101      	bne.n	800af10 <chk_lock+0x80>
 800af0c:	2300      	movs	r3, #0
 800af0e:	e011      	b.n	800af34 <chk_lock+0xa4>
 800af10:	2312      	movs	r3, #18
 800af12:	e00f      	b.n	800af34 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d109      	bne.n	800af2e <chk_lock+0x9e>
 800af1a:	4a08      	ldr	r2, [pc, #32]	; (800af3c <chk_lock+0xac>)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	011b      	lsls	r3, r3, #4
 800af20:	18d3      	adds	r3, r2, r3
 800af22:	330c      	adds	r3, #12
 800af24:	881a      	ldrh	r2, [r3, #0]
 800af26:	2380      	movs	r3, #128	; 0x80
 800af28:	005b      	lsls	r3, r3, #1
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d101      	bne.n	800af32 <chk_lock+0xa2>
 800af2e:	2310      	movs	r3, #16
 800af30:	e000      	b.n	800af34 <chk_lock+0xa4>
 800af32:	2300      	movs	r3, #0
}
 800af34:	0018      	movs	r0, r3
 800af36:	46bd      	mov	sp, r7
 800af38:	b004      	add	sp, #16
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	20003bf4 	.word	0x20003bf4

0800af40 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af46:	2300      	movs	r3, #0
 800af48:	607b      	str	r3, [r7, #4]
 800af4a:	e002      	b.n	800af52 <enq_lock+0x12>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	3301      	adds	r3, #1
 800af50:	607b      	str	r3, [r7, #4]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2b01      	cmp	r3, #1
 800af56:	d805      	bhi.n	800af64 <enq_lock+0x24>
 800af58:	4b07      	ldr	r3, [pc, #28]	; (800af78 <enq_lock+0x38>)
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	0112      	lsls	r2, r2, #4
 800af5e:	58d3      	ldr	r3, [r2, r3]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1f3      	bne.n	800af4c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	3b02      	subs	r3, #2
 800af68:	1e5a      	subs	r2, r3, #1
 800af6a:	4193      	sbcs	r3, r2
 800af6c:	b2db      	uxtb	r3, r3
}
 800af6e:	0018      	movs	r0, r3
 800af70:	46bd      	mov	sp, r7
 800af72:	b002      	add	sp, #8
 800af74:	bd80      	pop	{r7, pc}
 800af76:	46c0      	nop			; (mov r8, r8)
 800af78:	20003bf4 	.word	0x20003bf4

0800af7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800af86:	2300      	movs	r3, #0
 800af88:	60fb      	str	r3, [r7, #12]
 800af8a:	e01e      	b.n	800afca <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 800af8c:	4b3f      	ldr	r3, [pc, #252]	; (800b08c <inc_lock+0x110>)
 800af8e:	68fa      	ldr	r2, [r7, #12]
 800af90:	0112      	lsls	r2, r2, #4
 800af92:	58d2      	ldr	r2, [r2, r3]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d113      	bne.n	800afc4 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 800af9c:	4a3b      	ldr	r2, [pc, #236]	; (800b08c <inc_lock+0x110>)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	011b      	lsls	r3, r3, #4
 800afa2:	18d3      	adds	r3, r2, r3
 800afa4:	3304      	adds	r3, #4
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800afac:	429a      	cmp	r2, r3
 800afae:	d109      	bne.n	800afc4 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 800afb0:	4a36      	ldr	r2, [pc, #216]	; (800b08c <inc_lock+0x110>)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	011b      	lsls	r3, r3, #4
 800afb6:	18d3      	adds	r3, r2, r3
 800afb8:	3308      	adds	r3, #8
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d006      	beq.n	800afd2 <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	3301      	adds	r3, #1
 800afc8:	60fb      	str	r3, [r7, #12]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d9dd      	bls.n	800af8c <inc_lock+0x10>
 800afd0:	e000      	b.n	800afd4 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 800afd2:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	d130      	bne.n	800b03c <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800afda:	2300      	movs	r3, #0
 800afdc:	60fb      	str	r3, [r7, #12]
 800afde:	e002      	b.n	800afe6 <inc_lock+0x6a>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	3301      	adds	r3, #1
 800afe4:	60fb      	str	r3, [r7, #12]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d805      	bhi.n	800aff8 <inc_lock+0x7c>
 800afec:	4b27      	ldr	r3, [pc, #156]	; (800b08c <inc_lock+0x110>)
 800afee:	68fa      	ldr	r2, [r7, #12]
 800aff0:	0112      	lsls	r2, r2, #4
 800aff2:	58d3      	ldr	r3, [r2, r3]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1f3      	bne.n	800afe0 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2b02      	cmp	r3, #2
 800affc:	d101      	bne.n	800b002 <inc_lock+0x86>
 800affe:	2300      	movs	r3, #0
 800b000:	e03f      	b.n	800b082 <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6819      	ldr	r1, [r3, #0]
 800b006:	4b21      	ldr	r3, [pc, #132]	; (800b08c <inc_lock+0x110>)
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	0112      	lsls	r2, r2, #4
 800b00c:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	689a      	ldr	r2, [r3, #8]
 800b012:	491e      	ldr	r1, [pc, #120]	; (800b08c <inc_lock+0x110>)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	011b      	lsls	r3, r3, #4
 800b018:	18cb      	adds	r3, r1, r3
 800b01a:	3304      	adds	r3, #4
 800b01c:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	695a      	ldr	r2, [r3, #20]
 800b022:	491a      	ldr	r1, [pc, #104]	; (800b08c <inc_lock+0x110>)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	011b      	lsls	r3, r3, #4
 800b028:	18cb      	adds	r3, r1, r3
 800b02a:	3308      	adds	r3, #8
 800b02c:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b02e:	4a17      	ldr	r2, [pc, #92]	; (800b08c <inc_lock+0x110>)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	011b      	lsls	r3, r3, #4
 800b034:	18d3      	adds	r3, r2, r3
 800b036:	330c      	adds	r3, #12
 800b038:	2200      	movs	r2, #0
 800b03a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d009      	beq.n	800b056 <inc_lock+0xda>
 800b042:	4a12      	ldr	r2, [pc, #72]	; (800b08c <inc_lock+0x110>)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	011b      	lsls	r3, r3, #4
 800b048:	18d3      	adds	r3, r2, r3
 800b04a:	330c      	adds	r3, #12
 800b04c:	881b      	ldrh	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d001      	beq.n	800b056 <inc_lock+0xda>
 800b052:	2300      	movs	r3, #0
 800b054:	e015      	b.n	800b082 <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d108      	bne.n	800b06e <inc_lock+0xf2>
 800b05c:	4a0b      	ldr	r2, [pc, #44]	; (800b08c <inc_lock+0x110>)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	011b      	lsls	r3, r3, #4
 800b062:	18d3      	adds	r3, r2, r3
 800b064:	330c      	adds	r3, #12
 800b066:	881b      	ldrh	r3, [r3, #0]
 800b068:	3301      	adds	r3, #1
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	e001      	b.n	800b072 <inc_lock+0xf6>
 800b06e:	2380      	movs	r3, #128	; 0x80
 800b070:	005b      	lsls	r3, r3, #1
 800b072:	4906      	ldr	r1, [pc, #24]	; (800b08c <inc_lock+0x110>)
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	0112      	lsls	r2, r2, #4
 800b078:	188a      	adds	r2, r1, r2
 800b07a:	320c      	adds	r2, #12
 800b07c:	8013      	strh	r3, [r2, #0]

	return i + 1;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	3301      	adds	r3, #1
}
 800b082:	0018      	movs	r0, r3
 800b084:	46bd      	mov	sp, r7
 800b086:	b004      	add	sp, #16
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	46c0      	nop			; (mov r8, r8)
 800b08c:	20003bf4 	.word	0x20003bf4

0800b090 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	3b01      	subs	r3, #1
 800b09c:	607b      	str	r3, [r7, #4]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d832      	bhi.n	800b10a <dec_lock+0x7a>
		n = Files[i].ctr;
 800b0a4:	200e      	movs	r0, #14
 800b0a6:	183b      	adds	r3, r7, r0
 800b0a8:	491d      	ldr	r1, [pc, #116]	; (800b120 <dec_lock+0x90>)
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	0112      	lsls	r2, r2, #4
 800b0ae:	188a      	adds	r2, r1, r2
 800b0b0:	320c      	adds	r2, #12
 800b0b2:	8812      	ldrh	r2, [r2, #0]
 800b0b4:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b0b6:	183b      	adds	r3, r7, r0
 800b0b8:	881a      	ldrh	r2, [r3, #0]
 800b0ba:	2380      	movs	r3, #128	; 0x80
 800b0bc:	005b      	lsls	r3, r3, #1
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d102      	bne.n	800b0c8 <dec_lock+0x38>
 800b0c2:	183b      	adds	r3, r7, r0
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b0c8:	210e      	movs	r1, #14
 800b0ca:	187b      	adds	r3, r7, r1
 800b0cc:	881b      	ldrh	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d004      	beq.n	800b0dc <dec_lock+0x4c>
 800b0d2:	187b      	adds	r3, r7, r1
 800b0d4:	881a      	ldrh	r2, [r3, #0]
 800b0d6:	187b      	adds	r3, r7, r1
 800b0d8:	3a01      	subs	r2, #1
 800b0da:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 800b0dc:	4a10      	ldr	r2, [pc, #64]	; (800b120 <dec_lock+0x90>)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	011b      	lsls	r3, r3, #4
 800b0e2:	18d3      	adds	r3, r2, r3
 800b0e4:	330c      	adds	r3, #12
 800b0e6:	210e      	movs	r1, #14
 800b0e8:	187a      	adds	r2, r7, r1
 800b0ea:	8812      	ldrh	r2, [r2, #0]
 800b0ec:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b0ee:	187b      	adds	r3, r7, r1
 800b0f0:	881b      	ldrh	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d104      	bne.n	800b100 <dec_lock+0x70>
 800b0f6:	4b0a      	ldr	r3, [pc, #40]	; (800b120 <dec_lock+0x90>)
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	0112      	lsls	r2, r2, #4
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 800b100:	230d      	movs	r3, #13
 800b102:	18fb      	adds	r3, r7, r3
 800b104:	2200      	movs	r2, #0
 800b106:	701a      	strb	r2, [r3, #0]
 800b108:	e003      	b.n	800b112 <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b10a:	230d      	movs	r3, #13
 800b10c:	18fb      	adds	r3, r7, r3
 800b10e:	2202      	movs	r2, #2
 800b110:	701a      	strb	r2, [r3, #0]
	}
	return res;
 800b112:	230d      	movs	r3, #13
 800b114:	18fb      	adds	r3, r7, r3
 800b116:	781b      	ldrb	r3, [r3, #0]
}
 800b118:	0018      	movs	r0, r3
 800b11a:	46bd      	mov	sp, r7
 800b11c:	b004      	add	sp, #16
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	20003bf4 	.word	0x20003bf4

0800b124 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b12c:	2300      	movs	r3, #0
 800b12e:	60fb      	str	r3, [r7, #12]
 800b130:	e00e      	b.n	800b150 <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b132:	4b0b      	ldr	r3, [pc, #44]	; (800b160 <clear_lock+0x3c>)
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	0112      	lsls	r2, r2, #4
 800b138:	58d3      	ldr	r3, [r2, r3]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d104      	bne.n	800b14a <clear_lock+0x26>
 800b140:	4b07      	ldr	r3, [pc, #28]	; (800b160 <clear_lock+0x3c>)
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	0112      	lsls	r2, r2, #4
 800b146:	2100      	movs	r1, #0
 800b148:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	3301      	adds	r3, #1
 800b14e:	60fb      	str	r3, [r7, #12]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d9ed      	bls.n	800b132 <clear_lock+0xe>
	}
}
 800b156:	46c0      	nop			; (mov r8, r8)
 800b158:	46c0      	nop			; (mov r8, r8)
 800b15a:	46bd      	mov	sp, r7
 800b15c:	b004      	add	sp, #16
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	20003bf4 	.word	0x20003bf4

0800b164 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b164:	b590      	push	{r4, r7, lr}
 800b166:	b087      	sub	sp, #28
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b16c:	240f      	movs	r4, #15
 800b16e:	193b      	adds	r3, r7, r4
 800b170:	2200      	movs	r2, #0
 800b172:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	78db      	ldrb	r3, [r3, #3]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d034      	beq.n	800b1e6 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b180:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	7858      	ldrb	r0, [r3, #1]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	3338      	adds	r3, #56	; 0x38
 800b18a:	0019      	movs	r1, r3
 800b18c:	697a      	ldr	r2, [r7, #20]
 800b18e:	2301      	movs	r3, #1
 800b190:	f7ff fd34 	bl	800abfc <disk_write>
 800b194:	1e03      	subs	r3, r0, #0
 800b196:	d003      	beq.n	800b1a0 <sync_window+0x3c>
			res = FR_DISK_ERR;
 800b198:	193b      	adds	r3, r7, r4
 800b19a:	2201      	movs	r2, #1
 800b19c:	701a      	strb	r2, [r3, #0]
 800b19e:	e022      	b.n	800b1e6 <sync_window+0x82>
		} else {
			fs->wflag = 0;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1aa:	697a      	ldr	r2, [r7, #20]
 800b1ac:	1ad2      	subs	r2, r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a1b      	ldr	r3, [r3, #32]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d217      	bcs.n	800b1e6 <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	789b      	ldrb	r3, [r3, #2]
 800b1ba:	613b      	str	r3, [r7, #16]
 800b1bc:	e010      	b.n	800b1e0 <sync_window+0x7c>
					wsect += fs->fsize;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a1b      	ldr	r3, [r3, #32]
 800b1c2:	697a      	ldr	r2, [r7, #20]
 800b1c4:	18d3      	adds	r3, r2, r3
 800b1c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	7858      	ldrb	r0, [r3, #1]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	3338      	adds	r3, #56	; 0x38
 800b1d0:	0019      	movs	r1, r3
 800b1d2:	697a      	ldr	r2, [r7, #20]
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	f7ff fd11 	bl	800abfc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	613b      	str	r3, [r7, #16]
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d8eb      	bhi.n	800b1be <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 800b1e6:	230f      	movs	r3, #15
 800b1e8:	18fb      	adds	r3, r7, r3
 800b1ea:	781b      	ldrb	r3, [r3, #0]
}
 800b1ec:	0018      	movs	r0, r3
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	b007      	add	sp, #28
 800b1f2:	bd90      	pop	{r4, r7, pc}

0800b1f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b1f4:	b5b0      	push	{r4, r5, r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b1fe:	250f      	movs	r5, #15
 800b200:	197b      	adds	r3, r7, r5
 800b202:	2200      	movs	r2, #0
 800b204:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b20a:	683a      	ldr	r2, [r7, #0]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d01f      	beq.n	800b250 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b210:	197c      	adds	r4, r7, r5
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	0018      	movs	r0, r3
 800b216:	f7ff ffa5 	bl	800b164 <sync_window>
 800b21a:	0003      	movs	r3, r0
 800b21c:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b21e:	002c      	movs	r4, r5
 800b220:	193b      	adds	r3, r7, r4
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d113      	bne.n	800b250 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	7858      	ldrb	r0, [r3, #1]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	3338      	adds	r3, #56	; 0x38
 800b230:	0019      	movs	r1, r3
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	2301      	movs	r3, #1
 800b236:	f7ff fcb9 	bl	800abac <disk_read>
 800b23a:	1e03      	subs	r3, r0, #0
 800b23c:	d005      	beq.n	800b24a <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b23e:	2301      	movs	r3, #1
 800b240:	425b      	negs	r3, r3
 800b242:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b244:	193b      	adds	r3, r7, r4
 800b246:	2201      	movs	r2, #1
 800b248:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	683a      	ldr	r2, [r7, #0]
 800b24e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b250:	230f      	movs	r3, #15
 800b252:	18fb      	adds	r3, r7, r3
 800b254:	781b      	ldrb	r3, [r3, #0]
}
 800b256:	0018      	movs	r0, r3
 800b258:	46bd      	mov	sp, r7
 800b25a:	b004      	add	sp, #16
 800b25c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b260 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b260:	b5b0      	push	{r4, r5, r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b268:	250f      	movs	r5, #15
 800b26a:	197c      	adds	r4, r7, r5
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	0018      	movs	r0, r3
 800b270:	f7ff ff78 	bl	800b164 <sync_window>
 800b274:	0003      	movs	r3, r0
 800b276:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800b278:	197b      	adds	r3, r7, r5
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d15e      	bne.n	800b33e <sync_fs+0xde>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	2b03      	cmp	r3, #3
 800b286:	d14d      	bne.n	800b324 <sync_fs+0xc4>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	791b      	ldrb	r3, [r3, #4]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d149      	bne.n	800b324 <sync_fs+0xc4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	3338      	adds	r3, #56	; 0x38
 800b294:	0018      	movs	r0, r3
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	899b      	ldrh	r3, [r3, #12]
 800b29a:	001a      	movs	r2, r3
 800b29c:	2100      	movs	r1, #0
 800b29e:	f7ff fda0 	bl	800ade2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	3338      	adds	r3, #56	; 0x38
 800b2a6:	33ff      	adds	r3, #255	; 0xff
 800b2a8:	33ff      	adds	r3, #255	; 0xff
 800b2aa:	4a28      	ldr	r2, [pc, #160]	; (800b34c <sync_fs+0xec>)
 800b2ac:	0011      	movs	r1, r2
 800b2ae:	0018      	movs	r0, r3
 800b2b0:	f7ff fd30 	bl	800ad14 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	3338      	adds	r3, #56	; 0x38
 800b2b8:	4a25      	ldr	r2, [pc, #148]	; (800b350 <sync_fs+0xf0>)
 800b2ba:	0011      	movs	r1, r2
 800b2bc:	0018      	movs	r0, r3
 800b2be:	f7ff fd47 	bl	800ad50 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	3338      	adds	r3, #56	; 0x38
 800b2c6:	33e5      	adds	r3, #229	; 0xe5
 800b2c8:	33ff      	adds	r3, #255	; 0xff
 800b2ca:	4a22      	ldr	r2, [pc, #136]	; (800b354 <sync_fs+0xf4>)
 800b2cc:	0011      	movs	r1, r2
 800b2ce:	0018      	movs	r0, r3
 800b2d0:	f7ff fd3e 	bl	800ad50 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	3338      	adds	r3, #56	; 0x38
 800b2d8:	33e9      	adds	r3, #233	; 0xe9
 800b2da:	33ff      	adds	r3, #255	; 0xff
 800b2dc:	001a      	movs	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	0019      	movs	r1, r3
 800b2e4:	0010      	movs	r0, r2
 800b2e6:	f7ff fd33 	bl	800ad50 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	3338      	adds	r3, #56	; 0x38
 800b2ee:	33ed      	adds	r3, #237	; 0xed
 800b2f0:	33ff      	adds	r3, #255	; 0xff
 800b2f2:	001a      	movs	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	695b      	ldr	r3, [r3, #20]
 800b2f8:	0019      	movs	r1, r3
 800b2fa:	0010      	movs	r0, r2
 800b2fc:	f7ff fd28 	bl	800ad50 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b304:	1c5a      	adds	r2, r3, #1
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	7858      	ldrb	r0, [r3, #1]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	3338      	adds	r3, #56	; 0x38
 800b312:	0019      	movs	r1, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b318:	2301      	movs	r3, #1
 800b31a:	f7ff fc6f 	bl	800abfc <disk_write>
			fs->fsi_flag = 0;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	785b      	ldrb	r3, [r3, #1]
 800b328:	2200      	movs	r2, #0
 800b32a:	2100      	movs	r1, #0
 800b32c:	0018      	movs	r0, r3
 800b32e:	f7ff fc8d 	bl	800ac4c <disk_ioctl>
 800b332:	1e03      	subs	r3, r0, #0
 800b334:	d003      	beq.n	800b33e <sync_fs+0xde>
 800b336:	230f      	movs	r3, #15
 800b338:	18fb      	adds	r3, r7, r3
 800b33a:	2201      	movs	r2, #1
 800b33c:	701a      	strb	r2, [r3, #0]
	}

	return res;
 800b33e:	230f      	movs	r3, #15
 800b340:	18fb      	adds	r3, r7, r3
 800b342:	781b      	ldrb	r3, [r3, #0]
}
 800b344:	0018      	movs	r0, r3
 800b346:	46bd      	mov	sp, r7
 800b348:	b004      	add	sp, #16
 800b34a:	bdb0      	pop	{r4, r5, r7, pc}
 800b34c:	0000aa55 	.word	0x0000aa55
 800b350:	41615252 	.word	0x41615252
 800b354:	61417272 	.word	0x61417272

0800b358 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	3b02      	subs	r3, #2
 800b366:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	69db      	ldr	r3, [r3, #28]
 800b36c:	3b02      	subs	r3, #2
 800b36e:	683a      	ldr	r2, [r7, #0]
 800b370:	429a      	cmp	r2, r3
 800b372:	d301      	bcc.n	800b378 <clust2sect+0x20>
 800b374:	2300      	movs	r3, #0
 800b376:	e007      	b.n	800b388 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	895b      	ldrh	r3, [r3, #10]
 800b37c:	001a      	movs	r2, r3
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	435a      	muls	r2, r3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b386:	18d3      	adds	r3, r2, r3
}
 800b388:	0018      	movs	r0, r3
 800b38a:	46bd      	mov	sp, r7
 800b38c:	b002      	add	sp, #8
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b390:	b590      	push	{r4, r7, lr}
 800b392:	b087      	sub	sp, #28
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d904      	bls.n	800b3b0 <get_fat+0x20>
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	69db      	ldr	r3, [r3, #28]
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d302      	bcc.n	800b3b6 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	617b      	str	r3, [r7, #20]
 800b3b4:	e0c2      	b.n	800b53c <get_fat+0x1ac>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	425b      	negs	r3, r3
 800b3ba:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	2b03      	cmp	r3, #3
 800b3c2:	d100      	bne.n	800b3c6 <get_fat+0x36>
 800b3c4:	e088      	b.n	800b4d8 <get_fat+0x148>
 800b3c6:	dd00      	ble.n	800b3ca <get_fat+0x3a>
 800b3c8:	e0ae      	b.n	800b528 <get_fat+0x198>
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d002      	beq.n	800b3d4 <get_fat+0x44>
 800b3ce:	2b02      	cmp	r3, #2
 800b3d0:	d05c      	beq.n	800b48c <get_fat+0xfc>
 800b3d2:	e0a9      	b.n	800b528 <get_fat+0x198>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	60fb      	str	r3, [r7, #12]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	085b      	lsrs	r3, r3, #1
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	18d3      	adds	r3, r2, r3
 800b3e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	899b      	ldrh	r3, [r3, #12]
 800b3ea:	0019      	movs	r1, r3
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f7f4 feb1 	bl	8000154 <__udivsi3>
 800b3f2:	0003      	movs	r3, r0
 800b3f4:	18e2      	adds	r2, r4, r3
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	0011      	movs	r1, r2
 800b3fa:	0018      	movs	r0, r3
 800b3fc:	f7ff fefa 	bl	800b1f4 <move_window>
 800b400:	1e03      	subs	r3, r0, #0
 800b402:	d000      	beq.n	800b406 <get_fat+0x76>
 800b404:	e093      	b.n	800b52e <get_fat+0x19e>
			wc = fs->win[bc++ % SS(fs)];
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	1c5a      	adds	r2, r3, #1
 800b40a:	60fa      	str	r2, [r7, #12]
 800b40c:	693a      	ldr	r2, [r7, #16]
 800b40e:	8992      	ldrh	r2, [r2, #12]
 800b410:	0011      	movs	r1, r2
 800b412:	0018      	movs	r0, r3
 800b414:	f7f4 ff24 	bl	8000260 <__aeabi_uidivmod>
 800b418:	000b      	movs	r3, r1
 800b41a:	0019      	movs	r1, r3
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	2238      	movs	r2, #56	; 0x38
 800b420:	185b      	adds	r3, r3, r1
 800b422:	189b      	adds	r3, r3, r2
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	899b      	ldrh	r3, [r3, #12]
 800b430:	0019      	movs	r1, r3
 800b432:	68f8      	ldr	r0, [r7, #12]
 800b434:	f7f4 fe8e 	bl	8000154 <__udivsi3>
 800b438:	0003      	movs	r3, r0
 800b43a:	18e2      	adds	r2, r4, r3
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	0011      	movs	r1, r2
 800b440:	0018      	movs	r0, r3
 800b442:	f7ff fed7 	bl	800b1f4 <move_window>
 800b446:	1e03      	subs	r3, r0, #0
 800b448:	d000      	beq.n	800b44c <get_fat+0xbc>
 800b44a:	e072      	b.n	800b532 <get_fat+0x1a2>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	899b      	ldrh	r3, [r3, #12]
 800b450:	001a      	movs	r2, r3
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	0011      	movs	r1, r2
 800b456:	0018      	movs	r0, r3
 800b458:	f7f4 ff02 	bl	8000260 <__aeabi_uidivmod>
 800b45c:	000b      	movs	r3, r1
 800b45e:	0019      	movs	r1, r3
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	2238      	movs	r2, #56	; 0x38
 800b464:	185b      	adds	r3, r3, r1
 800b466:	189b      	adds	r3, r3, r2
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	021b      	lsls	r3, r3, #8
 800b46c:	001a      	movs	r2, r3
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	4313      	orrs	r3, r2
 800b472:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	2201      	movs	r2, #1
 800b478:	4013      	ands	r3, r2
 800b47a:	d002      	beq.n	800b482 <get_fat+0xf2>
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	091b      	lsrs	r3, r3, #4
 800b480:	e002      	b.n	800b488 <get_fat+0xf8>
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	051b      	lsls	r3, r3, #20
 800b486:	0d1b      	lsrs	r3, r3, #20
 800b488:	617b      	str	r3, [r7, #20]
			break;
 800b48a:	e057      	b.n	800b53c <get_fat+0x1ac>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	899b      	ldrh	r3, [r3, #12]
 800b494:	085b      	lsrs	r3, r3, #1
 800b496:	b29b      	uxth	r3, r3
 800b498:	0019      	movs	r1, r3
 800b49a:	6838      	ldr	r0, [r7, #0]
 800b49c:	f7f4 fe5a 	bl	8000154 <__udivsi3>
 800b4a0:	0003      	movs	r3, r0
 800b4a2:	18e2      	adds	r2, r4, r3
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	0011      	movs	r1, r2
 800b4a8:	0018      	movs	r0, r3
 800b4aa:	f7ff fea3 	bl	800b1f4 <move_window>
 800b4ae:	1e03      	subs	r3, r0, #0
 800b4b0:	d141      	bne.n	800b536 <get_fat+0x1a6>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	3338      	adds	r3, #56	; 0x38
 800b4b6:	001c      	movs	r4, r3
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	005a      	lsls	r2, r3, #1
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	899b      	ldrh	r3, [r3, #12]
 800b4c0:	0019      	movs	r1, r3
 800b4c2:	0010      	movs	r0, r2
 800b4c4:	f7f4 fecc 	bl	8000260 <__aeabi_uidivmod>
 800b4c8:	000b      	movs	r3, r1
 800b4ca:	18e3      	adds	r3, r4, r3
 800b4cc:	0018      	movs	r0, r3
 800b4ce:	f7ff fbe5 	bl	800ac9c <ld_word>
 800b4d2:	0003      	movs	r3, r0
 800b4d4:	617b      	str	r3, [r7, #20]
			break;
 800b4d6:	e031      	b.n	800b53c <get_fat+0x1ac>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	899b      	ldrh	r3, [r3, #12]
 800b4e0:	089b      	lsrs	r3, r3, #2
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	0019      	movs	r1, r3
 800b4e6:	6838      	ldr	r0, [r7, #0]
 800b4e8:	f7f4 fe34 	bl	8000154 <__udivsi3>
 800b4ec:	0003      	movs	r3, r0
 800b4ee:	18e2      	adds	r2, r4, r3
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	0011      	movs	r1, r2
 800b4f4:	0018      	movs	r0, r3
 800b4f6:	f7ff fe7d 	bl	800b1f4 <move_window>
 800b4fa:	1e03      	subs	r3, r0, #0
 800b4fc:	d11d      	bne.n	800b53a <get_fat+0x1aa>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	3338      	adds	r3, #56	; 0x38
 800b502:	001c      	movs	r4, r3
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	009a      	lsls	r2, r3, #2
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	899b      	ldrh	r3, [r3, #12]
 800b50c:	0019      	movs	r1, r3
 800b50e:	0010      	movs	r0, r2
 800b510:	f7f4 fea6 	bl	8000260 <__aeabi_uidivmod>
 800b514:	000b      	movs	r3, r1
 800b516:	18e3      	adds	r3, r4, r3
 800b518:	0018      	movs	r0, r3
 800b51a:	f7ff fbda 	bl	800acd2 <ld_dword>
 800b51e:	0003      	movs	r3, r0
 800b520:	011b      	lsls	r3, r3, #4
 800b522:	091b      	lsrs	r3, r3, #4
 800b524:	617b      	str	r3, [r7, #20]
			break;
 800b526:	e009      	b.n	800b53c <get_fat+0x1ac>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b528:	2301      	movs	r3, #1
 800b52a:	617b      	str	r3, [r7, #20]
 800b52c:	e006      	b.n	800b53c <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b52e:	46c0      	nop			; (mov r8, r8)
 800b530:	e004      	b.n	800b53c <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b532:	46c0      	nop			; (mov r8, r8)
 800b534:	e002      	b.n	800b53c <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b536:	46c0      	nop			; (mov r8, r8)
 800b538:	e000      	b.n	800b53c <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b53a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 800b53c:	697b      	ldr	r3, [r7, #20]
}
 800b53e:	0018      	movs	r0, r3
 800b540:	46bd      	mov	sp, r7
 800b542:	b007      	add	sp, #28
 800b544:	bd90      	pop	{r4, r7, pc}

0800b546 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b546:	b5b0      	push	{r4, r5, r7, lr}
 800b548:	b088      	sub	sp, #32
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	60f8      	str	r0, [r7, #12]
 800b54e:	60b9      	str	r1, [r7, #8]
 800b550:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b552:	231f      	movs	r3, #31
 800b554:	18fb      	adds	r3, r7, r3
 800b556:	2202      	movs	r2, #2
 800b558:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d800      	bhi.n	800b562 <put_fat+0x1c>
 800b560:	e11a      	b.n	800b798 <put_fat+0x252>
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	69db      	ldr	r3, [r3, #28]
 800b566:	68ba      	ldr	r2, [r7, #8]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d300      	bcc.n	800b56e <put_fat+0x28>
 800b56c:	e114      	b.n	800b798 <put_fat+0x252>
		switch (fs->fs_type) {
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	2b03      	cmp	r3, #3
 800b574:	d100      	bne.n	800b578 <put_fat+0x32>
 800b576:	e0c1      	b.n	800b6fc <put_fat+0x1b6>
 800b578:	dd00      	ble.n	800b57c <put_fat+0x36>
 800b57a:	e10d      	b.n	800b798 <put_fat+0x252>
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d003      	beq.n	800b588 <put_fat+0x42>
 800b580:	2b02      	cmp	r3, #2
 800b582:	d100      	bne.n	800b586 <put_fat+0x40>
 800b584:	e08a      	b.n	800b69c <put_fat+0x156>
 800b586:	e107      	b.n	800b798 <put_fat+0x252>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	61bb      	str	r3, [r7, #24]
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	085b      	lsrs	r3, r3, #1
 800b590:	69ba      	ldr	r2, [r7, #24]
 800b592:	18d3      	adds	r3, r2, r3
 800b594:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	899b      	ldrh	r3, [r3, #12]
 800b59e:	0019      	movs	r1, r3
 800b5a0:	69b8      	ldr	r0, [r7, #24]
 800b5a2:	f7f4 fdd7 	bl	8000154 <__udivsi3>
 800b5a6:	0003      	movs	r3, r0
 800b5a8:	18e2      	adds	r2, r4, r3
 800b5aa:	251f      	movs	r5, #31
 800b5ac:	197c      	adds	r4, r7, r5
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	0011      	movs	r1, r2
 800b5b2:	0018      	movs	r0, r3
 800b5b4:	f7ff fe1e 	bl	800b1f4 <move_window>
 800b5b8:	0003      	movs	r3, r0
 800b5ba:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800b5bc:	197b      	adds	r3, r7, r5
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d000      	beq.n	800b5c6 <put_fat+0x80>
 800b5c4:	e0e1      	b.n	800b78a <put_fat+0x244>
			p = fs->win + bc++ % SS(fs);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	3338      	adds	r3, #56	; 0x38
 800b5ca:	001c      	movs	r4, r3
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	1c5a      	adds	r2, r3, #1
 800b5d0:	61ba      	str	r2, [r7, #24]
 800b5d2:	68fa      	ldr	r2, [r7, #12]
 800b5d4:	8992      	ldrh	r2, [r2, #12]
 800b5d6:	0011      	movs	r1, r2
 800b5d8:	0018      	movs	r0, r3
 800b5da:	f7f4 fe41 	bl	8000260 <__aeabi_uidivmod>
 800b5de:	000b      	movs	r3, r1
 800b5e0:	18e3      	adds	r3, r4, r3
 800b5e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	d00d      	beq.n	800b608 <put_fat+0xc2>
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	b25b      	sxtb	r3, r3
 800b5f2:	220f      	movs	r2, #15
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	b25a      	sxtb	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	011b      	lsls	r3, r3, #4
 800b5fe:	b25b      	sxtb	r3, r3
 800b600:	4313      	orrs	r3, r2
 800b602:	b25b      	sxtb	r3, r3
 800b604:	b2db      	uxtb	r3, r3
 800b606:	e001      	b.n	800b60c <put_fat+0xc6>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	697a      	ldr	r2, [r7, #20]
 800b60e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2201      	movs	r2, #1
 800b614:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	899b      	ldrh	r3, [r3, #12]
 800b61e:	0019      	movs	r1, r3
 800b620:	69b8      	ldr	r0, [r7, #24]
 800b622:	f7f4 fd97 	bl	8000154 <__udivsi3>
 800b626:	0003      	movs	r3, r0
 800b628:	18e2      	adds	r2, r4, r3
 800b62a:	251f      	movs	r5, #31
 800b62c:	197c      	adds	r4, r7, r5
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	0011      	movs	r1, r2
 800b632:	0018      	movs	r0, r3
 800b634:	f7ff fdde 	bl	800b1f4 <move_window>
 800b638:	0003      	movs	r3, r0
 800b63a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800b63c:	197b      	adds	r3, r7, r5
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d000      	beq.n	800b646 <put_fat+0x100>
 800b644:	e0a3      	b.n	800b78e <put_fat+0x248>
			p = fs->win + bc % SS(fs);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	3338      	adds	r3, #56	; 0x38
 800b64a:	001c      	movs	r4, r3
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	899b      	ldrh	r3, [r3, #12]
 800b650:	001a      	movs	r2, r3
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	0011      	movs	r1, r2
 800b656:	0018      	movs	r0, r3
 800b658:	f7f4 fe02 	bl	8000260 <__aeabi_uidivmod>
 800b65c:	000b      	movs	r3, r1
 800b65e:	18e3      	adds	r3, r4, r3
 800b660:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	2201      	movs	r2, #1
 800b666:	4013      	ands	r3, r2
 800b668:	d003      	beq.n	800b672 <put_fat+0x12c>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	091b      	lsrs	r3, r3, #4
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	e00e      	b.n	800b690 <put_fat+0x14a>
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	b25b      	sxtb	r3, r3
 800b678:	220f      	movs	r2, #15
 800b67a:	4393      	bics	r3, r2
 800b67c:	b25a      	sxtb	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	0a1b      	lsrs	r3, r3, #8
 800b682:	b25b      	sxtb	r3, r3
 800b684:	210f      	movs	r1, #15
 800b686:	400b      	ands	r3, r1
 800b688:	b25b      	sxtb	r3, r3
 800b68a:	4313      	orrs	r3, r2
 800b68c:	b25b      	sxtb	r3, r3
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	697a      	ldr	r2, [r7, #20]
 800b692:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2201      	movs	r2, #1
 800b698:	70da      	strb	r2, [r3, #3]
			break;
 800b69a:	e07d      	b.n	800b798 <put_fat+0x252>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	899b      	ldrh	r3, [r3, #12]
 800b6a4:	085b      	lsrs	r3, r3, #1
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	0019      	movs	r1, r3
 800b6aa:	68b8      	ldr	r0, [r7, #8]
 800b6ac:	f7f4 fd52 	bl	8000154 <__udivsi3>
 800b6b0:	0003      	movs	r3, r0
 800b6b2:	18e2      	adds	r2, r4, r3
 800b6b4:	251f      	movs	r5, #31
 800b6b6:	197c      	adds	r4, r7, r5
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	0011      	movs	r1, r2
 800b6bc:	0018      	movs	r0, r3
 800b6be:	f7ff fd99 	bl	800b1f4 <move_window>
 800b6c2:	0003      	movs	r3, r0
 800b6c4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800b6c6:	197b      	adds	r3, r7, r5
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d161      	bne.n	800b792 <put_fat+0x24c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	3338      	adds	r3, #56	; 0x38
 800b6d2:	001c      	movs	r4, r3
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	005a      	lsls	r2, r3, #1
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	899b      	ldrh	r3, [r3, #12]
 800b6dc:	0019      	movs	r1, r3
 800b6de:	0010      	movs	r0, r2
 800b6e0:	f7f4 fdbe 	bl	8000260 <__aeabi_uidivmod>
 800b6e4:	000b      	movs	r3, r1
 800b6e6:	18e3      	adds	r3, r4, r3
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	b292      	uxth	r2, r2
 800b6ec:	0011      	movs	r1, r2
 800b6ee:	0018      	movs	r0, r3
 800b6f0:	f7ff fb10 	bl	800ad14 <st_word>
			fs->wflag = 1;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	70da      	strb	r2, [r3, #3]
			break;
 800b6fa:	e04d      	b.n	800b798 <put_fat+0x252>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	899b      	ldrh	r3, [r3, #12]
 800b704:	089b      	lsrs	r3, r3, #2
 800b706:	b29b      	uxth	r3, r3
 800b708:	0019      	movs	r1, r3
 800b70a:	68b8      	ldr	r0, [r7, #8]
 800b70c:	f7f4 fd22 	bl	8000154 <__udivsi3>
 800b710:	0003      	movs	r3, r0
 800b712:	18e2      	adds	r2, r4, r3
 800b714:	251f      	movs	r5, #31
 800b716:	197c      	adds	r4, r7, r5
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	0011      	movs	r1, r2
 800b71c:	0018      	movs	r0, r3
 800b71e:	f7ff fd69 	bl	800b1f4 <move_window>
 800b722:	0003      	movs	r3, r0
 800b724:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800b726:	197b      	adds	r3, r7, r5
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d133      	bne.n	800b796 <put_fat+0x250>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	011b      	lsls	r3, r3, #4
 800b732:	091c      	lsrs	r4, r3, #4
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	3338      	adds	r3, #56	; 0x38
 800b738:	001d      	movs	r5, r3
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	009a      	lsls	r2, r3, #2
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	899b      	ldrh	r3, [r3, #12]
 800b742:	0019      	movs	r1, r3
 800b744:	0010      	movs	r0, r2
 800b746:	f7f4 fd8b 	bl	8000260 <__aeabi_uidivmod>
 800b74a:	000b      	movs	r3, r1
 800b74c:	18eb      	adds	r3, r5, r3
 800b74e:	0018      	movs	r0, r3
 800b750:	f7ff fabf 	bl	800acd2 <ld_dword>
 800b754:	0003      	movs	r3, r0
 800b756:	0f1b      	lsrs	r3, r3, #28
 800b758:	071b      	lsls	r3, r3, #28
 800b75a:	4323      	orrs	r3, r4
 800b75c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	3338      	adds	r3, #56	; 0x38
 800b762:	001c      	movs	r4, r3
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	009a      	lsls	r2, r3, #2
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	899b      	ldrh	r3, [r3, #12]
 800b76c:	0019      	movs	r1, r3
 800b76e:	0010      	movs	r0, r2
 800b770:	f7f4 fd76 	bl	8000260 <__aeabi_uidivmod>
 800b774:	000b      	movs	r3, r1
 800b776:	18e3      	adds	r3, r4, r3
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	0011      	movs	r1, r2
 800b77c:	0018      	movs	r0, r3
 800b77e:	f7ff fae7 	bl	800ad50 <st_dword>
			fs->wflag = 1;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2201      	movs	r2, #1
 800b786:	70da      	strb	r2, [r3, #3]
			break;
 800b788:	e006      	b.n	800b798 <put_fat+0x252>
			if (res != FR_OK) break;
 800b78a:	46c0      	nop			; (mov r8, r8)
 800b78c:	e004      	b.n	800b798 <put_fat+0x252>
			if (res != FR_OK) break;
 800b78e:	46c0      	nop			; (mov r8, r8)
 800b790:	e002      	b.n	800b798 <put_fat+0x252>
			if (res != FR_OK) break;
 800b792:	46c0      	nop			; (mov r8, r8)
 800b794:	e000      	b.n	800b798 <put_fat+0x252>
			if (res != FR_OK) break;
 800b796:	46c0      	nop			; (mov r8, r8)
		}
	}
	return res;
 800b798:	231f      	movs	r3, #31
 800b79a:	18fb      	adds	r3, r7, r3
 800b79c:	781b      	ldrb	r3, [r3, #0]
}
 800b79e:	0018      	movs	r0, r3
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	b008      	add	sp, #32
 800b7a4:	bdb0      	pop	{r4, r5, r7, pc}

0800b7a6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b7a6:	b5b0      	push	{r4, r5, r7, lr}
 800b7a8:	b088      	sub	sp, #32
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	60f8      	str	r0, [r7, #12]
 800b7ae:	60b9      	str	r1, [r7, #8]
 800b7b0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b7b2:	231f      	movs	r3, #31
 800b7b4:	18fb      	adds	r3, r7, r3
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d904      	bls.n	800b7d0 <remove_chain+0x2a>
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	69db      	ldr	r3, [r3, #28]
 800b7ca:	68ba      	ldr	r2, [r7, #8]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d301      	bcc.n	800b7d4 <remove_chain+0x2e>
 800b7d0:	2302      	movs	r3, #2
 800b7d2:	e057      	b.n	800b884 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d011      	beq.n	800b7fe <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b7da:	251f      	movs	r5, #31
 800b7dc:	197c      	adds	r4, r7, r5
 800b7de:	2301      	movs	r3, #1
 800b7e0:	425a      	negs	r2, r3
 800b7e2:	6879      	ldr	r1, [r7, #4]
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	0018      	movs	r0, r3
 800b7e8:	f7ff fead 	bl	800b546 <put_fat>
 800b7ec:	0003      	movs	r3, r0
 800b7ee:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 800b7f0:	197b      	adds	r3, r7, r5
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d002      	beq.n	800b7fe <remove_chain+0x58>
 800b7f8:	197b      	adds	r3, r7, r5
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	e042      	b.n	800b884 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b7fe:	68ba      	ldr	r2, [r7, #8]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	0011      	movs	r1, r2
 800b804:	0018      	movs	r0, r3
 800b806:	f7ff fdc3 	bl	800b390 <get_fat>
 800b80a:	0003      	movs	r3, r0
 800b80c:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d035      	beq.n	800b880 <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	2b01      	cmp	r3, #1
 800b818:	d101      	bne.n	800b81e <remove_chain+0x78>
 800b81a:	2302      	movs	r3, #2
 800b81c:	e032      	b.n	800b884 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	3301      	adds	r3, #1
 800b822:	d101      	bne.n	800b828 <remove_chain+0x82>
 800b824:	2301      	movs	r3, #1
 800b826:	e02d      	b.n	800b884 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b828:	251f      	movs	r5, #31
 800b82a:	197c      	adds	r4, r7, r5
 800b82c:	68b9      	ldr	r1, [r7, #8]
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	2200      	movs	r2, #0
 800b832:	0018      	movs	r0, r3
 800b834:	f7ff fe87 	bl	800b546 <put_fat>
 800b838:	0003      	movs	r3, r0
 800b83a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 800b83c:	197b      	adds	r3, r7, r5
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d002      	beq.n	800b84a <remove_chain+0xa4>
 800b844:	197b      	adds	r3, r7, r5
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	e01c      	b.n	800b884 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	699a      	ldr	r2, [r3, #24]
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	69db      	ldr	r3, [r3, #28]
 800b852:	3b02      	subs	r3, #2
 800b854:	429a      	cmp	r2, r3
 800b856:	d20b      	bcs.n	800b870 <remove_chain+0xca>
			fs->free_clst++;
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	1c5a      	adds	r2, r3, #1
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	791b      	ldrb	r3, [r3, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	4313      	orrs	r3, r2
 800b86a:	b2da      	uxtb	r2, r3
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	69db      	ldr	r3, [r3, #28]
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d3bf      	bcc.n	800b7fe <remove_chain+0x58>
 800b87e:	e000      	b.n	800b882 <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 800b880:	46c0      	nop			; (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	0018      	movs	r0, r3
 800b886:	46bd      	mov	sp, r7
 800b888:	b008      	add	sp, #32
 800b88a:	bdb0      	pop	{r4, r5, r7, pc}

0800b88c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b88c:	b5b0      	push	{r4, r5, r7, lr}
 800b88e:	b088      	sub	sp, #32
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d10d      	bne.n	800b8be <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	695b      	ldr	r3, [r3, #20]
 800b8a6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d004      	beq.n	800b8b8 <create_chain+0x2c>
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	69db      	ldr	r3, [r3, #28]
 800b8b2:	69ba      	ldr	r2, [r7, #24]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d31d      	bcc.n	800b8f4 <create_chain+0x68>
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	61bb      	str	r3, [r7, #24]
 800b8bc:	e01a      	b.n	800b8f4 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b8be:	683a      	ldr	r2, [r7, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	0011      	movs	r1, r2
 800b8c4:	0018      	movs	r0, r3
 800b8c6:	f7ff fd63 	bl	800b390 <get_fat>
 800b8ca:	0003      	movs	r3, r0
 800b8cc:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d801      	bhi.n	800b8d8 <create_chain+0x4c>
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e07b      	b.n	800b9d0 <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	d101      	bne.n	800b8e2 <create_chain+0x56>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	e076      	b.n	800b9d0 <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	69db      	ldr	r3, [r3, #28]
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d201      	bcs.n	800b8f0 <create_chain+0x64>
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	e06f      	b.n	800b9d0 <create_chain+0x144>
		scl = clst;
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	69db      	ldr	r3, [r3, #28]
 800b902:	69fa      	ldr	r2, [r7, #28]
 800b904:	429a      	cmp	r2, r3
 800b906:	d307      	bcc.n	800b918 <create_chain+0x8c>
				ncl = 2;
 800b908:	2302      	movs	r3, #2
 800b90a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b90c:	69fa      	ldr	r2, [r7, #28]
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	429a      	cmp	r2, r3
 800b912:	d901      	bls.n	800b918 <create_chain+0x8c>
 800b914:	2300      	movs	r3, #0
 800b916:	e05b      	b.n	800b9d0 <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b918:	69fa      	ldr	r2, [r7, #28]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	0011      	movs	r1, r2
 800b91e:	0018      	movs	r0, r3
 800b920:	f7ff fd36 	bl	800b390 <get_fat>
 800b924:	0003      	movs	r3, r0
 800b926:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d00d      	beq.n	800b94a <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d002      	beq.n	800b93a <create_chain+0xae>
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	3301      	adds	r3, #1
 800b938:	d101      	bne.n	800b93e <create_chain+0xb2>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	e048      	b.n	800b9d0 <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 800b93e:	69fa      	ldr	r2, [r7, #28]
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	429a      	cmp	r2, r3
 800b944:	d1d8      	bne.n	800b8f8 <create_chain+0x6c>
 800b946:	2300      	movs	r3, #0
 800b948:	e042      	b.n	800b9d0 <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 800b94a:	46c0      	nop			; (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b94c:	2517      	movs	r5, #23
 800b94e:	197c      	adds	r4, r7, r5
 800b950:	2301      	movs	r3, #1
 800b952:	425a      	negs	r2, r3
 800b954:	69f9      	ldr	r1, [r7, #28]
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	0018      	movs	r0, r3
 800b95a:	f7ff fdf4 	bl	800b546 <put_fat>
 800b95e:	0003      	movs	r3, r0
 800b960:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 800b962:	197b      	adds	r3, r7, r5
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d10b      	bne.n	800b982 <create_chain+0xf6>
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d008      	beq.n	800b982 <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b970:	197c      	adds	r4, r7, r5
 800b972:	69fa      	ldr	r2, [r7, #28]
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	0018      	movs	r0, r3
 800b97a:	f7ff fde4 	bl	800b546 <put_fat>
 800b97e:	0003      	movs	r3, r0
 800b980:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b982:	2317      	movs	r3, #23
 800b984:	18fb      	adds	r3, r7, r3
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d116      	bne.n	800b9ba <create_chain+0x12e>
		fs->last_clst = ncl;
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	69fa      	ldr	r2, [r7, #28]
 800b990:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	699a      	ldr	r2, [r3, #24]
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	69db      	ldr	r3, [r3, #28]
 800b99a:	3b02      	subs	r3, #2
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d804      	bhi.n	800b9aa <create_chain+0x11e>
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	1e5a      	subs	r2, r3, #1
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	791b      	ldrb	r3, [r3, #4]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	b2da      	uxtb	r2, r3
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	711a      	strb	r2, [r3, #4]
 800b9b8:	e009      	b.n	800b9ce <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b9ba:	2317      	movs	r3, #23
 800b9bc:	18fb      	adds	r3, r7, r3
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d102      	bne.n	800b9ca <create_chain+0x13e>
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	425b      	negs	r3, r3
 800b9c8:	e000      	b.n	800b9cc <create_chain+0x140>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b9ce:	69fb      	ldr	r3, [r7, #28]
}
 800b9d0:	0018      	movs	r0, r3
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	b008      	add	sp, #32
 800b9d6:	bdb0      	pop	{r4, r5, r7, pc}

0800b9d8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b086      	sub	sp, #24
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	899b      	ldrh	r3, [r3, #12]
 800b9f4:	0019      	movs	r1, r3
 800b9f6:	6838      	ldr	r0, [r7, #0]
 800b9f8:	f7f4 fbac 	bl	8000154 <__udivsi3>
 800b9fc:	0003      	movs	r3, r0
 800b9fe:	001a      	movs	r2, r3
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	895b      	ldrh	r3, [r3, #10]
 800ba04:	0019      	movs	r1, r3
 800ba06:	0010      	movs	r0, r2
 800ba08:	f7f4 fba4 	bl	8000154 <__udivsi3>
 800ba0c:	0003      	movs	r3, r0
 800ba0e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	1d1a      	adds	r2, r3, #4
 800ba14:	613a      	str	r2, [r7, #16]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d101      	bne.n	800ba24 <clmt_clust+0x4c>
 800ba20:	2300      	movs	r3, #0
 800ba22:	e010      	b.n	800ba46 <clmt_clust+0x6e>
		if (cl < ncl) break;	/* In this fragment? */
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d307      	bcc.n	800ba3c <clmt_clust+0x64>
		cl -= ncl; tbl++;		/* Next fragment */
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	617b      	str	r3, [r7, #20]
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	3304      	adds	r3, #4
 800ba38:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ba3a:	e7e9      	b.n	800ba10 <clmt_clust+0x38>
		if (cl < ncl) break;	/* In this fragment? */
 800ba3c:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	18d3      	adds	r3, r2, r3
}
 800ba46:	0018      	movs	r0, r3
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	b006      	add	sp, #24
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ba4e:	b590      	push	{r4, r7, lr}
 800ba50:	b087      	sub	sp, #28
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
 800ba56:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	2380      	movs	r3, #128	; 0x80
 800ba62:	039b      	lsls	r3, r3, #14
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d203      	bcs.n	800ba70 <dir_sdi+0x22>
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	221f      	movs	r2, #31
 800ba6c:	4013      	ands	r3, r2
 800ba6e:	d001      	beq.n	800ba74 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ba70:	2302      	movs	r3, #2
 800ba72:	e074      	b.n	800bb5e <dir_sdi+0x110>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	683a      	ldr	r2, [r7, #0]
 800ba78:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d106      	bne.n	800ba94 <dir_sdi+0x46>
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	d902      	bls.n	800ba94 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba92:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10c      	bne.n	800bab4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	095b      	lsrs	r3, r3, #5
 800ba9e:	693a      	ldr	r2, [r7, #16]
 800baa0:	8912      	ldrh	r2, [r2, #8]
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d301      	bcc.n	800baaa <dir_sdi+0x5c>
 800baa6:	2302      	movs	r3, #2
 800baa8:	e059      	b.n	800bb5e <dir_sdi+0x110>
		dp->sect = fs->dirbase;
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	61da      	str	r2, [r3, #28]
 800bab2:	e02f      	b.n	800bb14 <dir_sdi+0xc6>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	895b      	ldrh	r3, [r3, #10]
 800bab8:	001a      	movs	r2, r3
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	899b      	ldrh	r3, [r3, #12]
 800babe:	4353      	muls	r3, r2
 800bac0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bac2:	e01a      	b.n	800bafa <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	697a      	ldr	r2, [r7, #20]
 800bac8:	0011      	movs	r1, r2
 800baca:	0018      	movs	r0, r3
 800bacc:	f7ff fc60 	bl	800b390 <get_fat>
 800bad0:	0003      	movs	r3, r0
 800bad2:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	3301      	adds	r3, #1
 800bad8:	d101      	bne.n	800bade <dir_sdi+0x90>
 800bada:	2301      	movs	r3, #1
 800badc:	e03f      	b.n	800bb5e <dir_sdi+0x110>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d904      	bls.n	800baee <dir_sdi+0xa0>
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	69db      	ldr	r3, [r3, #28]
 800bae8:	697a      	ldr	r2, [r7, #20]
 800baea:	429a      	cmp	r2, r3
 800baec:	d301      	bcc.n	800baf2 <dir_sdi+0xa4>
 800baee:	2302      	movs	r3, #2
 800baf0:	e035      	b.n	800bb5e <dir_sdi+0x110>
			ofs -= csz;
 800baf2:	683a      	ldr	r2, [r7, #0]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	1ad3      	subs	r3, r2, r3
 800baf8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bafa:	683a      	ldr	r2, [r7, #0]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d2e0      	bcs.n	800bac4 <dir_sdi+0x76>
		}
		dp->sect = clust2sect(fs, clst);
 800bb02:	697a      	ldr	r2, [r7, #20]
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	0011      	movs	r1, r2
 800bb08:	0018      	movs	r0, r3
 800bb0a:	f7ff fc25 	bl	800b358 <clust2sect>
 800bb0e:	0002      	movs	r2, r0
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	697a      	ldr	r2, [r7, #20]
 800bb18:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	69db      	ldr	r3, [r3, #28]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d101      	bne.n	800bb26 <dir_sdi+0xd8>
 800bb22:	2302      	movs	r3, #2
 800bb24:	e01b      	b.n	800bb5e <dir_sdi+0x110>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	69dc      	ldr	r4, [r3, #28]
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	899b      	ldrh	r3, [r3, #12]
 800bb2e:	0019      	movs	r1, r3
 800bb30:	6838      	ldr	r0, [r7, #0]
 800bb32:	f7f4 fb0f 	bl	8000154 <__udivsi3>
 800bb36:	0003      	movs	r3, r0
 800bb38:	18e2      	adds	r2, r4, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	3338      	adds	r3, #56	; 0x38
 800bb42:	001c      	movs	r4, r3
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	899b      	ldrh	r3, [r3, #12]
 800bb48:	001a      	movs	r2, r3
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	0011      	movs	r1, r2
 800bb4e:	0018      	movs	r0, r3
 800bb50:	f7f4 fb86 	bl	8000260 <__aeabi_uidivmod>
 800bb54:	000b      	movs	r3, r1
 800bb56:	18e2      	adds	r2, r4, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	0018      	movs	r0, r3
 800bb60:	46bd      	mov	sp, r7
 800bb62:	b007      	add	sp, #28
 800bb64:	bd90      	pop	{r4, r7, pc}

0800bb66 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bb66:	b590      	push	{r4, r7, lr}
 800bb68:	b087      	sub	sp, #28
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	695b      	ldr	r3, [r3, #20]
 800bb7a:	3320      	adds	r3, #32
 800bb7c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	69db      	ldr	r3, [r3, #28]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d004      	beq.n	800bb90 <dir_next+0x2a>
 800bb86:	68ba      	ldr	r2, [r7, #8]
 800bb88:	2380      	movs	r3, #128	; 0x80
 800bb8a:	039b      	lsls	r3, r3, #14
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d301      	bcc.n	800bb94 <dir_next+0x2e>
 800bb90:	2304      	movs	r3, #4
 800bb92:	e0c0      	b.n	800bd16 <dir_next+0x1b0>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	899b      	ldrh	r3, [r3, #12]
 800bb98:	001a      	movs	r2, r3
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	0011      	movs	r1, r2
 800bb9e:	0018      	movs	r0, r3
 800bba0:	f7f4 fb5e 	bl	8000260 <__aeabi_uidivmod>
 800bba4:	1e0b      	subs	r3, r1, #0
 800bba6:	d000      	beq.n	800bbaa <dir_next+0x44>
 800bba8:	e0a2      	b.n	800bcf0 <dir_next+0x18a>
		dp->sect++;				/* Next sector */
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	69db      	ldr	r3, [r3, #28]
 800bbae:	1c5a      	adds	r2, r3, #1
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	699b      	ldr	r3, [r3, #24]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10b      	bne.n	800bbd4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	095b      	lsrs	r3, r3, #5
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	8912      	ldrh	r2, [r2, #8]
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d200      	bcs.n	800bbca <dir_next+0x64>
 800bbc8:	e092      	b.n	800bcf0 <dir_next+0x18a>
				dp->sect = 0; return FR_NO_FILE;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	61da      	str	r2, [r3, #28]
 800bbd0:	2304      	movs	r3, #4
 800bbd2:	e0a0      	b.n	800bd16 <dir_next+0x1b0>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	899b      	ldrh	r3, [r3, #12]
 800bbd8:	0019      	movs	r1, r3
 800bbda:	68b8      	ldr	r0, [r7, #8]
 800bbdc:	f7f4 faba 	bl	8000154 <__udivsi3>
 800bbe0:	0003      	movs	r3, r0
 800bbe2:	001a      	movs	r2, r3
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	895b      	ldrh	r3, [r3, #10]
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	4013      	ands	r3, r2
 800bbec:	d000      	beq.n	800bbf0 <dir_next+0x8a>
 800bbee:	e07f      	b.n	800bcf0 <dir_next+0x18a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	699b      	ldr	r3, [r3, #24]
 800bbf6:	0019      	movs	r1, r3
 800bbf8:	0010      	movs	r0, r2
 800bbfa:	f7ff fbc9 	bl	800b390 <get_fat>
 800bbfe:	0003      	movs	r3, r0
 800bc00:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d801      	bhi.n	800bc0c <dir_next+0xa6>
 800bc08:	2302      	movs	r3, #2
 800bc0a:	e084      	b.n	800bd16 <dir_next+0x1b0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	3301      	adds	r3, #1
 800bc10:	d101      	bne.n	800bc16 <dir_next+0xb0>
 800bc12:	2301      	movs	r3, #1
 800bc14:	e07f      	b.n	800bd16 <dir_next+0x1b0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	69db      	ldr	r3, [r3, #28]
 800bc1a:	697a      	ldr	r2, [r7, #20]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d35b      	bcc.n	800bcd8 <dir_next+0x172>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d104      	bne.n	800bc30 <dir_next+0xca>
						dp->sect = 0; return FR_NO_FILE;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	61da      	str	r2, [r3, #28]
 800bc2c:	2304      	movs	r3, #4
 800bc2e:	e072      	b.n	800bd16 <dir_next+0x1b0>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	699b      	ldr	r3, [r3, #24]
 800bc36:	0019      	movs	r1, r3
 800bc38:	0010      	movs	r0, r2
 800bc3a:	f7ff fe27 	bl	800b88c <create_chain>
 800bc3e:	0003      	movs	r3, r0
 800bc40:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d101      	bne.n	800bc4c <dir_next+0xe6>
 800bc48:	2307      	movs	r3, #7
 800bc4a:	e064      	b.n	800bd16 <dir_next+0x1b0>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d101      	bne.n	800bc56 <dir_next+0xf0>
 800bc52:	2302      	movs	r3, #2
 800bc54:	e05f      	b.n	800bd16 <dir_next+0x1b0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	d101      	bne.n	800bc60 <dir_next+0xfa>
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e05a      	b.n	800bd16 <dir_next+0x1b0>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	0018      	movs	r0, r3
 800bc64:	f7ff fa7e 	bl	800b164 <sync_window>
 800bc68:	1e03      	subs	r3, r0, #0
 800bc6a:	d001      	beq.n	800bc70 <dir_next+0x10a>
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e052      	b.n	800bd16 <dir_next+0x1b0>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	3338      	adds	r3, #56	; 0x38
 800bc74:	0018      	movs	r0, r3
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	899b      	ldrh	r3, [r3, #12]
 800bc7a:	001a      	movs	r2, r3
 800bc7c:	2100      	movs	r1, #0
 800bc7e:	f7ff f8b0 	bl	800ade2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bc82:	2300      	movs	r3, #0
 800bc84:	613b      	str	r3, [r7, #16]
 800bc86:	697a      	ldr	r2, [r7, #20]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	0011      	movs	r1, r2
 800bc8c:	0018      	movs	r0, r3
 800bc8e:	f7ff fb63 	bl	800b358 <clust2sect>
 800bc92:	0002      	movs	r2, r0
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	635a      	str	r2, [r3, #52]	; 0x34
 800bc98:	e012      	b.n	800bcc0 <dir_next+0x15a>
						fs->wflag = 1;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	0018      	movs	r0, r3
 800bca4:	f7ff fa5e 	bl	800b164 <sync_window>
 800bca8:	1e03      	subs	r3, r0, #0
 800bcaa:	d001      	beq.n	800bcb0 <dir_next+0x14a>
 800bcac:	2301      	movs	r3, #1
 800bcae:	e032      	b.n	800bd16 <dir_next+0x1b0>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	613b      	str	r3, [r7, #16]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcba:	1c5a      	adds	r2, r3, #1
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	635a      	str	r2, [r3, #52]	; 0x34
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	895b      	ldrh	r3, [r3, #10]
 800bcc4:	001a      	movs	r2, r3
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d3e6      	bcc.n	800bc9a <dir_next+0x134>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	1ad2      	subs	r2, r2, r3
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	697a      	ldr	r2, [r7, #20]
 800bcdc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bcde:	697a      	ldr	r2, [r7, #20]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	0011      	movs	r1, r2
 800bce4:	0018      	movs	r0, r3
 800bce6:	f7ff fb37 	bl	800b358 <clust2sect>
 800bcea:	0002      	movs	r2, r0
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	3338      	adds	r3, #56	; 0x38
 800bcfa:	001c      	movs	r4, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	899b      	ldrh	r3, [r3, #12]
 800bd00:	001a      	movs	r2, r3
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	0011      	movs	r1, r2
 800bd06:	0018      	movs	r0, r3
 800bd08:	f7f4 faaa 	bl	8000260 <__aeabi_uidivmod>
 800bd0c:	000b      	movs	r3, r1
 800bd0e:	18e2      	adds	r2, r4, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	0018      	movs	r0, r3
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	b007      	add	sp, #28
 800bd1c:	bd90      	pop	{r4, r7, pc}

0800bd1e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bd1e:	b5b0      	push	{r4, r5, r7, lr}
 800bd20:	b086      	sub	sp, #24
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
 800bd26:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bd2e:	2517      	movs	r5, #23
 800bd30:	197c      	adds	r4, r7, r5
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2100      	movs	r1, #0
 800bd36:	0018      	movs	r0, r3
 800bd38:	f7ff fe89 	bl	800ba4e <dir_sdi>
 800bd3c:	0003      	movs	r3, r0
 800bd3e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800bd40:	197b      	adds	r3, r7, r5
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d133      	bne.n	800bdb0 <dir_alloc+0x92>
		n = 0;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	69da      	ldr	r2, [r3, #28]
 800bd50:	2517      	movs	r5, #23
 800bd52:	197c      	adds	r4, r7, r5
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	0011      	movs	r1, r2
 800bd58:	0018      	movs	r0, r3
 800bd5a:	f7ff fa4b 	bl	800b1f4 <move_window>
 800bd5e:	0003      	movs	r3, r0
 800bd60:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800bd62:	197b      	adds	r3, r7, r5
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d121      	bne.n	800bdae <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6a1b      	ldr	r3, [r3, #32]
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	2be5      	cmp	r3, #229	; 0xe5
 800bd72:	d004      	beq.n	800bd7e <dir_alloc+0x60>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6a1b      	ldr	r3, [r3, #32]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d107      	bne.n	800bd8e <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	3301      	adds	r3, #1
 800bd82:	613b      	str	r3, [r7, #16]
 800bd84:	693a      	ldr	r2, [r7, #16]
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d102      	bne.n	800bd92 <dir_alloc+0x74>
 800bd8c:	e010      	b.n	800bdb0 <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bd8e:	2300      	movs	r3, #0
 800bd90:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bd92:	2517      	movs	r5, #23
 800bd94:	197c      	adds	r4, r7, r5
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2101      	movs	r1, #1
 800bd9a:	0018      	movs	r0, r3
 800bd9c:	f7ff fee3 	bl	800bb66 <dir_next>
 800bda0:	0003      	movs	r3, r0
 800bda2:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bda4:	197b      	adds	r3, r7, r5
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d0cf      	beq.n	800bd4c <dir_alloc+0x2e>
 800bdac:	e000      	b.n	800bdb0 <dir_alloc+0x92>
			if (res != FR_OK) break;
 800bdae:	46c0      	nop			; (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bdb0:	2217      	movs	r2, #23
 800bdb2:	18bb      	adds	r3, r7, r2
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	2b04      	cmp	r3, #4
 800bdb8:	d102      	bne.n	800bdc0 <dir_alloc+0xa2>
 800bdba:	18bb      	adds	r3, r7, r2
 800bdbc:	2207      	movs	r2, #7
 800bdbe:	701a      	strb	r2, [r3, #0]
	return res;
 800bdc0:	2317      	movs	r3, #23
 800bdc2:	18fb      	adds	r3, r7, r3
 800bdc4:	781b      	ldrb	r3, [r3, #0]
}
 800bdc6:	0018      	movs	r0, r3
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	b006      	add	sp, #24
 800bdcc:	bdb0      	pop	{r4, r5, r7, pc}

0800bdce <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b084      	sub	sp, #16
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
 800bdd6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	331a      	adds	r3, #26
 800bddc:	0018      	movs	r0, r3
 800bdde:	f7fe ff5d 	bl	800ac9c <ld_word>
 800bde2:	0003      	movs	r3, r0
 800bde4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	2b03      	cmp	r3, #3
 800bdec:	d109      	bne.n	800be02 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	3314      	adds	r3, #20
 800bdf2:	0018      	movs	r0, r3
 800bdf4:	f7fe ff52 	bl	800ac9c <ld_word>
 800bdf8:	0003      	movs	r3, r0
 800bdfa:	041b      	lsls	r3, r3, #16
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800be02:	68fb      	ldr	r3, [r7, #12]
}
 800be04:	0018      	movs	r0, r3
 800be06:	46bd      	mov	sp, r7
 800be08:	b004      	add	sp, #16
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	331a      	adds	r3, #26
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	b292      	uxth	r2, r2
 800be20:	0011      	movs	r1, r2
 800be22:	0018      	movs	r0, r3
 800be24:	f7fe ff76 	bl	800ad14 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	2b03      	cmp	r3, #3
 800be2e:	d109      	bne.n	800be44 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	3314      	adds	r3, #20
 800be34:	001a      	movs	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	0c1b      	lsrs	r3, r3, #16
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	0019      	movs	r1, r3
 800be3e:	0010      	movs	r0, r2
 800be40:	f7fe ff68 	bl	800ad14 <st_word>
	}
}
 800be44:	46c0      	nop			; (mov r8, r8)
 800be46:	46bd      	mov	sp, r7
 800be48:	b004      	add	sp, #16
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800be4c:	b5b0      	push	{r4, r5, r7, lr}
 800be4e:	b086      	sub	sp, #24
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	331a      	adds	r3, #26
 800be5a:	0018      	movs	r0, r3
 800be5c:	f7fe ff1e 	bl	800ac9c <ld_word>
 800be60:	1e03      	subs	r3, r0, #0
 800be62:	d001      	beq.n	800be68 <cmp_lfn+0x1c>
 800be64:	2300      	movs	r3, #0
 800be66:	e068      	b.n	800bf3a <cmp_lfn+0xee>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	001a      	movs	r2, r3
 800be6e:	233f      	movs	r3, #63	; 0x3f
 800be70:	4013      	ands	r3, r2
 800be72:	1e5a      	subs	r2, r3, #1
 800be74:	0013      	movs	r3, r2
 800be76:	005b      	lsls	r3, r3, #1
 800be78:	189b      	adds	r3, r3, r2
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	189b      	adds	r3, r3, r2
 800be7e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800be80:	230e      	movs	r3, #14
 800be82:	18fb      	adds	r3, r7, r3
 800be84:	2201      	movs	r2, #1
 800be86:	801a      	strh	r2, [r3, #0]
 800be88:	2300      	movs	r3, #0
 800be8a:	613b      	str	r3, [r7, #16]
 800be8c:	e03d      	b.n	800bf0a <cmp_lfn+0xbe>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800be8e:	4a2d      	ldr	r2, [pc, #180]	; (800bf44 <cmp_lfn+0xf8>)
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	18d3      	adds	r3, r2, r3
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	001a      	movs	r2, r3
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	189b      	adds	r3, r3, r2
 800be9c:	250c      	movs	r5, #12
 800be9e:	197c      	adds	r4, r7, r5
 800bea0:	0018      	movs	r0, r3
 800bea2:	f7fe fefb 	bl	800ac9c <ld_word>
 800bea6:	0003      	movs	r3, r0
 800bea8:	8023      	strh	r3, [r4, #0]
		if (wc) {
 800beaa:	230e      	movs	r3, #14
 800beac:	18fb      	adds	r3, r7, r3
 800beae:	881b      	ldrh	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d01f      	beq.n	800bef4 <cmp_lfn+0xa8>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	2bfe      	cmp	r3, #254	; 0xfe
 800beb8:	d813      	bhi.n	800bee2 <cmp_lfn+0x96>
 800beba:	197b      	adds	r3, r7, r5
 800bebc:	881b      	ldrh	r3, [r3, #0]
 800bebe:	0018      	movs	r0, r3
 800bec0:	f001 ff8c 	bl	800dddc <ff_wtoupper>
 800bec4:	0003      	movs	r3, r0
 800bec6:	001c      	movs	r4, r3
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	1c5a      	adds	r2, r3, #1
 800becc:	617a      	str	r2, [r7, #20]
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	18d3      	adds	r3, r2, r3
 800bed4:	881b      	ldrh	r3, [r3, #0]
 800bed6:	0018      	movs	r0, r3
 800bed8:	f001 ff80 	bl	800dddc <ff_wtoupper>
 800bedc:	0003      	movs	r3, r0
 800bede:	429c      	cmp	r4, r3
 800bee0:	d001      	beq.n	800bee6 <cmp_lfn+0x9a>
				return 0;					/* Not matched */
 800bee2:	2300      	movs	r3, #0
 800bee4:	e029      	b.n	800bf3a <cmp_lfn+0xee>
			}
			wc = uc;
 800bee6:	230e      	movs	r3, #14
 800bee8:	18fb      	adds	r3, r7, r3
 800beea:	220c      	movs	r2, #12
 800beec:	18ba      	adds	r2, r7, r2
 800beee:	8812      	ldrh	r2, [r2, #0]
 800bef0:	801a      	strh	r2, [r3, #0]
 800bef2:	e007      	b.n	800bf04 <cmp_lfn+0xb8>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bef4:	230c      	movs	r3, #12
 800bef6:	18fb      	adds	r3, r7, r3
 800bef8:	881b      	ldrh	r3, [r3, #0]
 800befa:	4a13      	ldr	r2, [pc, #76]	; (800bf48 <cmp_lfn+0xfc>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d001      	beq.n	800bf04 <cmp_lfn+0xb8>
 800bf00:	2300      	movs	r3, #0
 800bf02:	e01a      	b.n	800bf3a <cmp_lfn+0xee>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	3301      	adds	r3, #1
 800bf08:	613b      	str	r3, [r7, #16]
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	2b0c      	cmp	r3, #12
 800bf0e:	d9be      	bls.n	800be8e <cmp_lfn+0x42>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	001a      	movs	r2, r3
 800bf16:	2340      	movs	r3, #64	; 0x40
 800bf18:	4013      	ands	r3, r2
 800bf1a:	d00d      	beq.n	800bf38 <cmp_lfn+0xec>
 800bf1c:	230e      	movs	r3, #14
 800bf1e:	18fb      	adds	r3, r7, r3
 800bf20:	881b      	ldrh	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d008      	beq.n	800bf38 <cmp_lfn+0xec>
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	005b      	lsls	r3, r3, #1
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	18d3      	adds	r3, r2, r3
 800bf2e:	881b      	ldrh	r3, [r3, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d001      	beq.n	800bf38 <cmp_lfn+0xec>
 800bf34:	2300      	movs	r3, #0
 800bf36:	e000      	b.n	800bf3a <cmp_lfn+0xee>

	return 1;		/* The part of LFN matched */
 800bf38:	2301      	movs	r3, #1
}
 800bf3a:	0018      	movs	r0, r3
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	b006      	add	sp, #24
 800bf40:	bdb0      	pop	{r4, r5, r7, pc}
 800bf42:	46c0      	nop			; (mov r8, r8)
 800bf44:	08013794 	.word	0x08013794
 800bf48:	0000ffff 	.word	0x0000ffff

0800bf4c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bf4c:	b590      	push	{r4, r7, lr}
 800bf4e:	b089      	sub	sp, #36	; 0x24
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	0019      	movs	r1, r3
 800bf58:	1dfb      	adds	r3, r7, #7
 800bf5a:	701a      	strb	r2, [r3, #0]
 800bf5c:	1dbb      	adds	r3, r7, #6
 800bf5e:	1c0a      	adds	r2, r1, #0
 800bf60:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	330d      	adds	r3, #13
 800bf66:	1dba      	adds	r2, r7, #6
 800bf68:	7812      	ldrb	r2, [r2, #0]
 800bf6a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	330b      	adds	r3, #11
 800bf70:	220f      	movs	r2, #15
 800bf72:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	330c      	adds	r3, #12
 800bf78:	2200      	movs	r2, #0
 800bf7a:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	331a      	adds	r3, #26
 800bf80:	2100      	movs	r1, #0
 800bf82:	0018      	movs	r0, r3
 800bf84:	f7fe fec6 	bl	800ad14 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bf88:	1dfb      	adds	r3, r7, #7
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	1e5a      	subs	r2, r3, #1
 800bf8e:	0013      	movs	r3, r2
 800bf90:	005b      	lsls	r3, r3, #1
 800bf92:	189b      	adds	r3, r3, r2
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	189b      	adds	r3, r3, r2
 800bf98:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bf9a:	2316      	movs	r3, #22
 800bf9c:	18fb      	adds	r3, r7, r3
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	801a      	strh	r2, [r3, #0]
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bfa6:	2116      	movs	r1, #22
 800bfa8:	187b      	adds	r3, r7, r1
 800bfaa:	881b      	ldrh	r3, [r3, #0]
 800bfac:	4a21      	ldr	r2, [pc, #132]	; (800c034 <put_lfn+0xe8>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d008      	beq.n	800bfc4 <put_lfn+0x78>
 800bfb2:	69fb      	ldr	r3, [r7, #28]
 800bfb4:	1c5a      	adds	r2, r3, #1
 800bfb6:	61fa      	str	r2, [r7, #28]
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	68fa      	ldr	r2, [r7, #12]
 800bfbc:	18d2      	adds	r2, r2, r3
 800bfbe:	187b      	adds	r3, r7, r1
 800bfc0:	8812      	ldrh	r2, [r2, #0]
 800bfc2:	801a      	strh	r2, [r3, #0]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bfc4:	4a1c      	ldr	r2, [pc, #112]	; (800c038 <put_lfn+0xec>)
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	18d3      	adds	r3, r2, r3
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	001a      	movs	r2, r3
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	189a      	adds	r2, r3, r2
 800bfd2:	2416      	movs	r4, #22
 800bfd4:	193b      	adds	r3, r7, r4
 800bfd6:	881b      	ldrh	r3, [r3, #0]
 800bfd8:	0019      	movs	r1, r3
 800bfda:	0010      	movs	r0, r2
 800bfdc:	f7fe fe9a 	bl	800ad14 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bfe0:	0022      	movs	r2, r4
 800bfe2:	18bb      	adds	r3, r7, r2
 800bfe4:	881b      	ldrh	r3, [r3, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d103      	bne.n	800bff2 <put_lfn+0xa6>
 800bfea:	18bb      	adds	r3, r7, r2
 800bfec:	2201      	movs	r2, #1
 800bfee:	4252      	negs	r2, r2
 800bff0:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	3301      	adds	r3, #1
 800bff6:	61bb      	str	r3, [r7, #24]
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	2b0c      	cmp	r3, #12
 800bffc:	d9d3      	bls.n	800bfa6 <put_lfn+0x5a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bffe:	2316      	movs	r3, #22
 800c000:	18fb      	adds	r3, r7, r3
 800c002:	881b      	ldrh	r3, [r3, #0]
 800c004:	4a0b      	ldr	r2, [pc, #44]	; (800c034 <put_lfn+0xe8>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d006      	beq.n	800c018 <put_lfn+0xcc>
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	005b      	lsls	r3, r3, #1
 800c00e:	68fa      	ldr	r2, [r7, #12]
 800c010:	18d3      	adds	r3, r2, r3
 800c012:	881b      	ldrh	r3, [r3, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d105      	bne.n	800c024 <put_lfn+0xd8>
 800c018:	1dfb      	adds	r3, r7, #7
 800c01a:	1dfa      	adds	r2, r7, #7
 800c01c:	7812      	ldrb	r2, [r2, #0]
 800c01e:	2140      	movs	r1, #64	; 0x40
 800c020:	430a      	orrs	r2, r1
 800c022:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	1dfa      	adds	r2, r7, #7
 800c028:	7812      	ldrb	r2, [r2, #0]
 800c02a:	701a      	strb	r2, [r3, #0]
}
 800c02c:	46c0      	nop			; (mov r8, r8)
 800c02e:	46bd      	mov	sp, r7
 800c030:	b009      	add	sp, #36	; 0x24
 800c032:	bd90      	pop	{r4, r7, pc}
 800c034:	0000ffff 	.word	0x0000ffff
 800c038:	08013794 	.word	0x08013794

0800c03c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b08c      	sub	sp, #48	; 0x30
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]
 800c048:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c04a:	68b9      	ldr	r1, [r7, #8]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	220b      	movs	r2, #11
 800c050:	0018      	movs	r0, r3
 800c052:	f7fe fea7 	bl	800ada4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	2b05      	cmp	r3, #5
 800c05a:	d92f      	bls.n	800c0bc <gen_numname+0x80>
		sr = seq;
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c060:	e026      	b.n	800c0b0 <gen_numname+0x74>
			wc = *lfn++;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	1c9a      	adds	r2, r3, #2
 800c066:	607a      	str	r2, [r7, #4]
 800c068:	2222      	movs	r2, #34	; 0x22
 800c06a:	18ba      	adds	r2, r7, r2
 800c06c:	881b      	ldrh	r3, [r3, #0]
 800c06e:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 800c070:	2300      	movs	r3, #0
 800c072:	62bb      	str	r3, [r7, #40]	; 0x28
 800c074:	e019      	b.n	800c0aa <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	005a      	lsls	r2, r3, #1
 800c07a:	2022      	movs	r0, #34	; 0x22
 800c07c:	183b      	adds	r3, r7, r0
 800c07e:	881b      	ldrh	r3, [r3, #0]
 800c080:	2101      	movs	r1, #1
 800c082:	400b      	ands	r3, r1
 800c084:	18d3      	adds	r3, r2, r3
 800c086:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c088:	183b      	adds	r3, r7, r0
 800c08a:	183a      	adds	r2, r7, r0
 800c08c:	8812      	ldrh	r2, [r2, #0]
 800c08e:	0852      	lsrs	r2, r2, #1
 800c090:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 800c092:	69fa      	ldr	r2, [r7, #28]
 800c094:	2380      	movs	r3, #128	; 0x80
 800c096:	025b      	lsls	r3, r3, #9
 800c098:	4013      	ands	r3, r2
 800c09a:	d003      	beq.n	800c0a4 <gen_numname+0x68>
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	4a30      	ldr	r2, [pc, #192]	; (800c160 <gen_numname+0x124>)
 800c0a0:	4053      	eors	r3, r2
 800c0a2:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ac:	2b0f      	cmp	r3, #15
 800c0ae:	d9e2      	bls.n	800c076 <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	881b      	ldrh	r3, [r3, #0]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d1d4      	bne.n	800c062 <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c0bc:	2307      	movs	r3, #7
 800c0be:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	220f      	movs	r2, #15
 800c0c6:	4013      	ands	r3, r2
 800c0c8:	b2da      	uxtb	r2, r3
 800c0ca:	212f      	movs	r1, #47	; 0x2f
 800c0cc:	187b      	adds	r3, r7, r1
 800c0ce:	3230      	adds	r2, #48	; 0x30
 800c0d0:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 800c0d2:	187b      	adds	r3, r7, r1
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	2b39      	cmp	r3, #57	; 0x39
 800c0d8:	d904      	bls.n	800c0e4 <gen_numname+0xa8>
 800c0da:	187b      	adds	r3, r7, r1
 800c0dc:	187a      	adds	r2, r7, r1
 800c0de:	7812      	ldrb	r2, [r2, #0]
 800c0e0:	3207      	adds	r2, #7
 800c0e2:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 800c0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e6:	1e5a      	subs	r2, r3, #1
 800c0e8:	62ba      	str	r2, [r7, #40]	; 0x28
 800c0ea:	2014      	movs	r0, #20
 800c0ec:	183a      	adds	r2, r7, r0
 800c0ee:	212f      	movs	r1, #47	; 0x2f
 800c0f0:	1879      	adds	r1, r7, r1
 800c0f2:	7809      	ldrb	r1, [r1, #0]
 800c0f4:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	091b      	lsrs	r3, r3, #4
 800c0fa:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1de      	bne.n	800c0c0 <gen_numname+0x84>
	ns[i] = '~';
 800c102:	183a      	adds	r2, r7, r0
 800c104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c106:	18d3      	adds	r3, r2, r3
 800c108:	227e      	movs	r2, #126	; 0x7e
 800c10a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c10c:	2300      	movs	r3, #0
 800c10e:	627b      	str	r3, [r7, #36]	; 0x24
 800c110:	e002      	b.n	800c118 <gen_numname+0xdc>
 800c112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c114:	3301      	adds	r3, #1
 800c116:	627b      	str	r3, [r7, #36]	; 0x24
 800c118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d205      	bcs.n	800c12c <gen_numname+0xf0>
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c124:	18d3      	adds	r3, r2, r3
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	2b20      	cmp	r3, #32
 800c12a:	d1f2      	bne.n	800c112 <gen_numname+0xd6>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12e:	2b07      	cmp	r3, #7
 800c130:	d806      	bhi.n	800c140 <gen_numname+0x104>
 800c132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c134:	1c5a      	adds	r2, r3, #1
 800c136:	62ba      	str	r2, [r7, #40]	; 0x28
 800c138:	2214      	movs	r2, #20
 800c13a:	18ba      	adds	r2, r7, r2
 800c13c:	5cd1      	ldrb	r1, [r2, r3]
 800c13e:	e000      	b.n	800c142 <gen_numname+0x106>
 800c140:	2120      	movs	r1, #32
 800c142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c144:	1c5a      	adds	r2, r3, #1
 800c146:	627a      	str	r2, [r7, #36]	; 0x24
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	18d3      	adds	r3, r2, r3
 800c14c:	1c0a      	adds	r2, r1, #0
 800c14e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c152:	2b07      	cmp	r3, #7
 800c154:	d9ea      	bls.n	800c12c <gen_numname+0xf0>
}
 800c156:	46c0      	nop			; (mov r8, r8)
 800c158:	46c0      	nop			; (mov r8, r8)
 800c15a:	46bd      	mov	sp, r7
 800c15c:	b00c      	add	sp, #48	; 0x30
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	00011021 	.word	0x00011021

0800c164 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c16c:	230f      	movs	r3, #15
 800c16e:	18fb      	adds	r3, r7, r3
 800c170:	2200      	movs	r2, #0
 800c172:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 800c174:	230b      	movs	r3, #11
 800c176:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c178:	200f      	movs	r0, #15
 800c17a:	183b      	adds	r3, r7, r0
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	b2da      	uxtb	r2, r3
 800c180:	0852      	lsrs	r2, r2, #1
 800c182:	01db      	lsls	r3, r3, #7
 800c184:	4313      	orrs	r3, r2
 800c186:	b2d9      	uxtb	r1, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	1c5a      	adds	r2, r3, #1
 800c18c:	607a      	str	r2, [r7, #4]
 800c18e:	781a      	ldrb	r2, [r3, #0]
 800c190:	183b      	adds	r3, r7, r0
 800c192:	188a      	adds	r2, r1, r2
 800c194:	701a      	strb	r2, [r3, #0]
	} while (--n);
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	3b01      	subs	r3, #1
 800c19a:	60bb      	str	r3, [r7, #8]
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d1ea      	bne.n	800c178 <sum_sfn+0x14>
	return sum;
 800c1a2:	183b      	adds	r3, r7, r0
 800c1a4:	781b      	ldrb	r3, [r3, #0]
}
 800c1a6:	0018      	movs	r0, r3
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	b004      	add	sp, #16
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c1ae:	b5b0      	push	{r4, r5, r7, lr}
 800c1b0:	b086      	sub	sp, #24
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c1bc:	2517      	movs	r5, #23
 800c1be:	197c      	adds	r4, r7, r5
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	0018      	movs	r0, r3
 800c1c6:	f7ff fc42 	bl	800ba4e <dir_sdi>
 800c1ca:	0003      	movs	r3, r0
 800c1cc:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 800c1ce:	197b      	adds	r3, r7, r5
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d002      	beq.n	800c1dc <dir_find+0x2e>
 800c1d6:	197b      	adds	r3, r7, r5
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	e0df      	b.n	800c39c <dir_find+0x1ee>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c1dc:	2114      	movs	r1, #20
 800c1de:	187b      	adds	r3, r7, r1
 800c1e0:	22ff      	movs	r2, #255	; 0xff
 800c1e2:	701a      	strb	r2, [r3, #0]
 800c1e4:	2315      	movs	r3, #21
 800c1e6:	18fb      	adds	r3, r7, r3
 800c1e8:	187a      	adds	r2, r7, r1
 800c1ea:	7812      	ldrb	r2, [r2, #0]
 800c1ec:	701a      	strb	r2, [r3, #0]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	4252      	negs	r2, r2
 800c1f4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	69da      	ldr	r2, [r3, #28]
 800c1fa:	2517      	movs	r5, #23
 800c1fc:	197c      	adds	r4, r7, r5
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	0011      	movs	r1, r2
 800c202:	0018      	movs	r0, r3
 800c204:	f7fe fff6 	bl	800b1f4 <move_window>
 800c208:	0003      	movs	r3, r0
 800c20a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 800c20c:	0029      	movs	r1, r5
 800c20e:	187b      	adds	r3, r7, r1
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d000      	beq.n	800c218 <dir_find+0x6a>
 800c216:	e0b9      	b.n	800c38c <dir_find+0x1de>
		c = dp->dir[DIR_Name];
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6a1a      	ldr	r2, [r3, #32]
 800c21c:	2016      	movs	r0, #22
 800c21e:	183b      	adds	r3, r7, r0
 800c220:	7812      	ldrb	r2, [r2, #0]
 800c222:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c224:	183b      	adds	r3, r7, r0
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d103      	bne.n	800c234 <dir_find+0x86>
 800c22c:	187b      	adds	r3, r7, r1
 800c22e:	2204      	movs	r2, #4
 800c230:	701a      	strb	r2, [r3, #0]
 800c232:	e0b0      	b.n	800c396 <dir_find+0x1e8>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a1b      	ldr	r3, [r3, #32]
 800c238:	330b      	adds	r3, #11
 800c23a:	781a      	ldrb	r2, [r3, #0]
 800c23c:	200f      	movs	r0, #15
 800c23e:	183b      	adds	r3, r7, r0
 800c240:	213f      	movs	r1, #63	; 0x3f
 800c242:	400a      	ands	r2, r1
 800c244:	701a      	strb	r2, [r3, #0]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	0001      	movs	r1, r0
 800c24a:	187a      	adds	r2, r7, r1
 800c24c:	7812      	ldrb	r2, [r2, #0]
 800c24e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c250:	2316      	movs	r3, #22
 800c252:	18fb      	adds	r3, r7, r3
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	2be5      	cmp	r3, #229	; 0xe5
 800c258:	d008      	beq.n	800c26c <dir_find+0xbe>
 800c25a:	187b      	adds	r3, r7, r1
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	2208      	movs	r2, #8
 800c260:	4013      	ands	r3, r2
 800c262:	d00c      	beq.n	800c27e <dir_find+0xd0>
 800c264:	187b      	adds	r3, r7, r1
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	2b0f      	cmp	r3, #15
 800c26a:	d008      	beq.n	800c27e <dir_find+0xd0>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c26c:	2315      	movs	r3, #21
 800c26e:	18fb      	adds	r3, r7, r3
 800c270:	22ff      	movs	r2, #255	; 0xff
 800c272:	701a      	strb	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2201      	movs	r2, #1
 800c278:	4252      	negs	r2, r2
 800c27a:	631a      	str	r2, [r3, #48]	; 0x30
 800c27c:	e077      	b.n	800c36e <dir_find+0x1c0>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c27e:	230f      	movs	r3, #15
 800c280:	18fb      	adds	r3, r7, r3
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	2b0f      	cmp	r3, #15
 800c286:	d148      	bne.n	800c31a <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	222f      	movs	r2, #47	; 0x2f
 800c28c:	5c9b      	ldrb	r3, [r3, r2]
 800c28e:	001a      	movs	r2, r3
 800c290:	2340      	movs	r3, #64	; 0x40
 800c292:	4013      	ands	r3, r2
 800c294:	d000      	beq.n	800c298 <dir_find+0xea>
 800c296:	e06a      	b.n	800c36e <dir_find+0x1c0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c298:	2116      	movs	r1, #22
 800c29a:	187b      	adds	r3, r7, r1
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	2240      	movs	r2, #64	; 0x40
 800c2a0:	4013      	ands	r3, r2
 800c2a2:	d015      	beq.n	800c2d0 <dir_find+0x122>
						sum = dp->dir[LDIR_Chksum];
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6a1a      	ldr	r2, [r3, #32]
 800c2a8:	2314      	movs	r3, #20
 800c2aa:	18fb      	adds	r3, r7, r3
 800c2ac:	7b52      	ldrb	r2, [r2, #13]
 800c2ae:	701a      	strb	r2, [r3, #0]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c2b0:	187b      	adds	r3, r7, r1
 800c2b2:	0008      	movs	r0, r1
 800c2b4:	187a      	adds	r2, r7, r1
 800c2b6:	7812      	ldrb	r2, [r2, #0]
 800c2b8:	2140      	movs	r1, #64	; 0x40
 800c2ba:	438a      	bics	r2, r1
 800c2bc:	701a      	strb	r2, [r3, #0]
 800c2be:	2315      	movs	r3, #21
 800c2c0:	18fb      	adds	r3, r7, r3
 800c2c2:	183a      	adds	r2, r7, r0
 800c2c4:	7812      	ldrb	r2, [r2, #0]
 800c2c6:	701a      	strb	r2, [r3, #0]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	695a      	ldr	r2, [r3, #20]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c2d0:	2316      	movs	r3, #22
 800c2d2:	18fa      	adds	r2, r7, r3
 800c2d4:	2415      	movs	r4, #21
 800c2d6:	193b      	adds	r3, r7, r4
 800c2d8:	7812      	ldrb	r2, [r2, #0]
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d117      	bne.n	800c310 <dir_find+0x162>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6a1b      	ldr	r3, [r3, #32]
 800c2e4:	330d      	adds	r3, #13
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	2214      	movs	r2, #20
 800c2ea:	18ba      	adds	r2, r7, r2
 800c2ec:	7812      	ldrb	r2, [r2, #0]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d10e      	bne.n	800c310 <dir_find+0x162>
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	691a      	ldr	r2, [r3, #16]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	0019      	movs	r1, r3
 800c2fc:	0010      	movs	r0, r2
 800c2fe:	f7ff fda5 	bl	800be4c <cmp_lfn>
 800c302:	1e03      	subs	r3, r0, #0
 800c304:	d004      	beq.n	800c310 <dir_find+0x162>
 800c306:	193b      	adds	r3, r7, r4
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	3b01      	subs	r3, #1
 800c30c:	b2da      	uxtb	r2, r3
 800c30e:	e000      	b.n	800c312 <dir_find+0x164>
 800c310:	22ff      	movs	r2, #255	; 0xff
 800c312:	2315      	movs	r3, #21
 800c314:	18fb      	adds	r3, r7, r3
 800c316:	701a      	strb	r2, [r3, #0]
 800c318:	e029      	b.n	800c36e <dir_find+0x1c0>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c31a:	2315      	movs	r3, #21
 800c31c:	18fb      	adds	r3, r7, r3
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d10b      	bne.n	800c33c <dir_find+0x18e>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6a1b      	ldr	r3, [r3, #32]
 800c328:	0018      	movs	r0, r3
 800c32a:	f7ff ff1b 	bl	800c164 <sum_sfn>
 800c32e:	0003      	movs	r3, r0
 800c330:	001a      	movs	r2, r3
 800c332:	2314      	movs	r3, #20
 800c334:	18fb      	adds	r3, r7, r3
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	4293      	cmp	r3, r2
 800c33a:	d029      	beq.n	800c390 <dir_find+0x1e2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	222f      	movs	r2, #47	; 0x2f
 800c340:	5c9b      	ldrb	r3, [r3, r2]
 800c342:	001a      	movs	r2, r3
 800c344:	2301      	movs	r3, #1
 800c346:	4013      	ands	r3, r2
 800c348:	d109      	bne.n	800c35e <dir_find+0x1b0>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6a18      	ldr	r0, [r3, #32]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	3324      	adds	r3, #36	; 0x24
 800c352:	220b      	movs	r2, #11
 800c354:	0019      	movs	r1, r3
 800c356:	f7fe fd5d 	bl	800ae14 <mem_cmp>
 800c35a:	1e03      	subs	r3, r0, #0
 800c35c:	d01a      	beq.n	800c394 <dir_find+0x1e6>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c35e:	2315      	movs	r3, #21
 800c360:	18fb      	adds	r3, r7, r3
 800c362:	22ff      	movs	r2, #255	; 0xff
 800c364:	701a      	strb	r2, [r3, #0]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2201      	movs	r2, #1
 800c36a:	4252      	negs	r2, r2
 800c36c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c36e:	2517      	movs	r5, #23
 800c370:	197c      	adds	r4, r7, r5
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2100      	movs	r1, #0
 800c376:	0018      	movs	r0, r3
 800c378:	f7ff fbf5 	bl	800bb66 <dir_next>
 800c37c:	0003      	movs	r3, r0
 800c37e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 800c380:	197b      	adds	r3, r7, r5
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d100      	bne.n	800c38a <dir_find+0x1dc>
 800c388:	e735      	b.n	800c1f6 <dir_find+0x48>
 800c38a:	e004      	b.n	800c396 <dir_find+0x1e8>
		if (res != FR_OK) break;
 800c38c:	46c0      	nop			; (mov r8, r8)
 800c38e:	e002      	b.n	800c396 <dir_find+0x1e8>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c390:	46c0      	nop			; (mov r8, r8)
 800c392:	e000      	b.n	800c396 <dir_find+0x1e8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c394:	46c0      	nop			; (mov r8, r8)

	return res;
 800c396:	2317      	movs	r3, #23
 800c398:	18fb      	adds	r3, r7, r3
 800c39a:	781b      	ldrb	r3, [r3, #0]
}
 800c39c:	0018      	movs	r0, r3
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	b006      	add	sp, #24
 800c3a2:	bdb0      	pop	{r4, r5, r7, pc}

0800c3a4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c3a4:	b5b0      	push	{r4, r5, r7, lr}
 800c3a6:	b08c      	sub	sp, #48	; 0x30
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	222f      	movs	r2, #47	; 0x2f
 800c3b6:	5c9b      	ldrb	r3, [r3, r2]
 800c3b8:	001a      	movs	r2, r3
 800c3ba:	23a0      	movs	r3, #160	; 0xa0
 800c3bc:	4013      	ands	r3, r2
 800c3be:	d001      	beq.n	800c3c4 <dir_register+0x20>
 800c3c0:	2306      	movs	r3, #6
 800c3c2:	e0fb      	b.n	800c5bc <dir_register+0x218>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	627b      	str	r3, [r7, #36]	; 0x24
 800c3c8:	e002      	b.n	800c3d0 <dir_register+0x2c>
 800c3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	627b      	str	r3, [r7, #36]	; 0x24
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	691a      	ldr	r2, [r3, #16]
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d6:	005b      	lsls	r3, r3, #1
 800c3d8:	18d3      	adds	r3, r2, r3
 800c3da:	881b      	ldrh	r3, [r3, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1f4      	bne.n	800c3ca <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	3324      	adds	r3, #36	; 0x24
 800c3e4:	0019      	movs	r1, r3
 800c3e6:	240c      	movs	r4, #12
 800c3e8:	193b      	adds	r3, r7, r4
 800c3ea:	220c      	movs	r2, #12
 800c3ec:	0018      	movs	r0, r3
 800c3ee:	f7fe fcd9 	bl	800ada4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c3f2:	193b      	adds	r3, r7, r4
 800c3f4:	7adb      	ldrb	r3, [r3, #11]
 800c3f6:	001a      	movs	r2, r3
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	4013      	ands	r3, r2
 800c3fc:	d037      	beq.n	800c46e <dir_register+0xca>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	222f      	movs	r2, #47	; 0x2f
 800c402:	2140      	movs	r1, #64	; 0x40
 800c404:	5499      	strb	r1, [r3, r2]
		for (n = 1; n < 100; n++) {
 800c406:	2301      	movs	r3, #1
 800c408:	62bb      	str	r3, [r7, #40]	; 0x28
 800c40a:	e018      	b.n	800c43e <dir_register+0x9a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	3324      	adds	r3, #36	; 0x24
 800c410:	0018      	movs	r0, r3
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	691a      	ldr	r2, [r3, #16]
 800c416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c418:	210c      	movs	r1, #12
 800c41a:	1879      	adds	r1, r7, r1
 800c41c:	f7ff fe0e 	bl	800c03c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c420:	252f      	movs	r5, #47	; 0x2f
 800c422:	197c      	adds	r4, r7, r5
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	0018      	movs	r0, r3
 800c428:	f7ff fec1 	bl	800c1ae <dir_find>
 800c42c:	0003      	movs	r3, r0
 800c42e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800c430:	197b      	adds	r3, r7, r5
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d106      	bne.n	800c446 <dir_register+0xa2>
		for (n = 1; n < 100; n++) {
 800c438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43a:	3301      	adds	r3, #1
 800c43c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c440:	2b63      	cmp	r3, #99	; 0x63
 800c442:	d9e3      	bls.n	800c40c <dir_register+0x68>
 800c444:	e000      	b.n	800c448 <dir_register+0xa4>
			if (res != FR_OK) break;
 800c446:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44a:	2b64      	cmp	r3, #100	; 0x64
 800c44c:	d101      	bne.n	800c452 <dir_register+0xae>
 800c44e:	2307      	movs	r3, #7
 800c450:	e0b4      	b.n	800c5bc <dir_register+0x218>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c452:	222f      	movs	r2, #47	; 0x2f
 800c454:	18bb      	adds	r3, r7, r2
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	2b04      	cmp	r3, #4
 800c45a:	d002      	beq.n	800c462 <dir_register+0xbe>
 800c45c:	18bb      	adds	r3, r7, r2
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	e0ac      	b.n	800c5bc <dir_register+0x218>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c462:	230c      	movs	r3, #12
 800c464:	18fb      	adds	r3, r7, r3
 800c466:	7ad9      	ldrb	r1, [r3, #11]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	222f      	movs	r2, #47	; 0x2f
 800c46c:	5499      	strb	r1, [r3, r2]
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c46e:	230c      	movs	r3, #12
 800c470:	18fb      	adds	r3, r7, r3
 800c472:	7adb      	ldrb	r3, [r3, #11]
 800c474:	001a      	movs	r2, r3
 800c476:	2302      	movs	r3, #2
 800c478:	4013      	ands	r3, r2
 800c47a:	d008      	beq.n	800c48e <dir_register+0xea>
 800c47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47e:	330c      	adds	r3, #12
 800c480:	210d      	movs	r1, #13
 800c482:	0018      	movs	r0, r3
 800c484:	f7f3 fe66 	bl	8000154 <__udivsi3>
 800c488:	0003      	movs	r3, r0
 800c48a:	3301      	adds	r3, #1
 800c48c:	e000      	b.n	800c490 <dir_register+0xec>
 800c48e:	2301      	movs	r3, #1
 800c490:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c492:	252f      	movs	r5, #47	; 0x2f
 800c494:	197c      	adds	r4, r7, r5
 800c496:	6a3a      	ldr	r2, [r7, #32]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	0011      	movs	r1, r2
 800c49c:	0018      	movs	r0, r3
 800c49e:	f7ff fc3e 	bl	800bd1e <dir_alloc>
 800c4a2:	0003      	movs	r3, r0
 800c4a4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c4a6:	0029      	movs	r1, r5
 800c4a8:	187b      	adds	r3, r7, r1
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d153      	bne.n	800c558 <dir_register+0x1b4>
 800c4b0:	6a3b      	ldr	r3, [r7, #32]
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	623b      	str	r3, [r7, #32]
 800c4b6:	6a3b      	ldr	r3, [r7, #32]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d04d      	beq.n	800c558 <dir_register+0x1b4>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	695a      	ldr	r2, [r3, #20]
 800c4c0:	6a3b      	ldr	r3, [r7, #32]
 800c4c2:	015b      	lsls	r3, r3, #5
 800c4c4:	1ad2      	subs	r2, r2, r3
 800c4c6:	000d      	movs	r5, r1
 800c4c8:	187c      	adds	r4, r7, r1
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	0011      	movs	r1, r2
 800c4ce:	0018      	movs	r0, r3
 800c4d0:	f7ff fabd 	bl	800ba4e <dir_sdi>
 800c4d4:	0003      	movs	r3, r0
 800c4d6:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800c4d8:	197b      	adds	r3, r7, r5
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d13b      	bne.n	800c558 <dir_register+0x1b4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	3324      	adds	r3, #36	; 0x24
 800c4e4:	221b      	movs	r2, #27
 800c4e6:	18bc      	adds	r4, r7, r2
 800c4e8:	0018      	movs	r0, r3
 800c4ea:	f7ff fe3b 	bl	800c164 <sum_sfn>
 800c4ee:	0003      	movs	r3, r0
 800c4f0:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	69da      	ldr	r2, [r3, #28]
 800c4f6:	252f      	movs	r5, #47	; 0x2f
 800c4f8:	197c      	adds	r4, r7, r5
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	0011      	movs	r1, r2
 800c4fe:	0018      	movs	r0, r3
 800c500:	f7fe fe78 	bl	800b1f4 <move_window>
 800c504:	0003      	movs	r3, r0
 800c506:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 800c508:	002c      	movs	r4, r5
 800c50a:	193b      	adds	r3, r7, r4
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d121      	bne.n	800c556 <dir_register+0x1b2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	6918      	ldr	r0, [r3, #16]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6a19      	ldr	r1, [r3, #32]
 800c51a:	6a3b      	ldr	r3, [r7, #32]
 800c51c:	b2da      	uxtb	r2, r3
 800c51e:	231b      	movs	r3, #27
 800c520:	18fb      	adds	r3, r7, r3
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	f7ff fd12 	bl	800bf4c <put_lfn>
				fs->wflag = 1;
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	2201      	movs	r2, #1
 800c52c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c52e:	0025      	movs	r5, r4
 800c530:	193c      	adds	r4, r7, r4
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2100      	movs	r1, #0
 800c536:	0018      	movs	r0, r3
 800c538:	f7ff fb15 	bl	800bb66 <dir_next>
 800c53c:	0003      	movs	r3, r0
 800c53e:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 800c540:	197b      	adds	r3, r7, r5
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d107      	bne.n	800c558 <dir_register+0x1b4>
 800c548:	6a3b      	ldr	r3, [r7, #32]
 800c54a:	3b01      	subs	r3, #1
 800c54c:	623b      	str	r3, [r7, #32]
 800c54e:	6a3b      	ldr	r3, [r7, #32]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1ce      	bne.n	800c4f2 <dir_register+0x14e>
 800c554:	e000      	b.n	800c558 <dir_register+0x1b4>
				if (res != FR_OK) break;
 800c556:	46c0      	nop			; (mov r8, r8)
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c558:	252f      	movs	r5, #47	; 0x2f
 800c55a:	197b      	adds	r3, r7, r5
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d129      	bne.n	800c5b6 <dir_register+0x212>
		res = move_window(fs, dp->sect);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	69da      	ldr	r2, [r3, #28]
 800c566:	197c      	adds	r4, r7, r5
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	0011      	movs	r1, r2
 800c56c:	0018      	movs	r0, r3
 800c56e:	f7fe fe41 	bl	800b1f4 <move_window>
 800c572:	0003      	movs	r3, r0
 800c574:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800c576:	197b      	adds	r3, r7, r5
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d11b      	bne.n	800c5b6 <dir_register+0x212>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6a1b      	ldr	r3, [r3, #32]
 800c582:	2220      	movs	r2, #32
 800c584:	2100      	movs	r1, #0
 800c586:	0018      	movs	r0, r3
 800c588:	f7fe fc2b 	bl	800ade2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6a18      	ldr	r0, [r3, #32]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	3324      	adds	r3, #36	; 0x24
 800c594:	220b      	movs	r2, #11
 800c596:	0019      	movs	r1, r3
 800c598:	f7fe fc04 	bl	800ada4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	222f      	movs	r2, #47	; 0x2f
 800c5a0:	5c9a      	ldrb	r2, [r3, r2]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6a1b      	ldr	r3, [r3, #32]
 800c5a6:	330c      	adds	r3, #12
 800c5a8:	2118      	movs	r1, #24
 800c5aa:	400a      	ands	r2, r1
 800c5ac:	b2d2      	uxtb	r2, r2
 800c5ae:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c5b6:	232f      	movs	r3, #47	; 0x2f
 800c5b8:	18fb      	adds	r3, r7, r3
 800c5ba:	781b      	ldrb	r3, [r3, #0]
}
 800c5bc:	0018      	movs	r0, r3
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	b00c      	add	sp, #48	; 0x30
 800c5c2:	bdb0      	pop	{r4, r5, r7, pc}

0800c5c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c5c4:	b5b0      	push	{r4, r5, r7, lr}
 800c5c6:	b08a      	sub	sp, #40	; 0x28
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	613b      	str	r3, [r7, #16]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	691b      	ldr	r3, [r3, #16]
 800c5da:	60fb      	str	r3, [r7, #12]
 800c5dc:	2300      	movs	r3, #0
 800c5de:	617b      	str	r3, [r7, #20]
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c5e4:	69bb      	ldr	r3, [r7, #24]
 800c5e6:	1c5a      	adds	r2, r3, #1
 800c5e8:	61ba      	str	r2, [r7, #24]
 800c5ea:	693a      	ldr	r2, [r7, #16]
 800c5ec:	18d3      	adds	r3, r2, r3
 800c5ee:	781a      	ldrb	r2, [r3, #0]
 800c5f0:	2124      	movs	r1, #36	; 0x24
 800c5f2:	187b      	adds	r3, r7, r1
 800c5f4:	801a      	strh	r2, [r3, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 800c5f6:	000a      	movs	r2, r1
 800c5f8:	18bb      	adds	r3, r7, r2
 800c5fa:	881b      	ldrh	r3, [r3, #0]
 800c5fc:	2b1f      	cmp	r3, #31
 800c5fe:	d94e      	bls.n	800c69e <create_name+0xda>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c600:	18bb      	adds	r3, r7, r2
 800c602:	881b      	ldrh	r3, [r3, #0]
 800c604:	2b2f      	cmp	r3, #47	; 0x2f
 800c606:	d007      	beq.n	800c618 <create_name+0x54>
 800c608:	18bb      	adds	r3, r7, r2
 800c60a:	881b      	ldrh	r3, [r3, #0]
 800c60c:	2b5c      	cmp	r3, #92	; 0x5c
 800c60e:	d110      	bne.n	800c632 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c610:	e002      	b.n	800c618 <create_name+0x54>
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	3301      	adds	r3, #1
 800c616:	61bb      	str	r3, [r7, #24]
 800c618:	693a      	ldr	r2, [r7, #16]
 800c61a:	69bb      	ldr	r3, [r7, #24]
 800c61c:	18d3      	adds	r3, r2, r3
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	2b2f      	cmp	r3, #47	; 0x2f
 800c622:	d0f6      	beq.n	800c612 <create_name+0x4e>
 800c624:	693a      	ldr	r2, [r7, #16]
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	18d3      	adds	r3, r2, r3
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	2b5c      	cmp	r3, #92	; 0x5c
 800c62e:	d0f0      	beq.n	800c612 <create_name+0x4e>
			break;
 800c630:	e036      	b.n	800c6a0 <create_name+0xdc>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	2bfe      	cmp	r3, #254	; 0xfe
 800c636:	d901      	bls.n	800c63c <create_name+0x78>
 800c638:	2306      	movs	r3, #6
 800c63a:	e1c2      	b.n	800c9c2 <create_name+0x3fe>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c63c:	2524      	movs	r5, #36	; 0x24
 800c63e:	197b      	adds	r3, r7, r5
 800c640:	197a      	adds	r2, r7, r5
 800c642:	8812      	ldrh	r2, [r2, #0]
 800c644:	21ff      	movs	r1, #255	; 0xff
 800c646:	400a      	ands	r2, r1
 800c648:	801a      	strh	r2, [r3, #0]
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c64a:	197c      	adds	r4, r7, r5
 800c64c:	197b      	adds	r3, r7, r5
 800c64e:	881b      	ldrh	r3, [r3, #0]
 800c650:	2101      	movs	r1, #1
 800c652:	0018      	movs	r0, r3
 800c654:	f001 fb70 	bl	800dd38 <ff_convert>
 800c658:	0003      	movs	r3, r0
 800c65a:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c65c:	197b      	adds	r3, r7, r5
 800c65e:	881b      	ldrh	r3, [r3, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d101      	bne.n	800c668 <create_name+0xa4>
 800c664:	2306      	movs	r3, #6
 800c666:	e1ac      	b.n	800c9c2 <create_name+0x3fe>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c668:	2224      	movs	r2, #36	; 0x24
 800c66a:	18bb      	adds	r3, r7, r2
 800c66c:	881b      	ldrh	r3, [r3, #0]
 800c66e:	2b7f      	cmp	r3, #127	; 0x7f
 800c670:	d80a      	bhi.n	800c688 <create_name+0xc4>
 800c672:	18bb      	adds	r3, r7, r2
 800c674:	881a      	ldrh	r2, [r3, #0]
 800c676:	4ba7      	ldr	r3, [pc, #668]	; (800c914 <create_name+0x350>)
 800c678:	0011      	movs	r1, r2
 800c67a:	0018      	movs	r0, r3
 800c67c:	f7fe fbef 	bl	800ae5e <chk_chr>
 800c680:	1e03      	subs	r3, r0, #0
 800c682:	d001      	beq.n	800c688 <create_name+0xc4>
 800c684:	2306      	movs	r3, #6
 800c686:	e19c      	b.n	800c9c2 <create_name+0x3fe>
		lfn[di++] = w;					/* Store the Unicode character */
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	1c5a      	adds	r2, r3, #1
 800c68c:	617a      	str	r2, [r7, #20]
 800c68e:	005b      	lsls	r3, r3, #1
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	18d3      	adds	r3, r2, r3
 800c694:	2224      	movs	r2, #36	; 0x24
 800c696:	18ba      	adds	r2, r7, r2
 800c698:	8812      	ldrh	r2, [r2, #0]
 800c69a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c69c:	e7a2      	b.n	800c5e4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c69e:	46c0      	nop			; (mov r8, r8)
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c6a0:	693a      	ldr	r2, [r7, #16]
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	18d2      	adds	r2, r2, r3
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c6aa:	2324      	movs	r3, #36	; 0x24
 800c6ac:	18fb      	adds	r3, r7, r3
 800c6ae:	881b      	ldrh	r3, [r3, #0]
 800c6b0:	2b1f      	cmp	r3, #31
 800c6b2:	d801      	bhi.n	800c6b8 <create_name+0xf4>
 800c6b4:	2204      	movs	r2, #4
 800c6b6:	e000      	b.n	800c6ba <create_name+0xf6>
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	2327      	movs	r3, #39	; 0x27
 800c6bc:	18fb      	adds	r3, r7, r3
 800c6be:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c6c0:	e016      	b.n	800c6f0 <create_name+0x12c>
		w = lfn[di - 1];
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	4a94      	ldr	r2, [pc, #592]	; (800c918 <create_name+0x354>)
 800c6c6:	4694      	mov	ip, r2
 800c6c8:	4463      	add	r3, ip
 800c6ca:	005b      	lsls	r3, r3, #1
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	18d2      	adds	r2, r2, r3
 800c6d0:	2124      	movs	r1, #36	; 0x24
 800c6d2:	187b      	adds	r3, r7, r1
 800c6d4:	8812      	ldrh	r2, [r2, #0]
 800c6d6:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 800c6d8:	000a      	movs	r2, r1
 800c6da:	18bb      	adds	r3, r7, r2
 800c6dc:	881b      	ldrh	r3, [r3, #0]
 800c6de:	2b20      	cmp	r3, #32
 800c6e0:	d003      	beq.n	800c6ea <create_name+0x126>
 800c6e2:	18bb      	adds	r3, r7, r2
 800c6e4:	881b      	ldrh	r3, [r3, #0]
 800c6e6:	2b2e      	cmp	r3, #46	; 0x2e
 800c6e8:	d106      	bne.n	800c6f8 <create_name+0x134>
		di--;
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	3b01      	subs	r3, #1
 800c6ee:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d1e5      	bne.n	800c6c2 <create_name+0xfe>
 800c6f6:	e000      	b.n	800c6fa <create_name+0x136>
		if (w != ' ' && w != '.') break;
 800c6f8:	46c0      	nop			; (mov r8, r8)
	}
	lfn[di] = 0;						/* LFN is created */
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	005b      	lsls	r3, r3, #1
 800c6fe:	68fa      	ldr	r2, [r7, #12]
 800c700:	18d3      	adds	r3, r2, r3
 800c702:	2200      	movs	r2, #0
 800c704:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d101      	bne.n	800c710 <create_name+0x14c>
 800c70c:	2306      	movs	r3, #6
 800c70e:	e158      	b.n	800c9c2 <create_name+0x3fe>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	3324      	adds	r3, #36	; 0x24
 800c714:	220b      	movs	r2, #11
 800c716:	2120      	movs	r1, #32
 800c718:	0018      	movs	r0, r3
 800c71a:	f7fe fb62 	bl	800ade2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c71e:	2300      	movs	r3, #0
 800c720:	61bb      	str	r3, [r7, #24]
 800c722:	e002      	b.n	800c72a <create_name+0x166>
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	3301      	adds	r3, #1
 800c728:	61bb      	str	r3, [r7, #24]
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	005b      	lsls	r3, r3, #1
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	18d3      	adds	r3, r2, r3
 800c732:	881b      	ldrh	r3, [r3, #0]
 800c734:	2b20      	cmp	r3, #32
 800c736:	d0f5      	beq.n	800c724 <create_name+0x160>
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	005b      	lsls	r3, r3, #1
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	18d3      	adds	r3, r2, r3
 800c740:	881b      	ldrh	r3, [r3, #0]
 800c742:	2b2e      	cmp	r3, #46	; 0x2e
 800c744:	d0ee      	beq.n	800c724 <create_name+0x160>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c746:	69bb      	ldr	r3, [r7, #24]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00a      	beq.n	800c762 <create_name+0x19e>
 800c74c:	2227      	movs	r2, #39	; 0x27
 800c74e:	18bb      	adds	r3, r7, r2
 800c750:	18ba      	adds	r2, r7, r2
 800c752:	7812      	ldrb	r2, [r2, #0]
 800c754:	2103      	movs	r1, #3
 800c756:	430a      	orrs	r2, r1
 800c758:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c75a:	e002      	b.n	800c762 <create_name+0x19e>
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	3b01      	subs	r3, #1
 800c760:	617b      	str	r3, [r7, #20]
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d009      	beq.n	800c77c <create_name+0x1b8>
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	4a6b      	ldr	r2, [pc, #428]	; (800c918 <create_name+0x354>)
 800c76c:	4694      	mov	ip, r2
 800c76e:	4463      	add	r3, ip
 800c770:	005b      	lsls	r3, r3, #1
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	18d3      	adds	r3, r2, r3
 800c776:	881b      	ldrh	r3, [r3, #0]
 800c778:	2b2e      	cmp	r3, #46	; 0x2e
 800c77a:	d1ef      	bne.n	800c75c <create_name+0x198>

	i = b = 0; ni = 8;
 800c77c:	2326      	movs	r3, #38	; 0x26
 800c77e:	18fb      	adds	r3, r7, r3
 800c780:	2200      	movs	r2, #0
 800c782:	701a      	strb	r2, [r3, #0]
 800c784:	2300      	movs	r3, #0
 800c786:	623b      	str	r3, [r7, #32]
 800c788:	2308      	movs	r3, #8
 800c78a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c78c:	69bb      	ldr	r3, [r7, #24]
 800c78e:	1c5a      	adds	r2, r3, #1
 800c790:	61ba      	str	r2, [r7, #24]
 800c792:	005b      	lsls	r3, r3, #1
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	18d2      	adds	r2, r2, r3
 800c798:	2124      	movs	r1, #36	; 0x24
 800c79a:	187b      	adds	r3, r7, r1
 800c79c:	8812      	ldrh	r2, [r2, #0]
 800c79e:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 800c7a0:	000a      	movs	r2, r1
 800c7a2:	18bb      	adds	r3, r7, r2
 800c7a4:	881b      	ldrh	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d100      	bne.n	800c7ac <create_name+0x1e8>
 800c7aa:	e0b1      	b.n	800c910 <create_name+0x34c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c7ac:	18bb      	adds	r3, r7, r2
 800c7ae:	881b      	ldrh	r3, [r3, #0]
 800c7b0:	2b20      	cmp	r3, #32
 800c7b2:	d007      	beq.n	800c7c4 <create_name+0x200>
 800c7b4:	18bb      	adds	r3, r7, r2
 800c7b6:	881b      	ldrh	r3, [r3, #0]
 800c7b8:	2b2e      	cmp	r3, #46	; 0x2e
 800c7ba:	d10b      	bne.n	800c7d4 <create_name+0x210>
 800c7bc:	69ba      	ldr	r2, [r7, #24]
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d007      	beq.n	800c7d4 <create_name+0x210>
			cf |= NS_LOSS | NS_LFN; continue;
 800c7c4:	2227      	movs	r2, #39	; 0x27
 800c7c6:	18bb      	adds	r3, r7, r2
 800c7c8:	18ba      	adds	r2, r7, r2
 800c7ca:	7812      	ldrb	r2, [r2, #0]
 800c7cc:	2103      	movs	r1, #3
 800c7ce:	430a      	orrs	r2, r1
 800c7d0:	701a      	strb	r2, [r3, #0]
 800c7d2:	e09c      	b.n	800c90e <create_name+0x34a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c7d4:	6a3a      	ldr	r2, [r7, #32]
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d203      	bcs.n	800c7e4 <create_name+0x220>
 800c7dc:	69ba      	ldr	r2, [r7, #24]
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d127      	bne.n	800c834 <create_name+0x270>
			if (ni == 11) {				/* Long extension */
 800c7e4:	69fb      	ldr	r3, [r7, #28]
 800c7e6:	2b0b      	cmp	r3, #11
 800c7e8:	d107      	bne.n	800c7fa <create_name+0x236>
				cf |= NS_LOSS | NS_LFN; break;
 800c7ea:	2227      	movs	r2, #39	; 0x27
 800c7ec:	18bb      	adds	r3, r7, r2
 800c7ee:	18ba      	adds	r2, r7, r2
 800c7f0:	7812      	ldrb	r2, [r2, #0]
 800c7f2:	2103      	movs	r1, #3
 800c7f4:	430a      	orrs	r2, r1
 800c7f6:	701a      	strb	r2, [r3, #0]
 800c7f8:	e095      	b.n	800c926 <create_name+0x362>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c7fa:	69ba      	ldr	r2, [r7, #24]
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d006      	beq.n	800c810 <create_name+0x24c>
 800c802:	2227      	movs	r2, #39	; 0x27
 800c804:	18bb      	adds	r3, r7, r2
 800c806:	18ba      	adds	r2, r7, r2
 800c808:	7812      	ldrb	r2, [r2, #0]
 800c80a:	2103      	movs	r1, #3
 800c80c:	430a      	orrs	r2, r1
 800c80e:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 800c810:	69ba      	ldr	r2, [r7, #24]
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	429a      	cmp	r2, r3
 800c816:	d900      	bls.n	800c81a <create_name+0x256>
 800c818:	e084      	b.n	800c924 <create_name+0x360>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	61bb      	str	r3, [r7, #24]
 800c81e:	2308      	movs	r3, #8
 800c820:	623b      	str	r3, [r7, #32]
 800c822:	230b      	movs	r3, #11
 800c824:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c826:	2226      	movs	r2, #38	; 0x26
 800c828:	18bb      	adds	r3, r7, r2
 800c82a:	18ba      	adds	r2, r7, r2
 800c82c:	7812      	ldrb	r2, [r2, #0]
 800c82e:	0092      	lsls	r2, r2, #2
 800c830:	701a      	strb	r2, [r3, #0]
 800c832:	e06c      	b.n	800c90e <create_name+0x34a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c834:	2524      	movs	r5, #36	; 0x24
 800c836:	197b      	adds	r3, r7, r5
 800c838:	881b      	ldrh	r3, [r3, #0]
 800c83a:	2b7f      	cmp	r3, #127	; 0x7f
 800c83c:	d91a      	bls.n	800c874 <create_name+0x2b0>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c83e:	197c      	adds	r4, r7, r5
 800c840:	197b      	adds	r3, r7, r5
 800c842:	881b      	ldrh	r3, [r3, #0]
 800c844:	2100      	movs	r1, #0
 800c846:	0018      	movs	r0, r3
 800c848:	f001 fa76 	bl	800dd38 <ff_convert>
 800c84c:	0003      	movs	r3, r0
 800c84e:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c850:	197b      	adds	r3, r7, r5
 800c852:	881b      	ldrh	r3, [r3, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d006      	beq.n	800c866 <create_name+0x2a2>
 800c858:	197b      	adds	r3, r7, r5
 800c85a:	881b      	ldrh	r3, [r3, #0]
 800c85c:	3b80      	subs	r3, #128	; 0x80
 800c85e:	4a2f      	ldr	r2, [pc, #188]	; (800c91c <create_name+0x358>)
 800c860:	5cd2      	ldrb	r2, [r2, r3]
 800c862:	197b      	adds	r3, r7, r5
 800c864:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c866:	2227      	movs	r2, #39	; 0x27
 800c868:	18bb      	adds	r3, r7, r2
 800c86a:	18ba      	adds	r2, r7, r2
 800c86c:	7812      	ldrb	r2, [r2, #0]
 800c86e:	2102      	movs	r1, #2
 800c870:	430a      	orrs	r2, r1
 800c872:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c874:	2224      	movs	r2, #36	; 0x24
 800c876:	18bb      	adds	r3, r7, r2
 800c878:	881b      	ldrh	r3, [r3, #0]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d008      	beq.n	800c890 <create_name+0x2cc>
 800c87e:	18bb      	adds	r3, r7, r2
 800c880:	881a      	ldrh	r2, [r3, #0]
 800c882:	4b27      	ldr	r3, [pc, #156]	; (800c920 <create_name+0x35c>)
 800c884:	0011      	movs	r1, r2
 800c886:	0018      	movs	r0, r3
 800c888:	f7fe fae9 	bl	800ae5e <chk_chr>
 800c88c:	1e03      	subs	r3, r0, #0
 800c88e:	d00b      	beq.n	800c8a8 <create_name+0x2e4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c890:	2324      	movs	r3, #36	; 0x24
 800c892:	18fb      	adds	r3, r7, r3
 800c894:	225f      	movs	r2, #95	; 0x5f
 800c896:	801a      	strh	r2, [r3, #0]
 800c898:	2227      	movs	r2, #39	; 0x27
 800c89a:	18bb      	adds	r3, r7, r2
 800c89c:	18ba      	adds	r2, r7, r2
 800c89e:	7812      	ldrb	r2, [r2, #0]
 800c8a0:	2103      	movs	r1, #3
 800c8a2:	430a      	orrs	r2, r1
 800c8a4:	701a      	strb	r2, [r3, #0]
 800c8a6:	e025      	b.n	800c8f4 <create_name+0x330>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c8a8:	2224      	movs	r2, #36	; 0x24
 800c8aa:	18bb      	adds	r3, r7, r2
 800c8ac:	881b      	ldrh	r3, [r3, #0]
 800c8ae:	2b40      	cmp	r3, #64	; 0x40
 800c8b0:	d90b      	bls.n	800c8ca <create_name+0x306>
 800c8b2:	18bb      	adds	r3, r7, r2
 800c8b4:	881b      	ldrh	r3, [r3, #0]
 800c8b6:	2b5a      	cmp	r3, #90	; 0x5a
 800c8b8:	d807      	bhi.n	800c8ca <create_name+0x306>
					b |= 2;
 800c8ba:	2226      	movs	r2, #38	; 0x26
 800c8bc:	18bb      	adds	r3, r7, r2
 800c8be:	18ba      	adds	r2, r7, r2
 800c8c0:	7812      	ldrb	r2, [r2, #0]
 800c8c2:	2102      	movs	r1, #2
 800c8c4:	430a      	orrs	r2, r1
 800c8c6:	701a      	strb	r2, [r3, #0]
 800c8c8:	e014      	b.n	800c8f4 <create_name+0x330>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c8ca:	2024      	movs	r0, #36	; 0x24
 800c8cc:	183b      	adds	r3, r7, r0
 800c8ce:	881b      	ldrh	r3, [r3, #0]
 800c8d0:	2b60      	cmp	r3, #96	; 0x60
 800c8d2:	d90f      	bls.n	800c8f4 <create_name+0x330>
 800c8d4:	183b      	adds	r3, r7, r0
 800c8d6:	881b      	ldrh	r3, [r3, #0]
 800c8d8:	2b7a      	cmp	r3, #122	; 0x7a
 800c8da:	d80b      	bhi.n	800c8f4 <create_name+0x330>
						b |= 1; w -= 0x20;
 800c8dc:	2226      	movs	r2, #38	; 0x26
 800c8de:	18bb      	adds	r3, r7, r2
 800c8e0:	18ba      	adds	r2, r7, r2
 800c8e2:	7812      	ldrb	r2, [r2, #0]
 800c8e4:	2101      	movs	r1, #1
 800c8e6:	430a      	orrs	r2, r1
 800c8e8:	701a      	strb	r2, [r3, #0]
 800c8ea:	183b      	adds	r3, r7, r0
 800c8ec:	183a      	adds	r2, r7, r0
 800c8ee:	8812      	ldrh	r2, [r2, #0]
 800c8f0:	3a20      	subs	r2, #32
 800c8f2:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c8f4:	6a3b      	ldr	r3, [r7, #32]
 800c8f6:	1c5a      	adds	r2, r3, #1
 800c8f8:	623a      	str	r2, [r7, #32]
 800c8fa:	2224      	movs	r2, #36	; 0x24
 800c8fc:	18ba      	adds	r2, r7, r2
 800c8fe:	8812      	ldrh	r2, [r2, #0]
 800c900:	b2d0      	uxtb	r0, r2
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	2124      	movs	r1, #36	; 0x24
 800c906:	18d3      	adds	r3, r2, r3
 800c908:	185b      	adds	r3, r3, r1
 800c90a:	1c02      	adds	r2, r0, #0
 800c90c:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800c90e:	e73d      	b.n	800c78c <create_name+0x1c8>
		if (!w) break;					/* Break on end of the LFN */
 800c910:	46c0      	nop			; (mov r8, r8)
 800c912:	e008      	b.n	800c926 <create_name+0x362>
 800c914:	08013524 	.word	0x08013524
 800c918:	7fffffff 	.word	0x7fffffff
 800c91c:	08013714 	.word	0x08013714
 800c920:	08013530 	.word	0x08013530
			if (si > di) break;			/* No extension */
 800c924:	46c0      	nop			; (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2224      	movs	r2, #36	; 0x24
 800c92a:	5c9b      	ldrb	r3, [r3, r2]
 800c92c:	2be5      	cmp	r3, #229	; 0xe5
 800c92e:	d103      	bne.n	800c938 <create_name+0x374>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2224      	movs	r2, #36	; 0x24
 800c934:	2105      	movs	r1, #5
 800c936:	5499      	strb	r1, [r3, r2]

	if (ni == 8) b <<= 2;
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	2b08      	cmp	r3, #8
 800c93c:	d105      	bne.n	800c94a <create_name+0x386>
 800c93e:	2226      	movs	r2, #38	; 0x26
 800c940:	18bb      	adds	r3, r7, r2
 800c942:	18ba      	adds	r2, r7, r2
 800c944:	7812      	ldrb	r2, [r2, #0]
 800c946:	0092      	lsls	r2, r2, #2
 800c948:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c94a:	2126      	movs	r1, #38	; 0x26
 800c94c:	187b      	adds	r3, r7, r1
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	220c      	movs	r2, #12
 800c952:	4013      	ands	r3, r2
 800c954:	2b0c      	cmp	r3, #12
 800c956:	d005      	beq.n	800c964 <create_name+0x3a0>
 800c958:	187b      	adds	r3, r7, r1
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	2203      	movs	r2, #3
 800c95e:	4013      	ands	r3, r2
 800c960:	2b03      	cmp	r3, #3
 800c962:	d106      	bne.n	800c972 <create_name+0x3ae>
 800c964:	2227      	movs	r2, #39	; 0x27
 800c966:	18bb      	adds	r3, r7, r2
 800c968:	18ba      	adds	r2, r7, r2
 800c96a:	7812      	ldrb	r2, [r2, #0]
 800c96c:	2102      	movs	r1, #2
 800c96e:	430a      	orrs	r2, r1
 800c970:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c972:	2127      	movs	r1, #39	; 0x27
 800c974:	187b      	adds	r3, r7, r1
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	2202      	movs	r2, #2
 800c97a:	4013      	ands	r3, r2
 800c97c:	d11a      	bne.n	800c9b4 <create_name+0x3f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c97e:	2326      	movs	r3, #38	; 0x26
 800c980:	18fb      	adds	r3, r7, r3
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	2203      	movs	r2, #3
 800c986:	4013      	ands	r3, r2
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d105      	bne.n	800c998 <create_name+0x3d4>
 800c98c:	187b      	adds	r3, r7, r1
 800c98e:	187a      	adds	r2, r7, r1
 800c990:	7812      	ldrb	r2, [r2, #0]
 800c992:	2110      	movs	r1, #16
 800c994:	430a      	orrs	r2, r1
 800c996:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c998:	2326      	movs	r3, #38	; 0x26
 800c99a:	18fb      	adds	r3, r7, r3
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	220c      	movs	r2, #12
 800c9a0:	4013      	ands	r3, r2
 800c9a2:	2b04      	cmp	r3, #4
 800c9a4:	d106      	bne.n	800c9b4 <create_name+0x3f0>
 800c9a6:	2227      	movs	r2, #39	; 0x27
 800c9a8:	18bb      	adds	r3, r7, r2
 800c9aa:	18ba      	adds	r2, r7, r2
 800c9ac:	7812      	ldrb	r2, [r2, #0]
 800c9ae:	2108      	movs	r1, #8
 800c9b0:	430a      	orrs	r2, r1
 800c9b2:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2227      	movs	r2, #39	; 0x27
 800c9b8:	18ba      	adds	r2, r7, r2
 800c9ba:	212f      	movs	r1, #47	; 0x2f
 800c9bc:	7812      	ldrb	r2, [r2, #0]
 800c9be:	545a      	strb	r2, [r3, r1]

	return FR_OK;
 800c9c0:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c9c2:	0018      	movs	r0, r3
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	b00a      	add	sp, #40	; 0x28
 800c9c8:	bdb0      	pop	{r4, r5, r7, pc}
 800c9ca:	46c0      	nop			; (mov r8, r8)

0800c9cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c9cc:	b5b0      	push	{r4, r5, r7, lr}
 800c9ce:	b086      	sub	sp, #24
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c9e0:	e002      	b.n	800c9e8 <follow_path+0x1c>
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	603b      	str	r3, [r7, #0]
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	2b2f      	cmp	r3, #47	; 0x2f
 800c9ee:	d0f8      	beq.n	800c9e2 <follow_path+0x16>
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	2b5c      	cmp	r3, #92	; 0x5c
 800c9f6:	d0f4      	beq.n	800c9e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	2b1f      	cmp	r3, #31
 800ca04:	d80d      	bhi.n	800ca22 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	222f      	movs	r2, #47	; 0x2f
 800ca0a:	2180      	movs	r1, #128	; 0x80
 800ca0c:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 800ca0e:	2317      	movs	r3, #23
 800ca10:	18fc      	adds	r4, r7, r3
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2100      	movs	r1, #0
 800ca16:	0018      	movs	r0, r3
 800ca18:	f7ff f819 	bl	800ba4e <dir_sdi>
 800ca1c:	0003      	movs	r3, r0
 800ca1e:	7023      	strb	r3, [r4, #0]
 800ca20:	e057      	b.n	800cad2 <follow_path+0x106>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ca22:	2517      	movs	r5, #23
 800ca24:	197c      	adds	r4, r7, r5
 800ca26:	003a      	movs	r2, r7
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	0011      	movs	r1, r2
 800ca2c:	0018      	movs	r0, r3
 800ca2e:	f7ff fdc9 	bl	800c5c4 <create_name>
 800ca32:	0003      	movs	r3, r0
 800ca34:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800ca36:	197b      	adds	r3, r7, r5
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d144      	bne.n	800cac8 <follow_path+0xfc>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ca3e:	197c      	adds	r4, r7, r5
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	0018      	movs	r0, r3
 800ca44:	f7ff fbb3 	bl	800c1ae <dir_find>
 800ca48:	0003      	movs	r3, r0
 800ca4a:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 800ca4c:	200b      	movs	r0, #11
 800ca4e:	183b      	adds	r3, r7, r0
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	212f      	movs	r1, #47	; 0x2f
 800ca54:	5c52      	ldrb	r2, [r2, r1]
 800ca56:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 800ca58:	197b      	adds	r3, r7, r5
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00c      	beq.n	800ca7a <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ca60:	197b      	adds	r3, r7, r5
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	2b04      	cmp	r3, #4
 800ca66:	d131      	bne.n	800cacc <follow_path+0x100>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ca68:	183b      	adds	r3, r7, r0
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	2204      	movs	r2, #4
 800ca6e:	4013      	ands	r3, r2
 800ca70:	d12c      	bne.n	800cacc <follow_path+0x100>
 800ca72:	197b      	adds	r3, r7, r5
 800ca74:	2205      	movs	r2, #5
 800ca76:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 800ca78:	e028      	b.n	800cacc <follow_path+0x100>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ca7a:	230b      	movs	r3, #11
 800ca7c:	18fb      	adds	r3, r7, r3
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	2204      	movs	r2, #4
 800ca82:	4013      	ands	r3, r2
 800ca84:	d124      	bne.n	800cad0 <follow_path+0x104>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	799b      	ldrb	r3, [r3, #6]
 800ca8a:	001a      	movs	r2, r3
 800ca8c:	2310      	movs	r3, #16
 800ca8e:	4013      	ands	r3, r2
 800ca90:	d104      	bne.n	800ca9c <follow_path+0xd0>
				res = FR_NO_PATH; break;
 800ca92:	2317      	movs	r3, #23
 800ca94:	18fb      	adds	r3, r7, r3
 800ca96:	2205      	movs	r2, #5
 800ca98:	701a      	strb	r2, [r3, #0]
 800ca9a:	e01a      	b.n	800cad2 <follow_path+0x106>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	3338      	adds	r3, #56	; 0x38
 800caa0:	001c      	movs	r4, r3
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	695a      	ldr	r2, [r3, #20]
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	899b      	ldrh	r3, [r3, #12]
 800caaa:	0019      	movs	r1, r3
 800caac:	0010      	movs	r0, r2
 800caae:	f7f3 fbd7 	bl	8000260 <__aeabi_uidivmod>
 800cab2:	000b      	movs	r3, r1
 800cab4:	18e2      	adds	r2, r4, r3
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	0011      	movs	r1, r2
 800caba:	0018      	movs	r0, r3
 800cabc:	f7ff f987 	bl	800bdce <ld_clust>
 800cac0:	0002      	movs	r2, r0
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cac6:	e7ac      	b.n	800ca22 <follow_path+0x56>
			if (res != FR_OK) break;
 800cac8:	46c0      	nop			; (mov r8, r8)
 800caca:	e002      	b.n	800cad2 <follow_path+0x106>
				break;
 800cacc:	46c0      	nop			; (mov r8, r8)
 800cace:	e000      	b.n	800cad2 <follow_path+0x106>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cad0:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	return res;
 800cad2:	2317      	movs	r3, #23
 800cad4:	18fb      	adds	r3, r7, r3
 800cad6:	781b      	ldrb	r3, [r3, #0]
}
 800cad8:	0018      	movs	r0, r3
 800cada:	46bd      	mov	sp, r7
 800cadc:	b006      	add	sp, #24
 800cade:	bdb0      	pop	{r4, r5, r7, pc}

0800cae0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b086      	sub	sp, #24
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cae8:	2301      	movs	r3, #1
 800caea:	425b      	negs	r3, r3
 800caec:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d031      	beq.n	800cb5a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	617b      	str	r3, [r7, #20]
 800cafc:	e002      	b.n	800cb04 <get_ldnumber+0x24>
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	3301      	adds	r3, #1
 800cb02:	617b      	str	r3, [r7, #20]
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	2b1f      	cmp	r3, #31
 800cb0a:	d903      	bls.n	800cb14 <get_ldnumber+0x34>
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	2b3a      	cmp	r3, #58	; 0x3a
 800cb12:	d1f4      	bne.n	800cafe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	2b3a      	cmp	r3, #58	; 0x3a
 800cb1a:	d11c      	bne.n	800cb56 <get_ldnumber+0x76>
			tp = *path;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	1c5a      	adds	r2, r3, #1
 800cb26:	60fa      	str	r2, [r7, #12]
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	3b30      	subs	r3, #48	; 0x30
 800cb2c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	2b09      	cmp	r3, #9
 800cb32:	d80e      	bhi.n	800cb52 <get_ldnumber+0x72>
 800cb34:	68fa      	ldr	r2, [r7, #12]
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d10a      	bne.n	800cb52 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d107      	bne.n	800cb52 <get_ldnumber+0x72>
					vol = (int)i;
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	617b      	str	r3, [r7, #20]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	697a      	ldr	r2, [r7, #20]
 800cb50:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	e002      	b.n	800cb5c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cb56:	2300      	movs	r3, #0
 800cb58:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cb5a:	693b      	ldr	r3, [r7, #16]
}
 800cb5c:	0018      	movs	r0, r3
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	b006      	add	sp, #24
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2200      	movs	r2, #0
 800cb72:	70da      	strb	r2, [r3, #3]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2201      	movs	r2, #1
 800cb78:	4252      	negs	r2, r2
 800cb7a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cb7c:	683a      	ldr	r2, [r7, #0]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	0011      	movs	r1, r2
 800cb82:	0018      	movs	r0, r3
 800cb84:	f7fe fb36 	bl	800b1f4 <move_window>
 800cb88:	1e03      	subs	r3, r0, #0
 800cb8a:	d001      	beq.n	800cb90 <check_fs+0x2c>
 800cb8c:	2304      	movs	r3, #4
 800cb8e:	e037      	b.n	800cc00 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	3338      	adds	r3, #56	; 0x38
 800cb94:	33ff      	adds	r3, #255	; 0xff
 800cb96:	33ff      	adds	r3, #255	; 0xff
 800cb98:	0018      	movs	r0, r3
 800cb9a:	f7fe f87f 	bl	800ac9c <ld_word>
 800cb9e:	0003      	movs	r3, r0
 800cba0:	001a      	movs	r2, r3
 800cba2:	4b19      	ldr	r3, [pc, #100]	; (800cc08 <check_fs+0xa4>)
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d001      	beq.n	800cbac <check_fs+0x48>
 800cba8:	2303      	movs	r3, #3
 800cbaa:	e029      	b.n	800cc00 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2238      	movs	r2, #56	; 0x38
 800cbb0:	5c9b      	ldrb	r3, [r3, r2]
 800cbb2:	2be9      	cmp	r3, #233	; 0xe9
 800cbb4:	d009      	beq.n	800cbca <check_fs+0x66>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2238      	movs	r2, #56	; 0x38
 800cbba:	5c9b      	ldrb	r3, [r3, r2]
 800cbbc:	2beb      	cmp	r3, #235	; 0xeb
 800cbbe:	d11e      	bne.n	800cbfe <check_fs+0x9a>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	223a      	movs	r2, #58	; 0x3a
 800cbc4:	5c9b      	ldrb	r3, [r3, r2]
 800cbc6:	2b90      	cmp	r3, #144	; 0x90
 800cbc8:	d119      	bne.n	800cbfe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	3338      	adds	r3, #56	; 0x38
 800cbce:	3336      	adds	r3, #54	; 0x36
 800cbd0:	0018      	movs	r0, r3
 800cbd2:	f7fe f87e 	bl	800acd2 <ld_dword>
 800cbd6:	0003      	movs	r3, r0
 800cbd8:	021b      	lsls	r3, r3, #8
 800cbda:	0a1b      	lsrs	r3, r3, #8
 800cbdc:	4a0b      	ldr	r2, [pc, #44]	; (800cc0c <check_fs+0xa8>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d101      	bne.n	800cbe6 <check_fs+0x82>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	e00c      	b.n	800cc00 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	3338      	adds	r3, #56	; 0x38
 800cbea:	3352      	adds	r3, #82	; 0x52
 800cbec:	0018      	movs	r0, r3
 800cbee:	f7fe f870 	bl	800acd2 <ld_dword>
 800cbf2:	0003      	movs	r3, r0
 800cbf4:	4a06      	ldr	r2, [pc, #24]	; (800cc10 <check_fs+0xac>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d101      	bne.n	800cbfe <check_fs+0x9a>
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	e000      	b.n	800cc00 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cbfe:	2302      	movs	r3, #2
}
 800cc00:	0018      	movs	r0, r3
 800cc02:	46bd      	mov	sp, r7
 800cc04:	b002      	add	sp, #8
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	0000aa55 	.word	0x0000aa55
 800cc0c:	00544146 	.word	0x00544146
 800cc10:	33544146 	.word	0x33544146

0800cc14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cc14:	b5b0      	push	{r4, r5, r7, lr}
 800cc16:	b096      	sub	sp, #88	; 0x58
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	1dfb      	adds	r3, r7, #7
 800cc20:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	2200      	movs	r2, #0
 800cc26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	0018      	movs	r0, r3
 800cc2c:	f7ff ff58 	bl	800cae0 <get_ldnumber>
 800cc30:	0003      	movs	r3, r0
 800cc32:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cc34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	da01      	bge.n	800cc3e <find_volume+0x2a>
 800cc3a:	230b      	movs	r3, #11
 800cc3c:	e283      	b.n	800d146 <find_volume+0x532>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cc3e:	4bc2      	ldr	r3, [pc, #776]	; (800cf48 <find_volume+0x334>)
 800cc40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc42:	0092      	lsls	r2, r2, #2
 800cc44:	58d3      	ldr	r3, [r2, r3]
 800cc46:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d101      	bne.n	800cc52 <find_volume+0x3e>
 800cc4e:	230c      	movs	r3, #12
 800cc50:	e279      	b.n	800d146 <find_volume+0x532>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc56:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cc58:	1dfb      	adds	r3, r7, #7
 800cc5a:	1dfa      	adds	r2, r7, #7
 800cc5c:	7812      	ldrb	r2, [r2, #0]
 800cc5e:	2101      	movs	r1, #1
 800cc60:	438a      	bics	r2, r1
 800cc62:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d01b      	beq.n	800cca4 <find_volume+0x90>
		stat = disk_status(fs->drv);
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6e:	785b      	ldrb	r3, [r3, #1]
 800cc70:	2537      	movs	r5, #55	; 0x37
 800cc72:	197c      	adds	r4, r7, r5
 800cc74:	0018      	movs	r0, r3
 800cc76:	f7fd ff47 	bl	800ab08 <disk_status>
 800cc7a:	0003      	movs	r3, r0
 800cc7c:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cc7e:	0029      	movs	r1, r5
 800cc80:	187b      	adds	r3, r7, r1
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	2201      	movs	r2, #1
 800cc86:	4013      	ands	r3, r2
 800cc88:	d10c      	bne.n	800cca4 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cc8a:	1dfb      	adds	r3, r7, #7
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d006      	beq.n	800cca0 <find_volume+0x8c>
 800cc92:	187b      	adds	r3, r7, r1
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	2204      	movs	r2, #4
 800cc98:	4013      	ands	r3, r2
 800cc9a:	d001      	beq.n	800cca0 <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 800cc9c:	230a      	movs	r3, #10
 800cc9e:	e252      	b.n	800d146 <find_volume+0x532>
			}
			return FR_OK;				/* The file system object is valid */
 800cca0:	2300      	movs	r3, #0
 800cca2:	e250      	b.n	800d146 <find_volume+0x532>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca6:	2200      	movs	r2, #0
 800cca8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ccaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccac:	b2da      	uxtb	r2, r3
 800ccae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ccb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb4:	785b      	ldrb	r3, [r3, #1]
 800ccb6:	2537      	movs	r5, #55	; 0x37
 800ccb8:	197c      	adds	r4, r7, r5
 800ccba:	0018      	movs	r0, r3
 800ccbc:	f7fd ff46 	bl	800ab4c <disk_initialize>
 800ccc0:	0003      	movs	r3, r0
 800ccc2:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ccc4:	197b      	adds	r3, r7, r5
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	4013      	ands	r3, r2
 800cccc:	d001      	beq.n	800ccd2 <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ccce:	2303      	movs	r3, #3
 800ccd0:	e239      	b.n	800d146 <find_volume+0x532>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ccd2:	1dfb      	adds	r3, r7, #7
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d007      	beq.n	800ccea <find_volume+0xd6>
 800ccda:	2337      	movs	r3, #55	; 0x37
 800ccdc:	18fb      	adds	r3, r7, r3
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	2204      	movs	r2, #4
 800cce2:	4013      	ands	r3, r2
 800cce4:	d001      	beq.n	800ccea <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800cce6:	230a      	movs	r3, #10
 800cce8:	e22d      	b.n	800d146 <find_volume+0x532>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ccea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccec:	7858      	ldrb	r0, [r3, #1]
 800ccee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf0:	330c      	adds	r3, #12
 800ccf2:	001a      	movs	r2, r3
 800ccf4:	2102      	movs	r1, #2
 800ccf6:	f7fd ffa9 	bl	800ac4c <disk_ioctl>
 800ccfa:	1e03      	subs	r3, r0, #0
 800ccfc:	d001      	beq.n	800cd02 <find_volume+0xee>
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e221      	b.n	800d146 <find_volume+0x532>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800cd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd04:	899a      	ldrh	r2, [r3, #12]
 800cd06:	2380      	movs	r3, #128	; 0x80
 800cd08:	011b      	lsls	r3, r3, #4
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d80d      	bhi.n	800cd2a <find_volume+0x116>
 800cd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd10:	899a      	ldrh	r2, [r3, #12]
 800cd12:	2380      	movs	r3, #128	; 0x80
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d307      	bcc.n	800cd2a <find_volume+0x116>
 800cd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1c:	899b      	ldrh	r3, [r3, #12]
 800cd1e:	001a      	movs	r2, r3
 800cd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd22:	899b      	ldrh	r3, [r3, #12]
 800cd24:	3b01      	subs	r3, #1
 800cd26:	4013      	ands	r3, r2
 800cd28:	d001      	beq.n	800cd2e <find_volume+0x11a>
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e20b      	b.n	800d146 <find_volume+0x532>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cd32:	2557      	movs	r5, #87	; 0x57
 800cd34:	197c      	adds	r4, r7, r5
 800cd36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3a:	0011      	movs	r1, r2
 800cd3c:	0018      	movs	r0, r3
 800cd3e:	f7ff ff11 	bl	800cb64 <check_fs>
 800cd42:	0003      	movs	r3, r0
 800cd44:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cd46:	197b      	adds	r3, r7, r5
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	2b02      	cmp	r3, #2
 800cd4c:	d14b      	bne.n	800cde6 <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cd4e:	2300      	movs	r3, #0
 800cd50:	643b      	str	r3, [r7, #64]	; 0x40
 800cd52:	e01d      	b.n	800cd90 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd56:	3338      	adds	r3, #56	; 0x38
 800cd58:	001a      	movs	r2, r3
 800cd5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd5c:	011b      	lsls	r3, r3, #4
 800cd5e:	33bf      	adds	r3, #191	; 0xbf
 800cd60:	33ff      	adds	r3, #255	; 0xff
 800cd62:	18d3      	adds	r3, r2, r3
 800cd64:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd68:	3304      	adds	r3, #4
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d006      	beq.n	800cd7e <find_volume+0x16a>
 800cd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd72:	3308      	adds	r3, #8
 800cd74:	0018      	movs	r0, r3
 800cd76:	f7fd ffac 	bl	800acd2 <ld_dword>
 800cd7a:	0003      	movs	r3, r0
 800cd7c:	e000      	b.n	800cd80 <find_volume+0x16c>
 800cd7e:	2300      	movs	r3, #0
 800cd80:	2214      	movs	r2, #20
 800cd82:	18ba      	adds	r2, r7, r2
 800cd84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cd86:	0089      	lsls	r1, r1, #2
 800cd88:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cd8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	643b      	str	r3, [r7, #64]	; 0x40
 800cd90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd92:	2b03      	cmp	r3, #3
 800cd94:	d9de      	bls.n	800cd54 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cd96:	2300      	movs	r3, #0
 800cd98:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cd9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d002      	beq.n	800cda6 <find_volume+0x192>
 800cda0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cda2:	3b01      	subs	r3, #1
 800cda4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cda6:	2314      	movs	r3, #20
 800cda8:	18fb      	adds	r3, r7, r3
 800cdaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cdac:	0092      	lsls	r2, r2, #2
 800cdae:	58d3      	ldr	r3, [r2, r3]
 800cdb0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cdb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d008      	beq.n	800cdca <find_volume+0x1b6>
 800cdb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdbc:	0011      	movs	r1, r2
 800cdbe:	0018      	movs	r0, r3
 800cdc0:	f7ff fed0 	bl	800cb64 <check_fs>
 800cdc4:	0003      	movs	r3, r0
 800cdc6:	001a      	movs	r2, r3
 800cdc8:	e000      	b.n	800cdcc <find_volume+0x1b8>
 800cdca:	2203      	movs	r2, #3
 800cdcc:	2157      	movs	r1, #87	; 0x57
 800cdce:	187b      	adds	r3, r7, r1
 800cdd0:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cdd2:	187b      	adds	r3, r7, r1
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d905      	bls.n	800cde6 <find_volume+0x1d2>
 800cdda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cddc:	3301      	adds	r3, #1
 800cdde:	643b      	str	r3, [r7, #64]	; 0x40
 800cde0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cde2:	2b03      	cmp	r3, #3
 800cde4:	d9df      	bls.n	800cda6 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cde6:	2357      	movs	r3, #87	; 0x57
 800cde8:	18fb      	adds	r3, r7, r3
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	2b04      	cmp	r3, #4
 800cdee:	d101      	bne.n	800cdf4 <find_volume+0x1e0>
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e1a8      	b.n	800d146 <find_volume+0x532>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cdf4:	2357      	movs	r3, #87	; 0x57
 800cdf6:	18fb      	adds	r3, r7, r3
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d901      	bls.n	800ce02 <find_volume+0x1ee>
 800cdfe:	230d      	movs	r3, #13
 800ce00:	e1a1      	b.n	800d146 <find_volume+0x532>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ce02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce04:	3338      	adds	r3, #56	; 0x38
 800ce06:	330b      	adds	r3, #11
 800ce08:	0018      	movs	r0, r3
 800ce0a:	f7fd ff47 	bl	800ac9c <ld_word>
 800ce0e:	0003      	movs	r3, r0
 800ce10:	001a      	movs	r2, r3
 800ce12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce14:	899b      	ldrh	r3, [r3, #12]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d001      	beq.n	800ce1e <find_volume+0x20a>
 800ce1a:	230d      	movs	r3, #13
 800ce1c:	e193      	b.n	800d146 <find_volume+0x532>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ce1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce20:	3338      	adds	r3, #56	; 0x38
 800ce22:	3316      	adds	r3, #22
 800ce24:	0018      	movs	r0, r3
 800ce26:	f7fd ff39 	bl	800ac9c <ld_word>
 800ce2a:	0003      	movs	r3, r0
 800ce2c:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ce2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d107      	bne.n	800ce44 <find_volume+0x230>
 800ce34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce36:	3338      	adds	r3, #56	; 0x38
 800ce38:	3324      	adds	r3, #36	; 0x24
 800ce3a:	0018      	movs	r0, r3
 800ce3c:	f7fd ff49 	bl	800acd2 <ld_dword>
 800ce40:	0003      	movs	r3, r0
 800ce42:	64fb      	str	r3, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ce44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ce48:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ce4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4c:	2248      	movs	r2, #72	; 0x48
 800ce4e:	5c9a      	ldrb	r2, [r3, r2]
 800ce50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce52:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ce54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce56:	789b      	ldrb	r3, [r3, #2]
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d005      	beq.n	800ce68 <find_volume+0x254>
 800ce5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5e:	789b      	ldrb	r3, [r3, #2]
 800ce60:	2b02      	cmp	r3, #2
 800ce62:	d001      	beq.n	800ce68 <find_volume+0x254>
 800ce64:	230d      	movs	r3, #13
 800ce66:	e16e      	b.n	800d146 <find_volume+0x532>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ce68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6a:	789b      	ldrb	r3, [r3, #2]
 800ce6c:	001a      	movs	r2, r3
 800ce6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce70:	4353      	muls	r3, r2
 800ce72:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ce74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce76:	2245      	movs	r2, #69	; 0x45
 800ce78:	5c9b      	ldrb	r3, [r3, r2]
 800ce7a:	b29a      	uxth	r2, r3
 800ce7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ce80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce82:	895b      	ldrh	r3, [r3, #10]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d007      	beq.n	800ce98 <find_volume+0x284>
 800ce88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8a:	895b      	ldrh	r3, [r3, #10]
 800ce8c:	001a      	movs	r2, r3
 800ce8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce90:	895b      	ldrh	r3, [r3, #10]
 800ce92:	3b01      	subs	r3, #1
 800ce94:	4013      	ands	r3, r2
 800ce96:	d001      	beq.n	800ce9c <find_volume+0x288>
 800ce98:	230d      	movs	r3, #13
 800ce9a:	e154      	b.n	800d146 <find_volume+0x532>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9e:	3338      	adds	r3, #56	; 0x38
 800cea0:	3311      	adds	r3, #17
 800cea2:	0018      	movs	r0, r3
 800cea4:	f7fd fefa 	bl	800ac9c <ld_word>
 800cea8:	0003      	movs	r3, r0
 800ceaa:	001a      	movs	r2, r3
 800ceac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ceb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb2:	891a      	ldrh	r2, [r3, #8]
 800ceb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb6:	899b      	ldrh	r3, [r3, #12]
 800ceb8:	095b      	lsrs	r3, r3, #5
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	0019      	movs	r1, r3
 800cebe:	0010      	movs	r0, r2
 800cec0:	f7f3 f9ce 	bl	8000260 <__aeabi_uidivmod>
 800cec4:	000b      	movs	r3, r1
 800cec6:	b29b      	uxth	r3, r3
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d001      	beq.n	800ced0 <find_volume+0x2bc>
 800cecc:	230d      	movs	r3, #13
 800cece:	e13a      	b.n	800d146 <find_volume+0x532>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ced0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced2:	3338      	adds	r3, #56	; 0x38
 800ced4:	3313      	adds	r3, #19
 800ced6:	0018      	movs	r0, r3
 800ced8:	f7fd fee0 	bl	800ac9c <ld_word>
 800cedc:	0003      	movs	r3, r0
 800cede:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d107      	bne.n	800cef6 <find_volume+0x2e2>
 800cee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee8:	3338      	adds	r3, #56	; 0x38
 800ceea:	3320      	adds	r3, #32
 800ceec:	0018      	movs	r0, r3
 800ceee:	f7fd fef0 	bl	800acd2 <ld_dword>
 800cef2:	0003      	movs	r3, r0
 800cef4:	64bb      	str	r3, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef8:	3338      	adds	r3, #56	; 0x38
 800cefa:	330e      	adds	r3, #14
 800cefc:	252e      	movs	r5, #46	; 0x2e
 800cefe:	197c      	adds	r4, r7, r5
 800cf00:	0018      	movs	r0, r3
 800cf02:	f7fd fecb 	bl	800ac9c <ld_word>
 800cf06:	0003      	movs	r3, r0
 800cf08:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cf0a:	197b      	adds	r3, r7, r5
 800cf0c:	881b      	ldrh	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d101      	bne.n	800cf16 <find_volume+0x302>
 800cf12:	230d      	movs	r3, #13
 800cf14:	e117      	b.n	800d146 <find_volume+0x532>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cf16:	232e      	movs	r3, #46	; 0x2e
 800cf18:	18fb      	adds	r3, r7, r3
 800cf1a:	881a      	ldrh	r2, [r3, #0]
 800cf1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf1e:	18d4      	adds	r4, r2, r3
 800cf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf22:	891a      	ldrh	r2, [r3, #8]
 800cf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf26:	899b      	ldrh	r3, [r3, #12]
 800cf28:	095b      	lsrs	r3, r3, #5
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	0019      	movs	r1, r3
 800cf2e:	0010      	movs	r0, r2
 800cf30:	f7f3 f910 	bl	8000154 <__udivsi3>
 800cf34:	0003      	movs	r3, r0
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	18e3      	adds	r3, r4, r3
 800cf3a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cf3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d203      	bcs.n	800cf4c <find_volume+0x338>
 800cf44:	230d      	movs	r3, #13
 800cf46:	e0fe      	b.n	800d146 <find_volume+0x532>
 800cf48:	20003bec 	.word	0x20003bec
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cf4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf50:	1ad2      	subs	r2, r2, r3
 800cf52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf54:	895b      	ldrh	r3, [r3, #10]
 800cf56:	0019      	movs	r1, r3
 800cf58:	0010      	movs	r0, r2
 800cf5a:	f7f3 f8fb 	bl	8000154 <__udivsi3>
 800cf5e:	0003      	movs	r3, r0
 800cf60:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d101      	bne.n	800cf6c <find_volume+0x358>
 800cf68:	230d      	movs	r3, #13
 800cf6a:	e0ec      	b.n	800d146 <find_volume+0x532>
		fmt = FS_FAT32;
 800cf6c:	2157      	movs	r1, #87	; 0x57
 800cf6e:	187b      	adds	r3, r7, r1
 800cf70:	2203      	movs	r2, #3
 800cf72:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf76:	4a76      	ldr	r2, [pc, #472]	; (800d150 <find_volume+0x53c>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d802      	bhi.n	800cf82 <find_volume+0x36e>
 800cf7c:	187b      	adds	r3, r7, r1
 800cf7e:	2202      	movs	r2, #2
 800cf80:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf84:	4a73      	ldr	r2, [pc, #460]	; (800d154 <find_volume+0x540>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d803      	bhi.n	800cf92 <find_volume+0x37e>
 800cf8a:	2357      	movs	r3, #87	; 0x57
 800cf8c:	18fb      	adds	r3, r7, r3
 800cf8e:	2201      	movs	r2, #1
 800cf90:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cf92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf94:	1c9a      	adds	r2, r3, #2
 800cf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf98:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800cf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf9e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cfa0:	232e      	movs	r3, #46	; 0x2e
 800cfa2:	18fb      	adds	r3, r7, r3
 800cfa4:	881a      	ldrh	r2, [r3, #0]
 800cfa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfa8:	18d2      	adds	r2, r2, r3
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfac:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800cfae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb2:	18d2      	adds	r2, r2, r3
 800cfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800cfb8:	2357      	movs	r3, #87	; 0x57
 800cfba:	18fb      	adds	r3, r7, r3
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	2b03      	cmp	r3, #3
 800cfc0:	d11d      	bne.n	800cffe <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc4:	3338      	adds	r3, #56	; 0x38
 800cfc6:	332a      	adds	r3, #42	; 0x2a
 800cfc8:	0018      	movs	r0, r3
 800cfca:	f7fd fe67 	bl	800ac9c <ld_word>
 800cfce:	1e03      	subs	r3, r0, #0
 800cfd0:	d001      	beq.n	800cfd6 <find_volume+0x3c2>
 800cfd2:	230d      	movs	r3, #13
 800cfd4:	e0b7      	b.n	800d146 <find_volume+0x532>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd8:	891b      	ldrh	r3, [r3, #8]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d001      	beq.n	800cfe2 <find_volume+0x3ce>
 800cfde:	230d      	movs	r3, #13
 800cfe0:	e0b1      	b.n	800d146 <find_volume+0x532>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe4:	3338      	adds	r3, #56	; 0x38
 800cfe6:	332c      	adds	r3, #44	; 0x2c
 800cfe8:	0018      	movs	r0, r3
 800cfea:	f7fd fe72 	bl	800acd2 <ld_dword>
 800cfee:	0002      	movs	r2, r0
 800cff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff6:	69db      	ldr	r3, [r3, #28]
 800cff8:	009b      	lsls	r3, r3, #2
 800cffa:	647b      	str	r3, [r7, #68]	; 0x44
 800cffc:	e020      	b.n	800d040 <find_volume+0x42c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d000:	891b      	ldrh	r3, [r3, #8]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d101      	bne.n	800d00a <find_volume+0x3f6>
 800d006:	230d      	movs	r3, #13
 800d008:	e09d      	b.n	800d146 <find_volume+0x532>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d00e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d010:	18d2      	adds	r2, r2, r3
 800d012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d014:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d016:	2357      	movs	r3, #87	; 0x57
 800d018:	18fb      	adds	r3, r7, r3
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	2b02      	cmp	r3, #2
 800d01e:	d103      	bne.n	800d028 <find_volume+0x414>
 800d020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d022:	69db      	ldr	r3, [r3, #28]
 800d024:	005b      	lsls	r3, r3, #1
 800d026:	e00a      	b.n	800d03e <find_volume+0x42a>
 800d028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02a:	69da      	ldr	r2, [r3, #28]
 800d02c:	0013      	movs	r3, r2
 800d02e:	005b      	lsls	r3, r3, #1
 800d030:	189b      	adds	r3, r3, r2
 800d032:	085a      	lsrs	r2, r3, #1
 800d034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d036:	69db      	ldr	r3, [r3, #28]
 800d038:	2101      	movs	r1, #1
 800d03a:	400b      	ands	r3, r1
 800d03c:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d03e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d042:	6a1c      	ldr	r4, [r3, #32]
 800d044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d046:	899b      	ldrh	r3, [r3, #12]
 800d048:	001a      	movs	r2, r3
 800d04a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d04c:	18d3      	adds	r3, r2, r3
 800d04e:	1e5a      	subs	r2, r3, #1
 800d050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d052:	899b      	ldrh	r3, [r3, #12]
 800d054:	0019      	movs	r1, r3
 800d056:	0010      	movs	r0, r2
 800d058:	f7f3 f87c 	bl	8000154 <__udivsi3>
 800d05c:	0003      	movs	r3, r0
 800d05e:	429c      	cmp	r4, r3
 800d060:	d201      	bcs.n	800d066 <find_volume+0x452>
 800d062:	230d      	movs	r3, #13
 800d064:	e06f      	b.n	800d146 <find_volume+0x532>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d068:	2201      	movs	r2, #1
 800d06a:	4252      	negs	r2, r2
 800d06c:	619a      	str	r2, [r3, #24]
 800d06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d070:	699a      	ldr	r2, [r3, #24]
 800d072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d074:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d078:	2280      	movs	r2, #128	; 0x80
 800d07a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d07c:	2357      	movs	r3, #87	; 0x57
 800d07e:	18fb      	adds	r3, r7, r3
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	2b03      	cmp	r3, #3
 800d084:	d148      	bne.n	800d118 <find_volume+0x504>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d088:	3338      	adds	r3, #56	; 0x38
 800d08a:	3330      	adds	r3, #48	; 0x30
 800d08c:	0018      	movs	r0, r3
 800d08e:	f7fd fe05 	bl	800ac9c <ld_word>
 800d092:	0003      	movs	r3, r0
 800d094:	2b01      	cmp	r3, #1
 800d096:	d13f      	bne.n	800d118 <find_volume+0x504>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d09a:	1c5a      	adds	r2, r3, #1
 800d09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d09e:	0011      	movs	r1, r2
 800d0a0:	0018      	movs	r0, r3
 800d0a2:	f7fe f8a7 	bl	800b1f4 <move_window>
 800d0a6:	1e03      	subs	r3, r0, #0
 800d0a8:	d136      	bne.n	800d118 <find_volume+0x504>
		{
			fs->fsi_flag = 0;
 800d0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b2:	3338      	adds	r3, #56	; 0x38
 800d0b4:	33ff      	adds	r3, #255	; 0xff
 800d0b6:	33ff      	adds	r3, #255	; 0xff
 800d0b8:	0018      	movs	r0, r3
 800d0ba:	f7fd fdef 	bl	800ac9c <ld_word>
 800d0be:	0003      	movs	r3, r0
 800d0c0:	001a      	movs	r2, r3
 800d0c2:	4b25      	ldr	r3, [pc, #148]	; (800d158 <find_volume+0x544>)
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d127      	bne.n	800d118 <find_volume+0x504>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ca:	3338      	adds	r3, #56	; 0x38
 800d0cc:	0018      	movs	r0, r3
 800d0ce:	f7fd fe00 	bl	800acd2 <ld_dword>
 800d0d2:	0003      	movs	r3, r0
 800d0d4:	4a21      	ldr	r2, [pc, #132]	; (800d15c <find_volume+0x548>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d11e      	bne.n	800d118 <find_volume+0x504>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0dc:	3338      	adds	r3, #56	; 0x38
 800d0de:	33e5      	adds	r3, #229	; 0xe5
 800d0e0:	33ff      	adds	r3, #255	; 0xff
 800d0e2:	0018      	movs	r0, r3
 800d0e4:	f7fd fdf5 	bl	800acd2 <ld_dword>
 800d0e8:	0003      	movs	r3, r0
 800d0ea:	4a1d      	ldr	r2, [pc, #116]	; (800d160 <find_volume+0x54c>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d113      	bne.n	800d118 <find_volume+0x504>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f2:	3338      	adds	r3, #56	; 0x38
 800d0f4:	33e9      	adds	r3, #233	; 0xe9
 800d0f6:	33ff      	adds	r3, #255	; 0xff
 800d0f8:	0018      	movs	r0, r3
 800d0fa:	f7fd fdea 	bl	800acd2 <ld_dword>
 800d0fe:	0002      	movs	r2, r0
 800d100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d102:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d106:	3338      	adds	r3, #56	; 0x38
 800d108:	33ed      	adds	r3, #237	; 0xed
 800d10a:	33ff      	adds	r3, #255	; 0xff
 800d10c:	0018      	movs	r0, r3
 800d10e:	f7fd fde0 	bl	800acd2 <ld_dword>
 800d112:	0002      	movs	r2, r0
 800d114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d116:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d11a:	2257      	movs	r2, #87	; 0x57
 800d11c:	18ba      	adds	r2, r7, r2
 800d11e:	7812      	ldrb	r2, [r2, #0]
 800d120:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d122:	4b10      	ldr	r3, [pc, #64]	; (800d164 <find_volume+0x550>)
 800d124:	881b      	ldrh	r3, [r3, #0]
 800d126:	3301      	adds	r3, #1
 800d128:	b29a      	uxth	r2, r3
 800d12a:	4b0e      	ldr	r3, [pc, #56]	; (800d164 <find_volume+0x550>)
 800d12c:	801a      	strh	r2, [r3, #0]
 800d12e:	4b0d      	ldr	r3, [pc, #52]	; (800d164 <find_volume+0x550>)
 800d130:	881a      	ldrh	r2, [r3, #0]
 800d132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d134:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d138:	4a0b      	ldr	r2, [pc, #44]	; (800d168 <find_volume+0x554>)
 800d13a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13e:	0018      	movs	r0, r3
 800d140:	f7fd fff0 	bl	800b124 <clear_lock>
#endif
	return FR_OK;
 800d144:	2300      	movs	r3, #0
}
 800d146:	0018      	movs	r0, r3
 800d148:	46bd      	mov	sp, r7
 800d14a:	b016      	add	sp, #88	; 0x58
 800d14c:	bdb0      	pop	{r4, r5, r7, pc}
 800d14e:	46c0      	nop			; (mov r8, r8)
 800d150:	0000fff5 	.word	0x0000fff5
 800d154:	00000ff5 	.word	0x00000ff5
 800d158:	0000aa55 	.word	0x0000aa55
 800d15c:	41615252 	.word	0x41615252
 800d160:	61417272 	.word	0x61417272
 800d164:	20003bf0 	.word	0x20003bf0
 800d168:	20003c14 	.word	0x20003c14

0800d16c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d16c:	b590      	push	{r4, r7, lr}
 800d16e:	b085      	sub	sp, #20
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d176:	240f      	movs	r4, #15
 800d178:	193b      	adds	r3, r7, r4
 800d17a:	2209      	movs	r2, #9
 800d17c:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d01d      	beq.n	800d1c0 <validate+0x54>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d019      	beq.n	800d1c0 <validate+0x54>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d014      	beq.n	800d1c0 <validate+0x54>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	889a      	ldrh	r2, [r3, #4]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	88db      	ldrh	r3, [r3, #6]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d10d      	bne.n	800d1c0 <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	785b      	ldrb	r3, [r3, #1]
 800d1aa:	0018      	movs	r0, r3
 800d1ac:	f7fd fcac 	bl	800ab08 <disk_status>
 800d1b0:	0003      	movs	r3, r0
 800d1b2:	001a      	movs	r2, r3
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	4013      	ands	r3, r2
 800d1b8:	d102      	bne.n	800d1c0 <validate+0x54>
			res = FR_OK;
 800d1ba:	193b      	adds	r3, r7, r4
 800d1bc:	2200      	movs	r2, #0
 800d1be:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d1c0:	230f      	movs	r3, #15
 800d1c2:	18fb      	adds	r3, r7, r3
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d102      	bne.n	800d1d0 <validate+0x64>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	e000      	b.n	800d1d2 <validate+0x66>
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	601a      	str	r2, [r3, #0]
	return res;
 800d1d6:	230f      	movs	r3, #15
 800d1d8:	18fb      	adds	r3, r7, r3
 800d1da:	781b      	ldrb	r3, [r3, #0]
}
 800d1dc:	0018      	movs	r0, r3
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	b005      	add	sp, #20
 800d1e2:	bd90      	pop	{r4, r7, pc}

0800d1e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d1e4:	b5b0      	push	{r4, r5, r7, lr}
 800d1e6:	b088      	sub	sp, #32
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	1dfb      	adds	r3, r7, #7
 800d1f0:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d1f6:	2310      	movs	r3, #16
 800d1f8:	18fb      	adds	r3, r7, r3
 800d1fa:	0018      	movs	r0, r3
 800d1fc:	f7ff fc70 	bl	800cae0 <get_ldnumber>
 800d200:	0003      	movs	r3, r0
 800d202:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	2b00      	cmp	r3, #0
 800d208:	da01      	bge.n	800d20e <f_mount+0x2a>
 800d20a:	230b      	movs	r3, #11
 800d20c:	e030      	b.n	800d270 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d20e:	4b1a      	ldr	r3, [pc, #104]	; (800d278 <f_mount+0x94>)
 800d210:	69fa      	ldr	r2, [r7, #28]
 800d212:	0092      	lsls	r2, r2, #2
 800d214:	58d3      	ldr	r3, [r2, r3]
 800d216:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d006      	beq.n	800d22c <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	0018      	movs	r0, r3
 800d222:	f7fd ff7f 	bl	800b124 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	2200      	movs	r2, #0
 800d22a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d002      	beq.n	800d238 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2200      	movs	r2, #0
 800d236:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d238:	68f9      	ldr	r1, [r7, #12]
 800d23a:	4b0f      	ldr	r3, [pc, #60]	; (800d278 <f_mount+0x94>)
 800d23c:	69fa      	ldr	r2, [r7, #28]
 800d23e:	0092      	lsls	r2, r2, #2
 800d240:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d003      	beq.n	800d250 <f_mount+0x6c>
 800d248:	1dfb      	adds	r3, r7, #7
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d001      	beq.n	800d254 <f_mount+0x70>
 800d250:	2300      	movs	r3, #0
 800d252:	e00d      	b.n	800d270 <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d254:	2517      	movs	r5, #23
 800d256:	197c      	adds	r4, r7, r5
 800d258:	230c      	movs	r3, #12
 800d25a:	18f9      	adds	r1, r7, r3
 800d25c:	2308      	movs	r3, #8
 800d25e:	18fb      	adds	r3, r7, r3
 800d260:	2200      	movs	r2, #0
 800d262:	0018      	movs	r0, r3
 800d264:	f7ff fcd6 	bl	800cc14 <find_volume>
 800d268:	0003      	movs	r3, r0
 800d26a:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 800d26c:	197b      	adds	r3, r7, r5
 800d26e:	781b      	ldrb	r3, [r3, #0]
}
 800d270:	0018      	movs	r0, r3
 800d272:	46bd      	mov	sp, r7
 800d274:	b008      	add	sp, #32
 800d276:	bdb0      	pop	{r4, r5, r7, pc}
 800d278:	20003bec 	.word	0x20003bec

0800d27c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d27e:	b09b      	sub	sp, #108	; 0x6c
 800d280:	af00      	add	r7, sp, #0
 800d282:	60f8      	str	r0, [r7, #12]
 800d284:	60b9      	str	r1, [r7, #8]
 800d286:	1dfb      	adds	r3, r7, #7
 800d288:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d101      	bne.n	800d294 <f_open+0x18>
 800d290:	2309      	movs	r3, #9
 800d292:	e1f4      	b.n	800d67e <f_open+0x402>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d294:	1dfb      	adds	r3, r7, #7
 800d296:	1dfa      	adds	r2, r7, #7
 800d298:	7812      	ldrb	r2, [r2, #0]
 800d29a:	213f      	movs	r1, #63	; 0x3f
 800d29c:	400a      	ands	r2, r1
 800d29e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800d2a0:	2567      	movs	r5, #103	; 0x67
 800d2a2:	197c      	adds	r4, r7, r5
 800d2a4:	1dfb      	adds	r3, r7, #7
 800d2a6:	781a      	ldrb	r2, [r3, #0]
 800d2a8:	2314      	movs	r3, #20
 800d2aa:	18f9      	adds	r1, r7, r3
 800d2ac:	2308      	movs	r3, #8
 800d2ae:	18fb      	adds	r3, r7, r3
 800d2b0:	0018      	movs	r0, r3
 800d2b2:	f7ff fcaf 	bl	800cc14 <find_volume>
 800d2b6:	0003      	movs	r3, r0
 800d2b8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800d2ba:	197b      	adds	r3, r7, r5
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d000      	beq.n	800d2c4 <f_open+0x48>
 800d2c2:	e1d1      	b.n	800d668 <f_open+0x3ec>
		dj.obj.fs = fs;
 800d2c4:	697a      	ldr	r2, [r7, #20]
 800d2c6:	2618      	movs	r6, #24
 800d2c8:	19bb      	adds	r3, r7, r6
 800d2ca:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d2cc:	68ba      	ldr	r2, [r7, #8]
 800d2ce:	197c      	adds	r4, r7, r5
 800d2d0:	19bb      	adds	r3, r7, r6
 800d2d2:	0011      	movs	r1, r2
 800d2d4:	0018      	movs	r0, r3
 800d2d6:	f7ff fb79 	bl	800c9cc <follow_path>
 800d2da:	0003      	movs	r3, r0
 800d2dc:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d2de:	0029      	movs	r1, r5
 800d2e0:	197b      	adds	r3, r7, r5
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d11b      	bne.n	800d320 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d2e8:	19bb      	adds	r3, r7, r6
 800d2ea:	222f      	movs	r2, #47	; 0x2f
 800d2ec:	5c9b      	ldrb	r3, [r3, r2]
 800d2ee:	b25b      	sxtb	r3, r3
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	da03      	bge.n	800d2fc <f_open+0x80>
				res = FR_INVALID_NAME;
 800d2f4:	187b      	adds	r3, r7, r1
 800d2f6:	2206      	movs	r2, #6
 800d2f8:	701a      	strb	r2, [r3, #0]
 800d2fa:	e011      	b.n	800d320 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d2fc:	1dfb      	adds	r3, r7, #7
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	2201      	movs	r2, #1
 800d302:	4393      	bics	r3, r2
 800d304:	1e5a      	subs	r2, r3, #1
 800d306:	4193      	sbcs	r3, r2
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	001a      	movs	r2, r3
 800d30c:	2367      	movs	r3, #103	; 0x67
 800d30e:	18fc      	adds	r4, r7, r3
 800d310:	2318      	movs	r3, #24
 800d312:	18fb      	adds	r3, r7, r3
 800d314:	0011      	movs	r1, r2
 800d316:	0018      	movs	r0, r3
 800d318:	f7fd fdba 	bl	800ae90 <chk_lock>
 800d31c:	0003      	movs	r3, r0
 800d31e:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d320:	1dfb      	adds	r3, r7, #7
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	221c      	movs	r2, #28
 800d326:	4013      	ands	r3, r2
 800d328:	d100      	bne.n	800d32c <f_open+0xb0>
 800d32a:	e096      	b.n	800d45a <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 800d32c:	2267      	movs	r2, #103	; 0x67
 800d32e:	18bb      	adds	r3, r7, r2
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d01a      	beq.n	800d36c <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d336:	18bb      	adds	r3, r7, r2
 800d338:	781b      	ldrb	r3, [r3, #0]
 800d33a:	2b04      	cmp	r3, #4
 800d33c:	d10f      	bne.n	800d35e <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d33e:	f7fd fdff 	bl	800af40 <enq_lock>
 800d342:	1e03      	subs	r3, r0, #0
 800d344:	d007      	beq.n	800d356 <f_open+0xda>
 800d346:	2318      	movs	r3, #24
 800d348:	18fb      	adds	r3, r7, r3
 800d34a:	0018      	movs	r0, r3
 800d34c:	f7ff f82a 	bl	800c3a4 <dir_register>
 800d350:	0003      	movs	r3, r0
 800d352:	001a      	movs	r2, r3
 800d354:	e000      	b.n	800d358 <f_open+0xdc>
 800d356:	2212      	movs	r2, #18
 800d358:	2367      	movs	r3, #103	; 0x67
 800d35a:	18fb      	adds	r3, r7, r3
 800d35c:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d35e:	1dfb      	adds	r3, r7, #7
 800d360:	1dfa      	adds	r2, r7, #7
 800d362:	7812      	ldrb	r2, [r2, #0]
 800d364:	2108      	movs	r1, #8
 800d366:	430a      	orrs	r2, r1
 800d368:	701a      	strb	r2, [r3, #0]
 800d36a:	e014      	b.n	800d396 <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d36c:	2318      	movs	r3, #24
 800d36e:	18fb      	adds	r3, r7, r3
 800d370:	799b      	ldrb	r3, [r3, #6]
 800d372:	001a      	movs	r2, r3
 800d374:	2311      	movs	r3, #17
 800d376:	4013      	ands	r3, r2
 800d378:	d004      	beq.n	800d384 <f_open+0x108>
					res = FR_DENIED;
 800d37a:	2367      	movs	r3, #103	; 0x67
 800d37c:	18fb      	adds	r3, r7, r3
 800d37e:	2207      	movs	r2, #7
 800d380:	701a      	strb	r2, [r3, #0]
 800d382:	e008      	b.n	800d396 <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d384:	1dfb      	adds	r3, r7, #7
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	2204      	movs	r2, #4
 800d38a:	4013      	ands	r3, r2
 800d38c:	d003      	beq.n	800d396 <f_open+0x11a>
 800d38e:	2367      	movs	r3, #103	; 0x67
 800d390:	18fb      	adds	r3, r7, r3
 800d392:	2208      	movs	r2, #8
 800d394:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d396:	2467      	movs	r4, #103	; 0x67
 800d398:	193b      	adds	r3, r7, r4
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d000      	beq.n	800d3a2 <f_open+0x126>
 800d3a0:	e07b      	b.n	800d49a <f_open+0x21e>
 800d3a2:	1dfb      	adds	r3, r7, #7
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	2208      	movs	r2, #8
 800d3a8:	4013      	ands	r3, r2
 800d3aa:	d100      	bne.n	800d3ae <f_open+0x132>
 800d3ac:	e075      	b.n	800d49a <f_open+0x21e>
				dw = GET_FATTIME();
 800d3ae:	f7fd fb3f 	bl	800aa30 <get_fattime>
 800d3b2:	0003      	movs	r3, r0
 800d3b4:	65bb      	str	r3, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d3b6:	2518      	movs	r5, #24
 800d3b8:	197b      	adds	r3, r7, r5
 800d3ba:	6a1b      	ldr	r3, [r3, #32]
 800d3bc:	330e      	adds	r3, #14
 800d3be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d3c0:	0011      	movs	r1, r2
 800d3c2:	0018      	movs	r0, r3
 800d3c4:	f7fd fcc4 	bl	800ad50 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d3c8:	197b      	adds	r3, r7, r5
 800d3ca:	6a1b      	ldr	r3, [r3, #32]
 800d3cc:	3316      	adds	r3, #22
 800d3ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d3d0:	0011      	movs	r1, r2
 800d3d2:	0018      	movs	r0, r3
 800d3d4:	f7fd fcbc 	bl	800ad50 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d3d8:	197b      	adds	r3, r7, r5
 800d3da:	6a1b      	ldr	r3, [r3, #32]
 800d3dc:	330b      	adds	r3, #11
 800d3de:	2220      	movs	r2, #32
 800d3e0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d3e2:	697a      	ldr	r2, [r7, #20]
 800d3e4:	197b      	adds	r3, r7, r5
 800d3e6:	6a1b      	ldr	r3, [r3, #32]
 800d3e8:	0019      	movs	r1, r3
 800d3ea:	0010      	movs	r0, r2
 800d3ec:	f7fe fcef 	bl	800bdce <ld_clust>
 800d3f0:	0003      	movs	r3, r0
 800d3f2:	657b      	str	r3, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d3f4:	6978      	ldr	r0, [r7, #20]
 800d3f6:	197b      	adds	r3, r7, r5
 800d3f8:	6a1b      	ldr	r3, [r3, #32]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	0019      	movs	r1, r3
 800d3fe:	f7fe fd05 	bl	800be0c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d402:	197b      	adds	r3, r7, r5
 800d404:	6a1b      	ldr	r3, [r3, #32]
 800d406:	331c      	adds	r3, #28
 800d408:	2100      	movs	r1, #0
 800d40a:	0018      	movs	r0, r3
 800d40c:	f7fd fca0 	bl	800ad50 <st_dword>
					fs->wflag = 1;
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	2201      	movs	r2, #1
 800d414:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d03e      	beq.n	800d49a <f_open+0x21e>
						dw = fs->winsect;
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d420:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d422:	0026      	movs	r6, r4
 800d424:	193c      	adds	r4, r7, r4
 800d426:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d428:	197b      	adds	r3, r7, r5
 800d42a:	2200      	movs	r2, #0
 800d42c:	0018      	movs	r0, r3
 800d42e:	f7fe f9ba 	bl	800b7a6 <remove_chain>
 800d432:	0003      	movs	r3, r0
 800d434:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 800d436:	19bb      	adds	r3, r7, r6
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d12d      	bne.n	800d49a <f_open+0x21e>
							res = move_window(fs, dw);
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	19bc      	adds	r4, r7, r6
 800d442:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d444:	0011      	movs	r1, r2
 800d446:	0018      	movs	r0, r3
 800d448:	f7fd fed4 	bl	800b1f4 <move_window>
 800d44c:	0003      	movs	r3, r0
 800d44e:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d454:	3a01      	subs	r2, #1
 800d456:	615a      	str	r2, [r3, #20]
 800d458:	e01f      	b.n	800d49a <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d45a:	2167      	movs	r1, #103	; 0x67
 800d45c:	187b      	adds	r3, r7, r1
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d11a      	bne.n	800d49a <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d464:	2318      	movs	r3, #24
 800d466:	18fb      	adds	r3, r7, r3
 800d468:	799b      	ldrb	r3, [r3, #6]
 800d46a:	001a      	movs	r2, r3
 800d46c:	2310      	movs	r3, #16
 800d46e:	4013      	ands	r3, r2
 800d470:	d003      	beq.n	800d47a <f_open+0x1fe>
					res = FR_NO_FILE;
 800d472:	187b      	adds	r3, r7, r1
 800d474:	2204      	movs	r2, #4
 800d476:	701a      	strb	r2, [r3, #0]
 800d478:	e00f      	b.n	800d49a <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d47a:	1dfb      	adds	r3, r7, #7
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	2202      	movs	r2, #2
 800d480:	4013      	ands	r3, r2
 800d482:	d00a      	beq.n	800d49a <f_open+0x21e>
 800d484:	2318      	movs	r3, #24
 800d486:	18fb      	adds	r3, r7, r3
 800d488:	799b      	ldrb	r3, [r3, #6]
 800d48a:	001a      	movs	r2, r3
 800d48c:	2301      	movs	r3, #1
 800d48e:	4013      	ands	r3, r2
 800d490:	d003      	beq.n	800d49a <f_open+0x21e>
						res = FR_DENIED;
 800d492:	2367      	movs	r3, #103	; 0x67
 800d494:	18fb      	adds	r3, r7, r3
 800d496:	2207      	movs	r2, #7
 800d498:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 800d49a:	2367      	movs	r3, #103	; 0x67
 800d49c:	18fb      	adds	r3, r7, r3
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d12b      	bne.n	800d4fc <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d4a4:	1dfb      	adds	r3, r7, #7
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	2208      	movs	r2, #8
 800d4aa:	4013      	ands	r3, r2
 800d4ac:	d005      	beq.n	800d4ba <f_open+0x23e>
				mode |= FA_MODIFIED;
 800d4ae:	1dfb      	adds	r3, r7, #7
 800d4b0:	1dfa      	adds	r2, r7, #7
 800d4b2:	7812      	ldrb	r2, [r2, #0]
 800d4b4:	2140      	movs	r1, #64	; 0x40
 800d4b6:	430a      	orrs	r2, r1
 800d4b8:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d4c2:	2118      	movs	r1, #24
 800d4c4:	187b      	adds	r3, r7, r1
 800d4c6:	6a1a      	ldr	r2, [r3, #32]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d4cc:	1dfb      	adds	r3, r7, #7
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	4393      	bics	r3, r2
 800d4d4:	1e5a      	subs	r2, r3, #1
 800d4d6:	4193      	sbcs	r3, r2
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	001a      	movs	r2, r3
 800d4dc:	187b      	adds	r3, r7, r1
 800d4de:	0011      	movs	r1, r2
 800d4e0:	0018      	movs	r0, r3
 800d4e2:	f7fd fd4b 	bl	800af7c <inc_lock>
 800d4e6:	0002      	movs	r2, r0
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	691b      	ldr	r3, [r3, #16]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d103      	bne.n	800d4fc <f_open+0x280>
 800d4f4:	2367      	movs	r3, #103	; 0x67
 800d4f6:	18fb      	adds	r3, r7, r3
 800d4f8:	2202      	movs	r2, #2
 800d4fa:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d4fc:	2367      	movs	r3, #103	; 0x67
 800d4fe:	18fb      	adds	r3, r7, r3
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d000      	beq.n	800d508 <f_open+0x28c>
 800d506:	e0af      	b.n	800d668 <f_open+0x3ec>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d508:	697a      	ldr	r2, [r7, #20]
 800d50a:	2418      	movs	r4, #24
 800d50c:	193b      	adds	r3, r7, r4
 800d50e:	6a1b      	ldr	r3, [r3, #32]
 800d510:	0019      	movs	r1, r3
 800d512:	0010      	movs	r0, r2
 800d514:	f7fe fc5b 	bl	800bdce <ld_clust>
 800d518:	0002      	movs	r2, r0
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d51e:	193b      	adds	r3, r7, r4
 800d520:	6a1b      	ldr	r3, [r3, #32]
 800d522:	331c      	adds	r3, #28
 800d524:	0018      	movs	r0, r3
 800d526:	f7fd fbd4 	bl	800acd2 <ld_dword>
 800d52a:	0002      	movs	r2, r0
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2200      	movs	r2, #0
 800d534:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d536:	697a      	ldr	r2, [r7, #20]
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	88da      	ldrh	r2, [r3, #6]
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	1dfa      	adds	r2, r7, #7
 800d548:	7812      	ldrb	r2, [r2, #0]
 800d54a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2200      	movs	r2, #0
 800d550:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2200      	movs	r2, #0
 800d556:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2200      	movs	r2, #0
 800d55c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	3330      	adds	r3, #48	; 0x30
 800d562:	2280      	movs	r2, #128	; 0x80
 800d564:	0112      	lsls	r2, r2, #4
 800d566:	2100      	movs	r1, #0
 800d568:	0018      	movs	r0, r3
 800d56a:	f7fd fc3a 	bl	800ade2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d56e:	1dfb      	adds	r3, r7, #7
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	2220      	movs	r2, #32
 800d574:	4013      	ands	r3, r2
 800d576:	d100      	bne.n	800d57a <f_open+0x2fe>
 800d578:	e076      	b.n	800d668 <f_open+0x3ec>
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	68db      	ldr	r3, [r3, #12]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d100      	bne.n	800d584 <f_open+0x308>
 800d582:	e071      	b.n	800d668 <f_open+0x3ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	68da      	ldr	r2, [r3, #12]
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	895b      	ldrh	r3, [r3, #10]
 800d590:	001a      	movs	r2, r3
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	899b      	ldrh	r3, [r3, #12]
 800d596:	4353      	muls	r3, r2
 800d598:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5a6:	e019      	b.n	800d5dc <f_open+0x360>
					clst = get_fat(&fp->obj, clst);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d5ac:	0011      	movs	r1, r2
 800d5ae:	0018      	movs	r0, r3
 800d5b0:	f7fd feee 	bl	800b390 <get_fat>
 800d5b4:	0003      	movs	r3, r0
 800d5b6:	663b      	str	r3, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d5b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	d803      	bhi.n	800d5c6 <f_open+0x34a>
 800d5be:	2367      	movs	r3, #103	; 0x67
 800d5c0:	18fb      	adds	r3, r7, r3
 800d5c2:	2202      	movs	r2, #2
 800d5c4:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d5c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d5c8:	3301      	adds	r3, #1
 800d5ca:	d103      	bne.n	800d5d4 <f_open+0x358>
 800d5cc:	2367      	movs	r3, #103	; 0x67
 800d5ce:	18fb      	adds	r3, r7, r3
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d5d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d5d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5d8:	1ad3      	subs	r3, r2, r3
 800d5da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5dc:	2367      	movs	r3, #103	; 0x67
 800d5de:	18fb      	adds	r3, r7, r3
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d103      	bne.n	800d5ee <f_open+0x372>
 800d5e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d5e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d8dc      	bhi.n	800d5a8 <f_open+0x32c>
				}
				fp->clust = clst;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d5f2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d5f4:	2467      	movs	r4, #103	; 0x67
 800d5f6:	193b      	adds	r3, r7, r4
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d134      	bne.n	800d668 <f_open+0x3ec>
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	899b      	ldrh	r3, [r3, #12]
 800d602:	001a      	movs	r2, r3
 800d604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d606:	0011      	movs	r1, r2
 800d608:	0018      	movs	r0, r3
 800d60a:	f7f2 fe29 	bl	8000260 <__aeabi_uidivmod>
 800d60e:	1e0b      	subs	r3, r1, #0
 800d610:	d02a      	beq.n	800d668 <f_open+0x3ec>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d616:	0011      	movs	r1, r2
 800d618:	0018      	movs	r0, r3
 800d61a:	f7fd fe9d 	bl	800b358 <clust2sect>
 800d61e:	0003      	movs	r3, r0
 800d620:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d624:	2b00      	cmp	r3, #0
 800d626:	d103      	bne.n	800d630 <f_open+0x3b4>
						res = FR_INT_ERR;
 800d628:	193b      	adds	r3, r7, r4
 800d62a:	2202      	movs	r2, #2
 800d62c:	701a      	strb	r2, [r3, #0]
 800d62e:	e01b      	b.n	800d668 <f_open+0x3ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	899b      	ldrh	r3, [r3, #12]
 800d634:	0019      	movs	r1, r3
 800d636:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d638:	f7f2 fd8c 	bl	8000154 <__udivsi3>
 800d63c:	0003      	movs	r3, r0
 800d63e:	001a      	movs	r2, r3
 800d640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d642:	18d2      	adds	r2, r2, r3
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	7858      	ldrb	r0, [r3, #1]
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	3330      	adds	r3, #48	; 0x30
 800d650:	0019      	movs	r1, r3
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	6a1a      	ldr	r2, [r3, #32]
 800d656:	2301      	movs	r3, #1
 800d658:	f7fd faa8 	bl	800abac <disk_read>
 800d65c:	1e03      	subs	r3, r0, #0
 800d65e:	d003      	beq.n	800d668 <f_open+0x3ec>
 800d660:	2367      	movs	r3, #103	; 0x67
 800d662:	18fb      	adds	r3, r7, r3
 800d664:	2201      	movs	r2, #1
 800d666:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d668:	2367      	movs	r3, #103	; 0x67
 800d66a:	18fb      	adds	r3, r7, r3
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d002      	beq.n	800d678 <f_open+0x3fc>
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2200      	movs	r2, #0
 800d676:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d678:	2367      	movs	r3, #103	; 0x67
 800d67a:	18fb      	adds	r3, r7, r3
 800d67c:	781b      	ldrb	r3, [r3, #0]
}
 800d67e:	0018      	movs	r0, r3
 800d680:	46bd      	mov	sp, r7
 800d682:	b01b      	add	sp, #108	; 0x6c
 800d684:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d686 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d686:	b5b0      	push	{r4, r5, r7, lr}
 800d688:	b08c      	sub	sp, #48	; 0x30
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	60f8      	str	r0, [r7, #12]
 800d68e:	60b9      	str	r1, [r7, #8]
 800d690:	607a      	str	r2, [r7, #4]
 800d692:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	2200      	movs	r2, #0
 800d69c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	252f      	movs	r5, #47	; 0x2f
 800d6a2:	197c      	adds	r4, r7, r5
 800d6a4:	2210      	movs	r2, #16
 800d6a6:	18ba      	adds	r2, r7, r2
 800d6a8:	0011      	movs	r1, r2
 800d6aa:	0018      	movs	r0, r3
 800d6ac:	f7ff fd5e 	bl	800d16c <validate>
 800d6b0:	0003      	movs	r3, r0
 800d6b2:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d6b4:	197b      	adds	r3, r7, r5
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d107      	bne.n	800d6cc <f_write+0x46>
 800d6bc:	197b      	adds	r3, r7, r5
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	7d52      	ldrb	r2, [r2, #21]
 800d6c2:	701a      	strb	r2, [r3, #0]
 800d6c4:	197b      	adds	r3, r7, r5
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d003      	beq.n	800d6d4 <f_write+0x4e>
 800d6cc:	232f      	movs	r3, #47	; 0x2f
 800d6ce:	18fb      	adds	r3, r7, r3
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	e16f      	b.n	800d9b4 <f_write+0x32e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	7d1b      	ldrb	r3, [r3, #20]
 800d6d8:	001a      	movs	r2, r3
 800d6da:	2302      	movs	r3, #2
 800d6dc:	4013      	ands	r3, r2
 800d6de:	d101      	bne.n	800d6e4 <f_write+0x5e>
 800d6e0:	2307      	movs	r3, #7
 800d6e2:	e167      	b.n	800d9b4 <f_write+0x32e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	699a      	ldr	r2, [r3, #24]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	18d2      	adds	r2, r2, r3
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	699b      	ldr	r3, [r3, #24]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d300      	bcc.n	800d6f6 <f_write+0x70>
 800d6f4:	e150      	b.n	800d998 <f_write+0x312>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	699b      	ldr	r3, [r3, #24]
 800d6fa:	43db      	mvns	r3, r3
 800d6fc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d6fe:	e14b      	b.n	800d998 <f_write+0x312>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	699a      	ldr	r2, [r3, #24]
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	899b      	ldrh	r3, [r3, #12]
 800d708:	0019      	movs	r1, r3
 800d70a:	0010      	movs	r0, r2
 800d70c:	f7f2 fda8 	bl	8000260 <__aeabi_uidivmod>
 800d710:	1e0b      	subs	r3, r1, #0
 800d712:	d000      	beq.n	800d716 <f_write+0x90>
 800d714:	e0f4      	b.n	800d900 <f_write+0x27a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	699a      	ldr	r2, [r3, #24]
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	899b      	ldrh	r3, [r3, #12]
 800d71e:	0019      	movs	r1, r3
 800d720:	0010      	movs	r0, r2
 800d722:	f7f2 fd17 	bl	8000154 <__udivsi3>
 800d726:	0003      	movs	r3, r0
 800d728:	001a      	movs	r2, r3
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	895b      	ldrh	r3, [r3, #10]
 800d72e:	3b01      	subs	r3, #1
 800d730:	4013      	ands	r3, r2
 800d732:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d734:	69bb      	ldr	r3, [r7, #24]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d146      	bne.n	800d7c8 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	699b      	ldr	r3, [r3, #24]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d10d      	bne.n	800d75e <f_write+0xd8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	689b      	ldr	r3, [r3, #8]
 800d746:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d11e      	bne.n	800d78c <f_write+0x106>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2100      	movs	r1, #0
 800d752:	0018      	movs	r0, r3
 800d754:	f7fe f89a 	bl	800b88c <create_chain>
 800d758:	0003      	movs	r3, r0
 800d75a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d75c:	e016      	b.n	800d78c <f_write+0x106>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d762:	2b00      	cmp	r3, #0
 800d764:	d009      	beq.n	800d77a <f_write+0xf4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	699a      	ldr	r2, [r3, #24]
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	0011      	movs	r1, r2
 800d76e:	0018      	movs	r0, r3
 800d770:	f7fe f932 	bl	800b9d8 <clmt_clust>
 800d774:	0003      	movs	r3, r0
 800d776:	62bb      	str	r3, [r7, #40]	; 0x28
 800d778:	e008      	b.n	800d78c <f_write+0x106>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	69db      	ldr	r3, [r3, #28]
 800d780:	0019      	movs	r1, r3
 800d782:	0010      	movs	r0, r2
 800d784:	f7fe f882 	bl	800b88c <create_chain>
 800d788:	0003      	movs	r3, r0
 800d78a:	62bb      	str	r3, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d100      	bne.n	800d794 <f_write+0x10e>
 800d792:	e106      	b.n	800d9a2 <f_write+0x31c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d796:	2b01      	cmp	r3, #1
 800d798:	d104      	bne.n	800d7a4 <f_write+0x11e>
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2202      	movs	r2, #2
 800d79e:	755a      	strb	r2, [r3, #21]
 800d7a0:	2302      	movs	r3, #2
 800d7a2:	e107      	b.n	800d9b4 <f_write+0x32e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	d104      	bne.n	800d7b4 <f_write+0x12e>
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	755a      	strb	r2, [r3, #21]
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e0ff      	b.n	800d9b4 <f_write+0x32e>
				fp->clust = clst;			/* Update current cluster */
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7b8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	689b      	ldr	r3, [r3, #8]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d102      	bne.n	800d7c8 <f_write+0x142>
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7c6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	7d1b      	ldrb	r3, [r3, #20]
 800d7cc:	b25b      	sxtb	r3, r3
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	da17      	bge.n	800d802 <f_write+0x17c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	7858      	ldrb	r0, [r3, #1]
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	3330      	adds	r3, #48	; 0x30
 800d7da:	0019      	movs	r1, r3
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	6a1a      	ldr	r2, [r3, #32]
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	f7fd fa0b 	bl	800abfc <disk_write>
 800d7e6:	1e03      	subs	r3, r0, #0
 800d7e8:	d004      	beq.n	800d7f4 <f_write+0x16e>
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	755a      	strb	r2, [r3, #21]
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e0df      	b.n	800d9b4 <f_write+0x32e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	7d1b      	ldrb	r3, [r3, #20]
 800d7f8:	227f      	movs	r2, #127	; 0x7f
 800d7fa:	4013      	ands	r3, r2
 800d7fc:	b2da      	uxtb	r2, r3
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d802:	693a      	ldr	r2, [r7, #16]
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	69db      	ldr	r3, [r3, #28]
 800d808:	0019      	movs	r1, r3
 800d80a:	0010      	movs	r0, r2
 800d80c:	f7fd fda4 	bl	800b358 <clust2sect>
 800d810:	0003      	movs	r3, r0
 800d812:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d104      	bne.n	800d824 <f_write+0x19e>
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2202      	movs	r2, #2
 800d81e:	755a      	strb	r2, [r3, #21]
 800d820:	2302      	movs	r3, #2
 800d822:	e0c7      	b.n	800d9b4 <f_write+0x32e>
			sect += csect;
 800d824:	697a      	ldr	r2, [r7, #20]
 800d826:	69bb      	ldr	r3, [r7, #24]
 800d828:	18d3      	adds	r3, r2, r3
 800d82a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	899b      	ldrh	r3, [r3, #12]
 800d830:	0019      	movs	r1, r3
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f7f2 fc8e 	bl	8000154 <__udivsi3>
 800d838:	0003      	movs	r3, r0
 800d83a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d83c:	6a3b      	ldr	r3, [r7, #32]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d040      	beq.n	800d8c4 <f_write+0x23e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d842:	69ba      	ldr	r2, [r7, #24]
 800d844:	6a3b      	ldr	r3, [r7, #32]
 800d846:	18d3      	adds	r3, r2, r3
 800d848:	693a      	ldr	r2, [r7, #16]
 800d84a:	8952      	ldrh	r2, [r2, #10]
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d905      	bls.n	800d85c <f_write+0x1d6>
					cc = fs->csize - csect;
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	895b      	ldrh	r3, [r3, #10]
 800d854:	001a      	movs	r2, r3
 800d856:	69bb      	ldr	r3, [r7, #24]
 800d858:	1ad3      	subs	r3, r2, r3
 800d85a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	7858      	ldrb	r0, [r3, #1]
 800d860:	6a3b      	ldr	r3, [r7, #32]
 800d862:	697a      	ldr	r2, [r7, #20]
 800d864:	69f9      	ldr	r1, [r7, #28]
 800d866:	f7fd f9c9 	bl	800abfc <disk_write>
 800d86a:	1e03      	subs	r3, r0, #0
 800d86c:	d004      	beq.n	800d878 <f_write+0x1f2>
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2201      	movs	r2, #1
 800d872:	755a      	strb	r2, [r3, #21]
 800d874:	2301      	movs	r3, #1
 800d876:	e09d      	b.n	800d9b4 <f_write+0x32e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	6a1a      	ldr	r2, [r3, #32]
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	1ad3      	subs	r3, r2, r3
 800d880:	6a3a      	ldr	r2, [r7, #32]
 800d882:	429a      	cmp	r2, r3
 800d884:	d917      	bls.n	800d8b6 <f_write+0x230>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	3330      	adds	r3, #48	; 0x30
 800d88a:	0018      	movs	r0, r3
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	6a1a      	ldr	r2, [r3, #32]
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	1ad3      	subs	r3, r2, r3
 800d894:	693a      	ldr	r2, [r7, #16]
 800d896:	8992      	ldrh	r2, [r2, #12]
 800d898:	4353      	muls	r3, r2
 800d89a:	69fa      	ldr	r2, [r7, #28]
 800d89c:	18d1      	adds	r1, r2, r3
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	899b      	ldrh	r3, [r3, #12]
 800d8a2:	001a      	movs	r2, r3
 800d8a4:	f7fd fa7e 	bl	800ada4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	7d1b      	ldrb	r3, [r3, #20]
 800d8ac:	227f      	movs	r2, #127	; 0x7f
 800d8ae:	4013      	ands	r3, r2
 800d8b0:	b2da      	uxtb	r2, r3
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	899b      	ldrh	r3, [r3, #12]
 800d8ba:	001a      	movs	r2, r3
 800d8bc:	6a3b      	ldr	r3, [r7, #32]
 800d8be:	4353      	muls	r3, r2
 800d8c0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d8c2:	e04b      	b.n	800d95c <f_write+0x2d6>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	6a1b      	ldr	r3, [r3, #32]
 800d8c8:	697a      	ldr	r2, [r7, #20]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d015      	beq.n	800d8fa <f_write+0x274>
				fp->fptr < fp->obj.objsize &&
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	699a      	ldr	r2, [r3, #24]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d20f      	bcs.n	800d8fa <f_write+0x274>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	7858      	ldrb	r0, [r3, #1]
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	3330      	adds	r3, #48	; 0x30
 800d8e2:	0019      	movs	r1, r3
 800d8e4:	697a      	ldr	r2, [r7, #20]
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	f7fd f960 	bl	800abac <disk_read>
 800d8ec:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 800d8ee:	d004      	beq.n	800d8fa <f_write+0x274>
					ABORT(fs, FR_DISK_ERR);
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	755a      	strb	r2, [r3, #21]
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	e05c      	b.n	800d9b4 <f_write+0x32e>
			}
#endif
			fp->sect = sect;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	697a      	ldr	r2, [r7, #20]
 800d8fe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	899b      	ldrh	r3, [r3, #12]
 800d904:	001c      	movs	r4, r3
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	699a      	ldr	r2, [r3, #24]
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	899b      	ldrh	r3, [r3, #12]
 800d90e:	0019      	movs	r1, r3
 800d910:	0010      	movs	r0, r2
 800d912:	f7f2 fca5 	bl	8000260 <__aeabi_uidivmod>
 800d916:	000b      	movs	r3, r1
 800d918:	1ae3      	subs	r3, r4, r3
 800d91a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d91c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	429a      	cmp	r2, r3
 800d922:	d901      	bls.n	800d928 <f_write+0x2a2>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	3330      	adds	r3, #48	; 0x30
 800d92c:	001c      	movs	r4, r3
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	699a      	ldr	r2, [r3, #24]
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	899b      	ldrh	r3, [r3, #12]
 800d936:	0019      	movs	r1, r3
 800d938:	0010      	movs	r0, r2
 800d93a:	f7f2 fc91 	bl	8000260 <__aeabi_uidivmod>
 800d93e:	000b      	movs	r3, r1
 800d940:	18e3      	adds	r3, r4, r3
 800d942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d944:	69f9      	ldr	r1, [r7, #28]
 800d946:	0018      	movs	r0, r3
 800d948:	f7fd fa2c 	bl	800ada4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	7d1b      	ldrb	r3, [r3, #20]
 800d950:	2280      	movs	r2, #128	; 0x80
 800d952:	4252      	negs	r2, r2
 800d954:	4313      	orrs	r3, r2
 800d956:	b2da      	uxtb	r2, r3
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d95c:	69fa      	ldr	r2, [r7, #28]
 800d95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d960:	18d3      	adds	r3, r2, r3
 800d962:	61fb      	str	r3, [r7, #28]
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	699a      	ldr	r2, [r3, #24]
 800d968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96a:	18d2      	adds	r2, r2, r3
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	619a      	str	r2, [r3, #24]
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	68d9      	ldr	r1, [r3, #12]
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	699a      	ldr	r2, [r3, #24]
 800d978:	000b      	movs	r3, r1
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d200      	bcs.n	800d980 <f_write+0x2fa>
 800d97e:	0013      	movs	r3, r2
 800d980:	68fa      	ldr	r2, [r7, #12]
 800d982:	60d3      	str	r3, [r2, #12]
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98a:	18d2      	adds	r2, r2, r3
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	601a      	str	r2, [r3, #0]
 800d990:	687a      	ldr	r2, [r7, #4]
 800d992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d994:	1ad3      	subs	r3, r2, r3
 800d996:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d000      	beq.n	800d9a0 <f_write+0x31a>
 800d99e:	e6af      	b.n	800d700 <f_write+0x7a>
 800d9a0:	e000      	b.n	800d9a4 <f_write+0x31e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d9a2:	46c0      	nop			; (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	7d1b      	ldrb	r3, [r3, #20]
 800d9a8:	2240      	movs	r2, #64	; 0x40
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	b2da      	uxtb	r2, r3
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d9b2:	2300      	movs	r3, #0
}
 800d9b4:	0018      	movs	r0, r3
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	b00c      	add	sp, #48	; 0x30
 800d9ba:	bdb0      	pop	{r4, r5, r7, pc}

0800d9bc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d9bc:	b5b0      	push	{r4, r5, r7, lr}
 800d9be:	b086      	sub	sp, #24
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2517      	movs	r5, #23
 800d9c8:	197c      	adds	r4, r7, r5
 800d9ca:	2208      	movs	r2, #8
 800d9cc:	18ba      	adds	r2, r7, r2
 800d9ce:	0011      	movs	r1, r2
 800d9d0:	0018      	movs	r0, r3
 800d9d2:	f7ff fbcb 	bl	800d16c <validate>
 800d9d6:	0003      	movs	r3, r0
 800d9d8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800d9da:	197b      	adds	r3, r7, r5
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d16e      	bne.n	800dac0 <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	7d1b      	ldrb	r3, [r3, #20]
 800d9e6:	001a      	movs	r2, r3
 800d9e8:	2340      	movs	r3, #64	; 0x40
 800d9ea:	4013      	ands	r3, r2
 800d9ec:	d068      	beq.n	800dac0 <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	7d1b      	ldrb	r3, [r3, #20]
 800d9f2:	b25b      	sxtb	r3, r3
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	da14      	bge.n	800da22 <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	7858      	ldrb	r0, [r3, #1]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	3330      	adds	r3, #48	; 0x30
 800da00:	0019      	movs	r1, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6a1a      	ldr	r2, [r3, #32]
 800da06:	2301      	movs	r3, #1
 800da08:	f7fd f8f8 	bl	800abfc <disk_write>
 800da0c:	1e03      	subs	r3, r0, #0
 800da0e:	d001      	beq.n	800da14 <f_sync+0x58>
 800da10:	2301      	movs	r3, #1
 800da12:	e058      	b.n	800dac6 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	7d1b      	ldrb	r3, [r3, #20]
 800da18:	227f      	movs	r2, #127	; 0x7f
 800da1a:	4013      	ands	r3, r2
 800da1c:	b2da      	uxtb	r2, r3
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800da22:	f7fd f805 	bl	800aa30 <get_fattime>
 800da26:	0003      	movs	r3, r0
 800da28:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800da2a:	68ba      	ldr	r2, [r7, #8]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da30:	2517      	movs	r5, #23
 800da32:	197c      	adds	r4, r7, r5
 800da34:	0019      	movs	r1, r3
 800da36:	0010      	movs	r0, r2
 800da38:	f7fd fbdc 	bl	800b1f4 <move_window>
 800da3c:	0003      	movs	r3, r0
 800da3e:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 800da40:	002c      	movs	r4, r5
 800da42:	193b      	adds	r3, r7, r4
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d13a      	bne.n	800dac0 <f_sync+0x104>
					dir = fp->dir_ptr;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da4e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	330b      	adds	r3, #11
 800da54:	781a      	ldrb	r2, [r3, #0]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	330b      	adds	r3, #11
 800da5a:	2120      	movs	r1, #32
 800da5c:	430a      	orrs	r2, r1
 800da5e:	b2d2      	uxtb	r2, r2
 800da60:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6818      	ldr	r0, [r3, #0]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	689a      	ldr	r2, [r3, #8]
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	0019      	movs	r1, r3
 800da6e:	f7fe f9cd 	bl	800be0c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	331c      	adds	r3, #28
 800da76:	001a      	movs	r2, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	68db      	ldr	r3, [r3, #12]
 800da7c:	0019      	movs	r1, r3
 800da7e:	0010      	movs	r0, r2
 800da80:	f7fd f966 	bl	800ad50 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	3316      	adds	r3, #22
 800da88:	693a      	ldr	r2, [r7, #16]
 800da8a:	0011      	movs	r1, r2
 800da8c:	0018      	movs	r0, r3
 800da8e:	f7fd f95f 	bl	800ad50 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	3312      	adds	r3, #18
 800da96:	2100      	movs	r1, #0
 800da98:	0018      	movs	r0, r3
 800da9a:	f7fd f93b 	bl	800ad14 <st_word>
					fs->wflag = 1;
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	2201      	movs	r2, #1
 800daa2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	193c      	adds	r4, r7, r4
 800daa8:	0018      	movs	r0, r3
 800daaa:	f7fd fbd9 	bl	800b260 <sync_fs>
 800daae:	0003      	movs	r3, r0
 800dab0:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	7d1b      	ldrb	r3, [r3, #20]
 800dab6:	2240      	movs	r2, #64	; 0x40
 800dab8:	4393      	bics	r3, r2
 800daba:	b2da      	uxtb	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dac0:	2317      	movs	r3, #23
 800dac2:	18fb      	adds	r3, r7, r3
 800dac4:	781b      	ldrb	r3, [r3, #0]
}
 800dac6:	0018      	movs	r0, r3
 800dac8:	46bd      	mov	sp, r7
 800daca:	b006      	add	sp, #24
 800dacc:	bdb0      	pop	{r4, r5, r7, pc}

0800dace <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dace:	b5b0      	push	{r4, r5, r7, lr}
 800dad0:	b084      	sub	sp, #16
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dad6:	250f      	movs	r5, #15
 800dad8:	197c      	adds	r4, r7, r5
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	0018      	movs	r0, r3
 800dade:	f7ff ff6d 	bl	800d9bc <f_sync>
 800dae2:	0003      	movs	r3, r0
 800dae4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 800dae6:	197b      	adds	r3, r7, r5
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d11c      	bne.n	800db28 <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	197c      	adds	r4, r7, r5
 800daf2:	2208      	movs	r2, #8
 800daf4:	18ba      	adds	r2, r7, r2
 800daf6:	0011      	movs	r1, r2
 800daf8:	0018      	movs	r0, r3
 800dafa:	f7ff fb37 	bl	800d16c <validate>
 800dafe:	0003      	movs	r3, r0
 800db00:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800db02:	197b      	adds	r3, r7, r5
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d10e      	bne.n	800db28 <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	691b      	ldr	r3, [r3, #16]
 800db0e:	197c      	adds	r4, r7, r5
 800db10:	0018      	movs	r0, r3
 800db12:	f7fd fabd 	bl	800b090 <dec_lock>
 800db16:	0003      	movs	r3, r0
 800db18:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 800db1a:	197b      	adds	r3, r7, r5
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d102      	bne.n	800db28 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2200      	movs	r2, #0
 800db26:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800db28:	230f      	movs	r3, #15
 800db2a:	18fb      	adds	r3, r7, r3
 800db2c:	781b      	ldrb	r3, [r3, #0]
}
 800db2e:	0018      	movs	r0, r3
 800db30:	46bd      	mov	sp, r7
 800db32:	b004      	add	sp, #16
 800db34:	bdb0      	pop	{r4, r5, r7, pc}

0800db36 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800db36:	b580      	push	{r7, lr}
 800db38:	b084      	sub	sp, #16
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
 800db3e:	000a      	movs	r2, r1
 800db40:	1cfb      	adds	r3, r7, #3
 800db42:	701a      	strb	r2, [r3, #0]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800db44:	1cfb      	adds	r3, r7, #3
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	2b0a      	cmp	r3, #10
 800db4a:	d104      	bne.n	800db56 <putc_bfd+0x20>
		putc_bfd(pb, '\r');
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	210d      	movs	r1, #13
 800db50:	0018      	movs	r0, r3
 800db52:	f7ff fff0 	bl	800db36 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	db26      	blt.n	800dbb0 <putc_bfd+0x7a>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	1c5a      	adds	r2, r3, #1
 800db66:	60fa      	str	r2, [r7, #12]
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	18d3      	adds	r3, r2, r3
 800db6c:	1cfa      	adds	r2, r7, #3
 800db6e:	7812      	ldrb	r2, [r2, #0]
 800db70:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2b3c      	cmp	r3, #60	; 0x3c
 800db76:	dd12      	ble.n	800db9e <putc_bfd+0x68>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6818      	ldr	r0, [r3, #0]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	330c      	adds	r3, #12
 800db80:	0019      	movs	r1, r3
 800db82:	68fa      	ldr	r2, [r7, #12]
 800db84:	2308      	movs	r3, #8
 800db86:	18fb      	adds	r3, r7, r3
 800db88:	f7ff fd7d 	bl	800d686 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800db8c:	68ba      	ldr	r2, [r7, #8]
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	429a      	cmp	r2, r3
 800db92:	d101      	bne.n	800db98 <putc_bfd+0x62>
 800db94:	2300      	movs	r3, #0
 800db96:	e001      	b.n	800db9c <putc_bfd+0x66>
 800db98:	2301      	movs	r3, #1
 800db9a:	425b      	negs	r3, r3
 800db9c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	68fa      	ldr	r2, [r7, #12]
 800dba2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	689b      	ldr	r3, [r3, #8]
 800dba8:	1c5a      	adds	r2, r3, #1
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	609a      	str	r2, [r3, #8]
 800dbae:	e000      	b.n	800dbb2 <putc_bfd+0x7c>
	if (i < 0) return;
 800dbb0:	46c0      	nop			; (mov r8, r8)
}
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	b004      	add	sp, #16
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	db15      	blt.n	800dbf4 <putc_flush+0x3c>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6818      	ldr	r0, [r3, #0]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	330c      	adds	r3, #12
 800dbd0:	0019      	movs	r1, r3
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	685b      	ldr	r3, [r3, #4]
 800dbd6:	001a      	movs	r2, r3
 800dbd8:	230c      	movs	r3, #12
 800dbda:	18fb      	adds	r3, r7, r3
 800dbdc:	f7ff fd53 	bl	800d686 <f_write>
 800dbe0:	1e03      	subs	r3, r0, #0
 800dbe2:	d107      	bne.n	800dbf4 <putc_flush+0x3c>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	68fa      	ldr	r2, [r7, #12]
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d102      	bne.n	800dbf4 <putc_flush+0x3c>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	689b      	ldr	r3, [r3, #8]
 800dbf2:	e001      	b.n	800dbf8 <putc_flush+0x40>
	return EOF;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	425b      	negs	r3, r3
}
 800dbf8:	0018      	movs	r0, r3
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	b004      	add	sp, #16
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	683a      	ldr	r2, [r7, #0]
 800dc0e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2200      	movs	r2, #0
 800dc14:	605a      	str	r2, [r3, #4]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	685a      	ldr	r2, [r3, #4]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	609a      	str	r2, [r3, #8]
}
 800dc1e:	46c0      	nop			; (mov r8, r8)
 800dc20:	46bd      	mov	sp, r7
 800dc22:	b002      	add	sp, #8
 800dc24:	bd80      	pop	{r7, pc}

0800dc26 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800dc26:	b580      	push	{r7, lr}
 800dc28:	b096      	sub	sp, #88	; 0x58
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
 800dc2e:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800dc30:	683a      	ldr	r2, [r7, #0]
 800dc32:	230c      	movs	r3, #12
 800dc34:	18fb      	adds	r3, r7, r3
 800dc36:	0011      	movs	r1, r2
 800dc38:	0018      	movs	r0, r3
 800dc3a:	f7ff ffe1 	bl	800dc00 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800dc3e:	e009      	b.n	800dc54 <f_puts+0x2e>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	1c5a      	adds	r2, r3, #1
 800dc44:	607a      	str	r2, [r7, #4]
 800dc46:	781a      	ldrb	r2, [r3, #0]
 800dc48:	230c      	movs	r3, #12
 800dc4a:	18fb      	adds	r3, r7, r3
 800dc4c:	0011      	movs	r1, r2
 800dc4e:	0018      	movs	r0, r3
 800dc50:	f7ff ff71 	bl	800db36 <putc_bfd>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d1f1      	bne.n	800dc40 <f_puts+0x1a>
	return putc_flush(&pb);
 800dc5c:	230c      	movs	r3, #12
 800dc5e:	18fb      	adds	r3, r7, r3
 800dc60:	0018      	movs	r0, r3
 800dc62:	f7ff ffa9 	bl	800dbb8 <putc_flush>
 800dc66:	0003      	movs	r3, r0
}
 800dc68:	0018      	movs	r0, r3
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	b016      	add	sp, #88	; 0x58
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dc70:	b590      	push	{r4, r7, lr}
 800dc72:	b087      	sub	sp, #28
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	60f8      	str	r0, [r7, #12]
 800dc78:	60b9      	str	r1, [r7, #8]
 800dc7a:	1dfb      	adds	r3, r7, #7
 800dc7c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 800dc7e:	2417      	movs	r4, #23
 800dc80:	193b      	adds	r3, r7, r4
 800dc82:	2201      	movs	r2, #1
 800dc84:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800dc86:	2016      	movs	r0, #22
 800dc88:	183b      	adds	r3, r7, r0
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 800dc8e:	4b21      	ldr	r3, [pc, #132]	; (800dd14 <FATFS_LinkDriverEx+0xa4>)
 800dc90:	7a5b      	ldrb	r3, [r3, #9]
 800dc92:	b2db      	uxtb	r3, r3
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d136      	bne.n	800dd06 <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dc98:	4b1e      	ldr	r3, [pc, #120]	; (800dd14 <FATFS_LinkDriverEx+0xa4>)
 800dc9a:	7a5b      	ldrb	r3, [r3, #9]
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	001a      	movs	r2, r3
 800dca0:	4b1c      	ldr	r3, [pc, #112]	; (800dd14 <FATFS_LinkDriverEx+0xa4>)
 800dca2:	2100      	movs	r1, #0
 800dca4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dca6:	4b1b      	ldr	r3, [pc, #108]	; (800dd14 <FATFS_LinkDriverEx+0xa4>)
 800dca8:	7a5b      	ldrb	r3, [r3, #9]
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	4a19      	ldr	r2, [pc, #100]	; (800dd14 <FATFS_LinkDriverEx+0xa4>)
 800dcae:	009b      	lsls	r3, r3, #2
 800dcb0:	18d3      	adds	r3, r2, r3
 800dcb2:	3304      	adds	r3, #4
 800dcb4:	68fa      	ldr	r2, [r7, #12]
 800dcb6:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 800dcb8:	4b16      	ldr	r3, [pc, #88]	; (800dd14 <FATFS_LinkDriverEx+0xa4>)
 800dcba:	7a5b      	ldrb	r3, [r3, #9]
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	001a      	movs	r2, r3
 800dcc0:	4b14      	ldr	r3, [pc, #80]	; (800dd14 <FATFS_LinkDriverEx+0xa4>)
 800dcc2:	189b      	adds	r3, r3, r2
 800dcc4:	1dfa      	adds	r2, r7, #7
 800dcc6:	7812      	ldrb	r2, [r2, #0]
 800dcc8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dcca:	4b12      	ldr	r3, [pc, #72]	; (800dd14 <FATFS_LinkDriverEx+0xa4>)
 800dccc:	7a5b      	ldrb	r3, [r3, #9]
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	1c5a      	adds	r2, r3, #1
 800dcd2:	b2d1      	uxtb	r1, r2
 800dcd4:	4a0f      	ldr	r2, [pc, #60]	; (800dd14 <FATFS_LinkDriverEx+0xa4>)
 800dcd6:	7251      	strb	r1, [r2, #9]
 800dcd8:	183a      	adds	r2, r7, r0
 800dcda:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 800dcdc:	183b      	adds	r3, r7, r0
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	3330      	adds	r3, #48	; 0x30
 800dce2:	b2da      	uxtb	r2, r3
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	3301      	adds	r3, #1
 800dcec:	223a      	movs	r2, #58	; 0x3a
 800dcee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	3302      	adds	r3, #2
 800dcf4:	222f      	movs	r2, #47	; 0x2f
 800dcf6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	3303      	adds	r3, #3
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dd00:	193b      	adds	r3, r7, r4
 800dd02:	2200      	movs	r2, #0
 800dd04:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800dd06:	2317      	movs	r3, #23
 800dd08:	18fb      	adds	r3, r7, r3
 800dd0a:	781b      	ldrb	r3, [r3, #0]
}
 800dd0c:	0018      	movs	r0, r3
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	b007      	add	sp, #28
 800dd12:	bd90      	pop	{r4, r7, pc}
 800dd14:	20003e14 	.word	0x20003e14

0800dd18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dd22:	6839      	ldr	r1, [r7, #0]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2200      	movs	r2, #0
 800dd28:	0018      	movs	r0, r3
 800dd2a:	f7ff ffa1 	bl	800dc70 <FATFS_LinkDriverEx>
 800dd2e:	0003      	movs	r3, r0
}
 800dd30:	0018      	movs	r0, r3
 800dd32:	46bd      	mov	sp, r7
 800dd34:	b002      	add	sp, #8
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	0002      	movs	r2, r0
 800dd40:	6039      	str	r1, [r7, #0]
 800dd42:	1dbb      	adds	r3, r7, #6
 800dd44:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dd46:	1dbb      	adds	r3, r7, #6
 800dd48:	881b      	ldrh	r3, [r3, #0]
 800dd4a:	2b7f      	cmp	r3, #127	; 0x7f
 800dd4c:	d805      	bhi.n	800dd5a <ff_convert+0x22>
		c = chr;
 800dd4e:	230e      	movs	r3, #14
 800dd50:	18fb      	adds	r3, r7, r3
 800dd52:	1dba      	adds	r2, r7, #6
 800dd54:	8812      	ldrh	r2, [r2, #0]
 800dd56:	801a      	strh	r2, [r3, #0]
 800dd58:	e037      	b.n	800ddca <ff_convert+0x92>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d010      	beq.n	800dd82 <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dd60:	1dbb      	adds	r3, r7, #6
 800dd62:	881b      	ldrh	r3, [r3, #0]
 800dd64:	2bff      	cmp	r3, #255	; 0xff
 800dd66:	d807      	bhi.n	800dd78 <ff_convert+0x40>
 800dd68:	1dbb      	adds	r3, r7, #6
 800dd6a:	881b      	ldrh	r3, [r3, #0]
 800dd6c:	3b80      	subs	r3, #128	; 0x80
 800dd6e:	001a      	movs	r2, r3
 800dd70:	4b19      	ldr	r3, [pc, #100]	; (800ddd8 <ff_convert+0xa0>)
 800dd72:	0052      	lsls	r2, r2, #1
 800dd74:	5ad2      	ldrh	r2, [r2, r3]
 800dd76:	e000      	b.n	800dd7a <ff_convert+0x42>
 800dd78:	2200      	movs	r2, #0
 800dd7a:	230e      	movs	r3, #14
 800dd7c:	18fb      	adds	r3, r7, r3
 800dd7e:	801a      	strh	r2, [r3, #0]
 800dd80:	e023      	b.n	800ddca <ff_convert+0x92>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800dd82:	230e      	movs	r3, #14
 800dd84:	18fb      	adds	r3, r7, r3
 800dd86:	2200      	movs	r2, #0
 800dd88:	801a      	strh	r2, [r3, #0]
 800dd8a:	e00e      	b.n	800ddaa <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 800dd8c:	210e      	movs	r1, #14
 800dd8e:	187b      	adds	r3, r7, r1
 800dd90:	881a      	ldrh	r2, [r3, #0]
 800dd92:	4b11      	ldr	r3, [pc, #68]	; (800ddd8 <ff_convert+0xa0>)
 800dd94:	0052      	lsls	r2, r2, #1
 800dd96:	5ad3      	ldrh	r3, [r2, r3]
 800dd98:	1dba      	adds	r2, r7, #6
 800dd9a:	8812      	ldrh	r2, [r2, #0]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d00a      	beq.n	800ddb6 <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 800dda0:	187b      	adds	r3, r7, r1
 800dda2:	881a      	ldrh	r2, [r3, #0]
 800dda4:	187b      	adds	r3, r7, r1
 800dda6:	3201      	adds	r2, #1
 800dda8:	801a      	strh	r2, [r3, #0]
 800ddaa:	230e      	movs	r3, #14
 800ddac:	18fb      	adds	r3, r7, r3
 800ddae:	881b      	ldrh	r3, [r3, #0]
 800ddb0:	2b7f      	cmp	r3, #127	; 0x7f
 800ddb2:	d9eb      	bls.n	800dd8c <ff_convert+0x54>
 800ddb4:	e000      	b.n	800ddb8 <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 800ddb6:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 800ddb8:	210e      	movs	r1, #14
 800ddba:	187b      	adds	r3, r7, r1
 800ddbc:	881b      	ldrh	r3, [r3, #0]
 800ddbe:	3380      	adds	r3, #128	; 0x80
 800ddc0:	b29a      	uxth	r2, r3
 800ddc2:	187b      	adds	r3, r7, r1
 800ddc4:	21ff      	movs	r1, #255	; 0xff
 800ddc6:	400a      	ands	r2, r1
 800ddc8:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 800ddca:	230e      	movs	r3, #14
 800ddcc:	18fb      	adds	r3, r7, r3
 800ddce:	881b      	ldrh	r3, [r3, #0]
}
 800ddd0:	0018      	movs	r0, r3
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	b004      	add	sp, #16
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	080137a4 	.word	0x080137a4

0800dddc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800dddc:	b5b0      	push	{r4, r5, r7, lr}
 800ddde:	b086      	sub	sp, #24
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	0002      	movs	r2, r0
 800dde4:	1dbb      	adds	r3, r7, #6
 800dde6:	801a      	strh	r2, [r3, #0]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800dde8:	1dbb      	adds	r3, r7, #6
 800ddea:	881a      	ldrh	r2, [r3, #0]
 800ddec:	2380      	movs	r3, #128	; 0x80
 800ddee:	015b      	lsls	r3, r3, #5
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d201      	bcs.n	800ddf8 <ff_wtoupper+0x1c>
 800ddf4:	4b4d      	ldr	r3, [pc, #308]	; (800df2c <ff_wtoupper+0x150>)
 800ddf6:	e000      	b.n	800ddfa <ff_wtoupper+0x1e>
 800ddf8:	4b4d      	ldr	r3, [pc, #308]	; (800df30 <ff_wtoupper+0x154>)
 800ddfa:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	1c9a      	adds	r2, r3, #2
 800de00:	617a      	str	r2, [r7, #20]
 800de02:	2412      	movs	r4, #18
 800de04:	193a      	adds	r2, r7, r4
 800de06:	881b      	ldrh	r3, [r3, #0]
 800de08:	8013      	strh	r3, [r2, #0]
		if (!bc || chr < bc) break;
 800de0a:	193b      	adds	r3, r7, r4
 800de0c:	881b      	ldrh	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d100      	bne.n	800de14 <ff_wtoupper+0x38>
 800de12:	e084      	b.n	800df1e <ff_wtoupper+0x142>
 800de14:	1dba      	adds	r2, r7, #6
 800de16:	193b      	adds	r3, r7, r4
 800de18:	8812      	ldrh	r2, [r2, #0]
 800de1a:	881b      	ldrh	r3, [r3, #0]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d200      	bcs.n	800de22 <ff_wtoupper+0x46>
 800de20:	e07d      	b.n	800df1e <ff_wtoupper+0x142>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	1c9a      	adds	r2, r3, #2
 800de26:	617a      	str	r2, [r7, #20]
 800de28:	2010      	movs	r0, #16
 800de2a:	183a      	adds	r2, r7, r0
 800de2c:	881b      	ldrh	r3, [r3, #0]
 800de2e:	8013      	strh	r3, [r2, #0]
 800de30:	250e      	movs	r5, #14
 800de32:	197b      	adds	r3, r7, r5
 800de34:	183a      	adds	r2, r7, r0
 800de36:	8812      	ldrh	r2, [r2, #0]
 800de38:	0a12      	lsrs	r2, r2, #8
 800de3a:	801a      	strh	r2, [r3, #0]
 800de3c:	183b      	adds	r3, r7, r0
 800de3e:	183a      	adds	r2, r7, r0
 800de40:	8812      	ldrh	r2, [r2, #0]
 800de42:	21ff      	movs	r1, #255	; 0xff
 800de44:	400a      	ands	r2, r1
 800de46:	801a      	strh	r2, [r3, #0]
		if (chr < bc + nc) {	/* In the block? */
 800de48:	1dbb      	adds	r3, r7, #6
 800de4a:	881a      	ldrh	r2, [r3, #0]
 800de4c:	193b      	adds	r3, r7, r4
 800de4e:	8819      	ldrh	r1, [r3, #0]
 800de50:	183b      	adds	r3, r7, r0
 800de52:	881b      	ldrh	r3, [r3, #0]
 800de54:	18cb      	adds	r3, r1, r3
 800de56:	429a      	cmp	r2, r3
 800de58:	da52      	bge.n	800df00 <ff_wtoupper+0x124>
			switch (cmd) {
 800de5a:	197b      	adds	r3, r7, r5
 800de5c:	881b      	ldrh	r3, [r3, #0]
 800de5e:	2b08      	cmp	r3, #8
 800de60:	d85c      	bhi.n	800df1c <ff_wtoupper+0x140>
 800de62:	009a      	lsls	r2, r3, #2
 800de64:	4b33      	ldr	r3, [pc, #204]	; (800df34 <ff_wtoupper+0x158>)
 800de66:	18d3      	adds	r3, r2, r3
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	469f      	mov	pc, r3
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800de6c:	1dbb      	adds	r3, r7, #6
 800de6e:	881a      	ldrh	r2, [r3, #0]
 800de70:	2312      	movs	r3, #18
 800de72:	18fb      	adds	r3, r7, r3
 800de74:	881b      	ldrh	r3, [r3, #0]
 800de76:	1ad3      	subs	r3, r2, r3
 800de78:	005b      	lsls	r3, r3, #1
 800de7a:	697a      	ldr	r2, [r7, #20]
 800de7c:	18d2      	adds	r2, r2, r3
 800de7e:	1dbb      	adds	r3, r7, #6
 800de80:	8812      	ldrh	r2, [r2, #0]
 800de82:	801a      	strh	r2, [r3, #0]
 800de84:	e03b      	b.n	800defe <ff_wtoupper+0x122>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800de86:	1dba      	adds	r2, r7, #6
 800de88:	2312      	movs	r3, #18
 800de8a:	18fb      	adds	r3, r7, r3
 800de8c:	8812      	ldrh	r2, [r2, #0]
 800de8e:	881b      	ldrh	r3, [r3, #0]
 800de90:	1ad3      	subs	r3, r2, r3
 800de92:	b29b      	uxth	r3, r3
 800de94:	2201      	movs	r2, #1
 800de96:	4013      	ands	r3, r2
 800de98:	b29a      	uxth	r2, r3
 800de9a:	1dbb      	adds	r3, r7, #6
 800de9c:	1db9      	adds	r1, r7, #6
 800de9e:	8809      	ldrh	r1, [r1, #0]
 800dea0:	1a8a      	subs	r2, r1, r2
 800dea2:	801a      	strh	r2, [r3, #0]
 800dea4:	e02b      	b.n	800defe <ff_wtoupper+0x122>
			case 2: chr -= 16; break;				/* Shift -16 */
 800dea6:	1dbb      	adds	r3, r7, #6
 800dea8:	1dba      	adds	r2, r7, #6
 800deaa:	8812      	ldrh	r2, [r2, #0]
 800deac:	3a10      	subs	r2, #16
 800deae:	801a      	strh	r2, [r3, #0]
 800deb0:	e025      	b.n	800defe <ff_wtoupper+0x122>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800deb2:	1dbb      	adds	r3, r7, #6
 800deb4:	1dba      	adds	r2, r7, #6
 800deb6:	8812      	ldrh	r2, [r2, #0]
 800deb8:	3a20      	subs	r2, #32
 800deba:	801a      	strh	r2, [r3, #0]
 800debc:	e01f      	b.n	800defe <ff_wtoupper+0x122>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800debe:	1dbb      	adds	r3, r7, #6
 800dec0:	1dba      	adds	r2, r7, #6
 800dec2:	8812      	ldrh	r2, [r2, #0]
 800dec4:	3a30      	subs	r2, #48	; 0x30
 800dec6:	801a      	strh	r2, [r3, #0]
 800dec8:	e019      	b.n	800defe <ff_wtoupper+0x122>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800deca:	1dbb      	adds	r3, r7, #6
 800decc:	1dba      	adds	r2, r7, #6
 800dece:	8812      	ldrh	r2, [r2, #0]
 800ded0:	3a1a      	subs	r2, #26
 800ded2:	801a      	strh	r2, [r3, #0]
 800ded4:	e013      	b.n	800defe <ff_wtoupper+0x122>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ded6:	1dbb      	adds	r3, r7, #6
 800ded8:	1dba      	adds	r2, r7, #6
 800deda:	8812      	ldrh	r2, [r2, #0]
 800dedc:	3208      	adds	r2, #8
 800dede:	801a      	strh	r2, [r3, #0]
 800dee0:	e00d      	b.n	800defe <ff_wtoupper+0x122>
			case 7: chr -= 80; break;				/* Shift -80 */
 800dee2:	1dbb      	adds	r3, r7, #6
 800dee4:	1dba      	adds	r2, r7, #6
 800dee6:	8812      	ldrh	r2, [r2, #0]
 800dee8:	3a50      	subs	r2, #80	; 0x50
 800deea:	801a      	strh	r2, [r3, #0]
 800deec:	e007      	b.n	800defe <ff_wtoupper+0x122>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800deee:	1dbb      	adds	r3, r7, #6
 800def0:	1dba      	adds	r2, r7, #6
 800def2:	8812      	ldrh	r2, [r2, #0]
 800def4:	4910      	ldr	r1, [pc, #64]	; (800df38 <ff_wtoupper+0x15c>)
 800def6:	468c      	mov	ip, r1
 800def8:	4462      	add	r2, ip
 800defa:	801a      	strh	r2, [r3, #0]
 800defc:	46c0      	nop			; (mov r8, r8)
			}
			break;
 800defe:	e00d      	b.n	800df1c <ff_wtoupper+0x140>
		}
		if (!cmd) p += nc;
 800df00:	230e      	movs	r3, #14
 800df02:	18fb      	adds	r3, r7, r3
 800df04:	881b      	ldrh	r3, [r3, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d000      	beq.n	800df0c <ff_wtoupper+0x130>
 800df0a:	e777      	b.n	800ddfc <ff_wtoupper+0x20>
 800df0c:	2310      	movs	r3, #16
 800df0e:	18fb      	adds	r3, r7, r3
 800df10:	881b      	ldrh	r3, [r3, #0]
 800df12:	005b      	lsls	r3, r3, #1
 800df14:	697a      	ldr	r2, [r7, #20]
 800df16:	18d3      	adds	r3, r2, r3
 800df18:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800df1a:	e76f      	b.n	800ddfc <ff_wtoupper+0x20>
			break;
 800df1c:	46c0      	nop			; (mov r8, r8)
	}

	return chr;
 800df1e:	1dbb      	adds	r3, r7, #6
 800df20:	881b      	ldrh	r3, [r3, #0]
}
 800df22:	0018      	movs	r0, r3
 800df24:	46bd      	mov	sp, r7
 800df26:	b006      	add	sp, #24
 800df28:	bdb0      	pop	{r4, r5, r7, pc}
 800df2a:	46c0      	nop			; (mov r8, r8)
 800df2c:	080138c8 	.word	0x080138c8
 800df30:	08013abc 	.word	0x08013abc
 800df34:	080138a4 	.word	0x080138a4
 800df38:	ffffe3a0 	.word	0xffffe3a0

0800df3c <atof>:
 800df3c:	b510      	push	{r4, lr}
 800df3e:	2100      	movs	r1, #0
 800df40:	f000 fe2c 	bl	800eb9c <strtod>
 800df44:	bd10      	pop	{r4, pc}
	...

0800df48 <sulp>:
 800df48:	b570      	push	{r4, r5, r6, lr}
 800df4a:	0016      	movs	r6, r2
 800df4c:	000d      	movs	r5, r1
 800df4e:	f003 feb3 	bl	8011cb8 <__ulp>
 800df52:	2e00      	cmp	r6, #0
 800df54:	d00d      	beq.n	800df72 <sulp+0x2a>
 800df56:	236b      	movs	r3, #107	; 0x6b
 800df58:	006a      	lsls	r2, r5, #1
 800df5a:	0d52      	lsrs	r2, r2, #21
 800df5c:	1a9b      	subs	r3, r3, r2
 800df5e:	2b00      	cmp	r3, #0
 800df60:	dd07      	ble.n	800df72 <sulp+0x2a>
 800df62:	2400      	movs	r4, #0
 800df64:	4a03      	ldr	r2, [pc, #12]	; (800df74 <sulp+0x2c>)
 800df66:	051b      	lsls	r3, r3, #20
 800df68:	189d      	adds	r5, r3, r2
 800df6a:	002b      	movs	r3, r5
 800df6c:	0022      	movs	r2, r4
 800df6e:	f7f3 ff75 	bl	8001e5c <__aeabi_dmul>
 800df72:	bd70      	pop	{r4, r5, r6, pc}
 800df74:	3ff00000 	.word	0x3ff00000

0800df78 <_strtod_l>:
 800df78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df7a:	b0a1      	sub	sp, #132	; 0x84
 800df7c:	9219      	str	r2, [sp, #100]	; 0x64
 800df7e:	2200      	movs	r2, #0
 800df80:	2600      	movs	r6, #0
 800df82:	2700      	movs	r7, #0
 800df84:	9004      	str	r0, [sp, #16]
 800df86:	9107      	str	r1, [sp, #28]
 800df88:	921c      	str	r2, [sp, #112]	; 0x70
 800df8a:	911b      	str	r1, [sp, #108]	; 0x6c
 800df8c:	780a      	ldrb	r2, [r1, #0]
 800df8e:	2a2b      	cmp	r2, #43	; 0x2b
 800df90:	d055      	beq.n	800e03e <_strtod_l+0xc6>
 800df92:	d841      	bhi.n	800e018 <_strtod_l+0xa0>
 800df94:	2a0d      	cmp	r2, #13
 800df96:	d83b      	bhi.n	800e010 <_strtod_l+0x98>
 800df98:	2a08      	cmp	r2, #8
 800df9a:	d83b      	bhi.n	800e014 <_strtod_l+0x9c>
 800df9c:	2a00      	cmp	r2, #0
 800df9e:	d044      	beq.n	800e02a <_strtod_l+0xb2>
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	920f      	str	r2, [sp, #60]	; 0x3c
 800dfa4:	2100      	movs	r1, #0
 800dfa6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800dfa8:	9109      	str	r1, [sp, #36]	; 0x24
 800dfaa:	782a      	ldrb	r2, [r5, #0]
 800dfac:	2a30      	cmp	r2, #48	; 0x30
 800dfae:	d000      	beq.n	800dfb2 <_strtod_l+0x3a>
 800dfb0:	e085      	b.n	800e0be <_strtod_l+0x146>
 800dfb2:	786a      	ldrb	r2, [r5, #1]
 800dfb4:	3120      	adds	r1, #32
 800dfb6:	438a      	bics	r2, r1
 800dfb8:	2a58      	cmp	r2, #88	; 0x58
 800dfba:	d000      	beq.n	800dfbe <_strtod_l+0x46>
 800dfbc:	e075      	b.n	800e0aa <_strtod_l+0x132>
 800dfbe:	9302      	str	r3, [sp, #8]
 800dfc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfc2:	4a97      	ldr	r2, [pc, #604]	; (800e220 <_strtod_l+0x2a8>)
 800dfc4:	9301      	str	r3, [sp, #4]
 800dfc6:	ab1c      	add	r3, sp, #112	; 0x70
 800dfc8:	9300      	str	r3, [sp, #0]
 800dfca:	9804      	ldr	r0, [sp, #16]
 800dfcc:	ab1d      	add	r3, sp, #116	; 0x74
 800dfce:	a91b      	add	r1, sp, #108	; 0x6c
 800dfd0:	f002 ff2a 	bl	8010e28 <__gethex>
 800dfd4:	230f      	movs	r3, #15
 800dfd6:	0002      	movs	r2, r0
 800dfd8:	401a      	ands	r2, r3
 800dfda:	0004      	movs	r4, r0
 800dfdc:	9205      	str	r2, [sp, #20]
 800dfde:	4218      	tst	r0, r3
 800dfe0:	d005      	beq.n	800dfee <_strtod_l+0x76>
 800dfe2:	2a06      	cmp	r2, #6
 800dfe4:	d12d      	bne.n	800e042 <_strtod_l+0xca>
 800dfe6:	1c6b      	adds	r3, r5, #1
 800dfe8:	931b      	str	r3, [sp, #108]	; 0x6c
 800dfea:	2300      	movs	r3, #0
 800dfec:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d002      	beq.n	800dffa <_strtod_l+0x82>
 800dff4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dff6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dff8:	6013      	str	r3, [r2, #0]
 800dffa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d01b      	beq.n	800e038 <_strtod_l+0xc0>
 800e000:	2380      	movs	r3, #128	; 0x80
 800e002:	0032      	movs	r2, r6
 800e004:	061b      	lsls	r3, r3, #24
 800e006:	18fb      	adds	r3, r7, r3
 800e008:	0010      	movs	r0, r2
 800e00a:	0019      	movs	r1, r3
 800e00c:	b021      	add	sp, #132	; 0x84
 800e00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e010:	2a20      	cmp	r2, #32
 800e012:	d1c5      	bne.n	800dfa0 <_strtod_l+0x28>
 800e014:	3101      	adds	r1, #1
 800e016:	e7b8      	b.n	800df8a <_strtod_l+0x12>
 800e018:	2a2d      	cmp	r2, #45	; 0x2d
 800e01a:	d1c1      	bne.n	800dfa0 <_strtod_l+0x28>
 800e01c:	3a2c      	subs	r2, #44	; 0x2c
 800e01e:	920f      	str	r2, [sp, #60]	; 0x3c
 800e020:	1c4a      	adds	r2, r1, #1
 800e022:	921b      	str	r2, [sp, #108]	; 0x6c
 800e024:	784a      	ldrb	r2, [r1, #1]
 800e026:	2a00      	cmp	r2, #0
 800e028:	d1bc      	bne.n	800dfa4 <_strtod_l+0x2c>
 800e02a:	9b07      	ldr	r3, [sp, #28]
 800e02c:	931b      	str	r3, [sp, #108]	; 0x6c
 800e02e:	2300      	movs	r3, #0
 800e030:	930f      	str	r3, [sp, #60]	; 0x3c
 800e032:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e034:	2b00      	cmp	r3, #0
 800e036:	d1dd      	bne.n	800dff4 <_strtod_l+0x7c>
 800e038:	0032      	movs	r2, r6
 800e03a:	003b      	movs	r3, r7
 800e03c:	e7e4      	b.n	800e008 <_strtod_l+0x90>
 800e03e:	2200      	movs	r2, #0
 800e040:	e7ed      	b.n	800e01e <_strtod_l+0xa6>
 800e042:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e044:	2a00      	cmp	r2, #0
 800e046:	d007      	beq.n	800e058 <_strtod_l+0xe0>
 800e048:	2135      	movs	r1, #53	; 0x35
 800e04a:	a81e      	add	r0, sp, #120	; 0x78
 800e04c:	f003 ff25 	bl	8011e9a <__copybits>
 800e050:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e052:	9804      	ldr	r0, [sp, #16]
 800e054:	f003 faee 	bl	8011634 <_Bfree>
 800e058:	9805      	ldr	r0, [sp, #20]
 800e05a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e05c:	3801      	subs	r0, #1
 800e05e:	2804      	cmp	r0, #4
 800e060:	d806      	bhi.n	800e070 <_strtod_l+0xf8>
 800e062:	f7f2 f863 	bl	800012c <__gnu_thumb1_case_uqi>
 800e066:	0312      	.short	0x0312
 800e068:	1e1c      	.short	0x1e1c
 800e06a:	12          	.byte	0x12
 800e06b:	00          	.byte	0x00
 800e06c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800e06e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800e070:	05e4      	lsls	r4, r4, #23
 800e072:	d502      	bpl.n	800e07a <_strtod_l+0x102>
 800e074:	2380      	movs	r3, #128	; 0x80
 800e076:	061b      	lsls	r3, r3, #24
 800e078:	431f      	orrs	r7, r3
 800e07a:	4b6a      	ldr	r3, [pc, #424]	; (800e224 <_strtod_l+0x2ac>)
 800e07c:	423b      	tst	r3, r7
 800e07e:	d1b6      	bne.n	800dfee <_strtod_l+0x76>
 800e080:	f001 ff0e 	bl	800fea0 <__errno>
 800e084:	2322      	movs	r3, #34	; 0x22
 800e086:	6003      	str	r3, [r0, #0]
 800e088:	e7b1      	b.n	800dfee <_strtod_l+0x76>
 800e08a:	4967      	ldr	r1, [pc, #412]	; (800e228 <_strtod_l+0x2b0>)
 800e08c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e08e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800e090:	400a      	ands	r2, r1
 800e092:	4966      	ldr	r1, [pc, #408]	; (800e22c <_strtod_l+0x2b4>)
 800e094:	185b      	adds	r3, r3, r1
 800e096:	051b      	lsls	r3, r3, #20
 800e098:	431a      	orrs	r2, r3
 800e09a:	0017      	movs	r7, r2
 800e09c:	e7e8      	b.n	800e070 <_strtod_l+0xf8>
 800e09e:	4f61      	ldr	r7, [pc, #388]	; (800e224 <_strtod_l+0x2ac>)
 800e0a0:	e7e6      	b.n	800e070 <_strtod_l+0xf8>
 800e0a2:	2601      	movs	r6, #1
 800e0a4:	4f62      	ldr	r7, [pc, #392]	; (800e230 <_strtod_l+0x2b8>)
 800e0a6:	4276      	negs	r6, r6
 800e0a8:	e7e2      	b.n	800e070 <_strtod_l+0xf8>
 800e0aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e0ac:	1c5a      	adds	r2, r3, #1
 800e0ae:	921b      	str	r2, [sp, #108]	; 0x6c
 800e0b0:	785b      	ldrb	r3, [r3, #1]
 800e0b2:	2b30      	cmp	r3, #48	; 0x30
 800e0b4:	d0f9      	beq.n	800e0aa <_strtod_l+0x132>
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d099      	beq.n	800dfee <_strtod_l+0x76>
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e0be:	2500      	movs	r5, #0
 800e0c0:	220a      	movs	r2, #10
 800e0c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e0c4:	950d      	str	r5, [sp, #52]	; 0x34
 800e0c6:	9310      	str	r3, [sp, #64]	; 0x40
 800e0c8:	9508      	str	r5, [sp, #32]
 800e0ca:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800e0cc:	7804      	ldrb	r4, [r0, #0]
 800e0ce:	0023      	movs	r3, r4
 800e0d0:	3b30      	subs	r3, #48	; 0x30
 800e0d2:	b2d9      	uxtb	r1, r3
 800e0d4:	2909      	cmp	r1, #9
 800e0d6:	d927      	bls.n	800e128 <_strtod_l+0x1b0>
 800e0d8:	2201      	movs	r2, #1
 800e0da:	4956      	ldr	r1, [pc, #344]	; (800e234 <_strtod_l+0x2bc>)
 800e0dc:	f001 fe05 	bl	800fcea <strncmp>
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	d031      	beq.n	800e148 <_strtod_l+0x1d0>
 800e0e4:	2000      	movs	r0, #0
 800e0e6:	0023      	movs	r3, r4
 800e0e8:	4684      	mov	ip, r0
 800e0ea:	9a08      	ldr	r2, [sp, #32]
 800e0ec:	900c      	str	r0, [sp, #48]	; 0x30
 800e0ee:	9205      	str	r2, [sp, #20]
 800e0f0:	2220      	movs	r2, #32
 800e0f2:	0019      	movs	r1, r3
 800e0f4:	4391      	bics	r1, r2
 800e0f6:	000a      	movs	r2, r1
 800e0f8:	2100      	movs	r1, #0
 800e0fa:	9106      	str	r1, [sp, #24]
 800e0fc:	2a45      	cmp	r2, #69	; 0x45
 800e0fe:	d000      	beq.n	800e102 <_strtod_l+0x18a>
 800e100:	e0c2      	b.n	800e288 <_strtod_l+0x310>
 800e102:	9b05      	ldr	r3, [sp, #20]
 800e104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e106:	4303      	orrs	r3, r0
 800e108:	4313      	orrs	r3, r2
 800e10a:	428b      	cmp	r3, r1
 800e10c:	d08d      	beq.n	800e02a <_strtod_l+0xb2>
 800e10e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e110:	9307      	str	r3, [sp, #28]
 800e112:	3301      	adds	r3, #1
 800e114:	931b      	str	r3, [sp, #108]	; 0x6c
 800e116:	9b07      	ldr	r3, [sp, #28]
 800e118:	785b      	ldrb	r3, [r3, #1]
 800e11a:	2b2b      	cmp	r3, #43	; 0x2b
 800e11c:	d071      	beq.n	800e202 <_strtod_l+0x28a>
 800e11e:	000c      	movs	r4, r1
 800e120:	2b2d      	cmp	r3, #45	; 0x2d
 800e122:	d174      	bne.n	800e20e <_strtod_l+0x296>
 800e124:	2401      	movs	r4, #1
 800e126:	e06d      	b.n	800e204 <_strtod_l+0x28c>
 800e128:	9908      	ldr	r1, [sp, #32]
 800e12a:	2908      	cmp	r1, #8
 800e12c:	dc09      	bgt.n	800e142 <_strtod_l+0x1ca>
 800e12e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e130:	4351      	muls	r1, r2
 800e132:	185b      	adds	r3, r3, r1
 800e134:	930d      	str	r3, [sp, #52]	; 0x34
 800e136:	9b08      	ldr	r3, [sp, #32]
 800e138:	3001      	adds	r0, #1
 800e13a:	3301      	adds	r3, #1
 800e13c:	9308      	str	r3, [sp, #32]
 800e13e:	901b      	str	r0, [sp, #108]	; 0x6c
 800e140:	e7c3      	b.n	800e0ca <_strtod_l+0x152>
 800e142:	4355      	muls	r5, r2
 800e144:	195d      	adds	r5, r3, r5
 800e146:	e7f6      	b.n	800e136 <_strtod_l+0x1be>
 800e148:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e14a:	1c5a      	adds	r2, r3, #1
 800e14c:	921b      	str	r2, [sp, #108]	; 0x6c
 800e14e:	9a08      	ldr	r2, [sp, #32]
 800e150:	785b      	ldrb	r3, [r3, #1]
 800e152:	2a00      	cmp	r2, #0
 800e154:	d03a      	beq.n	800e1cc <_strtod_l+0x254>
 800e156:	900c      	str	r0, [sp, #48]	; 0x30
 800e158:	9205      	str	r2, [sp, #20]
 800e15a:	001a      	movs	r2, r3
 800e15c:	3a30      	subs	r2, #48	; 0x30
 800e15e:	2a09      	cmp	r2, #9
 800e160:	d912      	bls.n	800e188 <_strtod_l+0x210>
 800e162:	2201      	movs	r2, #1
 800e164:	4694      	mov	ip, r2
 800e166:	e7c3      	b.n	800e0f0 <_strtod_l+0x178>
 800e168:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e16a:	3001      	adds	r0, #1
 800e16c:	1c5a      	adds	r2, r3, #1
 800e16e:	921b      	str	r2, [sp, #108]	; 0x6c
 800e170:	785b      	ldrb	r3, [r3, #1]
 800e172:	2b30      	cmp	r3, #48	; 0x30
 800e174:	d0f8      	beq.n	800e168 <_strtod_l+0x1f0>
 800e176:	001a      	movs	r2, r3
 800e178:	3a31      	subs	r2, #49	; 0x31
 800e17a:	2a08      	cmp	r2, #8
 800e17c:	d83c      	bhi.n	800e1f8 <_strtod_l+0x280>
 800e17e:	900c      	str	r0, [sp, #48]	; 0x30
 800e180:	2000      	movs	r0, #0
 800e182:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e184:	9005      	str	r0, [sp, #20]
 800e186:	9210      	str	r2, [sp, #64]	; 0x40
 800e188:	001a      	movs	r2, r3
 800e18a:	1c41      	adds	r1, r0, #1
 800e18c:	3a30      	subs	r2, #48	; 0x30
 800e18e:	2b30      	cmp	r3, #48	; 0x30
 800e190:	d016      	beq.n	800e1c0 <_strtod_l+0x248>
 800e192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e194:	185b      	adds	r3, r3, r1
 800e196:	930c      	str	r3, [sp, #48]	; 0x30
 800e198:	9b05      	ldr	r3, [sp, #20]
 800e19a:	210a      	movs	r1, #10
 800e19c:	469c      	mov	ip, r3
 800e19e:	4484      	add	ip, r0
 800e1a0:	4563      	cmp	r3, ip
 800e1a2:	d115      	bne.n	800e1d0 <_strtod_l+0x258>
 800e1a4:	9905      	ldr	r1, [sp, #20]
 800e1a6:	9b05      	ldr	r3, [sp, #20]
 800e1a8:	3101      	adds	r1, #1
 800e1aa:	1809      	adds	r1, r1, r0
 800e1ac:	181b      	adds	r3, r3, r0
 800e1ae:	9105      	str	r1, [sp, #20]
 800e1b0:	2b08      	cmp	r3, #8
 800e1b2:	dc19      	bgt.n	800e1e8 <_strtod_l+0x270>
 800e1b4:	230a      	movs	r3, #10
 800e1b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e1b8:	434b      	muls	r3, r1
 800e1ba:	2100      	movs	r1, #0
 800e1bc:	18d3      	adds	r3, r2, r3
 800e1be:	930d      	str	r3, [sp, #52]	; 0x34
 800e1c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e1c2:	0008      	movs	r0, r1
 800e1c4:	1c5a      	adds	r2, r3, #1
 800e1c6:	921b      	str	r2, [sp, #108]	; 0x6c
 800e1c8:	785b      	ldrb	r3, [r3, #1]
 800e1ca:	e7c6      	b.n	800e15a <_strtod_l+0x1e2>
 800e1cc:	9808      	ldr	r0, [sp, #32]
 800e1ce:	e7d0      	b.n	800e172 <_strtod_l+0x1fa>
 800e1d0:	1c5c      	adds	r4, r3, #1
 800e1d2:	2b08      	cmp	r3, #8
 800e1d4:	dc04      	bgt.n	800e1e0 <_strtod_l+0x268>
 800e1d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1d8:	434b      	muls	r3, r1
 800e1da:	930d      	str	r3, [sp, #52]	; 0x34
 800e1dc:	0023      	movs	r3, r4
 800e1de:	e7df      	b.n	800e1a0 <_strtod_l+0x228>
 800e1e0:	2c10      	cmp	r4, #16
 800e1e2:	dcfb      	bgt.n	800e1dc <_strtod_l+0x264>
 800e1e4:	434d      	muls	r5, r1
 800e1e6:	e7f9      	b.n	800e1dc <_strtod_l+0x264>
 800e1e8:	9b05      	ldr	r3, [sp, #20]
 800e1ea:	2100      	movs	r1, #0
 800e1ec:	2b10      	cmp	r3, #16
 800e1ee:	dce7      	bgt.n	800e1c0 <_strtod_l+0x248>
 800e1f0:	230a      	movs	r3, #10
 800e1f2:	435d      	muls	r5, r3
 800e1f4:	1955      	adds	r5, r2, r5
 800e1f6:	e7e3      	b.n	800e1c0 <_strtod_l+0x248>
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	920c      	str	r2, [sp, #48]	; 0x30
 800e1fc:	9205      	str	r2, [sp, #20]
 800e1fe:	3201      	adds	r2, #1
 800e200:	e7b0      	b.n	800e164 <_strtod_l+0x1ec>
 800e202:	2400      	movs	r4, #0
 800e204:	9b07      	ldr	r3, [sp, #28]
 800e206:	3302      	adds	r3, #2
 800e208:	931b      	str	r3, [sp, #108]	; 0x6c
 800e20a:	9b07      	ldr	r3, [sp, #28]
 800e20c:	789b      	ldrb	r3, [r3, #2]
 800e20e:	001a      	movs	r2, r3
 800e210:	3a30      	subs	r2, #48	; 0x30
 800e212:	2a09      	cmp	r2, #9
 800e214:	d914      	bls.n	800e240 <_strtod_l+0x2c8>
 800e216:	9a07      	ldr	r2, [sp, #28]
 800e218:	921b      	str	r2, [sp, #108]	; 0x6c
 800e21a:	2200      	movs	r2, #0
 800e21c:	e033      	b.n	800e286 <_strtod_l+0x30e>
 800e21e:	46c0      	nop			; (mov r8, r8)
 800e220:	08013b7c 	.word	0x08013b7c
 800e224:	7ff00000 	.word	0x7ff00000
 800e228:	ffefffff 	.word	0xffefffff
 800e22c:	00000433 	.word	0x00000433
 800e230:	7fffffff 	.word	0x7fffffff
 800e234:	08013b78 	.word	0x08013b78
 800e238:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e23a:	1c5a      	adds	r2, r3, #1
 800e23c:	921b      	str	r2, [sp, #108]	; 0x6c
 800e23e:	785b      	ldrb	r3, [r3, #1]
 800e240:	2b30      	cmp	r3, #48	; 0x30
 800e242:	d0f9      	beq.n	800e238 <_strtod_l+0x2c0>
 800e244:	2200      	movs	r2, #0
 800e246:	9206      	str	r2, [sp, #24]
 800e248:	001a      	movs	r2, r3
 800e24a:	3a31      	subs	r2, #49	; 0x31
 800e24c:	2a08      	cmp	r2, #8
 800e24e:	d81b      	bhi.n	800e288 <_strtod_l+0x310>
 800e250:	3b30      	subs	r3, #48	; 0x30
 800e252:	930e      	str	r3, [sp, #56]	; 0x38
 800e254:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e256:	9306      	str	r3, [sp, #24]
 800e258:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e25a:	1c59      	adds	r1, r3, #1
 800e25c:	911b      	str	r1, [sp, #108]	; 0x6c
 800e25e:	785b      	ldrb	r3, [r3, #1]
 800e260:	001a      	movs	r2, r3
 800e262:	3a30      	subs	r2, #48	; 0x30
 800e264:	2a09      	cmp	r2, #9
 800e266:	d93a      	bls.n	800e2de <_strtod_l+0x366>
 800e268:	9a06      	ldr	r2, [sp, #24]
 800e26a:	1a8a      	subs	r2, r1, r2
 800e26c:	49b2      	ldr	r1, [pc, #712]	; (800e538 <_strtod_l+0x5c0>)
 800e26e:	9106      	str	r1, [sp, #24]
 800e270:	2a08      	cmp	r2, #8
 800e272:	dc04      	bgt.n	800e27e <_strtod_l+0x306>
 800e274:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e276:	9206      	str	r2, [sp, #24]
 800e278:	428a      	cmp	r2, r1
 800e27a:	dd00      	ble.n	800e27e <_strtod_l+0x306>
 800e27c:	9106      	str	r1, [sp, #24]
 800e27e:	2c00      	cmp	r4, #0
 800e280:	d002      	beq.n	800e288 <_strtod_l+0x310>
 800e282:	9a06      	ldr	r2, [sp, #24]
 800e284:	4252      	negs	r2, r2
 800e286:	9206      	str	r2, [sp, #24]
 800e288:	9a05      	ldr	r2, [sp, #20]
 800e28a:	2a00      	cmp	r2, #0
 800e28c:	d14d      	bne.n	800e32a <_strtod_l+0x3b2>
 800e28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e290:	4310      	orrs	r0, r2
 800e292:	d000      	beq.n	800e296 <_strtod_l+0x31e>
 800e294:	e6ab      	b.n	800dfee <_strtod_l+0x76>
 800e296:	4662      	mov	r2, ip
 800e298:	2a00      	cmp	r2, #0
 800e29a:	d000      	beq.n	800e29e <_strtod_l+0x326>
 800e29c:	e6c5      	b.n	800e02a <_strtod_l+0xb2>
 800e29e:	2b69      	cmp	r3, #105	; 0x69
 800e2a0:	d027      	beq.n	800e2f2 <_strtod_l+0x37a>
 800e2a2:	dc23      	bgt.n	800e2ec <_strtod_l+0x374>
 800e2a4:	2b49      	cmp	r3, #73	; 0x49
 800e2a6:	d024      	beq.n	800e2f2 <_strtod_l+0x37a>
 800e2a8:	2b4e      	cmp	r3, #78	; 0x4e
 800e2aa:	d000      	beq.n	800e2ae <_strtod_l+0x336>
 800e2ac:	e6bd      	b.n	800e02a <_strtod_l+0xb2>
 800e2ae:	49a3      	ldr	r1, [pc, #652]	; (800e53c <_strtod_l+0x5c4>)
 800e2b0:	a81b      	add	r0, sp, #108	; 0x6c
 800e2b2:	f002 ffef 	bl	8011294 <__match>
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	d100      	bne.n	800e2bc <_strtod_l+0x344>
 800e2ba:	e6b6      	b.n	800e02a <_strtod_l+0xb2>
 800e2bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	2b28      	cmp	r3, #40	; 0x28
 800e2c2:	d12c      	bne.n	800e31e <_strtod_l+0x3a6>
 800e2c4:	499e      	ldr	r1, [pc, #632]	; (800e540 <_strtod_l+0x5c8>)
 800e2c6:	aa1e      	add	r2, sp, #120	; 0x78
 800e2c8:	a81b      	add	r0, sp, #108	; 0x6c
 800e2ca:	f002 fff7 	bl	80112bc <__hexnan>
 800e2ce:	2805      	cmp	r0, #5
 800e2d0:	d125      	bne.n	800e31e <_strtod_l+0x3a6>
 800e2d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e2d4:	4a9b      	ldr	r2, [pc, #620]	; (800e544 <_strtod_l+0x5cc>)
 800e2d6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800e2d8:	431a      	orrs	r2, r3
 800e2da:	0017      	movs	r7, r2
 800e2dc:	e687      	b.n	800dfee <_strtod_l+0x76>
 800e2de:	220a      	movs	r2, #10
 800e2e0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e2e2:	434a      	muls	r2, r1
 800e2e4:	18d2      	adds	r2, r2, r3
 800e2e6:	3a30      	subs	r2, #48	; 0x30
 800e2e8:	920e      	str	r2, [sp, #56]	; 0x38
 800e2ea:	e7b5      	b.n	800e258 <_strtod_l+0x2e0>
 800e2ec:	2b6e      	cmp	r3, #110	; 0x6e
 800e2ee:	d0de      	beq.n	800e2ae <_strtod_l+0x336>
 800e2f0:	e69b      	b.n	800e02a <_strtod_l+0xb2>
 800e2f2:	4995      	ldr	r1, [pc, #596]	; (800e548 <_strtod_l+0x5d0>)
 800e2f4:	a81b      	add	r0, sp, #108	; 0x6c
 800e2f6:	f002 ffcd 	bl	8011294 <__match>
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	d100      	bne.n	800e300 <_strtod_l+0x388>
 800e2fe:	e694      	b.n	800e02a <_strtod_l+0xb2>
 800e300:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e302:	4992      	ldr	r1, [pc, #584]	; (800e54c <_strtod_l+0x5d4>)
 800e304:	3b01      	subs	r3, #1
 800e306:	a81b      	add	r0, sp, #108	; 0x6c
 800e308:	931b      	str	r3, [sp, #108]	; 0x6c
 800e30a:	f002 ffc3 	bl	8011294 <__match>
 800e30e:	2800      	cmp	r0, #0
 800e310:	d102      	bne.n	800e318 <_strtod_l+0x3a0>
 800e312:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e314:	3301      	adds	r3, #1
 800e316:	931b      	str	r3, [sp, #108]	; 0x6c
 800e318:	2600      	movs	r6, #0
 800e31a:	4f8a      	ldr	r7, [pc, #552]	; (800e544 <_strtod_l+0x5cc>)
 800e31c:	e667      	b.n	800dfee <_strtod_l+0x76>
 800e31e:	488c      	ldr	r0, [pc, #560]	; (800e550 <_strtod_l+0x5d8>)
 800e320:	f001 fe08 	bl	800ff34 <nan>
 800e324:	0006      	movs	r6, r0
 800e326:	000f      	movs	r7, r1
 800e328:	e661      	b.n	800dfee <_strtod_l+0x76>
 800e32a:	9b06      	ldr	r3, [sp, #24]
 800e32c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e32e:	1a9b      	subs	r3, r3, r2
 800e330:	9309      	str	r3, [sp, #36]	; 0x24
 800e332:	9b08      	ldr	r3, [sp, #32]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d101      	bne.n	800e33c <_strtod_l+0x3c4>
 800e338:	9b05      	ldr	r3, [sp, #20]
 800e33a:	9308      	str	r3, [sp, #32]
 800e33c:	9c05      	ldr	r4, [sp, #20]
 800e33e:	2c10      	cmp	r4, #16
 800e340:	dd00      	ble.n	800e344 <_strtod_l+0x3cc>
 800e342:	2410      	movs	r4, #16
 800e344:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e346:	f7f4 fc51 	bl	8002bec <__aeabi_ui2d>
 800e34a:	9b05      	ldr	r3, [sp, #20]
 800e34c:	0006      	movs	r6, r0
 800e34e:	000f      	movs	r7, r1
 800e350:	2b09      	cmp	r3, #9
 800e352:	dd15      	ble.n	800e380 <_strtod_l+0x408>
 800e354:	0022      	movs	r2, r4
 800e356:	4b7f      	ldr	r3, [pc, #508]	; (800e554 <_strtod_l+0x5dc>)
 800e358:	3a09      	subs	r2, #9
 800e35a:	00d2      	lsls	r2, r2, #3
 800e35c:	189b      	adds	r3, r3, r2
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	f7f3 fd7b 	bl	8001e5c <__aeabi_dmul>
 800e366:	0006      	movs	r6, r0
 800e368:	0028      	movs	r0, r5
 800e36a:	000f      	movs	r7, r1
 800e36c:	f7f4 fc3e 	bl	8002bec <__aeabi_ui2d>
 800e370:	0002      	movs	r2, r0
 800e372:	000b      	movs	r3, r1
 800e374:	0030      	movs	r0, r6
 800e376:	0039      	movs	r1, r7
 800e378:	f7f2 fe16 	bl	8000fa8 <__aeabi_dadd>
 800e37c:	0006      	movs	r6, r0
 800e37e:	000f      	movs	r7, r1
 800e380:	9b05      	ldr	r3, [sp, #20]
 800e382:	2b0f      	cmp	r3, #15
 800e384:	dc39      	bgt.n	800e3fa <_strtod_l+0x482>
 800e386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d100      	bne.n	800e38e <_strtod_l+0x416>
 800e38c:	e62f      	b.n	800dfee <_strtod_l+0x76>
 800e38e:	dd24      	ble.n	800e3da <_strtod_l+0x462>
 800e390:	2b16      	cmp	r3, #22
 800e392:	dc09      	bgt.n	800e3a8 <_strtod_l+0x430>
 800e394:	496f      	ldr	r1, [pc, #444]	; (800e554 <_strtod_l+0x5dc>)
 800e396:	00db      	lsls	r3, r3, #3
 800e398:	18c9      	adds	r1, r1, r3
 800e39a:	0032      	movs	r2, r6
 800e39c:	6808      	ldr	r0, [r1, #0]
 800e39e:	6849      	ldr	r1, [r1, #4]
 800e3a0:	003b      	movs	r3, r7
 800e3a2:	f7f3 fd5b 	bl	8001e5c <__aeabi_dmul>
 800e3a6:	e7bd      	b.n	800e324 <_strtod_l+0x3ac>
 800e3a8:	2325      	movs	r3, #37	; 0x25
 800e3aa:	9a05      	ldr	r2, [sp, #20]
 800e3ac:	1a9b      	subs	r3, r3, r2
 800e3ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	db22      	blt.n	800e3fa <_strtod_l+0x482>
 800e3b4:	240f      	movs	r4, #15
 800e3b6:	9b05      	ldr	r3, [sp, #20]
 800e3b8:	4d66      	ldr	r5, [pc, #408]	; (800e554 <_strtod_l+0x5dc>)
 800e3ba:	1ae4      	subs	r4, r4, r3
 800e3bc:	00e1      	lsls	r1, r4, #3
 800e3be:	1869      	adds	r1, r5, r1
 800e3c0:	0032      	movs	r2, r6
 800e3c2:	6808      	ldr	r0, [r1, #0]
 800e3c4:	6849      	ldr	r1, [r1, #4]
 800e3c6:	003b      	movs	r3, r7
 800e3c8:	f7f3 fd48 	bl	8001e5c <__aeabi_dmul>
 800e3cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3ce:	1b1c      	subs	r4, r3, r4
 800e3d0:	00e4      	lsls	r4, r4, #3
 800e3d2:	192d      	adds	r5, r5, r4
 800e3d4:	682a      	ldr	r2, [r5, #0]
 800e3d6:	686b      	ldr	r3, [r5, #4]
 800e3d8:	e7e3      	b.n	800e3a2 <_strtod_l+0x42a>
 800e3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3dc:	3316      	adds	r3, #22
 800e3de:	db0c      	blt.n	800e3fa <_strtod_l+0x482>
 800e3e0:	9906      	ldr	r1, [sp, #24]
 800e3e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e3e4:	4b5b      	ldr	r3, [pc, #364]	; (800e554 <_strtod_l+0x5dc>)
 800e3e6:	1a52      	subs	r2, r2, r1
 800e3e8:	00d2      	lsls	r2, r2, #3
 800e3ea:	189b      	adds	r3, r3, r2
 800e3ec:	0030      	movs	r0, r6
 800e3ee:	681a      	ldr	r2, [r3, #0]
 800e3f0:	685b      	ldr	r3, [r3, #4]
 800e3f2:	0039      	movs	r1, r7
 800e3f4:	f7f3 f938 	bl	8001668 <__aeabi_ddiv>
 800e3f8:	e794      	b.n	800e324 <_strtod_l+0x3ac>
 800e3fa:	9b05      	ldr	r3, [sp, #20]
 800e3fc:	1b1c      	subs	r4, r3, r4
 800e3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e400:	18e4      	adds	r4, r4, r3
 800e402:	2c00      	cmp	r4, #0
 800e404:	dd72      	ble.n	800e4ec <_strtod_l+0x574>
 800e406:	220f      	movs	r2, #15
 800e408:	0023      	movs	r3, r4
 800e40a:	4013      	ands	r3, r2
 800e40c:	4214      	tst	r4, r2
 800e40e:	d00a      	beq.n	800e426 <_strtod_l+0x4ae>
 800e410:	4950      	ldr	r1, [pc, #320]	; (800e554 <_strtod_l+0x5dc>)
 800e412:	00db      	lsls	r3, r3, #3
 800e414:	18c9      	adds	r1, r1, r3
 800e416:	0032      	movs	r2, r6
 800e418:	6808      	ldr	r0, [r1, #0]
 800e41a:	6849      	ldr	r1, [r1, #4]
 800e41c:	003b      	movs	r3, r7
 800e41e:	f7f3 fd1d 	bl	8001e5c <__aeabi_dmul>
 800e422:	0006      	movs	r6, r0
 800e424:	000f      	movs	r7, r1
 800e426:	230f      	movs	r3, #15
 800e428:	439c      	bics	r4, r3
 800e42a:	d04a      	beq.n	800e4c2 <_strtod_l+0x54a>
 800e42c:	3326      	adds	r3, #38	; 0x26
 800e42e:	33ff      	adds	r3, #255	; 0xff
 800e430:	429c      	cmp	r4, r3
 800e432:	dd22      	ble.n	800e47a <_strtod_l+0x502>
 800e434:	2300      	movs	r3, #0
 800e436:	9305      	str	r3, [sp, #20]
 800e438:	9306      	str	r3, [sp, #24]
 800e43a:	930d      	str	r3, [sp, #52]	; 0x34
 800e43c:	9308      	str	r3, [sp, #32]
 800e43e:	2322      	movs	r3, #34	; 0x22
 800e440:	2600      	movs	r6, #0
 800e442:	9a04      	ldr	r2, [sp, #16]
 800e444:	4f3f      	ldr	r7, [pc, #252]	; (800e544 <_strtod_l+0x5cc>)
 800e446:	6013      	str	r3, [r2, #0]
 800e448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e44a:	42b3      	cmp	r3, r6
 800e44c:	d100      	bne.n	800e450 <_strtod_l+0x4d8>
 800e44e:	e5ce      	b.n	800dfee <_strtod_l+0x76>
 800e450:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e452:	9804      	ldr	r0, [sp, #16]
 800e454:	f003 f8ee 	bl	8011634 <_Bfree>
 800e458:	9908      	ldr	r1, [sp, #32]
 800e45a:	9804      	ldr	r0, [sp, #16]
 800e45c:	f003 f8ea 	bl	8011634 <_Bfree>
 800e460:	9906      	ldr	r1, [sp, #24]
 800e462:	9804      	ldr	r0, [sp, #16]
 800e464:	f003 f8e6 	bl	8011634 <_Bfree>
 800e468:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e46a:	9804      	ldr	r0, [sp, #16]
 800e46c:	f003 f8e2 	bl	8011634 <_Bfree>
 800e470:	9905      	ldr	r1, [sp, #20]
 800e472:	9804      	ldr	r0, [sp, #16]
 800e474:	f003 f8de 	bl	8011634 <_Bfree>
 800e478:	e5b9      	b.n	800dfee <_strtod_l+0x76>
 800e47a:	2300      	movs	r3, #0
 800e47c:	0030      	movs	r0, r6
 800e47e:	0039      	movs	r1, r7
 800e480:	4d35      	ldr	r5, [pc, #212]	; (800e558 <_strtod_l+0x5e0>)
 800e482:	1124      	asrs	r4, r4, #4
 800e484:	9307      	str	r3, [sp, #28]
 800e486:	2c01      	cmp	r4, #1
 800e488:	dc1e      	bgt.n	800e4c8 <_strtod_l+0x550>
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d001      	beq.n	800e492 <_strtod_l+0x51a>
 800e48e:	0006      	movs	r6, r0
 800e490:	000f      	movs	r7, r1
 800e492:	4b32      	ldr	r3, [pc, #200]	; (800e55c <_strtod_l+0x5e4>)
 800e494:	9a07      	ldr	r2, [sp, #28]
 800e496:	18ff      	adds	r7, r7, r3
 800e498:	4b2f      	ldr	r3, [pc, #188]	; (800e558 <_strtod_l+0x5e0>)
 800e49a:	00d2      	lsls	r2, r2, #3
 800e49c:	189d      	adds	r5, r3, r2
 800e49e:	6828      	ldr	r0, [r5, #0]
 800e4a0:	6869      	ldr	r1, [r5, #4]
 800e4a2:	0032      	movs	r2, r6
 800e4a4:	003b      	movs	r3, r7
 800e4a6:	f7f3 fcd9 	bl	8001e5c <__aeabi_dmul>
 800e4aa:	4b26      	ldr	r3, [pc, #152]	; (800e544 <_strtod_l+0x5cc>)
 800e4ac:	4a2c      	ldr	r2, [pc, #176]	; (800e560 <_strtod_l+0x5e8>)
 800e4ae:	0006      	movs	r6, r0
 800e4b0:	400b      	ands	r3, r1
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d8be      	bhi.n	800e434 <_strtod_l+0x4bc>
 800e4b6:	4a2b      	ldr	r2, [pc, #172]	; (800e564 <_strtod_l+0x5ec>)
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d913      	bls.n	800e4e4 <_strtod_l+0x56c>
 800e4bc:	2601      	movs	r6, #1
 800e4be:	4f2a      	ldr	r7, [pc, #168]	; (800e568 <_strtod_l+0x5f0>)
 800e4c0:	4276      	negs	r6, r6
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	9307      	str	r3, [sp, #28]
 800e4c6:	e088      	b.n	800e5da <_strtod_l+0x662>
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	4214      	tst	r4, r2
 800e4cc:	d004      	beq.n	800e4d8 <_strtod_l+0x560>
 800e4ce:	682a      	ldr	r2, [r5, #0]
 800e4d0:	686b      	ldr	r3, [r5, #4]
 800e4d2:	f7f3 fcc3 	bl	8001e5c <__aeabi_dmul>
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	9a07      	ldr	r2, [sp, #28]
 800e4da:	1064      	asrs	r4, r4, #1
 800e4dc:	3201      	adds	r2, #1
 800e4de:	9207      	str	r2, [sp, #28]
 800e4e0:	3508      	adds	r5, #8
 800e4e2:	e7d0      	b.n	800e486 <_strtod_l+0x50e>
 800e4e4:	23d4      	movs	r3, #212	; 0xd4
 800e4e6:	049b      	lsls	r3, r3, #18
 800e4e8:	18cf      	adds	r7, r1, r3
 800e4ea:	e7ea      	b.n	800e4c2 <_strtod_l+0x54a>
 800e4ec:	2c00      	cmp	r4, #0
 800e4ee:	d0e8      	beq.n	800e4c2 <_strtod_l+0x54a>
 800e4f0:	4264      	negs	r4, r4
 800e4f2:	230f      	movs	r3, #15
 800e4f4:	0022      	movs	r2, r4
 800e4f6:	401a      	ands	r2, r3
 800e4f8:	421c      	tst	r4, r3
 800e4fa:	d00a      	beq.n	800e512 <_strtod_l+0x59a>
 800e4fc:	4b15      	ldr	r3, [pc, #84]	; (800e554 <_strtod_l+0x5dc>)
 800e4fe:	00d2      	lsls	r2, r2, #3
 800e500:	189b      	adds	r3, r3, r2
 800e502:	0030      	movs	r0, r6
 800e504:	681a      	ldr	r2, [r3, #0]
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	0039      	movs	r1, r7
 800e50a:	f7f3 f8ad 	bl	8001668 <__aeabi_ddiv>
 800e50e:	0006      	movs	r6, r0
 800e510:	000f      	movs	r7, r1
 800e512:	1124      	asrs	r4, r4, #4
 800e514:	d0d5      	beq.n	800e4c2 <_strtod_l+0x54a>
 800e516:	2c1f      	cmp	r4, #31
 800e518:	dd28      	ble.n	800e56c <_strtod_l+0x5f4>
 800e51a:	2300      	movs	r3, #0
 800e51c:	9305      	str	r3, [sp, #20]
 800e51e:	9306      	str	r3, [sp, #24]
 800e520:	930d      	str	r3, [sp, #52]	; 0x34
 800e522:	9308      	str	r3, [sp, #32]
 800e524:	2322      	movs	r3, #34	; 0x22
 800e526:	9a04      	ldr	r2, [sp, #16]
 800e528:	2600      	movs	r6, #0
 800e52a:	6013      	str	r3, [r2, #0]
 800e52c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e52e:	2700      	movs	r7, #0
 800e530:	2b00      	cmp	r3, #0
 800e532:	d18d      	bne.n	800e450 <_strtod_l+0x4d8>
 800e534:	e55b      	b.n	800dfee <_strtod_l+0x76>
 800e536:	46c0      	nop			; (mov r8, r8)
 800e538:	00004e1f 	.word	0x00004e1f
 800e53c:	08013cde 	.word	0x08013cde
 800e540:	08013b90 	.word	0x08013b90
 800e544:	7ff00000 	.word	0x7ff00000
 800e548:	08013cd6 	.word	0x08013cd6
 800e54c:	08013dc0 	.word	0x08013dc0
 800e550:	08013dbc 	.word	0x08013dbc
 800e554:	08013f18 	.word	0x08013f18
 800e558:	08013ef0 	.word	0x08013ef0
 800e55c:	fcb00000 	.word	0xfcb00000
 800e560:	7ca00000 	.word	0x7ca00000
 800e564:	7c900000 	.word	0x7c900000
 800e568:	7fefffff 	.word	0x7fefffff
 800e56c:	2310      	movs	r3, #16
 800e56e:	0022      	movs	r2, r4
 800e570:	401a      	ands	r2, r3
 800e572:	9207      	str	r2, [sp, #28]
 800e574:	421c      	tst	r4, r3
 800e576:	d001      	beq.n	800e57c <_strtod_l+0x604>
 800e578:	335a      	adds	r3, #90	; 0x5a
 800e57a:	9307      	str	r3, [sp, #28]
 800e57c:	0030      	movs	r0, r6
 800e57e:	0039      	movs	r1, r7
 800e580:	2300      	movs	r3, #0
 800e582:	4dc4      	ldr	r5, [pc, #784]	; (800e894 <_strtod_l+0x91c>)
 800e584:	2201      	movs	r2, #1
 800e586:	4214      	tst	r4, r2
 800e588:	d004      	beq.n	800e594 <_strtod_l+0x61c>
 800e58a:	682a      	ldr	r2, [r5, #0]
 800e58c:	686b      	ldr	r3, [r5, #4]
 800e58e:	f7f3 fc65 	bl	8001e5c <__aeabi_dmul>
 800e592:	2301      	movs	r3, #1
 800e594:	1064      	asrs	r4, r4, #1
 800e596:	3508      	adds	r5, #8
 800e598:	2c00      	cmp	r4, #0
 800e59a:	d1f3      	bne.n	800e584 <_strtod_l+0x60c>
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d001      	beq.n	800e5a4 <_strtod_l+0x62c>
 800e5a0:	0006      	movs	r6, r0
 800e5a2:	000f      	movs	r7, r1
 800e5a4:	9b07      	ldr	r3, [sp, #28]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d00f      	beq.n	800e5ca <_strtod_l+0x652>
 800e5aa:	236b      	movs	r3, #107	; 0x6b
 800e5ac:	007a      	lsls	r2, r7, #1
 800e5ae:	0d52      	lsrs	r2, r2, #21
 800e5b0:	0039      	movs	r1, r7
 800e5b2:	1a9b      	subs	r3, r3, r2
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	dd08      	ble.n	800e5ca <_strtod_l+0x652>
 800e5b8:	2b1f      	cmp	r3, #31
 800e5ba:	dc00      	bgt.n	800e5be <_strtod_l+0x646>
 800e5bc:	e121      	b.n	800e802 <_strtod_l+0x88a>
 800e5be:	2600      	movs	r6, #0
 800e5c0:	2b34      	cmp	r3, #52	; 0x34
 800e5c2:	dc00      	bgt.n	800e5c6 <_strtod_l+0x64e>
 800e5c4:	e116      	b.n	800e7f4 <_strtod_l+0x87c>
 800e5c6:	27dc      	movs	r7, #220	; 0xdc
 800e5c8:	04bf      	lsls	r7, r7, #18
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	0030      	movs	r0, r6
 800e5d0:	0039      	movs	r1, r7
 800e5d2:	f7f1 ff45 	bl	8000460 <__aeabi_dcmpeq>
 800e5d6:	2800      	cmp	r0, #0
 800e5d8:	d19f      	bne.n	800e51a <_strtod_l+0x5a2>
 800e5da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5dc:	9a08      	ldr	r2, [sp, #32]
 800e5de:	9300      	str	r3, [sp, #0]
 800e5e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e5e2:	9b05      	ldr	r3, [sp, #20]
 800e5e4:	9804      	ldr	r0, [sp, #16]
 800e5e6:	f003 f88d 	bl	8011704 <__s2b>
 800e5ea:	900d      	str	r0, [sp, #52]	; 0x34
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	d100      	bne.n	800e5f2 <_strtod_l+0x67a>
 800e5f0:	e720      	b.n	800e434 <_strtod_l+0x4bc>
 800e5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5f4:	9906      	ldr	r1, [sp, #24]
 800e5f6:	17da      	asrs	r2, r3, #31
 800e5f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5fa:	1a5b      	subs	r3, r3, r1
 800e5fc:	401a      	ands	r2, r3
 800e5fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e600:	9215      	str	r2, [sp, #84]	; 0x54
 800e602:	43db      	mvns	r3, r3
 800e604:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e606:	17db      	asrs	r3, r3, #31
 800e608:	401a      	ands	r2, r3
 800e60a:	2300      	movs	r3, #0
 800e60c:	9218      	str	r2, [sp, #96]	; 0x60
 800e60e:	9305      	str	r3, [sp, #20]
 800e610:	9306      	str	r3, [sp, #24]
 800e612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e614:	9804      	ldr	r0, [sp, #16]
 800e616:	6859      	ldr	r1, [r3, #4]
 800e618:	f002 ffc8 	bl	80115ac <_Balloc>
 800e61c:	9008      	str	r0, [sp, #32]
 800e61e:	2800      	cmp	r0, #0
 800e620:	d100      	bne.n	800e624 <_strtod_l+0x6ac>
 800e622:	e70c      	b.n	800e43e <_strtod_l+0x4c6>
 800e624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e626:	300c      	adds	r0, #12
 800e628:	0019      	movs	r1, r3
 800e62a:	691a      	ldr	r2, [r3, #16]
 800e62c:	310c      	adds	r1, #12
 800e62e:	3202      	adds	r2, #2
 800e630:	0092      	lsls	r2, r2, #2
 800e632:	f001 fc75 	bl	800ff20 <memcpy>
 800e636:	ab1e      	add	r3, sp, #120	; 0x78
 800e638:	9301      	str	r3, [sp, #4]
 800e63a:	ab1d      	add	r3, sp, #116	; 0x74
 800e63c:	9300      	str	r3, [sp, #0]
 800e63e:	0032      	movs	r2, r6
 800e640:	003b      	movs	r3, r7
 800e642:	9804      	ldr	r0, [sp, #16]
 800e644:	9610      	str	r6, [sp, #64]	; 0x40
 800e646:	9711      	str	r7, [sp, #68]	; 0x44
 800e648:	f003 fb9e 	bl	8011d88 <__d2b>
 800e64c:	901c      	str	r0, [sp, #112]	; 0x70
 800e64e:	2800      	cmp	r0, #0
 800e650:	d100      	bne.n	800e654 <_strtod_l+0x6dc>
 800e652:	e6f4      	b.n	800e43e <_strtod_l+0x4c6>
 800e654:	2101      	movs	r1, #1
 800e656:	9804      	ldr	r0, [sp, #16]
 800e658:	f003 f8e8 	bl	801182c <__i2b>
 800e65c:	9006      	str	r0, [sp, #24]
 800e65e:	2800      	cmp	r0, #0
 800e660:	d100      	bne.n	800e664 <_strtod_l+0x6ec>
 800e662:	e6ec      	b.n	800e43e <_strtod_l+0x4c6>
 800e664:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e666:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e668:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e66a:	1ad4      	subs	r4, r2, r3
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	db01      	blt.n	800e674 <_strtod_l+0x6fc>
 800e670:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800e672:	195d      	adds	r5, r3, r5
 800e674:	9907      	ldr	r1, [sp, #28]
 800e676:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e678:	1a5b      	subs	r3, r3, r1
 800e67a:	2136      	movs	r1, #54	; 0x36
 800e67c:	189b      	adds	r3, r3, r2
 800e67e:	1a8a      	subs	r2, r1, r2
 800e680:	4985      	ldr	r1, [pc, #532]	; (800e898 <_strtod_l+0x920>)
 800e682:	2001      	movs	r0, #1
 800e684:	468c      	mov	ip, r1
 800e686:	2100      	movs	r1, #0
 800e688:	3b01      	subs	r3, #1
 800e68a:	9114      	str	r1, [sp, #80]	; 0x50
 800e68c:	9012      	str	r0, [sp, #72]	; 0x48
 800e68e:	4563      	cmp	r3, ip
 800e690:	da07      	bge.n	800e6a2 <_strtod_l+0x72a>
 800e692:	4661      	mov	r1, ip
 800e694:	1ac9      	subs	r1, r1, r3
 800e696:	1a52      	subs	r2, r2, r1
 800e698:	291f      	cmp	r1, #31
 800e69a:	dd00      	ble.n	800e69e <_strtod_l+0x726>
 800e69c:	e0b6      	b.n	800e80c <_strtod_l+0x894>
 800e69e:	4088      	lsls	r0, r1
 800e6a0:	9012      	str	r0, [sp, #72]	; 0x48
 800e6a2:	18ab      	adds	r3, r5, r2
 800e6a4:	930c      	str	r3, [sp, #48]	; 0x30
 800e6a6:	18a4      	adds	r4, r4, r2
 800e6a8:	9b07      	ldr	r3, [sp, #28]
 800e6aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e6ac:	191c      	adds	r4, r3, r4
 800e6ae:	002b      	movs	r3, r5
 800e6b0:	4295      	cmp	r5, r2
 800e6b2:	dd00      	ble.n	800e6b6 <_strtod_l+0x73e>
 800e6b4:	0013      	movs	r3, r2
 800e6b6:	42a3      	cmp	r3, r4
 800e6b8:	dd00      	ble.n	800e6bc <_strtod_l+0x744>
 800e6ba:	0023      	movs	r3, r4
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	dd04      	ble.n	800e6ca <_strtod_l+0x752>
 800e6c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e6c2:	1ae4      	subs	r4, r4, r3
 800e6c4:	1ad2      	subs	r2, r2, r3
 800e6c6:	920c      	str	r2, [sp, #48]	; 0x30
 800e6c8:	1aed      	subs	r5, r5, r3
 800e6ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	dd17      	ble.n	800e700 <_strtod_l+0x788>
 800e6d0:	001a      	movs	r2, r3
 800e6d2:	9906      	ldr	r1, [sp, #24]
 800e6d4:	9804      	ldr	r0, [sp, #16]
 800e6d6:	f003 f971 	bl	80119bc <__pow5mult>
 800e6da:	9006      	str	r0, [sp, #24]
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	d100      	bne.n	800e6e2 <_strtod_l+0x76a>
 800e6e0:	e6ad      	b.n	800e43e <_strtod_l+0x4c6>
 800e6e2:	0001      	movs	r1, r0
 800e6e4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e6e6:	9804      	ldr	r0, [sp, #16]
 800e6e8:	f003 f8b8 	bl	801185c <__multiply>
 800e6ec:	900e      	str	r0, [sp, #56]	; 0x38
 800e6ee:	2800      	cmp	r0, #0
 800e6f0:	d100      	bne.n	800e6f4 <_strtod_l+0x77c>
 800e6f2:	e6a4      	b.n	800e43e <_strtod_l+0x4c6>
 800e6f4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e6f6:	9804      	ldr	r0, [sp, #16]
 800e6f8:	f002 ff9c 	bl	8011634 <_Bfree>
 800e6fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e6fe:	931c      	str	r3, [sp, #112]	; 0x70
 800e700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e702:	2b00      	cmp	r3, #0
 800e704:	dd00      	ble.n	800e708 <_strtod_l+0x790>
 800e706:	e087      	b.n	800e818 <_strtod_l+0x8a0>
 800e708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	dd08      	ble.n	800e720 <_strtod_l+0x7a8>
 800e70e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e710:	9908      	ldr	r1, [sp, #32]
 800e712:	9804      	ldr	r0, [sp, #16]
 800e714:	f003 f952 	bl	80119bc <__pow5mult>
 800e718:	9008      	str	r0, [sp, #32]
 800e71a:	2800      	cmp	r0, #0
 800e71c:	d100      	bne.n	800e720 <_strtod_l+0x7a8>
 800e71e:	e68e      	b.n	800e43e <_strtod_l+0x4c6>
 800e720:	2c00      	cmp	r4, #0
 800e722:	dd08      	ble.n	800e736 <_strtod_l+0x7be>
 800e724:	0022      	movs	r2, r4
 800e726:	9908      	ldr	r1, [sp, #32]
 800e728:	9804      	ldr	r0, [sp, #16]
 800e72a:	f003 f9a3 	bl	8011a74 <__lshift>
 800e72e:	9008      	str	r0, [sp, #32]
 800e730:	2800      	cmp	r0, #0
 800e732:	d100      	bne.n	800e736 <_strtod_l+0x7be>
 800e734:	e683      	b.n	800e43e <_strtod_l+0x4c6>
 800e736:	2d00      	cmp	r5, #0
 800e738:	dd08      	ble.n	800e74c <_strtod_l+0x7d4>
 800e73a:	002a      	movs	r2, r5
 800e73c:	9906      	ldr	r1, [sp, #24]
 800e73e:	9804      	ldr	r0, [sp, #16]
 800e740:	f003 f998 	bl	8011a74 <__lshift>
 800e744:	9006      	str	r0, [sp, #24]
 800e746:	2800      	cmp	r0, #0
 800e748:	d100      	bne.n	800e74c <_strtod_l+0x7d4>
 800e74a:	e678      	b.n	800e43e <_strtod_l+0x4c6>
 800e74c:	9a08      	ldr	r2, [sp, #32]
 800e74e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e750:	9804      	ldr	r0, [sp, #16]
 800e752:	f003 fa19 	bl	8011b88 <__mdiff>
 800e756:	9005      	str	r0, [sp, #20]
 800e758:	2800      	cmp	r0, #0
 800e75a:	d100      	bne.n	800e75e <_strtod_l+0x7e6>
 800e75c:	e66f      	b.n	800e43e <_strtod_l+0x4c6>
 800e75e:	2200      	movs	r2, #0
 800e760:	68c3      	ldr	r3, [r0, #12]
 800e762:	9906      	ldr	r1, [sp, #24]
 800e764:	60c2      	str	r2, [r0, #12]
 800e766:	930c      	str	r3, [sp, #48]	; 0x30
 800e768:	f003 f9f2 	bl	8011b50 <__mcmp>
 800e76c:	2800      	cmp	r0, #0
 800e76e:	da5d      	bge.n	800e82c <_strtod_l+0x8b4>
 800e770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e772:	4333      	orrs	r3, r6
 800e774:	d000      	beq.n	800e778 <_strtod_l+0x800>
 800e776:	e088      	b.n	800e88a <_strtod_l+0x912>
 800e778:	033b      	lsls	r3, r7, #12
 800e77a:	d000      	beq.n	800e77e <_strtod_l+0x806>
 800e77c:	e085      	b.n	800e88a <_strtod_l+0x912>
 800e77e:	22d6      	movs	r2, #214	; 0xd6
 800e780:	4b46      	ldr	r3, [pc, #280]	; (800e89c <_strtod_l+0x924>)
 800e782:	04d2      	lsls	r2, r2, #19
 800e784:	403b      	ands	r3, r7
 800e786:	4293      	cmp	r3, r2
 800e788:	d97f      	bls.n	800e88a <_strtod_l+0x912>
 800e78a:	9b05      	ldr	r3, [sp, #20]
 800e78c:	695b      	ldr	r3, [r3, #20]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d103      	bne.n	800e79a <_strtod_l+0x822>
 800e792:	9b05      	ldr	r3, [sp, #20]
 800e794:	691b      	ldr	r3, [r3, #16]
 800e796:	2b01      	cmp	r3, #1
 800e798:	dd77      	ble.n	800e88a <_strtod_l+0x912>
 800e79a:	9905      	ldr	r1, [sp, #20]
 800e79c:	2201      	movs	r2, #1
 800e79e:	9804      	ldr	r0, [sp, #16]
 800e7a0:	f003 f968 	bl	8011a74 <__lshift>
 800e7a4:	9906      	ldr	r1, [sp, #24]
 800e7a6:	9005      	str	r0, [sp, #20]
 800e7a8:	f003 f9d2 	bl	8011b50 <__mcmp>
 800e7ac:	2800      	cmp	r0, #0
 800e7ae:	dd6c      	ble.n	800e88a <_strtod_l+0x912>
 800e7b0:	9907      	ldr	r1, [sp, #28]
 800e7b2:	003b      	movs	r3, r7
 800e7b4:	4a39      	ldr	r2, [pc, #228]	; (800e89c <_strtod_l+0x924>)
 800e7b6:	2900      	cmp	r1, #0
 800e7b8:	d100      	bne.n	800e7bc <_strtod_l+0x844>
 800e7ba:	e094      	b.n	800e8e6 <_strtod_l+0x96e>
 800e7bc:	0011      	movs	r1, r2
 800e7be:	20d6      	movs	r0, #214	; 0xd6
 800e7c0:	4039      	ands	r1, r7
 800e7c2:	04c0      	lsls	r0, r0, #19
 800e7c4:	4281      	cmp	r1, r0
 800e7c6:	dd00      	ble.n	800e7ca <_strtod_l+0x852>
 800e7c8:	e08d      	b.n	800e8e6 <_strtod_l+0x96e>
 800e7ca:	23dc      	movs	r3, #220	; 0xdc
 800e7cc:	049b      	lsls	r3, r3, #18
 800e7ce:	4299      	cmp	r1, r3
 800e7d0:	dc00      	bgt.n	800e7d4 <_strtod_l+0x85c>
 800e7d2:	e6a7      	b.n	800e524 <_strtod_l+0x5ac>
 800e7d4:	0030      	movs	r0, r6
 800e7d6:	0039      	movs	r1, r7
 800e7d8:	4b31      	ldr	r3, [pc, #196]	; (800e8a0 <_strtod_l+0x928>)
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f7f3 fb3e 	bl	8001e5c <__aeabi_dmul>
 800e7e0:	4b2e      	ldr	r3, [pc, #184]	; (800e89c <_strtod_l+0x924>)
 800e7e2:	0006      	movs	r6, r0
 800e7e4:	000f      	movs	r7, r1
 800e7e6:	420b      	tst	r3, r1
 800e7e8:	d000      	beq.n	800e7ec <_strtod_l+0x874>
 800e7ea:	e631      	b.n	800e450 <_strtod_l+0x4d8>
 800e7ec:	2322      	movs	r3, #34	; 0x22
 800e7ee:	9a04      	ldr	r2, [sp, #16]
 800e7f0:	6013      	str	r3, [r2, #0]
 800e7f2:	e62d      	b.n	800e450 <_strtod_l+0x4d8>
 800e7f4:	234b      	movs	r3, #75	; 0x4b
 800e7f6:	1a9a      	subs	r2, r3, r2
 800e7f8:	3b4c      	subs	r3, #76	; 0x4c
 800e7fa:	4093      	lsls	r3, r2
 800e7fc:	4019      	ands	r1, r3
 800e7fe:	000f      	movs	r7, r1
 800e800:	e6e3      	b.n	800e5ca <_strtod_l+0x652>
 800e802:	2201      	movs	r2, #1
 800e804:	4252      	negs	r2, r2
 800e806:	409a      	lsls	r2, r3
 800e808:	4016      	ands	r6, r2
 800e80a:	e6de      	b.n	800e5ca <_strtod_l+0x652>
 800e80c:	4925      	ldr	r1, [pc, #148]	; (800e8a4 <_strtod_l+0x92c>)
 800e80e:	1acb      	subs	r3, r1, r3
 800e810:	0001      	movs	r1, r0
 800e812:	4099      	lsls	r1, r3
 800e814:	9114      	str	r1, [sp, #80]	; 0x50
 800e816:	e743      	b.n	800e6a0 <_strtod_l+0x728>
 800e818:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e81a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e81c:	9804      	ldr	r0, [sp, #16]
 800e81e:	f003 f929 	bl	8011a74 <__lshift>
 800e822:	901c      	str	r0, [sp, #112]	; 0x70
 800e824:	2800      	cmp	r0, #0
 800e826:	d000      	beq.n	800e82a <_strtod_l+0x8b2>
 800e828:	e76e      	b.n	800e708 <_strtod_l+0x790>
 800e82a:	e608      	b.n	800e43e <_strtod_l+0x4c6>
 800e82c:	970e      	str	r7, [sp, #56]	; 0x38
 800e82e:	2800      	cmp	r0, #0
 800e830:	d177      	bne.n	800e922 <_strtod_l+0x9aa>
 800e832:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e834:	033b      	lsls	r3, r7, #12
 800e836:	0b1b      	lsrs	r3, r3, #12
 800e838:	2a00      	cmp	r2, #0
 800e83a:	d039      	beq.n	800e8b0 <_strtod_l+0x938>
 800e83c:	4a1a      	ldr	r2, [pc, #104]	; (800e8a8 <_strtod_l+0x930>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d139      	bne.n	800e8b6 <_strtod_l+0x93e>
 800e842:	2101      	movs	r1, #1
 800e844:	9b07      	ldr	r3, [sp, #28]
 800e846:	4249      	negs	r1, r1
 800e848:	0032      	movs	r2, r6
 800e84a:	0008      	movs	r0, r1
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d00b      	beq.n	800e868 <_strtod_l+0x8f0>
 800e850:	24d4      	movs	r4, #212	; 0xd4
 800e852:	4b12      	ldr	r3, [pc, #72]	; (800e89c <_strtod_l+0x924>)
 800e854:	0008      	movs	r0, r1
 800e856:	403b      	ands	r3, r7
 800e858:	04e4      	lsls	r4, r4, #19
 800e85a:	42a3      	cmp	r3, r4
 800e85c:	d804      	bhi.n	800e868 <_strtod_l+0x8f0>
 800e85e:	306c      	adds	r0, #108	; 0x6c
 800e860:	0d1b      	lsrs	r3, r3, #20
 800e862:	1ac3      	subs	r3, r0, r3
 800e864:	4099      	lsls	r1, r3
 800e866:	0008      	movs	r0, r1
 800e868:	4282      	cmp	r2, r0
 800e86a:	d124      	bne.n	800e8b6 <_strtod_l+0x93e>
 800e86c:	4b0f      	ldr	r3, [pc, #60]	; (800e8ac <_strtod_l+0x934>)
 800e86e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e870:	4299      	cmp	r1, r3
 800e872:	d102      	bne.n	800e87a <_strtod_l+0x902>
 800e874:	3201      	adds	r2, #1
 800e876:	d100      	bne.n	800e87a <_strtod_l+0x902>
 800e878:	e5e1      	b.n	800e43e <_strtod_l+0x4c6>
 800e87a:	4b08      	ldr	r3, [pc, #32]	; (800e89c <_strtod_l+0x924>)
 800e87c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e87e:	2600      	movs	r6, #0
 800e880:	401a      	ands	r2, r3
 800e882:	0013      	movs	r3, r2
 800e884:	2280      	movs	r2, #128	; 0x80
 800e886:	0352      	lsls	r2, r2, #13
 800e888:	189f      	adds	r7, r3, r2
 800e88a:	9b07      	ldr	r3, [sp, #28]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d1a1      	bne.n	800e7d4 <_strtod_l+0x85c>
 800e890:	e5de      	b.n	800e450 <_strtod_l+0x4d8>
 800e892:	46c0      	nop			; (mov r8, r8)
 800e894:	08013ba8 	.word	0x08013ba8
 800e898:	fffffc02 	.word	0xfffffc02
 800e89c:	7ff00000 	.word	0x7ff00000
 800e8a0:	39500000 	.word	0x39500000
 800e8a4:	fffffbe2 	.word	0xfffffbe2
 800e8a8:	000fffff 	.word	0x000fffff
 800e8ac:	7fefffff 	.word	0x7fefffff
 800e8b0:	4333      	orrs	r3, r6
 800e8b2:	d100      	bne.n	800e8b6 <_strtod_l+0x93e>
 800e8b4:	e77c      	b.n	800e7b0 <_strtod_l+0x838>
 800e8b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d01d      	beq.n	800e8f8 <_strtod_l+0x980>
 800e8bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e8c0:	4213      	tst	r3, r2
 800e8c2:	d0e2      	beq.n	800e88a <_strtod_l+0x912>
 800e8c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e8c6:	0030      	movs	r0, r6
 800e8c8:	0039      	movs	r1, r7
 800e8ca:	9a07      	ldr	r2, [sp, #28]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d017      	beq.n	800e900 <_strtod_l+0x988>
 800e8d0:	f7ff fb3a 	bl	800df48 <sulp>
 800e8d4:	0002      	movs	r2, r0
 800e8d6:	000b      	movs	r3, r1
 800e8d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e8da:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e8dc:	f7f2 fb64 	bl	8000fa8 <__aeabi_dadd>
 800e8e0:	0006      	movs	r6, r0
 800e8e2:	000f      	movs	r7, r1
 800e8e4:	e7d1      	b.n	800e88a <_strtod_l+0x912>
 800e8e6:	2601      	movs	r6, #1
 800e8e8:	4013      	ands	r3, r2
 800e8ea:	4a98      	ldr	r2, [pc, #608]	; (800eb4c <_strtod_l+0xbd4>)
 800e8ec:	4276      	negs	r6, r6
 800e8ee:	189b      	adds	r3, r3, r2
 800e8f0:	4a97      	ldr	r2, [pc, #604]	; (800eb50 <_strtod_l+0xbd8>)
 800e8f2:	431a      	orrs	r2, r3
 800e8f4:	0017      	movs	r7, r2
 800e8f6:	e7c8      	b.n	800e88a <_strtod_l+0x912>
 800e8f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e8fa:	4233      	tst	r3, r6
 800e8fc:	d0c5      	beq.n	800e88a <_strtod_l+0x912>
 800e8fe:	e7e1      	b.n	800e8c4 <_strtod_l+0x94c>
 800e900:	f7ff fb22 	bl	800df48 <sulp>
 800e904:	0002      	movs	r2, r0
 800e906:	000b      	movs	r3, r1
 800e908:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e90a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e90c:	f7f3 fd68 	bl	80023e0 <__aeabi_dsub>
 800e910:	2200      	movs	r2, #0
 800e912:	2300      	movs	r3, #0
 800e914:	0006      	movs	r6, r0
 800e916:	000f      	movs	r7, r1
 800e918:	f7f1 fda2 	bl	8000460 <__aeabi_dcmpeq>
 800e91c:	2800      	cmp	r0, #0
 800e91e:	d0b4      	beq.n	800e88a <_strtod_l+0x912>
 800e920:	e600      	b.n	800e524 <_strtod_l+0x5ac>
 800e922:	9906      	ldr	r1, [sp, #24]
 800e924:	9805      	ldr	r0, [sp, #20]
 800e926:	f003 fa8f 	bl	8011e48 <__ratio>
 800e92a:	2380      	movs	r3, #128	; 0x80
 800e92c:	2200      	movs	r2, #0
 800e92e:	05db      	lsls	r3, r3, #23
 800e930:	0004      	movs	r4, r0
 800e932:	000d      	movs	r5, r1
 800e934:	f7f1 fda4 	bl	8000480 <__aeabi_dcmple>
 800e938:	2800      	cmp	r0, #0
 800e93a:	d06d      	beq.n	800ea18 <_strtod_l+0xaa0>
 800e93c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d000      	beq.n	800e944 <_strtod_l+0x9cc>
 800e942:	e07e      	b.n	800ea42 <_strtod_l+0xaca>
 800e944:	2e00      	cmp	r6, #0
 800e946:	d158      	bne.n	800e9fa <_strtod_l+0xa82>
 800e948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e94a:	031b      	lsls	r3, r3, #12
 800e94c:	d000      	beq.n	800e950 <_strtod_l+0x9d8>
 800e94e:	e07f      	b.n	800ea50 <_strtod_l+0xad8>
 800e950:	2200      	movs	r2, #0
 800e952:	0020      	movs	r0, r4
 800e954:	0029      	movs	r1, r5
 800e956:	4b7f      	ldr	r3, [pc, #508]	; (800eb54 <_strtod_l+0xbdc>)
 800e958:	f7f1 fd88 	bl	800046c <__aeabi_dcmplt>
 800e95c:	2800      	cmp	r0, #0
 800e95e:	d158      	bne.n	800ea12 <_strtod_l+0xa9a>
 800e960:	0020      	movs	r0, r4
 800e962:	0029      	movs	r1, r5
 800e964:	2200      	movs	r2, #0
 800e966:	4b7c      	ldr	r3, [pc, #496]	; (800eb58 <_strtod_l+0xbe0>)
 800e968:	f7f3 fa78 	bl	8001e5c <__aeabi_dmul>
 800e96c:	0004      	movs	r4, r0
 800e96e:	000d      	movs	r5, r1
 800e970:	2380      	movs	r3, #128	; 0x80
 800e972:	061b      	lsls	r3, r3, #24
 800e974:	940a      	str	r4, [sp, #40]	; 0x28
 800e976:	18eb      	adds	r3, r5, r3
 800e978:	930b      	str	r3, [sp, #44]	; 0x2c
 800e97a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e97c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e97e:	9212      	str	r2, [sp, #72]	; 0x48
 800e980:	9313      	str	r3, [sp, #76]	; 0x4c
 800e982:	4a76      	ldr	r2, [pc, #472]	; (800eb5c <_strtod_l+0xbe4>)
 800e984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e986:	4013      	ands	r3, r2
 800e988:	9314      	str	r3, [sp, #80]	; 0x50
 800e98a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e98c:	4b74      	ldr	r3, [pc, #464]	; (800eb60 <_strtod_l+0xbe8>)
 800e98e:	429a      	cmp	r2, r3
 800e990:	d000      	beq.n	800e994 <_strtod_l+0xa1c>
 800e992:	e091      	b.n	800eab8 <_strtod_l+0xb40>
 800e994:	4a73      	ldr	r2, [pc, #460]	; (800eb64 <_strtod_l+0xbec>)
 800e996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e998:	4694      	mov	ip, r2
 800e99a:	4463      	add	r3, ip
 800e99c:	001f      	movs	r7, r3
 800e99e:	0030      	movs	r0, r6
 800e9a0:	0019      	movs	r1, r3
 800e9a2:	f003 f989 	bl	8011cb8 <__ulp>
 800e9a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9aa:	f7f3 fa57 	bl	8001e5c <__aeabi_dmul>
 800e9ae:	0032      	movs	r2, r6
 800e9b0:	003b      	movs	r3, r7
 800e9b2:	f7f2 faf9 	bl	8000fa8 <__aeabi_dadd>
 800e9b6:	4a69      	ldr	r2, [pc, #420]	; (800eb5c <_strtod_l+0xbe4>)
 800e9b8:	4b6b      	ldr	r3, [pc, #428]	; (800eb68 <_strtod_l+0xbf0>)
 800e9ba:	0006      	movs	r6, r0
 800e9bc:	400a      	ands	r2, r1
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	d949      	bls.n	800ea56 <_strtod_l+0xade>
 800e9c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e9c4:	4b69      	ldr	r3, [pc, #420]	; (800eb6c <_strtod_l+0xbf4>)
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d103      	bne.n	800e9d2 <_strtod_l+0xa5a>
 800e9ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e9cc:	3301      	adds	r3, #1
 800e9ce:	d100      	bne.n	800e9d2 <_strtod_l+0xa5a>
 800e9d0:	e535      	b.n	800e43e <_strtod_l+0x4c6>
 800e9d2:	2601      	movs	r6, #1
 800e9d4:	4f65      	ldr	r7, [pc, #404]	; (800eb6c <_strtod_l+0xbf4>)
 800e9d6:	4276      	negs	r6, r6
 800e9d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e9da:	9804      	ldr	r0, [sp, #16]
 800e9dc:	f002 fe2a 	bl	8011634 <_Bfree>
 800e9e0:	9908      	ldr	r1, [sp, #32]
 800e9e2:	9804      	ldr	r0, [sp, #16]
 800e9e4:	f002 fe26 	bl	8011634 <_Bfree>
 800e9e8:	9906      	ldr	r1, [sp, #24]
 800e9ea:	9804      	ldr	r0, [sp, #16]
 800e9ec:	f002 fe22 	bl	8011634 <_Bfree>
 800e9f0:	9905      	ldr	r1, [sp, #20]
 800e9f2:	9804      	ldr	r0, [sp, #16]
 800e9f4:	f002 fe1e 	bl	8011634 <_Bfree>
 800e9f8:	e60b      	b.n	800e612 <_strtod_l+0x69a>
 800e9fa:	2e01      	cmp	r6, #1
 800e9fc:	d103      	bne.n	800ea06 <_strtod_l+0xa8e>
 800e9fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d100      	bne.n	800ea06 <_strtod_l+0xa8e>
 800ea04:	e58e      	b.n	800e524 <_strtod_l+0x5ac>
 800ea06:	2300      	movs	r3, #0
 800ea08:	4c59      	ldr	r4, [pc, #356]	; (800eb70 <_strtod_l+0xbf8>)
 800ea0a:	930a      	str	r3, [sp, #40]	; 0x28
 800ea0c:	940b      	str	r4, [sp, #44]	; 0x2c
 800ea0e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ea10:	e01c      	b.n	800ea4c <_strtod_l+0xad4>
 800ea12:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ea14:	4d50      	ldr	r5, [pc, #320]	; (800eb58 <_strtod_l+0xbe0>)
 800ea16:	e7ab      	b.n	800e970 <_strtod_l+0x9f8>
 800ea18:	2200      	movs	r2, #0
 800ea1a:	0020      	movs	r0, r4
 800ea1c:	0029      	movs	r1, r5
 800ea1e:	4b4e      	ldr	r3, [pc, #312]	; (800eb58 <_strtod_l+0xbe0>)
 800ea20:	f7f3 fa1c 	bl	8001e5c <__aeabi_dmul>
 800ea24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea26:	0004      	movs	r4, r0
 800ea28:	000b      	movs	r3, r1
 800ea2a:	000d      	movs	r5, r1
 800ea2c:	2a00      	cmp	r2, #0
 800ea2e:	d104      	bne.n	800ea3a <_strtod_l+0xac2>
 800ea30:	2280      	movs	r2, #128	; 0x80
 800ea32:	0612      	lsls	r2, r2, #24
 800ea34:	900a      	str	r0, [sp, #40]	; 0x28
 800ea36:	188b      	adds	r3, r1, r2
 800ea38:	e79e      	b.n	800e978 <_strtod_l+0xa00>
 800ea3a:	0002      	movs	r2, r0
 800ea3c:	920a      	str	r2, [sp, #40]	; 0x28
 800ea3e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea40:	e79b      	b.n	800e97a <_strtod_l+0xa02>
 800ea42:	2300      	movs	r3, #0
 800ea44:	4c43      	ldr	r4, [pc, #268]	; (800eb54 <_strtod_l+0xbdc>)
 800ea46:	930a      	str	r3, [sp, #40]	; 0x28
 800ea48:	940b      	str	r4, [sp, #44]	; 0x2c
 800ea4a:	2400      	movs	r4, #0
 800ea4c:	4d41      	ldr	r5, [pc, #260]	; (800eb54 <_strtod_l+0xbdc>)
 800ea4e:	e794      	b.n	800e97a <_strtod_l+0xa02>
 800ea50:	2300      	movs	r3, #0
 800ea52:	4c47      	ldr	r4, [pc, #284]	; (800eb70 <_strtod_l+0xbf8>)
 800ea54:	e7f7      	b.n	800ea46 <_strtod_l+0xace>
 800ea56:	23d4      	movs	r3, #212	; 0xd4
 800ea58:	049b      	lsls	r3, r3, #18
 800ea5a:	18cf      	adds	r7, r1, r3
 800ea5c:	9b07      	ldr	r3, [sp, #28]
 800ea5e:	970e      	str	r7, [sp, #56]	; 0x38
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d1b9      	bne.n	800e9d8 <_strtod_l+0xa60>
 800ea64:	4b3d      	ldr	r3, [pc, #244]	; (800eb5c <_strtod_l+0xbe4>)
 800ea66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ea68:	403b      	ands	r3, r7
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d1b4      	bne.n	800e9d8 <_strtod_l+0xa60>
 800ea6e:	0020      	movs	r0, r4
 800ea70:	0029      	movs	r1, r5
 800ea72:	f7f1 fdc9 	bl	8000608 <__aeabi_d2lz>
 800ea76:	f7f1 fe03 	bl	8000680 <__aeabi_l2d>
 800ea7a:	0002      	movs	r2, r0
 800ea7c:	000b      	movs	r3, r1
 800ea7e:	0020      	movs	r0, r4
 800ea80:	0029      	movs	r1, r5
 800ea82:	f7f3 fcad 	bl	80023e0 <__aeabi_dsub>
 800ea86:	033b      	lsls	r3, r7, #12
 800ea88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea8a:	0b1b      	lsrs	r3, r3, #12
 800ea8c:	4333      	orrs	r3, r6
 800ea8e:	4313      	orrs	r3, r2
 800ea90:	0004      	movs	r4, r0
 800ea92:	000d      	movs	r5, r1
 800ea94:	4a37      	ldr	r2, [pc, #220]	; (800eb74 <_strtod_l+0xbfc>)
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d054      	beq.n	800eb44 <_strtod_l+0xbcc>
 800ea9a:	4b37      	ldr	r3, [pc, #220]	; (800eb78 <_strtod_l+0xc00>)
 800ea9c:	f7f1 fce6 	bl	800046c <__aeabi_dcmplt>
 800eaa0:	2800      	cmp	r0, #0
 800eaa2:	d000      	beq.n	800eaa6 <_strtod_l+0xb2e>
 800eaa4:	e4d4      	b.n	800e450 <_strtod_l+0x4d8>
 800eaa6:	0020      	movs	r0, r4
 800eaa8:	0029      	movs	r1, r5
 800eaaa:	4a34      	ldr	r2, [pc, #208]	; (800eb7c <_strtod_l+0xc04>)
 800eaac:	4b2a      	ldr	r3, [pc, #168]	; (800eb58 <_strtod_l+0xbe0>)
 800eaae:	f7f1 fcf1 	bl	8000494 <__aeabi_dcmpgt>
 800eab2:	2800      	cmp	r0, #0
 800eab4:	d090      	beq.n	800e9d8 <_strtod_l+0xa60>
 800eab6:	e4cb      	b.n	800e450 <_strtod_l+0x4d8>
 800eab8:	9b07      	ldr	r3, [sp, #28]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d02b      	beq.n	800eb16 <_strtod_l+0xb9e>
 800eabe:	23d4      	movs	r3, #212	; 0xd4
 800eac0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eac2:	04db      	lsls	r3, r3, #19
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d826      	bhi.n	800eb16 <_strtod_l+0xb9e>
 800eac8:	0020      	movs	r0, r4
 800eaca:	0029      	movs	r1, r5
 800eacc:	4a2c      	ldr	r2, [pc, #176]	; (800eb80 <_strtod_l+0xc08>)
 800eace:	4b2d      	ldr	r3, [pc, #180]	; (800eb84 <_strtod_l+0xc0c>)
 800ead0:	f7f1 fcd6 	bl	8000480 <__aeabi_dcmple>
 800ead4:	2800      	cmp	r0, #0
 800ead6:	d017      	beq.n	800eb08 <_strtod_l+0xb90>
 800ead8:	0020      	movs	r0, r4
 800eada:	0029      	movs	r1, r5
 800eadc:	f7f1 fd76 	bl	80005cc <__aeabi_d2uiz>
 800eae0:	2800      	cmp	r0, #0
 800eae2:	d100      	bne.n	800eae6 <_strtod_l+0xb6e>
 800eae4:	3001      	adds	r0, #1
 800eae6:	f7f4 f881 	bl	8002bec <__aeabi_ui2d>
 800eaea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eaec:	0004      	movs	r4, r0
 800eaee:	000b      	movs	r3, r1
 800eaf0:	000d      	movs	r5, r1
 800eaf2:	2a00      	cmp	r2, #0
 800eaf4:	d122      	bne.n	800eb3c <_strtod_l+0xbc4>
 800eaf6:	2280      	movs	r2, #128	; 0x80
 800eaf8:	0612      	lsls	r2, r2, #24
 800eafa:	188b      	adds	r3, r1, r2
 800eafc:	9016      	str	r0, [sp, #88]	; 0x58
 800eafe:	9317      	str	r3, [sp, #92]	; 0x5c
 800eb00:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800eb02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eb04:	9212      	str	r2, [sp, #72]	; 0x48
 800eb06:	9313      	str	r3, [sp, #76]	; 0x4c
 800eb08:	22d6      	movs	r2, #214	; 0xd6
 800eb0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eb0c:	04d2      	lsls	r2, r2, #19
 800eb0e:	189b      	adds	r3, r3, r2
 800eb10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eb12:	1a9b      	subs	r3, r3, r2
 800eb14:	9313      	str	r3, [sp, #76]	; 0x4c
 800eb16:	9810      	ldr	r0, [sp, #64]	; 0x40
 800eb18:	9911      	ldr	r1, [sp, #68]	; 0x44
 800eb1a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800eb1c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800eb1e:	f003 f8cb 	bl	8011cb8 <__ulp>
 800eb22:	0002      	movs	r2, r0
 800eb24:	000b      	movs	r3, r1
 800eb26:	0030      	movs	r0, r6
 800eb28:	0039      	movs	r1, r7
 800eb2a:	f7f3 f997 	bl	8001e5c <__aeabi_dmul>
 800eb2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eb30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb32:	f7f2 fa39 	bl	8000fa8 <__aeabi_dadd>
 800eb36:	0006      	movs	r6, r0
 800eb38:	000f      	movs	r7, r1
 800eb3a:	e78f      	b.n	800ea5c <_strtod_l+0xae4>
 800eb3c:	0002      	movs	r2, r0
 800eb3e:	9216      	str	r2, [sp, #88]	; 0x58
 800eb40:	9317      	str	r3, [sp, #92]	; 0x5c
 800eb42:	e7dd      	b.n	800eb00 <_strtod_l+0xb88>
 800eb44:	4b10      	ldr	r3, [pc, #64]	; (800eb88 <_strtod_l+0xc10>)
 800eb46:	f7f1 fc91 	bl	800046c <__aeabi_dcmplt>
 800eb4a:	e7b2      	b.n	800eab2 <_strtod_l+0xb3a>
 800eb4c:	fff00000 	.word	0xfff00000
 800eb50:	000fffff 	.word	0x000fffff
 800eb54:	3ff00000 	.word	0x3ff00000
 800eb58:	3fe00000 	.word	0x3fe00000
 800eb5c:	7ff00000 	.word	0x7ff00000
 800eb60:	7fe00000 	.word	0x7fe00000
 800eb64:	fcb00000 	.word	0xfcb00000
 800eb68:	7c9fffff 	.word	0x7c9fffff
 800eb6c:	7fefffff 	.word	0x7fefffff
 800eb70:	bff00000 	.word	0xbff00000
 800eb74:	94a03595 	.word	0x94a03595
 800eb78:	3fdfffff 	.word	0x3fdfffff
 800eb7c:	35afe535 	.word	0x35afe535
 800eb80:	ffc00000 	.word	0xffc00000
 800eb84:	41dfffff 	.word	0x41dfffff
 800eb88:	3fcfffff 	.word	0x3fcfffff

0800eb8c <_strtod_r>:
 800eb8c:	b510      	push	{r4, lr}
 800eb8e:	4b02      	ldr	r3, [pc, #8]	; (800eb98 <_strtod_r+0xc>)
 800eb90:	f7ff f9f2 	bl	800df78 <_strtod_l>
 800eb94:	bd10      	pop	{r4, pc}
 800eb96:	46c0      	nop			; (mov r8, r8)
 800eb98:	20000064 	.word	0x20000064

0800eb9c <strtod>:
 800eb9c:	b510      	push	{r4, lr}
 800eb9e:	4c04      	ldr	r4, [pc, #16]	; (800ebb0 <strtod+0x14>)
 800eba0:	000a      	movs	r2, r1
 800eba2:	0001      	movs	r1, r0
 800eba4:	4b03      	ldr	r3, [pc, #12]	; (800ebb4 <strtod+0x18>)
 800eba6:	6820      	ldr	r0, [r4, #0]
 800eba8:	f7ff f9e6 	bl	800df78 <_strtod_l>
 800ebac:	bd10      	pop	{r4, pc}
 800ebae:	46c0      	nop			; (mov r8, r8)
 800ebb0:	2000021c 	.word	0x2000021c
 800ebb4:	20000064 	.word	0x20000064

0800ebb8 <_strtol_l.constprop.0>:
 800ebb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebba:	b087      	sub	sp, #28
 800ebbc:	001e      	movs	r6, r3
 800ebbe:	9005      	str	r0, [sp, #20]
 800ebc0:	9101      	str	r1, [sp, #4]
 800ebc2:	9202      	str	r2, [sp, #8]
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d048      	beq.n	800ec5a <_strtol_l.constprop.0+0xa2>
 800ebc8:	000b      	movs	r3, r1
 800ebca:	2e24      	cmp	r6, #36	; 0x24
 800ebcc:	d845      	bhi.n	800ec5a <_strtol_l.constprop.0+0xa2>
 800ebce:	4a3b      	ldr	r2, [pc, #236]	; (800ecbc <_strtol_l.constprop.0+0x104>)
 800ebd0:	2108      	movs	r1, #8
 800ebd2:	4694      	mov	ip, r2
 800ebd4:	001a      	movs	r2, r3
 800ebd6:	4660      	mov	r0, ip
 800ebd8:	7814      	ldrb	r4, [r2, #0]
 800ebda:	3301      	adds	r3, #1
 800ebdc:	5d00      	ldrb	r0, [r0, r4]
 800ebde:	001d      	movs	r5, r3
 800ebe0:	0007      	movs	r7, r0
 800ebe2:	400f      	ands	r7, r1
 800ebe4:	4208      	tst	r0, r1
 800ebe6:	d1f5      	bne.n	800ebd4 <_strtol_l.constprop.0+0x1c>
 800ebe8:	2c2d      	cmp	r4, #45	; 0x2d
 800ebea:	d13d      	bne.n	800ec68 <_strtol_l.constprop.0+0xb0>
 800ebec:	2701      	movs	r7, #1
 800ebee:	781c      	ldrb	r4, [r3, #0]
 800ebf0:	1c95      	adds	r5, r2, #2
 800ebf2:	2e00      	cmp	r6, #0
 800ebf4:	d05e      	beq.n	800ecb4 <_strtol_l.constprop.0+0xfc>
 800ebf6:	2e10      	cmp	r6, #16
 800ebf8:	d109      	bne.n	800ec0e <_strtol_l.constprop.0+0x56>
 800ebfa:	2c30      	cmp	r4, #48	; 0x30
 800ebfc:	d107      	bne.n	800ec0e <_strtol_l.constprop.0+0x56>
 800ebfe:	2220      	movs	r2, #32
 800ec00:	782b      	ldrb	r3, [r5, #0]
 800ec02:	4393      	bics	r3, r2
 800ec04:	2b58      	cmp	r3, #88	; 0x58
 800ec06:	d150      	bne.n	800ecaa <_strtol_l.constprop.0+0xf2>
 800ec08:	2610      	movs	r6, #16
 800ec0a:	786c      	ldrb	r4, [r5, #1]
 800ec0c:	3502      	adds	r5, #2
 800ec0e:	4b2c      	ldr	r3, [pc, #176]	; (800ecc0 <_strtol_l.constprop.0+0x108>)
 800ec10:	0031      	movs	r1, r6
 800ec12:	18fb      	adds	r3, r7, r3
 800ec14:	0018      	movs	r0, r3
 800ec16:	9303      	str	r3, [sp, #12]
 800ec18:	f7f1 fb22 	bl	8000260 <__aeabi_uidivmod>
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	9104      	str	r1, [sp, #16]
 800ec20:	2101      	movs	r1, #1
 800ec22:	4684      	mov	ip, r0
 800ec24:	0010      	movs	r0, r2
 800ec26:	4249      	negs	r1, r1
 800ec28:	0023      	movs	r3, r4
 800ec2a:	3b30      	subs	r3, #48	; 0x30
 800ec2c:	2b09      	cmp	r3, #9
 800ec2e:	d903      	bls.n	800ec38 <_strtol_l.constprop.0+0x80>
 800ec30:	3b11      	subs	r3, #17
 800ec32:	2b19      	cmp	r3, #25
 800ec34:	d81d      	bhi.n	800ec72 <_strtol_l.constprop.0+0xba>
 800ec36:	330a      	adds	r3, #10
 800ec38:	429e      	cmp	r6, r3
 800ec3a:	dd1e      	ble.n	800ec7a <_strtol_l.constprop.0+0xc2>
 800ec3c:	1c54      	adds	r4, r2, #1
 800ec3e:	d009      	beq.n	800ec54 <_strtol_l.constprop.0+0x9c>
 800ec40:	000a      	movs	r2, r1
 800ec42:	4584      	cmp	ip, r0
 800ec44:	d306      	bcc.n	800ec54 <_strtol_l.constprop.0+0x9c>
 800ec46:	d102      	bne.n	800ec4e <_strtol_l.constprop.0+0x96>
 800ec48:	9c04      	ldr	r4, [sp, #16]
 800ec4a:	429c      	cmp	r4, r3
 800ec4c:	db02      	blt.n	800ec54 <_strtol_l.constprop.0+0x9c>
 800ec4e:	2201      	movs	r2, #1
 800ec50:	4370      	muls	r0, r6
 800ec52:	1818      	adds	r0, r3, r0
 800ec54:	782c      	ldrb	r4, [r5, #0]
 800ec56:	3501      	adds	r5, #1
 800ec58:	e7e6      	b.n	800ec28 <_strtol_l.constprop.0+0x70>
 800ec5a:	f001 f921 	bl	800fea0 <__errno>
 800ec5e:	2316      	movs	r3, #22
 800ec60:	6003      	str	r3, [r0, #0]
 800ec62:	2000      	movs	r0, #0
 800ec64:	b007      	add	sp, #28
 800ec66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec68:	2c2b      	cmp	r4, #43	; 0x2b
 800ec6a:	d1c2      	bne.n	800ebf2 <_strtol_l.constprop.0+0x3a>
 800ec6c:	781c      	ldrb	r4, [r3, #0]
 800ec6e:	1c95      	adds	r5, r2, #2
 800ec70:	e7bf      	b.n	800ebf2 <_strtol_l.constprop.0+0x3a>
 800ec72:	0023      	movs	r3, r4
 800ec74:	3b61      	subs	r3, #97	; 0x61
 800ec76:	2b19      	cmp	r3, #25
 800ec78:	d9dd      	bls.n	800ec36 <_strtol_l.constprop.0+0x7e>
 800ec7a:	1c53      	adds	r3, r2, #1
 800ec7c:	d109      	bne.n	800ec92 <_strtol_l.constprop.0+0xda>
 800ec7e:	2322      	movs	r3, #34	; 0x22
 800ec80:	9a05      	ldr	r2, [sp, #20]
 800ec82:	9803      	ldr	r0, [sp, #12]
 800ec84:	6013      	str	r3, [r2, #0]
 800ec86:	9b02      	ldr	r3, [sp, #8]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d0eb      	beq.n	800ec64 <_strtol_l.constprop.0+0xac>
 800ec8c:	1e6b      	subs	r3, r5, #1
 800ec8e:	9301      	str	r3, [sp, #4]
 800ec90:	e007      	b.n	800eca2 <_strtol_l.constprop.0+0xea>
 800ec92:	2f00      	cmp	r7, #0
 800ec94:	d000      	beq.n	800ec98 <_strtol_l.constprop.0+0xe0>
 800ec96:	4240      	negs	r0, r0
 800ec98:	9b02      	ldr	r3, [sp, #8]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d0e2      	beq.n	800ec64 <_strtol_l.constprop.0+0xac>
 800ec9e:	2a00      	cmp	r2, #0
 800eca0:	d1f4      	bne.n	800ec8c <_strtol_l.constprop.0+0xd4>
 800eca2:	9b02      	ldr	r3, [sp, #8]
 800eca4:	9a01      	ldr	r2, [sp, #4]
 800eca6:	601a      	str	r2, [r3, #0]
 800eca8:	e7dc      	b.n	800ec64 <_strtol_l.constprop.0+0xac>
 800ecaa:	2430      	movs	r4, #48	; 0x30
 800ecac:	2e00      	cmp	r6, #0
 800ecae:	d1ae      	bne.n	800ec0e <_strtol_l.constprop.0+0x56>
 800ecb0:	3608      	adds	r6, #8
 800ecb2:	e7ac      	b.n	800ec0e <_strtol_l.constprop.0+0x56>
 800ecb4:	2c30      	cmp	r4, #48	; 0x30
 800ecb6:	d0a2      	beq.n	800ebfe <_strtol_l.constprop.0+0x46>
 800ecb8:	260a      	movs	r6, #10
 800ecba:	e7a8      	b.n	800ec0e <_strtol_l.constprop.0+0x56>
 800ecbc:	08013bd1 	.word	0x08013bd1
 800ecc0:	7fffffff 	.word	0x7fffffff

0800ecc4 <_strtol_r>:
 800ecc4:	b510      	push	{r4, lr}
 800ecc6:	f7ff ff77 	bl	800ebb8 <_strtol_l.constprop.0>
 800ecca:	bd10      	pop	{r4, pc}

0800eccc <strtol>:
 800eccc:	b510      	push	{r4, lr}
 800ecce:	4c04      	ldr	r4, [pc, #16]	; (800ece0 <strtol+0x14>)
 800ecd0:	0013      	movs	r3, r2
 800ecd2:	000a      	movs	r2, r1
 800ecd4:	0001      	movs	r1, r0
 800ecd6:	6820      	ldr	r0, [r4, #0]
 800ecd8:	f7ff ff6e 	bl	800ebb8 <_strtol_l.constprop.0>
 800ecdc:	bd10      	pop	{r4, pc}
 800ecde:	46c0      	nop			; (mov r8, r8)
 800ece0:	2000021c 	.word	0x2000021c

0800ece4 <__cvt>:
 800ece4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ece6:	001e      	movs	r6, r3
 800ece8:	2300      	movs	r3, #0
 800ecea:	0014      	movs	r4, r2
 800ecec:	b08b      	sub	sp, #44	; 0x2c
 800ecee:	429e      	cmp	r6, r3
 800ecf0:	da04      	bge.n	800ecfc <__cvt+0x18>
 800ecf2:	2180      	movs	r1, #128	; 0x80
 800ecf4:	0609      	lsls	r1, r1, #24
 800ecf6:	1873      	adds	r3, r6, r1
 800ecf8:	001e      	movs	r6, r3
 800ecfa:	232d      	movs	r3, #45	; 0x2d
 800ecfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ecfe:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ed00:	7013      	strb	r3, [r2, #0]
 800ed02:	2320      	movs	r3, #32
 800ed04:	2203      	movs	r2, #3
 800ed06:	439f      	bics	r7, r3
 800ed08:	2f46      	cmp	r7, #70	; 0x46
 800ed0a:	d007      	beq.n	800ed1c <__cvt+0x38>
 800ed0c:	003b      	movs	r3, r7
 800ed0e:	3b45      	subs	r3, #69	; 0x45
 800ed10:	4259      	negs	r1, r3
 800ed12:	414b      	adcs	r3, r1
 800ed14:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ed16:	3a01      	subs	r2, #1
 800ed18:	18cb      	adds	r3, r1, r3
 800ed1a:	9310      	str	r3, [sp, #64]	; 0x40
 800ed1c:	ab09      	add	r3, sp, #36	; 0x24
 800ed1e:	9304      	str	r3, [sp, #16]
 800ed20:	ab08      	add	r3, sp, #32
 800ed22:	9303      	str	r3, [sp, #12]
 800ed24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ed26:	9200      	str	r2, [sp, #0]
 800ed28:	9302      	str	r3, [sp, #8]
 800ed2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed2c:	0022      	movs	r2, r4
 800ed2e:	9301      	str	r3, [sp, #4]
 800ed30:	0033      	movs	r3, r6
 800ed32:	f001 f9b7 	bl	80100a4 <_dtoa_r>
 800ed36:	0005      	movs	r5, r0
 800ed38:	2f47      	cmp	r7, #71	; 0x47
 800ed3a:	d102      	bne.n	800ed42 <__cvt+0x5e>
 800ed3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed3e:	07db      	lsls	r3, r3, #31
 800ed40:	d528      	bpl.n	800ed94 <__cvt+0xb0>
 800ed42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed44:	18eb      	adds	r3, r5, r3
 800ed46:	9307      	str	r3, [sp, #28]
 800ed48:	2f46      	cmp	r7, #70	; 0x46
 800ed4a:	d114      	bne.n	800ed76 <__cvt+0x92>
 800ed4c:	782b      	ldrb	r3, [r5, #0]
 800ed4e:	2b30      	cmp	r3, #48	; 0x30
 800ed50:	d10c      	bne.n	800ed6c <__cvt+0x88>
 800ed52:	2200      	movs	r2, #0
 800ed54:	2300      	movs	r3, #0
 800ed56:	0020      	movs	r0, r4
 800ed58:	0031      	movs	r1, r6
 800ed5a:	f7f1 fb81 	bl	8000460 <__aeabi_dcmpeq>
 800ed5e:	2800      	cmp	r0, #0
 800ed60:	d104      	bne.n	800ed6c <__cvt+0x88>
 800ed62:	2301      	movs	r3, #1
 800ed64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ed66:	1a9b      	subs	r3, r3, r2
 800ed68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ed6a:	6013      	str	r3, [r2, #0]
 800ed6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ed6e:	9a07      	ldr	r2, [sp, #28]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	18d3      	adds	r3, r2, r3
 800ed74:	9307      	str	r3, [sp, #28]
 800ed76:	2200      	movs	r2, #0
 800ed78:	2300      	movs	r3, #0
 800ed7a:	0020      	movs	r0, r4
 800ed7c:	0031      	movs	r1, r6
 800ed7e:	f7f1 fb6f 	bl	8000460 <__aeabi_dcmpeq>
 800ed82:	2800      	cmp	r0, #0
 800ed84:	d001      	beq.n	800ed8a <__cvt+0xa6>
 800ed86:	9b07      	ldr	r3, [sp, #28]
 800ed88:	9309      	str	r3, [sp, #36]	; 0x24
 800ed8a:	2230      	movs	r2, #48	; 0x30
 800ed8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed8e:	9907      	ldr	r1, [sp, #28]
 800ed90:	428b      	cmp	r3, r1
 800ed92:	d306      	bcc.n	800eda2 <__cvt+0xbe>
 800ed94:	0028      	movs	r0, r5
 800ed96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ed9a:	1b5b      	subs	r3, r3, r5
 800ed9c:	6013      	str	r3, [r2, #0]
 800ed9e:	b00b      	add	sp, #44	; 0x2c
 800eda0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eda2:	1c59      	adds	r1, r3, #1
 800eda4:	9109      	str	r1, [sp, #36]	; 0x24
 800eda6:	701a      	strb	r2, [r3, #0]
 800eda8:	e7f0      	b.n	800ed8c <__cvt+0xa8>

0800edaa <__exponent>:
 800edaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edac:	1c83      	adds	r3, r0, #2
 800edae:	b087      	sub	sp, #28
 800edb0:	9303      	str	r3, [sp, #12]
 800edb2:	0005      	movs	r5, r0
 800edb4:	000c      	movs	r4, r1
 800edb6:	232b      	movs	r3, #43	; 0x2b
 800edb8:	7002      	strb	r2, [r0, #0]
 800edba:	2900      	cmp	r1, #0
 800edbc:	da01      	bge.n	800edc2 <__exponent+0x18>
 800edbe:	424c      	negs	r4, r1
 800edc0:	3302      	adds	r3, #2
 800edc2:	706b      	strb	r3, [r5, #1]
 800edc4:	2c09      	cmp	r4, #9
 800edc6:	dd2f      	ble.n	800ee28 <__exponent+0x7e>
 800edc8:	270a      	movs	r7, #10
 800edca:	ab04      	add	r3, sp, #16
 800edcc:	1dde      	adds	r6, r3, #7
 800edce:	0020      	movs	r0, r4
 800edd0:	0039      	movs	r1, r7
 800edd2:	9601      	str	r6, [sp, #4]
 800edd4:	f7f1 fb2e 	bl	8000434 <__aeabi_idivmod>
 800edd8:	3e01      	subs	r6, #1
 800edda:	3130      	adds	r1, #48	; 0x30
 800eddc:	0020      	movs	r0, r4
 800edde:	7031      	strb	r1, [r6, #0]
 800ede0:	0039      	movs	r1, r7
 800ede2:	9402      	str	r4, [sp, #8]
 800ede4:	f7f1 fa40 	bl	8000268 <__divsi3>
 800ede8:	9b02      	ldr	r3, [sp, #8]
 800edea:	0004      	movs	r4, r0
 800edec:	2b63      	cmp	r3, #99	; 0x63
 800edee:	dcee      	bgt.n	800edce <__exponent+0x24>
 800edf0:	9b01      	ldr	r3, [sp, #4]
 800edf2:	3430      	adds	r4, #48	; 0x30
 800edf4:	1e9a      	subs	r2, r3, #2
 800edf6:	0013      	movs	r3, r2
 800edf8:	9903      	ldr	r1, [sp, #12]
 800edfa:	7014      	strb	r4, [r2, #0]
 800edfc:	a804      	add	r0, sp, #16
 800edfe:	3007      	adds	r0, #7
 800ee00:	4298      	cmp	r0, r3
 800ee02:	d80c      	bhi.n	800ee1e <__exponent+0x74>
 800ee04:	2300      	movs	r3, #0
 800ee06:	4282      	cmp	r2, r0
 800ee08:	d804      	bhi.n	800ee14 <__exponent+0x6a>
 800ee0a:	aa04      	add	r2, sp, #16
 800ee0c:	3309      	adds	r3, #9
 800ee0e:	189b      	adds	r3, r3, r2
 800ee10:	9a01      	ldr	r2, [sp, #4]
 800ee12:	1a9b      	subs	r3, r3, r2
 800ee14:	9a03      	ldr	r2, [sp, #12]
 800ee16:	18d3      	adds	r3, r2, r3
 800ee18:	1b58      	subs	r0, r3, r5
 800ee1a:	b007      	add	sp, #28
 800ee1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee1e:	7818      	ldrb	r0, [r3, #0]
 800ee20:	3301      	adds	r3, #1
 800ee22:	7008      	strb	r0, [r1, #0]
 800ee24:	3101      	adds	r1, #1
 800ee26:	e7e9      	b.n	800edfc <__exponent+0x52>
 800ee28:	2330      	movs	r3, #48	; 0x30
 800ee2a:	3430      	adds	r4, #48	; 0x30
 800ee2c:	70ab      	strb	r3, [r5, #2]
 800ee2e:	70ec      	strb	r4, [r5, #3]
 800ee30:	1d2b      	adds	r3, r5, #4
 800ee32:	e7f1      	b.n	800ee18 <__exponent+0x6e>

0800ee34 <_printf_float>:
 800ee34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee36:	b095      	sub	sp, #84	; 0x54
 800ee38:	000c      	movs	r4, r1
 800ee3a:	9208      	str	r2, [sp, #32]
 800ee3c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800ee3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee40:	0007      	movs	r7, r0
 800ee42:	f000 ffdb 	bl	800fdfc <_localeconv_r>
 800ee46:	6803      	ldr	r3, [r0, #0]
 800ee48:	0018      	movs	r0, r3
 800ee4a:	930c      	str	r3, [sp, #48]	; 0x30
 800ee4c:	f7f1 f966 	bl	800011c <strlen>
 800ee50:	2300      	movs	r3, #0
 800ee52:	9312      	str	r3, [sp, #72]	; 0x48
 800ee54:	7e23      	ldrb	r3, [r4, #24]
 800ee56:	2207      	movs	r2, #7
 800ee58:	930a      	str	r3, [sp, #40]	; 0x28
 800ee5a:	6823      	ldr	r3, [r4, #0]
 800ee5c:	900d      	str	r0, [sp, #52]	; 0x34
 800ee5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee62:	682b      	ldr	r3, [r5, #0]
 800ee64:	05c9      	lsls	r1, r1, #23
 800ee66:	d547      	bpl.n	800eef8 <_printf_float+0xc4>
 800ee68:	189b      	adds	r3, r3, r2
 800ee6a:	4393      	bics	r3, r2
 800ee6c:	001a      	movs	r2, r3
 800ee6e:	3208      	adds	r2, #8
 800ee70:	602a      	str	r2, [r5, #0]
 800ee72:	681e      	ldr	r6, [r3, #0]
 800ee74:	685d      	ldr	r5, [r3, #4]
 800ee76:	0032      	movs	r2, r6
 800ee78:	002b      	movs	r3, r5
 800ee7a:	64a2      	str	r2, [r4, #72]	; 0x48
 800ee7c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ee7e:	2201      	movs	r2, #1
 800ee80:	006b      	lsls	r3, r5, #1
 800ee82:	085b      	lsrs	r3, r3, #1
 800ee84:	930e      	str	r3, [sp, #56]	; 0x38
 800ee86:	0030      	movs	r0, r6
 800ee88:	4bab      	ldr	r3, [pc, #684]	; (800f138 <_printf_float+0x304>)
 800ee8a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ee8c:	4252      	negs	r2, r2
 800ee8e:	f7f3 fe29 	bl	8002ae4 <__aeabi_dcmpun>
 800ee92:	2800      	cmp	r0, #0
 800ee94:	d132      	bne.n	800eefc <_printf_float+0xc8>
 800ee96:	2201      	movs	r2, #1
 800ee98:	0030      	movs	r0, r6
 800ee9a:	4ba7      	ldr	r3, [pc, #668]	; (800f138 <_printf_float+0x304>)
 800ee9c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ee9e:	4252      	negs	r2, r2
 800eea0:	f7f1 faee 	bl	8000480 <__aeabi_dcmple>
 800eea4:	2800      	cmp	r0, #0
 800eea6:	d129      	bne.n	800eefc <_printf_float+0xc8>
 800eea8:	2200      	movs	r2, #0
 800eeaa:	2300      	movs	r3, #0
 800eeac:	0030      	movs	r0, r6
 800eeae:	0029      	movs	r1, r5
 800eeb0:	f7f1 fadc 	bl	800046c <__aeabi_dcmplt>
 800eeb4:	2800      	cmp	r0, #0
 800eeb6:	d003      	beq.n	800eec0 <_printf_float+0x8c>
 800eeb8:	0023      	movs	r3, r4
 800eeba:	222d      	movs	r2, #45	; 0x2d
 800eebc:	3343      	adds	r3, #67	; 0x43
 800eebe:	701a      	strb	r2, [r3, #0]
 800eec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eec2:	4d9e      	ldr	r5, [pc, #632]	; (800f13c <_printf_float+0x308>)
 800eec4:	2b47      	cmp	r3, #71	; 0x47
 800eec6:	d900      	bls.n	800eeca <_printf_float+0x96>
 800eec8:	4d9d      	ldr	r5, [pc, #628]	; (800f140 <_printf_float+0x30c>)
 800eeca:	2303      	movs	r3, #3
 800eecc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eece:	6123      	str	r3, [r4, #16]
 800eed0:	3301      	adds	r3, #1
 800eed2:	439a      	bics	r2, r3
 800eed4:	2300      	movs	r3, #0
 800eed6:	6022      	str	r2, [r4, #0]
 800eed8:	930b      	str	r3, [sp, #44]	; 0x2c
 800eeda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eedc:	0021      	movs	r1, r4
 800eede:	9300      	str	r3, [sp, #0]
 800eee0:	0038      	movs	r0, r7
 800eee2:	9b08      	ldr	r3, [sp, #32]
 800eee4:	aa13      	add	r2, sp, #76	; 0x4c
 800eee6:	f000 f9fb 	bl	800f2e0 <_printf_common>
 800eeea:	3001      	adds	r0, #1
 800eeec:	d000      	beq.n	800eef0 <_printf_float+0xbc>
 800eeee:	e0a3      	b.n	800f038 <_printf_float+0x204>
 800eef0:	2001      	movs	r0, #1
 800eef2:	4240      	negs	r0, r0
 800eef4:	b015      	add	sp, #84	; 0x54
 800eef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eef8:	3307      	adds	r3, #7
 800eefa:	e7b6      	b.n	800ee6a <_printf_float+0x36>
 800eefc:	0032      	movs	r2, r6
 800eefe:	002b      	movs	r3, r5
 800ef00:	0030      	movs	r0, r6
 800ef02:	0029      	movs	r1, r5
 800ef04:	f7f3 fdee 	bl	8002ae4 <__aeabi_dcmpun>
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	d00b      	beq.n	800ef24 <_printf_float+0xf0>
 800ef0c:	2d00      	cmp	r5, #0
 800ef0e:	da03      	bge.n	800ef18 <_printf_float+0xe4>
 800ef10:	0023      	movs	r3, r4
 800ef12:	222d      	movs	r2, #45	; 0x2d
 800ef14:	3343      	adds	r3, #67	; 0x43
 800ef16:	701a      	strb	r2, [r3, #0]
 800ef18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef1a:	4d8a      	ldr	r5, [pc, #552]	; (800f144 <_printf_float+0x310>)
 800ef1c:	2b47      	cmp	r3, #71	; 0x47
 800ef1e:	d9d4      	bls.n	800eeca <_printf_float+0x96>
 800ef20:	4d89      	ldr	r5, [pc, #548]	; (800f148 <_printf_float+0x314>)
 800ef22:	e7d2      	b.n	800eeca <_printf_float+0x96>
 800ef24:	2220      	movs	r2, #32
 800ef26:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ef28:	6863      	ldr	r3, [r4, #4]
 800ef2a:	4391      	bics	r1, r2
 800ef2c:	910e      	str	r1, [sp, #56]	; 0x38
 800ef2e:	1c5a      	adds	r2, r3, #1
 800ef30:	d14a      	bne.n	800efc8 <_printf_float+0x194>
 800ef32:	3307      	adds	r3, #7
 800ef34:	6063      	str	r3, [r4, #4]
 800ef36:	2380      	movs	r3, #128	; 0x80
 800ef38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ef3a:	00db      	lsls	r3, r3, #3
 800ef3c:	4313      	orrs	r3, r2
 800ef3e:	2200      	movs	r2, #0
 800ef40:	9206      	str	r2, [sp, #24]
 800ef42:	aa12      	add	r2, sp, #72	; 0x48
 800ef44:	9205      	str	r2, [sp, #20]
 800ef46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef48:	6023      	str	r3, [r4, #0]
 800ef4a:	9204      	str	r2, [sp, #16]
 800ef4c:	aa11      	add	r2, sp, #68	; 0x44
 800ef4e:	9203      	str	r2, [sp, #12]
 800ef50:	2223      	movs	r2, #35	; 0x23
 800ef52:	a908      	add	r1, sp, #32
 800ef54:	9301      	str	r3, [sp, #4]
 800ef56:	6863      	ldr	r3, [r4, #4]
 800ef58:	1852      	adds	r2, r2, r1
 800ef5a:	9202      	str	r2, [sp, #8]
 800ef5c:	9300      	str	r3, [sp, #0]
 800ef5e:	0032      	movs	r2, r6
 800ef60:	002b      	movs	r3, r5
 800ef62:	0038      	movs	r0, r7
 800ef64:	f7ff febe 	bl	800ece4 <__cvt>
 800ef68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef6a:	0005      	movs	r5, r0
 800ef6c:	2b47      	cmp	r3, #71	; 0x47
 800ef6e:	d109      	bne.n	800ef84 <_printf_float+0x150>
 800ef70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ef72:	1cda      	adds	r2, r3, #3
 800ef74:	db02      	blt.n	800ef7c <_printf_float+0x148>
 800ef76:	6862      	ldr	r2, [r4, #4]
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	dd49      	ble.n	800f010 <_printf_float+0x1dc>
 800ef7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef7e:	3b02      	subs	r3, #2
 800ef80:	b2db      	uxtb	r3, r3
 800ef82:	930a      	str	r3, [sp, #40]	; 0x28
 800ef84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef86:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ef88:	2b65      	cmp	r3, #101	; 0x65
 800ef8a:	d824      	bhi.n	800efd6 <_printf_float+0x1a2>
 800ef8c:	0020      	movs	r0, r4
 800ef8e:	001a      	movs	r2, r3
 800ef90:	3901      	subs	r1, #1
 800ef92:	3050      	adds	r0, #80	; 0x50
 800ef94:	9111      	str	r1, [sp, #68]	; 0x44
 800ef96:	f7ff ff08 	bl	800edaa <__exponent>
 800ef9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ef9c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ef9e:	1813      	adds	r3, r2, r0
 800efa0:	6123      	str	r3, [r4, #16]
 800efa2:	2a01      	cmp	r2, #1
 800efa4:	dc02      	bgt.n	800efac <_printf_float+0x178>
 800efa6:	6822      	ldr	r2, [r4, #0]
 800efa8:	07d2      	lsls	r2, r2, #31
 800efaa:	d501      	bpl.n	800efb0 <_printf_float+0x17c>
 800efac:	3301      	adds	r3, #1
 800efae:	6123      	str	r3, [r4, #16]
 800efb0:	2323      	movs	r3, #35	; 0x23
 800efb2:	aa08      	add	r2, sp, #32
 800efb4:	189b      	adds	r3, r3, r2
 800efb6:	781b      	ldrb	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d100      	bne.n	800efbe <_printf_float+0x18a>
 800efbc:	e78d      	b.n	800eeda <_printf_float+0xa6>
 800efbe:	0023      	movs	r3, r4
 800efc0:	222d      	movs	r2, #45	; 0x2d
 800efc2:	3343      	adds	r3, #67	; 0x43
 800efc4:	701a      	strb	r2, [r3, #0]
 800efc6:	e788      	b.n	800eeda <_printf_float+0xa6>
 800efc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800efca:	2a47      	cmp	r2, #71	; 0x47
 800efcc:	d1b3      	bne.n	800ef36 <_printf_float+0x102>
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d1b1      	bne.n	800ef36 <_printf_float+0x102>
 800efd2:	3301      	adds	r3, #1
 800efd4:	e7ae      	b.n	800ef34 <_printf_float+0x100>
 800efd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efd8:	2b66      	cmp	r3, #102	; 0x66
 800efda:	d11b      	bne.n	800f014 <_printf_float+0x1e0>
 800efdc:	6863      	ldr	r3, [r4, #4]
 800efde:	2900      	cmp	r1, #0
 800efe0:	dd09      	ble.n	800eff6 <_printf_float+0x1c2>
 800efe2:	6121      	str	r1, [r4, #16]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d102      	bne.n	800efee <_printf_float+0x1ba>
 800efe8:	6822      	ldr	r2, [r4, #0]
 800efea:	07d2      	lsls	r2, r2, #31
 800efec:	d50b      	bpl.n	800f006 <_printf_float+0x1d2>
 800efee:	3301      	adds	r3, #1
 800eff0:	185b      	adds	r3, r3, r1
 800eff2:	6123      	str	r3, [r4, #16]
 800eff4:	e007      	b.n	800f006 <_printf_float+0x1d2>
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d103      	bne.n	800f002 <_printf_float+0x1ce>
 800effa:	2201      	movs	r2, #1
 800effc:	6821      	ldr	r1, [r4, #0]
 800effe:	4211      	tst	r1, r2
 800f000:	d000      	beq.n	800f004 <_printf_float+0x1d0>
 800f002:	1c9a      	adds	r2, r3, #2
 800f004:	6122      	str	r2, [r4, #16]
 800f006:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f008:	65a3      	str	r3, [r4, #88]	; 0x58
 800f00a:	2300      	movs	r3, #0
 800f00c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f00e:	e7cf      	b.n	800efb0 <_printf_float+0x17c>
 800f010:	2367      	movs	r3, #103	; 0x67
 800f012:	930a      	str	r3, [sp, #40]	; 0x28
 800f014:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f016:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f018:	4299      	cmp	r1, r3
 800f01a:	db06      	blt.n	800f02a <_printf_float+0x1f6>
 800f01c:	6823      	ldr	r3, [r4, #0]
 800f01e:	6121      	str	r1, [r4, #16]
 800f020:	07db      	lsls	r3, r3, #31
 800f022:	d5f0      	bpl.n	800f006 <_printf_float+0x1d2>
 800f024:	3101      	adds	r1, #1
 800f026:	6121      	str	r1, [r4, #16]
 800f028:	e7ed      	b.n	800f006 <_printf_float+0x1d2>
 800f02a:	2201      	movs	r2, #1
 800f02c:	2900      	cmp	r1, #0
 800f02e:	dc01      	bgt.n	800f034 <_printf_float+0x200>
 800f030:	1892      	adds	r2, r2, r2
 800f032:	1a52      	subs	r2, r2, r1
 800f034:	189b      	adds	r3, r3, r2
 800f036:	e7dc      	b.n	800eff2 <_printf_float+0x1be>
 800f038:	6822      	ldr	r2, [r4, #0]
 800f03a:	0553      	lsls	r3, r2, #21
 800f03c:	d408      	bmi.n	800f050 <_printf_float+0x21c>
 800f03e:	6923      	ldr	r3, [r4, #16]
 800f040:	002a      	movs	r2, r5
 800f042:	0038      	movs	r0, r7
 800f044:	9908      	ldr	r1, [sp, #32]
 800f046:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f048:	47a8      	blx	r5
 800f04a:	3001      	adds	r0, #1
 800f04c:	d12a      	bne.n	800f0a4 <_printf_float+0x270>
 800f04e:	e74f      	b.n	800eef0 <_printf_float+0xbc>
 800f050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f052:	2b65      	cmp	r3, #101	; 0x65
 800f054:	d800      	bhi.n	800f058 <_printf_float+0x224>
 800f056:	e0ec      	b.n	800f232 <_printf_float+0x3fe>
 800f058:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800f05a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800f05c:	2200      	movs	r2, #0
 800f05e:	2300      	movs	r3, #0
 800f060:	f7f1 f9fe 	bl	8000460 <__aeabi_dcmpeq>
 800f064:	2800      	cmp	r0, #0
 800f066:	d034      	beq.n	800f0d2 <_printf_float+0x29e>
 800f068:	2301      	movs	r3, #1
 800f06a:	0038      	movs	r0, r7
 800f06c:	4a37      	ldr	r2, [pc, #220]	; (800f14c <_printf_float+0x318>)
 800f06e:	9908      	ldr	r1, [sp, #32]
 800f070:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f072:	47a8      	blx	r5
 800f074:	3001      	adds	r0, #1
 800f076:	d100      	bne.n	800f07a <_printf_float+0x246>
 800f078:	e73a      	b.n	800eef0 <_printf_float+0xbc>
 800f07a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f07c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f07e:	429a      	cmp	r2, r3
 800f080:	db02      	blt.n	800f088 <_printf_float+0x254>
 800f082:	6823      	ldr	r3, [r4, #0]
 800f084:	07db      	lsls	r3, r3, #31
 800f086:	d50d      	bpl.n	800f0a4 <_printf_float+0x270>
 800f088:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f08a:	0038      	movs	r0, r7
 800f08c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f08e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f090:	9908      	ldr	r1, [sp, #32]
 800f092:	47a8      	blx	r5
 800f094:	2500      	movs	r5, #0
 800f096:	3001      	adds	r0, #1
 800f098:	d100      	bne.n	800f09c <_printf_float+0x268>
 800f09a:	e729      	b.n	800eef0 <_printf_float+0xbc>
 800f09c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f09e:	3b01      	subs	r3, #1
 800f0a0:	42ab      	cmp	r3, r5
 800f0a2:	dc0a      	bgt.n	800f0ba <_printf_float+0x286>
 800f0a4:	6823      	ldr	r3, [r4, #0]
 800f0a6:	079b      	lsls	r3, r3, #30
 800f0a8:	d500      	bpl.n	800f0ac <_printf_float+0x278>
 800f0aa:	e116      	b.n	800f2da <_printf_float+0x4a6>
 800f0ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f0ae:	68e0      	ldr	r0, [r4, #12]
 800f0b0:	4298      	cmp	r0, r3
 800f0b2:	db00      	blt.n	800f0b6 <_printf_float+0x282>
 800f0b4:	e71e      	b.n	800eef4 <_printf_float+0xc0>
 800f0b6:	0018      	movs	r0, r3
 800f0b8:	e71c      	b.n	800eef4 <_printf_float+0xc0>
 800f0ba:	0022      	movs	r2, r4
 800f0bc:	2301      	movs	r3, #1
 800f0be:	0038      	movs	r0, r7
 800f0c0:	9908      	ldr	r1, [sp, #32]
 800f0c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f0c4:	321a      	adds	r2, #26
 800f0c6:	47b0      	blx	r6
 800f0c8:	3001      	adds	r0, #1
 800f0ca:	d100      	bne.n	800f0ce <_printf_float+0x29a>
 800f0cc:	e710      	b.n	800eef0 <_printf_float+0xbc>
 800f0ce:	3501      	adds	r5, #1
 800f0d0:	e7e4      	b.n	800f09c <_printf_float+0x268>
 800f0d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	dc3b      	bgt.n	800f150 <_printf_float+0x31c>
 800f0d8:	2301      	movs	r3, #1
 800f0da:	0038      	movs	r0, r7
 800f0dc:	4a1b      	ldr	r2, [pc, #108]	; (800f14c <_printf_float+0x318>)
 800f0de:	9908      	ldr	r1, [sp, #32]
 800f0e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f0e2:	47b0      	blx	r6
 800f0e4:	3001      	adds	r0, #1
 800f0e6:	d100      	bne.n	800f0ea <_printf_float+0x2b6>
 800f0e8:	e702      	b.n	800eef0 <_printf_float+0xbc>
 800f0ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f0ee:	4313      	orrs	r3, r2
 800f0f0:	d102      	bne.n	800f0f8 <_printf_float+0x2c4>
 800f0f2:	6823      	ldr	r3, [r4, #0]
 800f0f4:	07db      	lsls	r3, r3, #31
 800f0f6:	d5d5      	bpl.n	800f0a4 <_printf_float+0x270>
 800f0f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f0fa:	0038      	movs	r0, r7
 800f0fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f0fe:	9908      	ldr	r1, [sp, #32]
 800f100:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f102:	47b0      	blx	r6
 800f104:	2300      	movs	r3, #0
 800f106:	3001      	adds	r0, #1
 800f108:	d100      	bne.n	800f10c <_printf_float+0x2d8>
 800f10a:	e6f1      	b.n	800eef0 <_printf_float+0xbc>
 800f10c:	930a      	str	r3, [sp, #40]	; 0x28
 800f10e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f112:	425b      	negs	r3, r3
 800f114:	4293      	cmp	r3, r2
 800f116:	dc01      	bgt.n	800f11c <_printf_float+0x2e8>
 800f118:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f11a:	e791      	b.n	800f040 <_printf_float+0x20c>
 800f11c:	0022      	movs	r2, r4
 800f11e:	2301      	movs	r3, #1
 800f120:	0038      	movs	r0, r7
 800f122:	9908      	ldr	r1, [sp, #32]
 800f124:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f126:	321a      	adds	r2, #26
 800f128:	47b0      	blx	r6
 800f12a:	3001      	adds	r0, #1
 800f12c:	d100      	bne.n	800f130 <_printf_float+0x2fc>
 800f12e:	e6df      	b.n	800eef0 <_printf_float+0xbc>
 800f130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f132:	3301      	adds	r3, #1
 800f134:	e7ea      	b.n	800f10c <_printf_float+0x2d8>
 800f136:	46c0      	nop			; (mov r8, r8)
 800f138:	7fefffff 	.word	0x7fefffff
 800f13c:	08013cd1 	.word	0x08013cd1
 800f140:	08013cd5 	.word	0x08013cd5
 800f144:	08013cd9 	.word	0x08013cd9
 800f148:	08013cdd 	.word	0x08013cdd
 800f14c:	08014013 	.word	0x08014013
 800f150:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f152:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f154:	920a      	str	r2, [sp, #40]	; 0x28
 800f156:	429a      	cmp	r2, r3
 800f158:	dd00      	ble.n	800f15c <_printf_float+0x328>
 800f15a:	930a      	str	r3, [sp, #40]	; 0x28
 800f15c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f15e:	2b00      	cmp	r3, #0
 800f160:	dc3d      	bgt.n	800f1de <_printf_float+0x3aa>
 800f162:	2300      	movs	r3, #0
 800f164:	930e      	str	r3, [sp, #56]	; 0x38
 800f166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f168:	43db      	mvns	r3, r3
 800f16a:	17db      	asrs	r3, r3, #31
 800f16c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f16e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f170:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f172:	930b      	str	r3, [sp, #44]	; 0x2c
 800f174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f176:	4013      	ands	r3, r2
 800f178:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f17a:	1ad3      	subs	r3, r2, r3
 800f17c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f17e:	4293      	cmp	r3, r2
 800f180:	dc36      	bgt.n	800f1f0 <_printf_float+0x3bc>
 800f182:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f184:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f186:	429a      	cmp	r2, r3
 800f188:	db40      	blt.n	800f20c <_printf_float+0x3d8>
 800f18a:	6823      	ldr	r3, [r4, #0]
 800f18c:	07db      	lsls	r3, r3, #31
 800f18e:	d43d      	bmi.n	800f20c <_printf_float+0x3d8>
 800f190:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800f192:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f196:	1af3      	subs	r3, r6, r3
 800f198:	1ab6      	subs	r6, r6, r2
 800f19a:	429e      	cmp	r6, r3
 800f19c:	dd00      	ble.n	800f1a0 <_printf_float+0x36c>
 800f19e:	001e      	movs	r6, r3
 800f1a0:	2e00      	cmp	r6, #0
 800f1a2:	dc3c      	bgt.n	800f21e <_printf_float+0x3ea>
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	930a      	str	r3, [sp, #40]	; 0x28
 800f1a8:	43f3      	mvns	r3, r6
 800f1aa:	17db      	asrs	r3, r3, #31
 800f1ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f1b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f1b2:	1a9b      	subs	r3, r3, r2
 800f1b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f1b6:	4032      	ands	r2, r6
 800f1b8:	1a9b      	subs	r3, r3, r2
 800f1ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	dc00      	bgt.n	800f1c2 <_printf_float+0x38e>
 800f1c0:	e770      	b.n	800f0a4 <_printf_float+0x270>
 800f1c2:	0022      	movs	r2, r4
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	0038      	movs	r0, r7
 800f1c8:	9908      	ldr	r1, [sp, #32]
 800f1ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f1cc:	321a      	adds	r2, #26
 800f1ce:	47a8      	blx	r5
 800f1d0:	3001      	adds	r0, #1
 800f1d2:	d100      	bne.n	800f1d6 <_printf_float+0x3a2>
 800f1d4:	e68c      	b.n	800eef0 <_printf_float+0xbc>
 800f1d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1d8:	3301      	adds	r3, #1
 800f1da:	930a      	str	r3, [sp, #40]	; 0x28
 800f1dc:	e7e7      	b.n	800f1ae <_printf_float+0x37a>
 800f1de:	002a      	movs	r2, r5
 800f1e0:	0038      	movs	r0, r7
 800f1e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1e4:	9908      	ldr	r1, [sp, #32]
 800f1e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f1e8:	47b0      	blx	r6
 800f1ea:	3001      	adds	r0, #1
 800f1ec:	d1b9      	bne.n	800f162 <_printf_float+0x32e>
 800f1ee:	e67f      	b.n	800eef0 <_printf_float+0xbc>
 800f1f0:	0022      	movs	r2, r4
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	0038      	movs	r0, r7
 800f1f6:	9908      	ldr	r1, [sp, #32]
 800f1f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f1fa:	321a      	adds	r2, #26
 800f1fc:	47b0      	blx	r6
 800f1fe:	3001      	adds	r0, #1
 800f200:	d100      	bne.n	800f204 <_printf_float+0x3d0>
 800f202:	e675      	b.n	800eef0 <_printf_float+0xbc>
 800f204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f206:	3301      	adds	r3, #1
 800f208:	930e      	str	r3, [sp, #56]	; 0x38
 800f20a:	e7b0      	b.n	800f16e <_printf_float+0x33a>
 800f20c:	0038      	movs	r0, r7
 800f20e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f212:	9908      	ldr	r1, [sp, #32]
 800f214:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f216:	47b0      	blx	r6
 800f218:	3001      	adds	r0, #1
 800f21a:	d1b9      	bne.n	800f190 <_printf_float+0x35c>
 800f21c:	e668      	b.n	800eef0 <_printf_float+0xbc>
 800f21e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f220:	0038      	movs	r0, r7
 800f222:	18ea      	adds	r2, r5, r3
 800f224:	9908      	ldr	r1, [sp, #32]
 800f226:	0033      	movs	r3, r6
 800f228:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f22a:	47a8      	blx	r5
 800f22c:	3001      	adds	r0, #1
 800f22e:	d1b9      	bne.n	800f1a4 <_printf_float+0x370>
 800f230:	e65e      	b.n	800eef0 <_printf_float+0xbc>
 800f232:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f234:	2b01      	cmp	r3, #1
 800f236:	dc02      	bgt.n	800f23e <_printf_float+0x40a>
 800f238:	2301      	movs	r3, #1
 800f23a:	421a      	tst	r2, r3
 800f23c:	d03a      	beq.n	800f2b4 <_printf_float+0x480>
 800f23e:	2301      	movs	r3, #1
 800f240:	002a      	movs	r2, r5
 800f242:	0038      	movs	r0, r7
 800f244:	9908      	ldr	r1, [sp, #32]
 800f246:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f248:	47b0      	blx	r6
 800f24a:	3001      	adds	r0, #1
 800f24c:	d100      	bne.n	800f250 <_printf_float+0x41c>
 800f24e:	e64f      	b.n	800eef0 <_printf_float+0xbc>
 800f250:	0038      	movs	r0, r7
 800f252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f254:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f256:	9908      	ldr	r1, [sp, #32]
 800f258:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f25a:	47b0      	blx	r6
 800f25c:	3001      	adds	r0, #1
 800f25e:	d100      	bne.n	800f262 <_printf_float+0x42e>
 800f260:	e646      	b.n	800eef0 <_printf_float+0xbc>
 800f262:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800f264:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800f266:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f268:	2200      	movs	r2, #0
 800f26a:	001e      	movs	r6, r3
 800f26c:	2300      	movs	r3, #0
 800f26e:	f7f1 f8f7 	bl	8000460 <__aeabi_dcmpeq>
 800f272:	2800      	cmp	r0, #0
 800f274:	d11c      	bne.n	800f2b0 <_printf_float+0x47c>
 800f276:	0033      	movs	r3, r6
 800f278:	1c6a      	adds	r2, r5, #1
 800f27a:	3b01      	subs	r3, #1
 800f27c:	0038      	movs	r0, r7
 800f27e:	9908      	ldr	r1, [sp, #32]
 800f280:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f282:	47a8      	blx	r5
 800f284:	3001      	adds	r0, #1
 800f286:	d10f      	bne.n	800f2a8 <_printf_float+0x474>
 800f288:	e632      	b.n	800eef0 <_printf_float+0xbc>
 800f28a:	0022      	movs	r2, r4
 800f28c:	2301      	movs	r3, #1
 800f28e:	0038      	movs	r0, r7
 800f290:	9908      	ldr	r1, [sp, #32]
 800f292:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f294:	321a      	adds	r2, #26
 800f296:	47b0      	blx	r6
 800f298:	3001      	adds	r0, #1
 800f29a:	d100      	bne.n	800f29e <_printf_float+0x46a>
 800f29c:	e628      	b.n	800eef0 <_printf_float+0xbc>
 800f29e:	3501      	adds	r5, #1
 800f2a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f2a2:	3b01      	subs	r3, #1
 800f2a4:	42ab      	cmp	r3, r5
 800f2a6:	dcf0      	bgt.n	800f28a <_printf_float+0x456>
 800f2a8:	0022      	movs	r2, r4
 800f2aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2ac:	3250      	adds	r2, #80	; 0x50
 800f2ae:	e6c8      	b.n	800f042 <_printf_float+0x20e>
 800f2b0:	2500      	movs	r5, #0
 800f2b2:	e7f5      	b.n	800f2a0 <_printf_float+0x46c>
 800f2b4:	002a      	movs	r2, r5
 800f2b6:	e7e1      	b.n	800f27c <_printf_float+0x448>
 800f2b8:	0022      	movs	r2, r4
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	0038      	movs	r0, r7
 800f2be:	9908      	ldr	r1, [sp, #32]
 800f2c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f2c2:	3219      	adds	r2, #25
 800f2c4:	47b0      	blx	r6
 800f2c6:	3001      	adds	r0, #1
 800f2c8:	d100      	bne.n	800f2cc <_printf_float+0x498>
 800f2ca:	e611      	b.n	800eef0 <_printf_float+0xbc>
 800f2cc:	3501      	adds	r5, #1
 800f2ce:	68e3      	ldr	r3, [r4, #12]
 800f2d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f2d2:	1a9b      	subs	r3, r3, r2
 800f2d4:	42ab      	cmp	r3, r5
 800f2d6:	dcef      	bgt.n	800f2b8 <_printf_float+0x484>
 800f2d8:	e6e8      	b.n	800f0ac <_printf_float+0x278>
 800f2da:	2500      	movs	r5, #0
 800f2dc:	e7f7      	b.n	800f2ce <_printf_float+0x49a>
 800f2de:	46c0      	nop			; (mov r8, r8)

0800f2e0 <_printf_common>:
 800f2e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2e2:	0016      	movs	r6, r2
 800f2e4:	9301      	str	r3, [sp, #4]
 800f2e6:	688a      	ldr	r2, [r1, #8]
 800f2e8:	690b      	ldr	r3, [r1, #16]
 800f2ea:	000c      	movs	r4, r1
 800f2ec:	9000      	str	r0, [sp, #0]
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	da00      	bge.n	800f2f4 <_printf_common+0x14>
 800f2f2:	0013      	movs	r3, r2
 800f2f4:	0022      	movs	r2, r4
 800f2f6:	6033      	str	r3, [r6, #0]
 800f2f8:	3243      	adds	r2, #67	; 0x43
 800f2fa:	7812      	ldrb	r2, [r2, #0]
 800f2fc:	2a00      	cmp	r2, #0
 800f2fe:	d001      	beq.n	800f304 <_printf_common+0x24>
 800f300:	3301      	adds	r3, #1
 800f302:	6033      	str	r3, [r6, #0]
 800f304:	6823      	ldr	r3, [r4, #0]
 800f306:	069b      	lsls	r3, r3, #26
 800f308:	d502      	bpl.n	800f310 <_printf_common+0x30>
 800f30a:	6833      	ldr	r3, [r6, #0]
 800f30c:	3302      	adds	r3, #2
 800f30e:	6033      	str	r3, [r6, #0]
 800f310:	6822      	ldr	r2, [r4, #0]
 800f312:	2306      	movs	r3, #6
 800f314:	0015      	movs	r5, r2
 800f316:	401d      	ands	r5, r3
 800f318:	421a      	tst	r2, r3
 800f31a:	d027      	beq.n	800f36c <_printf_common+0x8c>
 800f31c:	0023      	movs	r3, r4
 800f31e:	3343      	adds	r3, #67	; 0x43
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	1e5a      	subs	r2, r3, #1
 800f324:	4193      	sbcs	r3, r2
 800f326:	6822      	ldr	r2, [r4, #0]
 800f328:	0692      	lsls	r2, r2, #26
 800f32a:	d430      	bmi.n	800f38e <_printf_common+0xae>
 800f32c:	0022      	movs	r2, r4
 800f32e:	9901      	ldr	r1, [sp, #4]
 800f330:	9800      	ldr	r0, [sp, #0]
 800f332:	9d08      	ldr	r5, [sp, #32]
 800f334:	3243      	adds	r2, #67	; 0x43
 800f336:	47a8      	blx	r5
 800f338:	3001      	adds	r0, #1
 800f33a:	d025      	beq.n	800f388 <_printf_common+0xa8>
 800f33c:	2206      	movs	r2, #6
 800f33e:	6823      	ldr	r3, [r4, #0]
 800f340:	2500      	movs	r5, #0
 800f342:	4013      	ands	r3, r2
 800f344:	2b04      	cmp	r3, #4
 800f346:	d105      	bne.n	800f354 <_printf_common+0x74>
 800f348:	6833      	ldr	r3, [r6, #0]
 800f34a:	68e5      	ldr	r5, [r4, #12]
 800f34c:	1aed      	subs	r5, r5, r3
 800f34e:	43eb      	mvns	r3, r5
 800f350:	17db      	asrs	r3, r3, #31
 800f352:	401d      	ands	r5, r3
 800f354:	68a3      	ldr	r3, [r4, #8]
 800f356:	6922      	ldr	r2, [r4, #16]
 800f358:	4293      	cmp	r3, r2
 800f35a:	dd01      	ble.n	800f360 <_printf_common+0x80>
 800f35c:	1a9b      	subs	r3, r3, r2
 800f35e:	18ed      	adds	r5, r5, r3
 800f360:	2600      	movs	r6, #0
 800f362:	42b5      	cmp	r5, r6
 800f364:	d120      	bne.n	800f3a8 <_printf_common+0xc8>
 800f366:	2000      	movs	r0, #0
 800f368:	e010      	b.n	800f38c <_printf_common+0xac>
 800f36a:	3501      	adds	r5, #1
 800f36c:	68e3      	ldr	r3, [r4, #12]
 800f36e:	6832      	ldr	r2, [r6, #0]
 800f370:	1a9b      	subs	r3, r3, r2
 800f372:	42ab      	cmp	r3, r5
 800f374:	ddd2      	ble.n	800f31c <_printf_common+0x3c>
 800f376:	0022      	movs	r2, r4
 800f378:	2301      	movs	r3, #1
 800f37a:	9901      	ldr	r1, [sp, #4]
 800f37c:	9800      	ldr	r0, [sp, #0]
 800f37e:	9f08      	ldr	r7, [sp, #32]
 800f380:	3219      	adds	r2, #25
 800f382:	47b8      	blx	r7
 800f384:	3001      	adds	r0, #1
 800f386:	d1f0      	bne.n	800f36a <_printf_common+0x8a>
 800f388:	2001      	movs	r0, #1
 800f38a:	4240      	negs	r0, r0
 800f38c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f38e:	2030      	movs	r0, #48	; 0x30
 800f390:	18e1      	adds	r1, r4, r3
 800f392:	3143      	adds	r1, #67	; 0x43
 800f394:	7008      	strb	r0, [r1, #0]
 800f396:	0021      	movs	r1, r4
 800f398:	1c5a      	adds	r2, r3, #1
 800f39a:	3145      	adds	r1, #69	; 0x45
 800f39c:	7809      	ldrb	r1, [r1, #0]
 800f39e:	18a2      	adds	r2, r4, r2
 800f3a0:	3243      	adds	r2, #67	; 0x43
 800f3a2:	3302      	adds	r3, #2
 800f3a4:	7011      	strb	r1, [r2, #0]
 800f3a6:	e7c1      	b.n	800f32c <_printf_common+0x4c>
 800f3a8:	0022      	movs	r2, r4
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	9901      	ldr	r1, [sp, #4]
 800f3ae:	9800      	ldr	r0, [sp, #0]
 800f3b0:	9f08      	ldr	r7, [sp, #32]
 800f3b2:	321a      	adds	r2, #26
 800f3b4:	47b8      	blx	r7
 800f3b6:	3001      	adds	r0, #1
 800f3b8:	d0e6      	beq.n	800f388 <_printf_common+0xa8>
 800f3ba:	3601      	adds	r6, #1
 800f3bc:	e7d1      	b.n	800f362 <_printf_common+0x82>
	...

0800f3c0 <_printf_i>:
 800f3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3c2:	b08b      	sub	sp, #44	; 0x2c
 800f3c4:	9206      	str	r2, [sp, #24]
 800f3c6:	000a      	movs	r2, r1
 800f3c8:	3243      	adds	r2, #67	; 0x43
 800f3ca:	9307      	str	r3, [sp, #28]
 800f3cc:	9005      	str	r0, [sp, #20]
 800f3ce:	9204      	str	r2, [sp, #16]
 800f3d0:	7e0a      	ldrb	r2, [r1, #24]
 800f3d2:	000c      	movs	r4, r1
 800f3d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f3d6:	2a78      	cmp	r2, #120	; 0x78
 800f3d8:	d809      	bhi.n	800f3ee <_printf_i+0x2e>
 800f3da:	2a62      	cmp	r2, #98	; 0x62
 800f3dc:	d80b      	bhi.n	800f3f6 <_printf_i+0x36>
 800f3de:	2a00      	cmp	r2, #0
 800f3e0:	d100      	bne.n	800f3e4 <_printf_i+0x24>
 800f3e2:	e0be      	b.n	800f562 <_printf_i+0x1a2>
 800f3e4:	497c      	ldr	r1, [pc, #496]	; (800f5d8 <_printf_i+0x218>)
 800f3e6:	9103      	str	r1, [sp, #12]
 800f3e8:	2a58      	cmp	r2, #88	; 0x58
 800f3ea:	d100      	bne.n	800f3ee <_printf_i+0x2e>
 800f3ec:	e093      	b.n	800f516 <_printf_i+0x156>
 800f3ee:	0026      	movs	r6, r4
 800f3f0:	3642      	adds	r6, #66	; 0x42
 800f3f2:	7032      	strb	r2, [r6, #0]
 800f3f4:	e022      	b.n	800f43c <_printf_i+0x7c>
 800f3f6:	0010      	movs	r0, r2
 800f3f8:	3863      	subs	r0, #99	; 0x63
 800f3fa:	2815      	cmp	r0, #21
 800f3fc:	d8f7      	bhi.n	800f3ee <_printf_i+0x2e>
 800f3fe:	f7f0 fe9f 	bl	8000140 <__gnu_thumb1_case_shi>
 800f402:	0016      	.short	0x0016
 800f404:	fff6001f 	.word	0xfff6001f
 800f408:	fff6fff6 	.word	0xfff6fff6
 800f40c:	001ffff6 	.word	0x001ffff6
 800f410:	fff6fff6 	.word	0xfff6fff6
 800f414:	fff6fff6 	.word	0xfff6fff6
 800f418:	003600a3 	.word	0x003600a3
 800f41c:	fff60083 	.word	0xfff60083
 800f420:	00b4fff6 	.word	0x00b4fff6
 800f424:	0036fff6 	.word	0x0036fff6
 800f428:	fff6fff6 	.word	0xfff6fff6
 800f42c:	0087      	.short	0x0087
 800f42e:	0026      	movs	r6, r4
 800f430:	681a      	ldr	r2, [r3, #0]
 800f432:	3642      	adds	r6, #66	; 0x42
 800f434:	1d11      	adds	r1, r2, #4
 800f436:	6019      	str	r1, [r3, #0]
 800f438:	6813      	ldr	r3, [r2, #0]
 800f43a:	7033      	strb	r3, [r6, #0]
 800f43c:	2301      	movs	r3, #1
 800f43e:	e0a2      	b.n	800f586 <_printf_i+0x1c6>
 800f440:	6818      	ldr	r0, [r3, #0]
 800f442:	6809      	ldr	r1, [r1, #0]
 800f444:	1d02      	adds	r2, r0, #4
 800f446:	060d      	lsls	r5, r1, #24
 800f448:	d50b      	bpl.n	800f462 <_printf_i+0xa2>
 800f44a:	6805      	ldr	r5, [r0, #0]
 800f44c:	601a      	str	r2, [r3, #0]
 800f44e:	2d00      	cmp	r5, #0
 800f450:	da03      	bge.n	800f45a <_printf_i+0x9a>
 800f452:	232d      	movs	r3, #45	; 0x2d
 800f454:	9a04      	ldr	r2, [sp, #16]
 800f456:	426d      	negs	r5, r5
 800f458:	7013      	strb	r3, [r2, #0]
 800f45a:	4b5f      	ldr	r3, [pc, #380]	; (800f5d8 <_printf_i+0x218>)
 800f45c:	270a      	movs	r7, #10
 800f45e:	9303      	str	r3, [sp, #12]
 800f460:	e01b      	b.n	800f49a <_printf_i+0xda>
 800f462:	6805      	ldr	r5, [r0, #0]
 800f464:	601a      	str	r2, [r3, #0]
 800f466:	0649      	lsls	r1, r1, #25
 800f468:	d5f1      	bpl.n	800f44e <_printf_i+0x8e>
 800f46a:	b22d      	sxth	r5, r5
 800f46c:	e7ef      	b.n	800f44e <_printf_i+0x8e>
 800f46e:	680d      	ldr	r5, [r1, #0]
 800f470:	6819      	ldr	r1, [r3, #0]
 800f472:	1d08      	adds	r0, r1, #4
 800f474:	6018      	str	r0, [r3, #0]
 800f476:	062e      	lsls	r6, r5, #24
 800f478:	d501      	bpl.n	800f47e <_printf_i+0xbe>
 800f47a:	680d      	ldr	r5, [r1, #0]
 800f47c:	e003      	b.n	800f486 <_printf_i+0xc6>
 800f47e:	066d      	lsls	r5, r5, #25
 800f480:	d5fb      	bpl.n	800f47a <_printf_i+0xba>
 800f482:	680d      	ldr	r5, [r1, #0]
 800f484:	b2ad      	uxth	r5, r5
 800f486:	4b54      	ldr	r3, [pc, #336]	; (800f5d8 <_printf_i+0x218>)
 800f488:	2708      	movs	r7, #8
 800f48a:	9303      	str	r3, [sp, #12]
 800f48c:	2a6f      	cmp	r2, #111	; 0x6f
 800f48e:	d000      	beq.n	800f492 <_printf_i+0xd2>
 800f490:	3702      	adds	r7, #2
 800f492:	0023      	movs	r3, r4
 800f494:	2200      	movs	r2, #0
 800f496:	3343      	adds	r3, #67	; 0x43
 800f498:	701a      	strb	r2, [r3, #0]
 800f49a:	6863      	ldr	r3, [r4, #4]
 800f49c:	60a3      	str	r3, [r4, #8]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	db03      	blt.n	800f4aa <_printf_i+0xea>
 800f4a2:	2104      	movs	r1, #4
 800f4a4:	6822      	ldr	r2, [r4, #0]
 800f4a6:	438a      	bics	r2, r1
 800f4a8:	6022      	str	r2, [r4, #0]
 800f4aa:	2d00      	cmp	r5, #0
 800f4ac:	d102      	bne.n	800f4b4 <_printf_i+0xf4>
 800f4ae:	9e04      	ldr	r6, [sp, #16]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d00c      	beq.n	800f4ce <_printf_i+0x10e>
 800f4b4:	9e04      	ldr	r6, [sp, #16]
 800f4b6:	0028      	movs	r0, r5
 800f4b8:	0039      	movs	r1, r7
 800f4ba:	f7f0 fed1 	bl	8000260 <__aeabi_uidivmod>
 800f4be:	9b03      	ldr	r3, [sp, #12]
 800f4c0:	3e01      	subs	r6, #1
 800f4c2:	5c5b      	ldrb	r3, [r3, r1]
 800f4c4:	7033      	strb	r3, [r6, #0]
 800f4c6:	002b      	movs	r3, r5
 800f4c8:	0005      	movs	r5, r0
 800f4ca:	429f      	cmp	r7, r3
 800f4cc:	d9f3      	bls.n	800f4b6 <_printf_i+0xf6>
 800f4ce:	2f08      	cmp	r7, #8
 800f4d0:	d109      	bne.n	800f4e6 <_printf_i+0x126>
 800f4d2:	6823      	ldr	r3, [r4, #0]
 800f4d4:	07db      	lsls	r3, r3, #31
 800f4d6:	d506      	bpl.n	800f4e6 <_printf_i+0x126>
 800f4d8:	6862      	ldr	r2, [r4, #4]
 800f4da:	6923      	ldr	r3, [r4, #16]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	dc02      	bgt.n	800f4e6 <_printf_i+0x126>
 800f4e0:	2330      	movs	r3, #48	; 0x30
 800f4e2:	3e01      	subs	r6, #1
 800f4e4:	7033      	strb	r3, [r6, #0]
 800f4e6:	9b04      	ldr	r3, [sp, #16]
 800f4e8:	1b9b      	subs	r3, r3, r6
 800f4ea:	6123      	str	r3, [r4, #16]
 800f4ec:	9b07      	ldr	r3, [sp, #28]
 800f4ee:	0021      	movs	r1, r4
 800f4f0:	9300      	str	r3, [sp, #0]
 800f4f2:	9805      	ldr	r0, [sp, #20]
 800f4f4:	9b06      	ldr	r3, [sp, #24]
 800f4f6:	aa09      	add	r2, sp, #36	; 0x24
 800f4f8:	f7ff fef2 	bl	800f2e0 <_printf_common>
 800f4fc:	3001      	adds	r0, #1
 800f4fe:	d147      	bne.n	800f590 <_printf_i+0x1d0>
 800f500:	2001      	movs	r0, #1
 800f502:	4240      	negs	r0, r0
 800f504:	b00b      	add	sp, #44	; 0x2c
 800f506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f508:	2220      	movs	r2, #32
 800f50a:	6809      	ldr	r1, [r1, #0]
 800f50c:	430a      	orrs	r2, r1
 800f50e:	6022      	str	r2, [r4, #0]
 800f510:	2278      	movs	r2, #120	; 0x78
 800f512:	4932      	ldr	r1, [pc, #200]	; (800f5dc <_printf_i+0x21c>)
 800f514:	9103      	str	r1, [sp, #12]
 800f516:	0021      	movs	r1, r4
 800f518:	3145      	adds	r1, #69	; 0x45
 800f51a:	700a      	strb	r2, [r1, #0]
 800f51c:	6819      	ldr	r1, [r3, #0]
 800f51e:	6822      	ldr	r2, [r4, #0]
 800f520:	c920      	ldmia	r1!, {r5}
 800f522:	0610      	lsls	r0, r2, #24
 800f524:	d402      	bmi.n	800f52c <_printf_i+0x16c>
 800f526:	0650      	lsls	r0, r2, #25
 800f528:	d500      	bpl.n	800f52c <_printf_i+0x16c>
 800f52a:	b2ad      	uxth	r5, r5
 800f52c:	6019      	str	r1, [r3, #0]
 800f52e:	07d3      	lsls	r3, r2, #31
 800f530:	d502      	bpl.n	800f538 <_printf_i+0x178>
 800f532:	2320      	movs	r3, #32
 800f534:	4313      	orrs	r3, r2
 800f536:	6023      	str	r3, [r4, #0]
 800f538:	2710      	movs	r7, #16
 800f53a:	2d00      	cmp	r5, #0
 800f53c:	d1a9      	bne.n	800f492 <_printf_i+0xd2>
 800f53e:	2220      	movs	r2, #32
 800f540:	6823      	ldr	r3, [r4, #0]
 800f542:	4393      	bics	r3, r2
 800f544:	6023      	str	r3, [r4, #0]
 800f546:	e7a4      	b.n	800f492 <_printf_i+0xd2>
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	680d      	ldr	r5, [r1, #0]
 800f54c:	1d10      	adds	r0, r2, #4
 800f54e:	6949      	ldr	r1, [r1, #20]
 800f550:	6018      	str	r0, [r3, #0]
 800f552:	6813      	ldr	r3, [r2, #0]
 800f554:	062e      	lsls	r6, r5, #24
 800f556:	d501      	bpl.n	800f55c <_printf_i+0x19c>
 800f558:	6019      	str	r1, [r3, #0]
 800f55a:	e002      	b.n	800f562 <_printf_i+0x1a2>
 800f55c:	066d      	lsls	r5, r5, #25
 800f55e:	d5fb      	bpl.n	800f558 <_printf_i+0x198>
 800f560:	8019      	strh	r1, [r3, #0]
 800f562:	2300      	movs	r3, #0
 800f564:	9e04      	ldr	r6, [sp, #16]
 800f566:	6123      	str	r3, [r4, #16]
 800f568:	e7c0      	b.n	800f4ec <_printf_i+0x12c>
 800f56a:	681a      	ldr	r2, [r3, #0]
 800f56c:	1d11      	adds	r1, r2, #4
 800f56e:	6019      	str	r1, [r3, #0]
 800f570:	6816      	ldr	r6, [r2, #0]
 800f572:	2100      	movs	r1, #0
 800f574:	0030      	movs	r0, r6
 800f576:	6862      	ldr	r2, [r4, #4]
 800f578:	f000 fcc7 	bl	800ff0a <memchr>
 800f57c:	2800      	cmp	r0, #0
 800f57e:	d001      	beq.n	800f584 <_printf_i+0x1c4>
 800f580:	1b80      	subs	r0, r0, r6
 800f582:	6060      	str	r0, [r4, #4]
 800f584:	6863      	ldr	r3, [r4, #4]
 800f586:	6123      	str	r3, [r4, #16]
 800f588:	2300      	movs	r3, #0
 800f58a:	9a04      	ldr	r2, [sp, #16]
 800f58c:	7013      	strb	r3, [r2, #0]
 800f58e:	e7ad      	b.n	800f4ec <_printf_i+0x12c>
 800f590:	0032      	movs	r2, r6
 800f592:	6923      	ldr	r3, [r4, #16]
 800f594:	9906      	ldr	r1, [sp, #24]
 800f596:	9805      	ldr	r0, [sp, #20]
 800f598:	9d07      	ldr	r5, [sp, #28]
 800f59a:	47a8      	blx	r5
 800f59c:	3001      	adds	r0, #1
 800f59e:	d0af      	beq.n	800f500 <_printf_i+0x140>
 800f5a0:	6823      	ldr	r3, [r4, #0]
 800f5a2:	079b      	lsls	r3, r3, #30
 800f5a4:	d415      	bmi.n	800f5d2 <_printf_i+0x212>
 800f5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5a8:	68e0      	ldr	r0, [r4, #12]
 800f5aa:	4298      	cmp	r0, r3
 800f5ac:	daaa      	bge.n	800f504 <_printf_i+0x144>
 800f5ae:	0018      	movs	r0, r3
 800f5b0:	e7a8      	b.n	800f504 <_printf_i+0x144>
 800f5b2:	0022      	movs	r2, r4
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	9906      	ldr	r1, [sp, #24]
 800f5b8:	9805      	ldr	r0, [sp, #20]
 800f5ba:	9e07      	ldr	r6, [sp, #28]
 800f5bc:	3219      	adds	r2, #25
 800f5be:	47b0      	blx	r6
 800f5c0:	3001      	adds	r0, #1
 800f5c2:	d09d      	beq.n	800f500 <_printf_i+0x140>
 800f5c4:	3501      	adds	r5, #1
 800f5c6:	68e3      	ldr	r3, [r4, #12]
 800f5c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5ca:	1a9b      	subs	r3, r3, r2
 800f5cc:	42ab      	cmp	r3, r5
 800f5ce:	dcf0      	bgt.n	800f5b2 <_printf_i+0x1f2>
 800f5d0:	e7e9      	b.n	800f5a6 <_printf_i+0x1e6>
 800f5d2:	2500      	movs	r5, #0
 800f5d4:	e7f7      	b.n	800f5c6 <_printf_i+0x206>
 800f5d6:	46c0      	nop			; (mov r8, r8)
 800f5d8:	08013ce1 	.word	0x08013ce1
 800f5dc:	08013cf2 	.word	0x08013cf2

0800f5e0 <_scanf_float>:
 800f5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5e2:	b08b      	sub	sp, #44	; 0x2c
 800f5e4:	0016      	movs	r6, r2
 800f5e6:	9002      	str	r0, [sp, #8]
 800f5e8:	22ae      	movs	r2, #174	; 0xae
 800f5ea:	2000      	movs	r0, #0
 800f5ec:	9307      	str	r3, [sp, #28]
 800f5ee:	688b      	ldr	r3, [r1, #8]
 800f5f0:	000f      	movs	r7, r1
 800f5f2:	1e59      	subs	r1, r3, #1
 800f5f4:	0052      	lsls	r2, r2, #1
 800f5f6:	9006      	str	r0, [sp, #24]
 800f5f8:	4291      	cmp	r1, r2
 800f5fa:	d905      	bls.n	800f608 <_scanf_float+0x28>
 800f5fc:	3b5e      	subs	r3, #94	; 0x5e
 800f5fe:	3bff      	subs	r3, #255	; 0xff
 800f600:	9306      	str	r3, [sp, #24]
 800f602:	235e      	movs	r3, #94	; 0x5e
 800f604:	33ff      	adds	r3, #255	; 0xff
 800f606:	60bb      	str	r3, [r7, #8]
 800f608:	23f0      	movs	r3, #240	; 0xf0
 800f60a:	683a      	ldr	r2, [r7, #0]
 800f60c:	00db      	lsls	r3, r3, #3
 800f60e:	4313      	orrs	r3, r2
 800f610:	603b      	str	r3, [r7, #0]
 800f612:	003b      	movs	r3, r7
 800f614:	2400      	movs	r4, #0
 800f616:	331c      	adds	r3, #28
 800f618:	001d      	movs	r5, r3
 800f61a:	9304      	str	r3, [sp, #16]
 800f61c:	9403      	str	r4, [sp, #12]
 800f61e:	9409      	str	r4, [sp, #36]	; 0x24
 800f620:	9408      	str	r4, [sp, #32]
 800f622:	9401      	str	r4, [sp, #4]
 800f624:	9405      	str	r4, [sp, #20]
 800f626:	68ba      	ldr	r2, [r7, #8]
 800f628:	2a00      	cmp	r2, #0
 800f62a:	d00a      	beq.n	800f642 <_scanf_float+0x62>
 800f62c:	6833      	ldr	r3, [r6, #0]
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	2b4e      	cmp	r3, #78	; 0x4e
 800f632:	d844      	bhi.n	800f6be <_scanf_float+0xde>
 800f634:	0018      	movs	r0, r3
 800f636:	2b40      	cmp	r3, #64	; 0x40
 800f638:	d82c      	bhi.n	800f694 <_scanf_float+0xb4>
 800f63a:	382b      	subs	r0, #43	; 0x2b
 800f63c:	b2c1      	uxtb	r1, r0
 800f63e:	290e      	cmp	r1, #14
 800f640:	d92a      	bls.n	800f698 <_scanf_float+0xb8>
 800f642:	9b01      	ldr	r3, [sp, #4]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d003      	beq.n	800f650 <_scanf_float+0x70>
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	4aa3      	ldr	r2, [pc, #652]	; (800f8d8 <_scanf_float+0x2f8>)
 800f64c:	4013      	ands	r3, r2
 800f64e:	603b      	str	r3, [r7, #0]
 800f650:	9b03      	ldr	r3, [sp, #12]
 800f652:	3b01      	subs	r3, #1
 800f654:	2b01      	cmp	r3, #1
 800f656:	d900      	bls.n	800f65a <_scanf_float+0x7a>
 800f658:	e0f9      	b.n	800f84e <_scanf_float+0x26e>
 800f65a:	24be      	movs	r4, #190	; 0xbe
 800f65c:	0064      	lsls	r4, r4, #1
 800f65e:	9b04      	ldr	r3, [sp, #16]
 800f660:	429d      	cmp	r5, r3
 800f662:	d900      	bls.n	800f666 <_scanf_float+0x86>
 800f664:	e0e9      	b.n	800f83a <_scanf_float+0x25a>
 800f666:	2301      	movs	r3, #1
 800f668:	9303      	str	r3, [sp, #12]
 800f66a:	e183      	b.n	800f974 <_scanf_float+0x394>
 800f66c:	0018      	movs	r0, r3
 800f66e:	3861      	subs	r0, #97	; 0x61
 800f670:	280d      	cmp	r0, #13
 800f672:	d8e6      	bhi.n	800f642 <_scanf_float+0x62>
 800f674:	f7f0 fd64 	bl	8000140 <__gnu_thumb1_case_shi>
 800f678:	ffe50083 	.word	0xffe50083
 800f67c:	ffe5ffe5 	.word	0xffe5ffe5
 800f680:	00a200b6 	.word	0x00a200b6
 800f684:	ffe5ffe5 	.word	0xffe5ffe5
 800f688:	ffe50089 	.word	0xffe50089
 800f68c:	ffe5ffe5 	.word	0xffe5ffe5
 800f690:	0065ffe5 	.word	0x0065ffe5
 800f694:	3841      	subs	r0, #65	; 0x41
 800f696:	e7eb      	b.n	800f670 <_scanf_float+0x90>
 800f698:	280e      	cmp	r0, #14
 800f69a:	d8d2      	bhi.n	800f642 <_scanf_float+0x62>
 800f69c:	f7f0 fd50 	bl	8000140 <__gnu_thumb1_case_shi>
 800f6a0:	ffd1004b 	.word	0xffd1004b
 800f6a4:	0098004b 	.word	0x0098004b
 800f6a8:	0020ffd1 	.word	0x0020ffd1
 800f6ac:	00400040 	.word	0x00400040
 800f6b0:	00400040 	.word	0x00400040
 800f6b4:	00400040 	.word	0x00400040
 800f6b8:	00400040 	.word	0x00400040
 800f6bc:	0040      	.short	0x0040
 800f6be:	2b6e      	cmp	r3, #110	; 0x6e
 800f6c0:	d809      	bhi.n	800f6d6 <_scanf_float+0xf6>
 800f6c2:	2b60      	cmp	r3, #96	; 0x60
 800f6c4:	d8d2      	bhi.n	800f66c <_scanf_float+0x8c>
 800f6c6:	2b54      	cmp	r3, #84	; 0x54
 800f6c8:	d07d      	beq.n	800f7c6 <_scanf_float+0x1e6>
 800f6ca:	2b59      	cmp	r3, #89	; 0x59
 800f6cc:	d1b9      	bne.n	800f642 <_scanf_float+0x62>
 800f6ce:	2c07      	cmp	r4, #7
 800f6d0:	d1b7      	bne.n	800f642 <_scanf_float+0x62>
 800f6d2:	2408      	movs	r4, #8
 800f6d4:	e02c      	b.n	800f730 <_scanf_float+0x150>
 800f6d6:	2b74      	cmp	r3, #116	; 0x74
 800f6d8:	d075      	beq.n	800f7c6 <_scanf_float+0x1e6>
 800f6da:	2b79      	cmp	r3, #121	; 0x79
 800f6dc:	d0f7      	beq.n	800f6ce <_scanf_float+0xee>
 800f6de:	e7b0      	b.n	800f642 <_scanf_float+0x62>
 800f6e0:	6839      	ldr	r1, [r7, #0]
 800f6e2:	05c8      	lsls	r0, r1, #23
 800f6e4:	d51c      	bpl.n	800f720 <_scanf_float+0x140>
 800f6e6:	2380      	movs	r3, #128	; 0x80
 800f6e8:	4399      	bics	r1, r3
 800f6ea:	9b01      	ldr	r3, [sp, #4]
 800f6ec:	6039      	str	r1, [r7, #0]
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	9301      	str	r3, [sp, #4]
 800f6f2:	9b06      	ldr	r3, [sp, #24]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d003      	beq.n	800f700 <_scanf_float+0x120>
 800f6f8:	3b01      	subs	r3, #1
 800f6fa:	3201      	adds	r2, #1
 800f6fc:	9306      	str	r3, [sp, #24]
 800f6fe:	60ba      	str	r2, [r7, #8]
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	3b01      	subs	r3, #1
 800f704:	60bb      	str	r3, [r7, #8]
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	3301      	adds	r3, #1
 800f70a:	613b      	str	r3, [r7, #16]
 800f70c:	6873      	ldr	r3, [r6, #4]
 800f70e:	3b01      	subs	r3, #1
 800f710:	6073      	str	r3, [r6, #4]
 800f712:	2b00      	cmp	r3, #0
 800f714:	dc00      	bgt.n	800f718 <_scanf_float+0x138>
 800f716:	e086      	b.n	800f826 <_scanf_float+0x246>
 800f718:	6833      	ldr	r3, [r6, #0]
 800f71a:	3301      	adds	r3, #1
 800f71c:	6033      	str	r3, [r6, #0]
 800f71e:	e782      	b.n	800f626 <_scanf_float+0x46>
 800f720:	9a03      	ldr	r2, [sp, #12]
 800f722:	1912      	adds	r2, r2, r4
 800f724:	2a00      	cmp	r2, #0
 800f726:	d18c      	bne.n	800f642 <_scanf_float+0x62>
 800f728:	683a      	ldr	r2, [r7, #0]
 800f72a:	496c      	ldr	r1, [pc, #432]	; (800f8dc <_scanf_float+0x2fc>)
 800f72c:	400a      	ands	r2, r1
 800f72e:	603a      	str	r2, [r7, #0]
 800f730:	702b      	strb	r3, [r5, #0]
 800f732:	3501      	adds	r5, #1
 800f734:	e7e4      	b.n	800f700 <_scanf_float+0x120>
 800f736:	2180      	movs	r1, #128	; 0x80
 800f738:	683a      	ldr	r2, [r7, #0]
 800f73a:	420a      	tst	r2, r1
 800f73c:	d081      	beq.n	800f642 <_scanf_float+0x62>
 800f73e:	438a      	bics	r2, r1
 800f740:	e7f5      	b.n	800f72e <_scanf_float+0x14e>
 800f742:	9a03      	ldr	r2, [sp, #12]
 800f744:	2a00      	cmp	r2, #0
 800f746:	d10f      	bne.n	800f768 <_scanf_float+0x188>
 800f748:	9a01      	ldr	r2, [sp, #4]
 800f74a:	2a00      	cmp	r2, #0
 800f74c:	d10f      	bne.n	800f76e <_scanf_float+0x18e>
 800f74e:	683a      	ldr	r2, [r7, #0]
 800f750:	21e0      	movs	r1, #224	; 0xe0
 800f752:	0010      	movs	r0, r2
 800f754:	00c9      	lsls	r1, r1, #3
 800f756:	4008      	ands	r0, r1
 800f758:	4288      	cmp	r0, r1
 800f75a:	d108      	bne.n	800f76e <_scanf_float+0x18e>
 800f75c:	4960      	ldr	r1, [pc, #384]	; (800f8e0 <_scanf_float+0x300>)
 800f75e:	400a      	ands	r2, r1
 800f760:	603a      	str	r2, [r7, #0]
 800f762:	2201      	movs	r2, #1
 800f764:	9203      	str	r2, [sp, #12]
 800f766:	e7e3      	b.n	800f730 <_scanf_float+0x150>
 800f768:	9a03      	ldr	r2, [sp, #12]
 800f76a:	2a02      	cmp	r2, #2
 800f76c:	d059      	beq.n	800f822 <_scanf_float+0x242>
 800f76e:	2c01      	cmp	r4, #1
 800f770:	d002      	beq.n	800f778 <_scanf_float+0x198>
 800f772:	2c04      	cmp	r4, #4
 800f774:	d000      	beq.n	800f778 <_scanf_float+0x198>
 800f776:	e764      	b.n	800f642 <_scanf_float+0x62>
 800f778:	3401      	adds	r4, #1
 800f77a:	b2e4      	uxtb	r4, r4
 800f77c:	e7d8      	b.n	800f730 <_scanf_float+0x150>
 800f77e:	9a03      	ldr	r2, [sp, #12]
 800f780:	2a01      	cmp	r2, #1
 800f782:	d000      	beq.n	800f786 <_scanf_float+0x1a6>
 800f784:	e75d      	b.n	800f642 <_scanf_float+0x62>
 800f786:	2202      	movs	r2, #2
 800f788:	e7ec      	b.n	800f764 <_scanf_float+0x184>
 800f78a:	2c00      	cmp	r4, #0
 800f78c:	d110      	bne.n	800f7b0 <_scanf_float+0x1d0>
 800f78e:	9a01      	ldr	r2, [sp, #4]
 800f790:	2a00      	cmp	r2, #0
 800f792:	d000      	beq.n	800f796 <_scanf_float+0x1b6>
 800f794:	e758      	b.n	800f648 <_scanf_float+0x68>
 800f796:	683a      	ldr	r2, [r7, #0]
 800f798:	21e0      	movs	r1, #224	; 0xe0
 800f79a:	0010      	movs	r0, r2
 800f79c:	00c9      	lsls	r1, r1, #3
 800f79e:	4008      	ands	r0, r1
 800f7a0:	4288      	cmp	r0, r1
 800f7a2:	d000      	beq.n	800f7a6 <_scanf_float+0x1c6>
 800f7a4:	e754      	b.n	800f650 <_scanf_float+0x70>
 800f7a6:	494e      	ldr	r1, [pc, #312]	; (800f8e0 <_scanf_float+0x300>)
 800f7a8:	3401      	adds	r4, #1
 800f7aa:	400a      	ands	r2, r1
 800f7ac:	603a      	str	r2, [r7, #0]
 800f7ae:	e7bf      	b.n	800f730 <_scanf_float+0x150>
 800f7b0:	21fd      	movs	r1, #253	; 0xfd
 800f7b2:	1ee2      	subs	r2, r4, #3
 800f7b4:	420a      	tst	r2, r1
 800f7b6:	d000      	beq.n	800f7ba <_scanf_float+0x1da>
 800f7b8:	e743      	b.n	800f642 <_scanf_float+0x62>
 800f7ba:	e7dd      	b.n	800f778 <_scanf_float+0x198>
 800f7bc:	2c02      	cmp	r4, #2
 800f7be:	d000      	beq.n	800f7c2 <_scanf_float+0x1e2>
 800f7c0:	e73f      	b.n	800f642 <_scanf_float+0x62>
 800f7c2:	2403      	movs	r4, #3
 800f7c4:	e7b4      	b.n	800f730 <_scanf_float+0x150>
 800f7c6:	2c06      	cmp	r4, #6
 800f7c8:	d000      	beq.n	800f7cc <_scanf_float+0x1ec>
 800f7ca:	e73a      	b.n	800f642 <_scanf_float+0x62>
 800f7cc:	2407      	movs	r4, #7
 800f7ce:	e7af      	b.n	800f730 <_scanf_float+0x150>
 800f7d0:	683a      	ldr	r2, [r7, #0]
 800f7d2:	0591      	lsls	r1, r2, #22
 800f7d4:	d400      	bmi.n	800f7d8 <_scanf_float+0x1f8>
 800f7d6:	e734      	b.n	800f642 <_scanf_float+0x62>
 800f7d8:	4942      	ldr	r1, [pc, #264]	; (800f8e4 <_scanf_float+0x304>)
 800f7da:	400a      	ands	r2, r1
 800f7dc:	603a      	str	r2, [r7, #0]
 800f7de:	9a01      	ldr	r2, [sp, #4]
 800f7e0:	9205      	str	r2, [sp, #20]
 800f7e2:	e7a5      	b.n	800f730 <_scanf_float+0x150>
 800f7e4:	21a0      	movs	r1, #160	; 0xa0
 800f7e6:	2080      	movs	r0, #128	; 0x80
 800f7e8:	683a      	ldr	r2, [r7, #0]
 800f7ea:	00c9      	lsls	r1, r1, #3
 800f7ec:	4011      	ands	r1, r2
 800f7ee:	00c0      	lsls	r0, r0, #3
 800f7f0:	4281      	cmp	r1, r0
 800f7f2:	d006      	beq.n	800f802 <_scanf_float+0x222>
 800f7f4:	4202      	tst	r2, r0
 800f7f6:	d100      	bne.n	800f7fa <_scanf_float+0x21a>
 800f7f8:	e723      	b.n	800f642 <_scanf_float+0x62>
 800f7fa:	9901      	ldr	r1, [sp, #4]
 800f7fc:	2900      	cmp	r1, #0
 800f7fe:	d100      	bne.n	800f802 <_scanf_float+0x222>
 800f800:	e726      	b.n	800f650 <_scanf_float+0x70>
 800f802:	0591      	lsls	r1, r2, #22
 800f804:	d404      	bmi.n	800f810 <_scanf_float+0x230>
 800f806:	9901      	ldr	r1, [sp, #4]
 800f808:	9805      	ldr	r0, [sp, #20]
 800f80a:	9509      	str	r5, [sp, #36]	; 0x24
 800f80c:	1a09      	subs	r1, r1, r0
 800f80e:	9108      	str	r1, [sp, #32]
 800f810:	4933      	ldr	r1, [pc, #204]	; (800f8e0 <_scanf_float+0x300>)
 800f812:	400a      	ands	r2, r1
 800f814:	21c0      	movs	r1, #192	; 0xc0
 800f816:	0049      	lsls	r1, r1, #1
 800f818:	430a      	orrs	r2, r1
 800f81a:	603a      	str	r2, [r7, #0]
 800f81c:	2200      	movs	r2, #0
 800f81e:	9201      	str	r2, [sp, #4]
 800f820:	e786      	b.n	800f730 <_scanf_float+0x150>
 800f822:	2203      	movs	r2, #3
 800f824:	e79e      	b.n	800f764 <_scanf_float+0x184>
 800f826:	23c0      	movs	r3, #192	; 0xc0
 800f828:	005b      	lsls	r3, r3, #1
 800f82a:	0031      	movs	r1, r6
 800f82c:	58fb      	ldr	r3, [r7, r3]
 800f82e:	9802      	ldr	r0, [sp, #8]
 800f830:	4798      	blx	r3
 800f832:	2800      	cmp	r0, #0
 800f834:	d100      	bne.n	800f838 <_scanf_float+0x258>
 800f836:	e6f6      	b.n	800f626 <_scanf_float+0x46>
 800f838:	e703      	b.n	800f642 <_scanf_float+0x62>
 800f83a:	3d01      	subs	r5, #1
 800f83c:	593b      	ldr	r3, [r7, r4]
 800f83e:	0032      	movs	r2, r6
 800f840:	7829      	ldrb	r1, [r5, #0]
 800f842:	9802      	ldr	r0, [sp, #8]
 800f844:	4798      	blx	r3
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	3b01      	subs	r3, #1
 800f84a:	613b      	str	r3, [r7, #16]
 800f84c:	e707      	b.n	800f65e <_scanf_float+0x7e>
 800f84e:	1e63      	subs	r3, r4, #1
 800f850:	2b06      	cmp	r3, #6
 800f852:	d80e      	bhi.n	800f872 <_scanf_float+0x292>
 800f854:	9503      	str	r5, [sp, #12]
 800f856:	2c02      	cmp	r4, #2
 800f858:	d920      	bls.n	800f89c <_scanf_float+0x2bc>
 800f85a:	1b63      	subs	r3, r4, r5
 800f85c:	b2db      	uxtb	r3, r3
 800f85e:	9306      	str	r3, [sp, #24]
 800f860:	9b03      	ldr	r3, [sp, #12]
 800f862:	9a06      	ldr	r2, [sp, #24]
 800f864:	189b      	adds	r3, r3, r2
 800f866:	b2db      	uxtb	r3, r3
 800f868:	2b03      	cmp	r3, #3
 800f86a:	d827      	bhi.n	800f8bc <_scanf_float+0x2dc>
 800f86c:	3c03      	subs	r4, #3
 800f86e:	b2e4      	uxtb	r4, r4
 800f870:	1b2d      	subs	r5, r5, r4
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	05da      	lsls	r2, r3, #23
 800f876:	d552      	bpl.n	800f91e <_scanf_float+0x33e>
 800f878:	055b      	lsls	r3, r3, #21
 800f87a:	d535      	bpl.n	800f8e8 <_scanf_float+0x308>
 800f87c:	24be      	movs	r4, #190	; 0xbe
 800f87e:	0064      	lsls	r4, r4, #1
 800f880:	9b04      	ldr	r3, [sp, #16]
 800f882:	429d      	cmp	r5, r3
 800f884:	d800      	bhi.n	800f888 <_scanf_float+0x2a8>
 800f886:	e6ee      	b.n	800f666 <_scanf_float+0x86>
 800f888:	3d01      	subs	r5, #1
 800f88a:	593b      	ldr	r3, [r7, r4]
 800f88c:	0032      	movs	r2, r6
 800f88e:	7829      	ldrb	r1, [r5, #0]
 800f890:	9802      	ldr	r0, [sp, #8]
 800f892:	4798      	blx	r3
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	3b01      	subs	r3, #1
 800f898:	613b      	str	r3, [r7, #16]
 800f89a:	e7f1      	b.n	800f880 <_scanf_float+0x2a0>
 800f89c:	24be      	movs	r4, #190	; 0xbe
 800f89e:	0064      	lsls	r4, r4, #1
 800f8a0:	9b04      	ldr	r3, [sp, #16]
 800f8a2:	429d      	cmp	r5, r3
 800f8a4:	d800      	bhi.n	800f8a8 <_scanf_float+0x2c8>
 800f8a6:	e6de      	b.n	800f666 <_scanf_float+0x86>
 800f8a8:	3d01      	subs	r5, #1
 800f8aa:	593b      	ldr	r3, [r7, r4]
 800f8ac:	0032      	movs	r2, r6
 800f8ae:	7829      	ldrb	r1, [r5, #0]
 800f8b0:	9802      	ldr	r0, [sp, #8]
 800f8b2:	4798      	blx	r3
 800f8b4:	693b      	ldr	r3, [r7, #16]
 800f8b6:	3b01      	subs	r3, #1
 800f8b8:	613b      	str	r3, [r7, #16]
 800f8ba:	e7f1      	b.n	800f8a0 <_scanf_float+0x2c0>
 800f8bc:	9b03      	ldr	r3, [sp, #12]
 800f8be:	0032      	movs	r2, r6
 800f8c0:	3b01      	subs	r3, #1
 800f8c2:	7819      	ldrb	r1, [r3, #0]
 800f8c4:	9303      	str	r3, [sp, #12]
 800f8c6:	23be      	movs	r3, #190	; 0xbe
 800f8c8:	005b      	lsls	r3, r3, #1
 800f8ca:	58fb      	ldr	r3, [r7, r3]
 800f8cc:	9802      	ldr	r0, [sp, #8]
 800f8ce:	4798      	blx	r3
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	3b01      	subs	r3, #1
 800f8d4:	613b      	str	r3, [r7, #16]
 800f8d6:	e7c3      	b.n	800f860 <_scanf_float+0x280>
 800f8d8:	fffffeff 	.word	0xfffffeff
 800f8dc:	fffffe7f 	.word	0xfffffe7f
 800f8e0:	fffff87f 	.word	0xfffff87f
 800f8e4:	fffffd7f 	.word	0xfffffd7f
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	1e6c      	subs	r4, r5, #1
 800f8ec:	7821      	ldrb	r1, [r4, #0]
 800f8ee:	3b01      	subs	r3, #1
 800f8f0:	613b      	str	r3, [r7, #16]
 800f8f2:	2965      	cmp	r1, #101	; 0x65
 800f8f4:	d00c      	beq.n	800f910 <_scanf_float+0x330>
 800f8f6:	2945      	cmp	r1, #69	; 0x45
 800f8f8:	d00a      	beq.n	800f910 <_scanf_float+0x330>
 800f8fa:	23be      	movs	r3, #190	; 0xbe
 800f8fc:	005b      	lsls	r3, r3, #1
 800f8fe:	58fb      	ldr	r3, [r7, r3]
 800f900:	0032      	movs	r2, r6
 800f902:	9802      	ldr	r0, [sp, #8]
 800f904:	4798      	blx	r3
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	1eac      	subs	r4, r5, #2
 800f90a:	3b01      	subs	r3, #1
 800f90c:	7821      	ldrb	r1, [r4, #0]
 800f90e:	613b      	str	r3, [r7, #16]
 800f910:	23be      	movs	r3, #190	; 0xbe
 800f912:	005b      	lsls	r3, r3, #1
 800f914:	0032      	movs	r2, r6
 800f916:	58fb      	ldr	r3, [r7, r3]
 800f918:	9802      	ldr	r0, [sp, #8]
 800f91a:	4798      	blx	r3
 800f91c:	0025      	movs	r5, r4
 800f91e:	683a      	ldr	r2, [r7, #0]
 800f920:	2310      	movs	r3, #16
 800f922:	0011      	movs	r1, r2
 800f924:	4019      	ands	r1, r3
 800f926:	9103      	str	r1, [sp, #12]
 800f928:	421a      	tst	r2, r3
 800f92a:	d15b      	bne.n	800f9e4 <_scanf_float+0x404>
 800f92c:	22c0      	movs	r2, #192	; 0xc0
 800f92e:	7029      	strb	r1, [r5, #0]
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	00d2      	lsls	r2, r2, #3
 800f934:	4013      	ands	r3, r2
 800f936:	2280      	movs	r2, #128	; 0x80
 800f938:	00d2      	lsls	r2, r2, #3
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d11d      	bne.n	800f97a <_scanf_float+0x39a>
 800f93e:	9b05      	ldr	r3, [sp, #20]
 800f940:	9a01      	ldr	r2, [sp, #4]
 800f942:	9901      	ldr	r1, [sp, #4]
 800f944:	1a9a      	subs	r2, r3, r2
 800f946:	428b      	cmp	r3, r1
 800f948:	d124      	bne.n	800f994 <_scanf_float+0x3b4>
 800f94a:	2200      	movs	r2, #0
 800f94c:	9904      	ldr	r1, [sp, #16]
 800f94e:	9802      	ldr	r0, [sp, #8]
 800f950:	f7ff f91c 	bl	800eb8c <_strtod_r>
 800f954:	9b07      	ldr	r3, [sp, #28]
 800f956:	683a      	ldr	r2, [r7, #0]
 800f958:	0004      	movs	r4, r0
 800f95a:	000d      	movs	r5, r1
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	0791      	lsls	r1, r2, #30
 800f960:	d525      	bpl.n	800f9ae <_scanf_float+0x3ce>
 800f962:	9907      	ldr	r1, [sp, #28]
 800f964:	1d1a      	adds	r2, r3, #4
 800f966:	600a      	str	r2, [r1, #0]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	601c      	str	r4, [r3, #0]
 800f96c:	605d      	str	r5, [r3, #4]
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	3301      	adds	r3, #1
 800f972:	60fb      	str	r3, [r7, #12]
 800f974:	9803      	ldr	r0, [sp, #12]
 800f976:	b00b      	add	sp, #44	; 0x2c
 800f978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f97a:	9b08      	ldr	r3, [sp, #32]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d0e4      	beq.n	800f94a <_scanf_float+0x36a>
 800f980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f982:	9a03      	ldr	r2, [sp, #12]
 800f984:	1c59      	adds	r1, r3, #1
 800f986:	9802      	ldr	r0, [sp, #8]
 800f988:	230a      	movs	r3, #10
 800f98a:	f7ff f99b 	bl	800ecc4 <_strtol_r>
 800f98e:	9b08      	ldr	r3, [sp, #32]
 800f990:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f992:	1ac2      	subs	r2, r0, r3
 800f994:	003b      	movs	r3, r7
 800f996:	3370      	adds	r3, #112	; 0x70
 800f998:	33ff      	adds	r3, #255	; 0xff
 800f99a:	429d      	cmp	r5, r3
 800f99c:	d302      	bcc.n	800f9a4 <_scanf_float+0x3c4>
 800f99e:	003d      	movs	r5, r7
 800f9a0:	356f      	adds	r5, #111	; 0x6f
 800f9a2:	35ff      	adds	r5, #255	; 0xff
 800f9a4:	0028      	movs	r0, r5
 800f9a6:	4910      	ldr	r1, [pc, #64]	; (800f9e8 <_scanf_float+0x408>)
 800f9a8:	f000 f8e6 	bl	800fb78 <siprintf>
 800f9ac:	e7cd      	b.n	800f94a <_scanf_float+0x36a>
 800f9ae:	1d19      	adds	r1, r3, #4
 800f9b0:	0752      	lsls	r2, r2, #29
 800f9b2:	d502      	bpl.n	800f9ba <_scanf_float+0x3da>
 800f9b4:	9a07      	ldr	r2, [sp, #28]
 800f9b6:	6011      	str	r1, [r2, #0]
 800f9b8:	e7d6      	b.n	800f968 <_scanf_float+0x388>
 800f9ba:	9a07      	ldr	r2, [sp, #28]
 800f9bc:	0020      	movs	r0, r4
 800f9be:	6011      	str	r1, [r2, #0]
 800f9c0:	681e      	ldr	r6, [r3, #0]
 800f9c2:	0022      	movs	r2, r4
 800f9c4:	002b      	movs	r3, r5
 800f9c6:	0029      	movs	r1, r5
 800f9c8:	f7f3 f88c 	bl	8002ae4 <__aeabi_dcmpun>
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	d004      	beq.n	800f9da <_scanf_float+0x3fa>
 800f9d0:	4806      	ldr	r0, [pc, #24]	; (800f9ec <_scanf_float+0x40c>)
 800f9d2:	f000 fab5 	bl	800ff40 <nanf>
 800f9d6:	6030      	str	r0, [r6, #0]
 800f9d8:	e7c9      	b.n	800f96e <_scanf_float+0x38e>
 800f9da:	0020      	movs	r0, r4
 800f9dc:	0029      	movs	r1, r5
 800f9de:	f7f3 f973 	bl	8002cc8 <__aeabi_d2f>
 800f9e2:	e7f8      	b.n	800f9d6 <_scanf_float+0x3f6>
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	e63f      	b.n	800f668 <_scanf_float+0x88>
 800f9e8:	08013d03 	.word	0x08013d03
 800f9ec:	08013dbc 	.word	0x08013dbc

0800f9f0 <std>:
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	b510      	push	{r4, lr}
 800f9f4:	0004      	movs	r4, r0
 800f9f6:	6003      	str	r3, [r0, #0]
 800f9f8:	6043      	str	r3, [r0, #4]
 800f9fa:	6083      	str	r3, [r0, #8]
 800f9fc:	8181      	strh	r1, [r0, #12]
 800f9fe:	6643      	str	r3, [r0, #100]	; 0x64
 800fa00:	81c2      	strh	r2, [r0, #14]
 800fa02:	6103      	str	r3, [r0, #16]
 800fa04:	6143      	str	r3, [r0, #20]
 800fa06:	6183      	str	r3, [r0, #24]
 800fa08:	0019      	movs	r1, r3
 800fa0a:	2208      	movs	r2, #8
 800fa0c:	305c      	adds	r0, #92	; 0x5c
 800fa0e:	f000 f949 	bl	800fca4 <memset>
 800fa12:	4b0b      	ldr	r3, [pc, #44]	; (800fa40 <std+0x50>)
 800fa14:	6224      	str	r4, [r4, #32]
 800fa16:	6263      	str	r3, [r4, #36]	; 0x24
 800fa18:	4b0a      	ldr	r3, [pc, #40]	; (800fa44 <std+0x54>)
 800fa1a:	62a3      	str	r3, [r4, #40]	; 0x28
 800fa1c:	4b0a      	ldr	r3, [pc, #40]	; (800fa48 <std+0x58>)
 800fa1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fa20:	4b0a      	ldr	r3, [pc, #40]	; (800fa4c <std+0x5c>)
 800fa22:	6323      	str	r3, [r4, #48]	; 0x30
 800fa24:	4b0a      	ldr	r3, [pc, #40]	; (800fa50 <std+0x60>)
 800fa26:	429c      	cmp	r4, r3
 800fa28:	d005      	beq.n	800fa36 <std+0x46>
 800fa2a:	4b0a      	ldr	r3, [pc, #40]	; (800fa54 <std+0x64>)
 800fa2c:	429c      	cmp	r4, r3
 800fa2e:	d002      	beq.n	800fa36 <std+0x46>
 800fa30:	4b09      	ldr	r3, [pc, #36]	; (800fa58 <std+0x68>)
 800fa32:	429c      	cmp	r4, r3
 800fa34:	d103      	bne.n	800fa3e <std+0x4e>
 800fa36:	0020      	movs	r0, r4
 800fa38:	3058      	adds	r0, #88	; 0x58
 800fa3a:	f000 fa5b 	bl	800fef4 <__retarget_lock_init_recursive>
 800fa3e:	bd10      	pop	{r4, pc}
 800fa40:	0800fc09 	.word	0x0800fc09
 800fa44:	0800fc35 	.word	0x0800fc35
 800fa48:	0800fc6d 	.word	0x0800fc6d
 800fa4c:	0800fc99 	.word	0x0800fc99
 800fa50:	20003e20 	.word	0x20003e20
 800fa54:	20003e88 	.word	0x20003e88
 800fa58:	20003ef0 	.word	0x20003ef0

0800fa5c <stdio_exit_handler>:
 800fa5c:	b510      	push	{r4, lr}
 800fa5e:	4a03      	ldr	r2, [pc, #12]	; (800fa6c <stdio_exit_handler+0x10>)
 800fa60:	4903      	ldr	r1, [pc, #12]	; (800fa70 <stdio_exit_handler+0x14>)
 800fa62:	4804      	ldr	r0, [pc, #16]	; (800fa74 <stdio_exit_handler+0x18>)
 800fa64:	f000 f86c 	bl	800fb40 <_fwalk_sglue>
 800fa68:	bd10      	pop	{r4, pc}
 800fa6a:	46c0      	nop			; (mov r8, r8)
 800fa6c:	20000058 	.word	0x20000058
 800fa70:	08012965 	.word	0x08012965
 800fa74:	200001d0 	.word	0x200001d0

0800fa78 <cleanup_stdio>:
 800fa78:	6841      	ldr	r1, [r0, #4]
 800fa7a:	4b0b      	ldr	r3, [pc, #44]	; (800faa8 <cleanup_stdio+0x30>)
 800fa7c:	b510      	push	{r4, lr}
 800fa7e:	0004      	movs	r4, r0
 800fa80:	4299      	cmp	r1, r3
 800fa82:	d001      	beq.n	800fa88 <cleanup_stdio+0x10>
 800fa84:	f002 ff6e 	bl	8012964 <_fflush_r>
 800fa88:	68a1      	ldr	r1, [r4, #8]
 800fa8a:	4b08      	ldr	r3, [pc, #32]	; (800faac <cleanup_stdio+0x34>)
 800fa8c:	4299      	cmp	r1, r3
 800fa8e:	d002      	beq.n	800fa96 <cleanup_stdio+0x1e>
 800fa90:	0020      	movs	r0, r4
 800fa92:	f002 ff67 	bl	8012964 <_fflush_r>
 800fa96:	68e1      	ldr	r1, [r4, #12]
 800fa98:	4b05      	ldr	r3, [pc, #20]	; (800fab0 <cleanup_stdio+0x38>)
 800fa9a:	4299      	cmp	r1, r3
 800fa9c:	d002      	beq.n	800faa4 <cleanup_stdio+0x2c>
 800fa9e:	0020      	movs	r0, r4
 800faa0:	f002 ff60 	bl	8012964 <_fflush_r>
 800faa4:	bd10      	pop	{r4, pc}
 800faa6:	46c0      	nop			; (mov r8, r8)
 800faa8:	20003e20 	.word	0x20003e20
 800faac:	20003e88 	.word	0x20003e88
 800fab0:	20003ef0 	.word	0x20003ef0

0800fab4 <global_stdio_init.part.0>:
 800fab4:	b510      	push	{r4, lr}
 800fab6:	4b09      	ldr	r3, [pc, #36]	; (800fadc <global_stdio_init.part.0+0x28>)
 800fab8:	4a09      	ldr	r2, [pc, #36]	; (800fae0 <global_stdio_init.part.0+0x2c>)
 800faba:	2104      	movs	r1, #4
 800fabc:	601a      	str	r2, [r3, #0]
 800fabe:	4809      	ldr	r0, [pc, #36]	; (800fae4 <global_stdio_init.part.0+0x30>)
 800fac0:	2200      	movs	r2, #0
 800fac2:	f7ff ff95 	bl	800f9f0 <std>
 800fac6:	2201      	movs	r2, #1
 800fac8:	2109      	movs	r1, #9
 800faca:	4807      	ldr	r0, [pc, #28]	; (800fae8 <global_stdio_init.part.0+0x34>)
 800facc:	f7ff ff90 	bl	800f9f0 <std>
 800fad0:	2202      	movs	r2, #2
 800fad2:	2112      	movs	r1, #18
 800fad4:	4805      	ldr	r0, [pc, #20]	; (800faec <global_stdio_init.part.0+0x38>)
 800fad6:	f7ff ff8b 	bl	800f9f0 <std>
 800fada:	bd10      	pop	{r4, pc}
 800fadc:	20003f58 	.word	0x20003f58
 800fae0:	0800fa5d 	.word	0x0800fa5d
 800fae4:	20003e20 	.word	0x20003e20
 800fae8:	20003e88 	.word	0x20003e88
 800faec:	20003ef0 	.word	0x20003ef0

0800faf0 <__sfp_lock_acquire>:
 800faf0:	b510      	push	{r4, lr}
 800faf2:	4802      	ldr	r0, [pc, #8]	; (800fafc <__sfp_lock_acquire+0xc>)
 800faf4:	f000 f9ff 	bl	800fef6 <__retarget_lock_acquire_recursive>
 800faf8:	bd10      	pop	{r4, pc}
 800fafa:	46c0      	nop			; (mov r8, r8)
 800fafc:	20003f61 	.word	0x20003f61

0800fb00 <__sfp_lock_release>:
 800fb00:	b510      	push	{r4, lr}
 800fb02:	4802      	ldr	r0, [pc, #8]	; (800fb0c <__sfp_lock_release+0xc>)
 800fb04:	f000 f9f8 	bl	800fef8 <__retarget_lock_release_recursive>
 800fb08:	bd10      	pop	{r4, pc}
 800fb0a:	46c0      	nop			; (mov r8, r8)
 800fb0c:	20003f61 	.word	0x20003f61

0800fb10 <__sinit>:
 800fb10:	b510      	push	{r4, lr}
 800fb12:	0004      	movs	r4, r0
 800fb14:	f7ff ffec 	bl	800faf0 <__sfp_lock_acquire>
 800fb18:	6a23      	ldr	r3, [r4, #32]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d002      	beq.n	800fb24 <__sinit+0x14>
 800fb1e:	f7ff ffef 	bl	800fb00 <__sfp_lock_release>
 800fb22:	bd10      	pop	{r4, pc}
 800fb24:	4b04      	ldr	r3, [pc, #16]	; (800fb38 <__sinit+0x28>)
 800fb26:	6223      	str	r3, [r4, #32]
 800fb28:	4b04      	ldr	r3, [pc, #16]	; (800fb3c <__sinit+0x2c>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d1f6      	bne.n	800fb1e <__sinit+0xe>
 800fb30:	f7ff ffc0 	bl	800fab4 <global_stdio_init.part.0>
 800fb34:	e7f3      	b.n	800fb1e <__sinit+0xe>
 800fb36:	46c0      	nop			; (mov r8, r8)
 800fb38:	0800fa79 	.word	0x0800fa79
 800fb3c:	20003f58 	.word	0x20003f58

0800fb40 <_fwalk_sglue>:
 800fb40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb42:	0014      	movs	r4, r2
 800fb44:	2600      	movs	r6, #0
 800fb46:	9000      	str	r0, [sp, #0]
 800fb48:	9101      	str	r1, [sp, #4]
 800fb4a:	68a5      	ldr	r5, [r4, #8]
 800fb4c:	6867      	ldr	r7, [r4, #4]
 800fb4e:	3f01      	subs	r7, #1
 800fb50:	d504      	bpl.n	800fb5c <_fwalk_sglue+0x1c>
 800fb52:	6824      	ldr	r4, [r4, #0]
 800fb54:	2c00      	cmp	r4, #0
 800fb56:	d1f8      	bne.n	800fb4a <_fwalk_sglue+0xa>
 800fb58:	0030      	movs	r0, r6
 800fb5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fb5c:	89ab      	ldrh	r3, [r5, #12]
 800fb5e:	2b01      	cmp	r3, #1
 800fb60:	d908      	bls.n	800fb74 <_fwalk_sglue+0x34>
 800fb62:	220e      	movs	r2, #14
 800fb64:	5eab      	ldrsh	r3, [r5, r2]
 800fb66:	3301      	adds	r3, #1
 800fb68:	d004      	beq.n	800fb74 <_fwalk_sglue+0x34>
 800fb6a:	0029      	movs	r1, r5
 800fb6c:	9800      	ldr	r0, [sp, #0]
 800fb6e:	9b01      	ldr	r3, [sp, #4]
 800fb70:	4798      	blx	r3
 800fb72:	4306      	orrs	r6, r0
 800fb74:	3568      	adds	r5, #104	; 0x68
 800fb76:	e7ea      	b.n	800fb4e <_fwalk_sglue+0xe>

0800fb78 <siprintf>:
 800fb78:	b40e      	push	{r1, r2, r3}
 800fb7a:	b500      	push	{lr}
 800fb7c:	490b      	ldr	r1, [pc, #44]	; (800fbac <siprintf+0x34>)
 800fb7e:	b09c      	sub	sp, #112	; 0x70
 800fb80:	ab1d      	add	r3, sp, #116	; 0x74
 800fb82:	9002      	str	r0, [sp, #8]
 800fb84:	9006      	str	r0, [sp, #24]
 800fb86:	9107      	str	r1, [sp, #28]
 800fb88:	9104      	str	r1, [sp, #16]
 800fb8a:	4809      	ldr	r0, [pc, #36]	; (800fbb0 <siprintf+0x38>)
 800fb8c:	4909      	ldr	r1, [pc, #36]	; (800fbb4 <siprintf+0x3c>)
 800fb8e:	cb04      	ldmia	r3!, {r2}
 800fb90:	9105      	str	r1, [sp, #20]
 800fb92:	6800      	ldr	r0, [r0, #0]
 800fb94:	a902      	add	r1, sp, #8
 800fb96:	9301      	str	r3, [sp, #4]
 800fb98:	f002 fa32 	bl	8012000 <_svfiprintf_r>
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	9b02      	ldr	r3, [sp, #8]
 800fba0:	701a      	strb	r2, [r3, #0]
 800fba2:	b01c      	add	sp, #112	; 0x70
 800fba4:	bc08      	pop	{r3}
 800fba6:	b003      	add	sp, #12
 800fba8:	4718      	bx	r3
 800fbaa:	46c0      	nop			; (mov r8, r8)
 800fbac:	7fffffff 	.word	0x7fffffff
 800fbb0:	2000021c 	.word	0x2000021c
 800fbb4:	ffff0208 	.word	0xffff0208

0800fbb8 <siscanf>:
 800fbb8:	b40e      	push	{r1, r2, r3}
 800fbba:	b530      	push	{r4, r5, lr}
 800fbbc:	2381      	movs	r3, #129	; 0x81
 800fbbe:	b09c      	sub	sp, #112	; 0x70
 800fbc0:	466a      	mov	r2, sp
 800fbc2:	ac1f      	add	r4, sp, #124	; 0x7c
 800fbc4:	009b      	lsls	r3, r3, #2
 800fbc6:	cc20      	ldmia	r4!, {r5}
 800fbc8:	8293      	strh	r3, [r2, #20]
 800fbca:	9002      	str	r0, [sp, #8]
 800fbcc:	9006      	str	r0, [sp, #24]
 800fbce:	f7f0 faa5 	bl	800011c <strlen>
 800fbd2:	4b0b      	ldr	r3, [pc, #44]	; (800fc00 <siscanf+0x48>)
 800fbd4:	466a      	mov	r2, sp
 800fbd6:	930b      	str	r3, [sp, #44]	; 0x2c
 800fbd8:	2300      	movs	r3, #0
 800fbda:	9003      	str	r0, [sp, #12]
 800fbdc:	9007      	str	r0, [sp, #28]
 800fbde:	4809      	ldr	r0, [pc, #36]	; (800fc04 <siscanf+0x4c>)
 800fbe0:	930f      	str	r3, [sp, #60]	; 0x3c
 800fbe2:	9314      	str	r3, [sp, #80]	; 0x50
 800fbe4:	3b01      	subs	r3, #1
 800fbe6:	82d3      	strh	r3, [r2, #22]
 800fbe8:	a902      	add	r1, sp, #8
 800fbea:	0023      	movs	r3, r4
 800fbec:	002a      	movs	r2, r5
 800fbee:	6800      	ldr	r0, [r0, #0]
 800fbf0:	9401      	str	r4, [sp, #4]
 800fbf2:	f002 fb61 	bl	80122b8 <__ssvfiscanf_r>
 800fbf6:	b01c      	add	sp, #112	; 0x70
 800fbf8:	bc30      	pop	{r4, r5}
 800fbfa:	bc08      	pop	{r3}
 800fbfc:	b003      	add	sp, #12
 800fbfe:	4718      	bx	r3
 800fc00:	0800fc31 	.word	0x0800fc31
 800fc04:	2000021c 	.word	0x2000021c

0800fc08 <__sread>:
 800fc08:	b570      	push	{r4, r5, r6, lr}
 800fc0a:	000c      	movs	r4, r1
 800fc0c:	250e      	movs	r5, #14
 800fc0e:	5f49      	ldrsh	r1, [r1, r5]
 800fc10:	f000 f91e 	bl	800fe50 <_read_r>
 800fc14:	2800      	cmp	r0, #0
 800fc16:	db03      	blt.n	800fc20 <__sread+0x18>
 800fc18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800fc1a:	181b      	adds	r3, r3, r0
 800fc1c:	6563      	str	r3, [r4, #84]	; 0x54
 800fc1e:	bd70      	pop	{r4, r5, r6, pc}
 800fc20:	89a3      	ldrh	r3, [r4, #12]
 800fc22:	4a02      	ldr	r2, [pc, #8]	; (800fc2c <__sread+0x24>)
 800fc24:	4013      	ands	r3, r2
 800fc26:	81a3      	strh	r3, [r4, #12]
 800fc28:	e7f9      	b.n	800fc1e <__sread+0x16>
 800fc2a:	46c0      	nop			; (mov r8, r8)
 800fc2c:	ffffefff 	.word	0xffffefff

0800fc30 <__seofread>:
 800fc30:	2000      	movs	r0, #0
 800fc32:	4770      	bx	lr

0800fc34 <__swrite>:
 800fc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc36:	001f      	movs	r7, r3
 800fc38:	898b      	ldrh	r3, [r1, #12]
 800fc3a:	0005      	movs	r5, r0
 800fc3c:	000c      	movs	r4, r1
 800fc3e:	0016      	movs	r6, r2
 800fc40:	05db      	lsls	r3, r3, #23
 800fc42:	d505      	bpl.n	800fc50 <__swrite+0x1c>
 800fc44:	230e      	movs	r3, #14
 800fc46:	5ec9      	ldrsh	r1, [r1, r3]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	2302      	movs	r3, #2
 800fc4c:	f000 f8ec 	bl	800fe28 <_lseek_r>
 800fc50:	89a3      	ldrh	r3, [r4, #12]
 800fc52:	4a05      	ldr	r2, [pc, #20]	; (800fc68 <__swrite+0x34>)
 800fc54:	0028      	movs	r0, r5
 800fc56:	4013      	ands	r3, r2
 800fc58:	81a3      	strh	r3, [r4, #12]
 800fc5a:	0032      	movs	r2, r6
 800fc5c:	230e      	movs	r3, #14
 800fc5e:	5ee1      	ldrsh	r1, [r4, r3]
 800fc60:	003b      	movs	r3, r7
 800fc62:	f000 f909 	bl	800fe78 <_write_r>
 800fc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc68:	ffffefff 	.word	0xffffefff

0800fc6c <__sseek>:
 800fc6c:	b570      	push	{r4, r5, r6, lr}
 800fc6e:	000c      	movs	r4, r1
 800fc70:	250e      	movs	r5, #14
 800fc72:	5f49      	ldrsh	r1, [r1, r5]
 800fc74:	f000 f8d8 	bl	800fe28 <_lseek_r>
 800fc78:	89a3      	ldrh	r3, [r4, #12]
 800fc7a:	1c42      	adds	r2, r0, #1
 800fc7c:	d103      	bne.n	800fc86 <__sseek+0x1a>
 800fc7e:	4a05      	ldr	r2, [pc, #20]	; (800fc94 <__sseek+0x28>)
 800fc80:	4013      	ands	r3, r2
 800fc82:	81a3      	strh	r3, [r4, #12]
 800fc84:	bd70      	pop	{r4, r5, r6, pc}
 800fc86:	2280      	movs	r2, #128	; 0x80
 800fc88:	0152      	lsls	r2, r2, #5
 800fc8a:	4313      	orrs	r3, r2
 800fc8c:	81a3      	strh	r3, [r4, #12]
 800fc8e:	6560      	str	r0, [r4, #84]	; 0x54
 800fc90:	e7f8      	b.n	800fc84 <__sseek+0x18>
 800fc92:	46c0      	nop			; (mov r8, r8)
 800fc94:	ffffefff 	.word	0xffffefff

0800fc98 <__sclose>:
 800fc98:	b510      	push	{r4, lr}
 800fc9a:	230e      	movs	r3, #14
 800fc9c:	5ec9      	ldrsh	r1, [r1, r3]
 800fc9e:	f000 f8b1 	bl	800fe04 <_close_r>
 800fca2:	bd10      	pop	{r4, pc}

0800fca4 <memset>:
 800fca4:	0003      	movs	r3, r0
 800fca6:	1882      	adds	r2, r0, r2
 800fca8:	4293      	cmp	r3, r2
 800fcaa:	d100      	bne.n	800fcae <memset+0xa>
 800fcac:	4770      	bx	lr
 800fcae:	7019      	strb	r1, [r3, #0]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	e7f9      	b.n	800fca8 <memset+0x4>

0800fcb4 <strcat>:
 800fcb4:	0002      	movs	r2, r0
 800fcb6:	b510      	push	{r4, lr}
 800fcb8:	7813      	ldrb	r3, [r2, #0]
 800fcba:	0014      	movs	r4, r2
 800fcbc:	3201      	adds	r2, #1
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d1fa      	bne.n	800fcb8 <strcat+0x4>
 800fcc2:	5cca      	ldrb	r2, [r1, r3]
 800fcc4:	54e2      	strb	r2, [r4, r3]
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	2a00      	cmp	r2, #0
 800fcca:	d1fa      	bne.n	800fcc2 <strcat+0xe>
 800fccc:	bd10      	pop	{r4, pc}

0800fcce <strchr>:
 800fcce:	b2c9      	uxtb	r1, r1
 800fcd0:	7803      	ldrb	r3, [r0, #0]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d004      	beq.n	800fce0 <strchr+0x12>
 800fcd6:	428b      	cmp	r3, r1
 800fcd8:	d100      	bne.n	800fcdc <strchr+0xe>
 800fcda:	4770      	bx	lr
 800fcdc:	3001      	adds	r0, #1
 800fcde:	e7f7      	b.n	800fcd0 <strchr+0x2>
 800fce0:	424b      	negs	r3, r1
 800fce2:	4159      	adcs	r1, r3
 800fce4:	4249      	negs	r1, r1
 800fce6:	4008      	ands	r0, r1
 800fce8:	e7f7      	b.n	800fcda <strchr+0xc>

0800fcea <strncmp>:
 800fcea:	b530      	push	{r4, r5, lr}
 800fcec:	0005      	movs	r5, r0
 800fcee:	1e10      	subs	r0, r2, #0
 800fcf0:	d00b      	beq.n	800fd0a <strncmp+0x20>
 800fcf2:	2400      	movs	r4, #0
 800fcf4:	3a01      	subs	r2, #1
 800fcf6:	5d2b      	ldrb	r3, [r5, r4]
 800fcf8:	5d08      	ldrb	r0, [r1, r4]
 800fcfa:	4283      	cmp	r3, r0
 800fcfc:	d104      	bne.n	800fd08 <strncmp+0x1e>
 800fcfe:	42a2      	cmp	r2, r4
 800fd00:	d002      	beq.n	800fd08 <strncmp+0x1e>
 800fd02:	3401      	adds	r4, #1
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d1f6      	bne.n	800fcf6 <strncmp+0xc>
 800fd08:	1a18      	subs	r0, r3, r0
 800fd0a:	bd30      	pop	{r4, r5, pc}

0800fd0c <strncpy>:
 800fd0c:	0003      	movs	r3, r0
 800fd0e:	b530      	push	{r4, r5, lr}
 800fd10:	001d      	movs	r5, r3
 800fd12:	2a00      	cmp	r2, #0
 800fd14:	d006      	beq.n	800fd24 <strncpy+0x18>
 800fd16:	780c      	ldrb	r4, [r1, #0]
 800fd18:	3a01      	subs	r2, #1
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	702c      	strb	r4, [r5, #0]
 800fd1e:	3101      	adds	r1, #1
 800fd20:	2c00      	cmp	r4, #0
 800fd22:	d1f5      	bne.n	800fd10 <strncpy+0x4>
 800fd24:	2100      	movs	r1, #0
 800fd26:	189a      	adds	r2, r3, r2
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d100      	bne.n	800fd2e <strncpy+0x22>
 800fd2c:	bd30      	pop	{r4, r5, pc}
 800fd2e:	7019      	strb	r1, [r3, #0]
 800fd30:	3301      	adds	r3, #1
 800fd32:	e7f9      	b.n	800fd28 <strncpy+0x1c>

0800fd34 <strtok>:
 800fd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd36:	4b16      	ldr	r3, [pc, #88]	; (800fd90 <strtok+0x5c>)
 800fd38:	0005      	movs	r5, r0
 800fd3a:	681f      	ldr	r7, [r3, #0]
 800fd3c:	000e      	movs	r6, r1
 800fd3e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800fd40:	2c00      	cmp	r4, #0
 800fd42:	d11d      	bne.n	800fd80 <strtok+0x4c>
 800fd44:	2050      	movs	r0, #80	; 0x50
 800fd46:	f001 fb61 	bl	801140c <malloc>
 800fd4a:	1e02      	subs	r2, r0, #0
 800fd4c:	6478      	str	r0, [r7, #68]	; 0x44
 800fd4e:	d104      	bne.n	800fd5a <strtok+0x26>
 800fd50:	215b      	movs	r1, #91	; 0x5b
 800fd52:	4b10      	ldr	r3, [pc, #64]	; (800fd94 <strtok+0x60>)
 800fd54:	4810      	ldr	r0, [pc, #64]	; (800fd98 <strtok+0x64>)
 800fd56:	f000 f8f7 	bl	800ff48 <__assert_func>
 800fd5a:	6004      	str	r4, [r0, #0]
 800fd5c:	6044      	str	r4, [r0, #4]
 800fd5e:	6084      	str	r4, [r0, #8]
 800fd60:	60c4      	str	r4, [r0, #12]
 800fd62:	6104      	str	r4, [r0, #16]
 800fd64:	6144      	str	r4, [r0, #20]
 800fd66:	6184      	str	r4, [r0, #24]
 800fd68:	6284      	str	r4, [r0, #40]	; 0x28
 800fd6a:	62c4      	str	r4, [r0, #44]	; 0x2c
 800fd6c:	6304      	str	r4, [r0, #48]	; 0x30
 800fd6e:	6344      	str	r4, [r0, #52]	; 0x34
 800fd70:	6384      	str	r4, [r0, #56]	; 0x38
 800fd72:	63c4      	str	r4, [r0, #60]	; 0x3c
 800fd74:	6404      	str	r4, [r0, #64]	; 0x40
 800fd76:	6444      	str	r4, [r0, #68]	; 0x44
 800fd78:	6484      	str	r4, [r0, #72]	; 0x48
 800fd7a:	64c4      	str	r4, [r0, #76]	; 0x4c
 800fd7c:	7704      	strb	r4, [r0, #28]
 800fd7e:	6244      	str	r4, [r0, #36]	; 0x24
 800fd80:	0031      	movs	r1, r6
 800fd82:	0028      	movs	r0, r5
 800fd84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd86:	2301      	movs	r3, #1
 800fd88:	f000 f808 	bl	800fd9c <__strtok_r>
 800fd8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd8e:	46c0      	nop			; (mov r8, r8)
 800fd90:	2000021c 	.word	0x2000021c
 800fd94:	08013d08 	.word	0x08013d08
 800fd98:	08013d1f 	.word	0x08013d1f

0800fd9c <__strtok_r>:
 800fd9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd9e:	2800      	cmp	r0, #0
 800fda0:	d102      	bne.n	800fda8 <__strtok_r+0xc>
 800fda2:	6810      	ldr	r0, [r2, #0]
 800fda4:	2800      	cmp	r0, #0
 800fda6:	d013      	beq.n	800fdd0 <__strtok_r+0x34>
 800fda8:	0004      	movs	r4, r0
 800fdaa:	0020      	movs	r0, r4
 800fdac:	000e      	movs	r6, r1
 800fdae:	7805      	ldrb	r5, [r0, #0]
 800fdb0:	3401      	adds	r4, #1
 800fdb2:	7837      	ldrb	r7, [r6, #0]
 800fdb4:	2f00      	cmp	r7, #0
 800fdb6:	d104      	bne.n	800fdc2 <__strtok_r+0x26>
 800fdb8:	2d00      	cmp	r5, #0
 800fdba:	d10f      	bne.n	800fddc <__strtok_r+0x40>
 800fdbc:	0028      	movs	r0, r5
 800fdbe:	6015      	str	r5, [r2, #0]
 800fdc0:	e006      	b.n	800fdd0 <__strtok_r+0x34>
 800fdc2:	3601      	adds	r6, #1
 800fdc4:	42bd      	cmp	r5, r7
 800fdc6:	d1f4      	bne.n	800fdb2 <__strtok_r+0x16>
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d1ee      	bne.n	800fdaa <__strtok_r+0xe>
 800fdcc:	6014      	str	r4, [r2, #0]
 800fdce:	7003      	strb	r3, [r0, #0]
 800fdd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdd2:	002f      	movs	r7, r5
 800fdd4:	e00f      	b.n	800fdf6 <__strtok_r+0x5a>
 800fdd6:	3301      	adds	r3, #1
 800fdd8:	2e00      	cmp	r6, #0
 800fdda:	d104      	bne.n	800fde6 <__strtok_r+0x4a>
 800fddc:	0023      	movs	r3, r4
 800fdde:	3401      	adds	r4, #1
 800fde0:	781d      	ldrb	r5, [r3, #0]
 800fde2:	0027      	movs	r7, r4
 800fde4:	000b      	movs	r3, r1
 800fde6:	781e      	ldrb	r6, [r3, #0]
 800fde8:	42b5      	cmp	r5, r6
 800fdea:	d1f4      	bne.n	800fdd6 <__strtok_r+0x3a>
 800fdec:	2d00      	cmp	r5, #0
 800fdee:	d0f0      	beq.n	800fdd2 <__strtok_r+0x36>
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	3c01      	subs	r4, #1
 800fdf4:	7023      	strb	r3, [r4, #0]
 800fdf6:	6017      	str	r7, [r2, #0]
 800fdf8:	e7ea      	b.n	800fdd0 <__strtok_r+0x34>
	...

0800fdfc <_localeconv_r>:
 800fdfc:	4800      	ldr	r0, [pc, #0]	; (800fe00 <_localeconv_r+0x4>)
 800fdfe:	4770      	bx	lr
 800fe00:	20000154 	.word	0x20000154

0800fe04 <_close_r>:
 800fe04:	2300      	movs	r3, #0
 800fe06:	b570      	push	{r4, r5, r6, lr}
 800fe08:	4d06      	ldr	r5, [pc, #24]	; (800fe24 <_close_r+0x20>)
 800fe0a:	0004      	movs	r4, r0
 800fe0c:	0008      	movs	r0, r1
 800fe0e:	602b      	str	r3, [r5, #0]
 800fe10:	f7f5 fb51 	bl	80054b6 <_close>
 800fe14:	1c43      	adds	r3, r0, #1
 800fe16:	d103      	bne.n	800fe20 <_close_r+0x1c>
 800fe18:	682b      	ldr	r3, [r5, #0]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d000      	beq.n	800fe20 <_close_r+0x1c>
 800fe1e:	6023      	str	r3, [r4, #0]
 800fe20:	bd70      	pop	{r4, r5, r6, pc}
 800fe22:	46c0      	nop			; (mov r8, r8)
 800fe24:	20003f5c 	.word	0x20003f5c

0800fe28 <_lseek_r>:
 800fe28:	b570      	push	{r4, r5, r6, lr}
 800fe2a:	0004      	movs	r4, r0
 800fe2c:	0008      	movs	r0, r1
 800fe2e:	0011      	movs	r1, r2
 800fe30:	001a      	movs	r2, r3
 800fe32:	2300      	movs	r3, #0
 800fe34:	4d05      	ldr	r5, [pc, #20]	; (800fe4c <_lseek_r+0x24>)
 800fe36:	602b      	str	r3, [r5, #0]
 800fe38:	f7f5 fb5e 	bl	80054f8 <_lseek>
 800fe3c:	1c43      	adds	r3, r0, #1
 800fe3e:	d103      	bne.n	800fe48 <_lseek_r+0x20>
 800fe40:	682b      	ldr	r3, [r5, #0]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d000      	beq.n	800fe48 <_lseek_r+0x20>
 800fe46:	6023      	str	r3, [r4, #0]
 800fe48:	bd70      	pop	{r4, r5, r6, pc}
 800fe4a:	46c0      	nop			; (mov r8, r8)
 800fe4c:	20003f5c 	.word	0x20003f5c

0800fe50 <_read_r>:
 800fe50:	b570      	push	{r4, r5, r6, lr}
 800fe52:	0004      	movs	r4, r0
 800fe54:	0008      	movs	r0, r1
 800fe56:	0011      	movs	r1, r2
 800fe58:	001a      	movs	r2, r3
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	4d05      	ldr	r5, [pc, #20]	; (800fe74 <_read_r+0x24>)
 800fe5e:	602b      	str	r3, [r5, #0]
 800fe60:	f7f5 faf0 	bl	8005444 <_read>
 800fe64:	1c43      	adds	r3, r0, #1
 800fe66:	d103      	bne.n	800fe70 <_read_r+0x20>
 800fe68:	682b      	ldr	r3, [r5, #0]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d000      	beq.n	800fe70 <_read_r+0x20>
 800fe6e:	6023      	str	r3, [r4, #0]
 800fe70:	bd70      	pop	{r4, r5, r6, pc}
 800fe72:	46c0      	nop			; (mov r8, r8)
 800fe74:	20003f5c 	.word	0x20003f5c

0800fe78 <_write_r>:
 800fe78:	b570      	push	{r4, r5, r6, lr}
 800fe7a:	0004      	movs	r4, r0
 800fe7c:	0008      	movs	r0, r1
 800fe7e:	0011      	movs	r1, r2
 800fe80:	001a      	movs	r2, r3
 800fe82:	2300      	movs	r3, #0
 800fe84:	4d05      	ldr	r5, [pc, #20]	; (800fe9c <_write_r+0x24>)
 800fe86:	602b      	str	r3, [r5, #0]
 800fe88:	f7f5 faf9 	bl	800547e <_write>
 800fe8c:	1c43      	adds	r3, r0, #1
 800fe8e:	d103      	bne.n	800fe98 <_write_r+0x20>
 800fe90:	682b      	ldr	r3, [r5, #0]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d000      	beq.n	800fe98 <_write_r+0x20>
 800fe96:	6023      	str	r3, [r4, #0]
 800fe98:	bd70      	pop	{r4, r5, r6, pc}
 800fe9a:	46c0      	nop			; (mov r8, r8)
 800fe9c:	20003f5c 	.word	0x20003f5c

0800fea0 <__errno>:
 800fea0:	4b01      	ldr	r3, [pc, #4]	; (800fea8 <__errno+0x8>)
 800fea2:	6818      	ldr	r0, [r3, #0]
 800fea4:	4770      	bx	lr
 800fea6:	46c0      	nop			; (mov r8, r8)
 800fea8:	2000021c 	.word	0x2000021c

0800feac <__libc_init_array>:
 800feac:	b570      	push	{r4, r5, r6, lr}
 800feae:	2600      	movs	r6, #0
 800feb0:	4c0c      	ldr	r4, [pc, #48]	; (800fee4 <__libc_init_array+0x38>)
 800feb2:	4d0d      	ldr	r5, [pc, #52]	; (800fee8 <__libc_init_array+0x3c>)
 800feb4:	1b64      	subs	r4, r4, r5
 800feb6:	10a4      	asrs	r4, r4, #2
 800feb8:	42a6      	cmp	r6, r4
 800feba:	d109      	bne.n	800fed0 <__libc_init_array+0x24>
 800febc:	2600      	movs	r6, #0
 800febe:	f003 f9dd 	bl	801327c <_init>
 800fec2:	4c0a      	ldr	r4, [pc, #40]	; (800feec <__libc_init_array+0x40>)
 800fec4:	4d0a      	ldr	r5, [pc, #40]	; (800fef0 <__libc_init_array+0x44>)
 800fec6:	1b64      	subs	r4, r4, r5
 800fec8:	10a4      	asrs	r4, r4, #2
 800feca:	42a6      	cmp	r6, r4
 800fecc:	d105      	bne.n	800feda <__libc_init_array+0x2e>
 800fece:	bd70      	pop	{r4, r5, r6, pc}
 800fed0:	00b3      	lsls	r3, r6, #2
 800fed2:	58eb      	ldr	r3, [r5, r3]
 800fed4:	4798      	blx	r3
 800fed6:	3601      	adds	r6, #1
 800fed8:	e7ee      	b.n	800feb8 <__libc_init_array+0xc>
 800feda:	00b3      	lsls	r3, r6, #2
 800fedc:	58eb      	ldr	r3, [r5, r3]
 800fede:	4798      	blx	r3
 800fee0:	3601      	adds	r6, #1
 800fee2:	e7f2      	b.n	800feca <__libc_init_array+0x1e>
 800fee4:	08014020 	.word	0x08014020
 800fee8:	08014020 	.word	0x08014020
 800feec:	08014024 	.word	0x08014024
 800fef0:	08014020 	.word	0x08014020

0800fef4 <__retarget_lock_init_recursive>:
 800fef4:	4770      	bx	lr

0800fef6 <__retarget_lock_acquire_recursive>:
 800fef6:	4770      	bx	lr

0800fef8 <__retarget_lock_release_recursive>:
 800fef8:	4770      	bx	lr

0800fefa <strcpy>:
 800fefa:	0003      	movs	r3, r0
 800fefc:	780a      	ldrb	r2, [r1, #0]
 800fefe:	3101      	adds	r1, #1
 800ff00:	701a      	strb	r2, [r3, #0]
 800ff02:	3301      	adds	r3, #1
 800ff04:	2a00      	cmp	r2, #0
 800ff06:	d1f9      	bne.n	800fefc <strcpy+0x2>
 800ff08:	4770      	bx	lr

0800ff0a <memchr>:
 800ff0a:	b2c9      	uxtb	r1, r1
 800ff0c:	1882      	adds	r2, r0, r2
 800ff0e:	4290      	cmp	r0, r2
 800ff10:	d101      	bne.n	800ff16 <memchr+0xc>
 800ff12:	2000      	movs	r0, #0
 800ff14:	4770      	bx	lr
 800ff16:	7803      	ldrb	r3, [r0, #0]
 800ff18:	428b      	cmp	r3, r1
 800ff1a:	d0fb      	beq.n	800ff14 <memchr+0xa>
 800ff1c:	3001      	adds	r0, #1
 800ff1e:	e7f6      	b.n	800ff0e <memchr+0x4>

0800ff20 <memcpy>:
 800ff20:	2300      	movs	r3, #0
 800ff22:	b510      	push	{r4, lr}
 800ff24:	429a      	cmp	r2, r3
 800ff26:	d100      	bne.n	800ff2a <memcpy+0xa>
 800ff28:	bd10      	pop	{r4, pc}
 800ff2a:	5ccc      	ldrb	r4, [r1, r3]
 800ff2c:	54c4      	strb	r4, [r0, r3]
 800ff2e:	3301      	adds	r3, #1
 800ff30:	e7f8      	b.n	800ff24 <memcpy+0x4>
	...

0800ff34 <nan>:
 800ff34:	2000      	movs	r0, #0
 800ff36:	4901      	ldr	r1, [pc, #4]	; (800ff3c <nan+0x8>)
 800ff38:	4770      	bx	lr
 800ff3a:	46c0      	nop			; (mov r8, r8)
 800ff3c:	7ff80000 	.word	0x7ff80000

0800ff40 <nanf>:
 800ff40:	4800      	ldr	r0, [pc, #0]	; (800ff44 <nanf+0x4>)
 800ff42:	4770      	bx	lr
 800ff44:	7fc00000 	.word	0x7fc00000

0800ff48 <__assert_func>:
 800ff48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ff4a:	0014      	movs	r4, r2
 800ff4c:	001a      	movs	r2, r3
 800ff4e:	4b09      	ldr	r3, [pc, #36]	; (800ff74 <__assert_func+0x2c>)
 800ff50:	0005      	movs	r5, r0
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	000e      	movs	r6, r1
 800ff56:	68d8      	ldr	r0, [r3, #12]
 800ff58:	4b07      	ldr	r3, [pc, #28]	; (800ff78 <__assert_func+0x30>)
 800ff5a:	2c00      	cmp	r4, #0
 800ff5c:	d101      	bne.n	800ff62 <__assert_func+0x1a>
 800ff5e:	4b07      	ldr	r3, [pc, #28]	; (800ff7c <__assert_func+0x34>)
 800ff60:	001c      	movs	r4, r3
 800ff62:	4907      	ldr	r1, [pc, #28]	; (800ff80 <__assert_func+0x38>)
 800ff64:	9301      	str	r3, [sp, #4]
 800ff66:	9402      	str	r4, [sp, #8]
 800ff68:	002b      	movs	r3, r5
 800ff6a:	9600      	str	r6, [sp, #0]
 800ff6c:	f002 fd26 	bl	80129bc <fiprintf>
 800ff70:	f002 fdd4 	bl	8012b1c <abort>
 800ff74:	2000021c 	.word	0x2000021c
 800ff78:	08013d81 	.word	0x08013d81
 800ff7c:	08013dbc 	.word	0x08013dbc
 800ff80:	08013d8e 	.word	0x08013d8e

0800ff84 <quorem>:
 800ff84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff86:	6902      	ldr	r2, [r0, #16]
 800ff88:	690b      	ldr	r3, [r1, #16]
 800ff8a:	b089      	sub	sp, #36	; 0x24
 800ff8c:	0007      	movs	r7, r0
 800ff8e:	9104      	str	r1, [sp, #16]
 800ff90:	2000      	movs	r0, #0
 800ff92:	429a      	cmp	r2, r3
 800ff94:	db69      	blt.n	801006a <quorem+0xe6>
 800ff96:	3b01      	subs	r3, #1
 800ff98:	009c      	lsls	r4, r3, #2
 800ff9a:	9301      	str	r3, [sp, #4]
 800ff9c:	000b      	movs	r3, r1
 800ff9e:	3314      	adds	r3, #20
 800ffa0:	9306      	str	r3, [sp, #24]
 800ffa2:	191b      	adds	r3, r3, r4
 800ffa4:	9305      	str	r3, [sp, #20]
 800ffa6:	003b      	movs	r3, r7
 800ffa8:	3314      	adds	r3, #20
 800ffaa:	9303      	str	r3, [sp, #12]
 800ffac:	191c      	adds	r4, r3, r4
 800ffae:	9b05      	ldr	r3, [sp, #20]
 800ffb0:	6826      	ldr	r6, [r4, #0]
 800ffb2:	681d      	ldr	r5, [r3, #0]
 800ffb4:	0030      	movs	r0, r6
 800ffb6:	3501      	adds	r5, #1
 800ffb8:	0029      	movs	r1, r5
 800ffba:	f7f0 f8cb 	bl	8000154 <__udivsi3>
 800ffbe:	9002      	str	r0, [sp, #8]
 800ffc0:	42ae      	cmp	r6, r5
 800ffc2:	d329      	bcc.n	8010018 <quorem+0x94>
 800ffc4:	9b06      	ldr	r3, [sp, #24]
 800ffc6:	2600      	movs	r6, #0
 800ffc8:	469c      	mov	ip, r3
 800ffca:	9d03      	ldr	r5, [sp, #12]
 800ffcc:	9606      	str	r6, [sp, #24]
 800ffce:	4662      	mov	r2, ip
 800ffd0:	ca08      	ldmia	r2!, {r3}
 800ffd2:	6828      	ldr	r0, [r5, #0]
 800ffd4:	4694      	mov	ip, r2
 800ffd6:	9a02      	ldr	r2, [sp, #8]
 800ffd8:	b299      	uxth	r1, r3
 800ffda:	4351      	muls	r1, r2
 800ffdc:	0c1b      	lsrs	r3, r3, #16
 800ffde:	4353      	muls	r3, r2
 800ffe0:	1989      	adds	r1, r1, r6
 800ffe2:	0c0a      	lsrs	r2, r1, #16
 800ffe4:	189b      	adds	r3, r3, r2
 800ffe6:	9307      	str	r3, [sp, #28]
 800ffe8:	0c1e      	lsrs	r6, r3, #16
 800ffea:	9b06      	ldr	r3, [sp, #24]
 800ffec:	b282      	uxth	r2, r0
 800ffee:	18d2      	adds	r2, r2, r3
 800fff0:	466b      	mov	r3, sp
 800fff2:	b289      	uxth	r1, r1
 800fff4:	8b9b      	ldrh	r3, [r3, #28]
 800fff6:	1a52      	subs	r2, r2, r1
 800fff8:	0c01      	lsrs	r1, r0, #16
 800fffa:	1ac9      	subs	r1, r1, r3
 800fffc:	1413      	asrs	r3, r2, #16
 800fffe:	18cb      	adds	r3, r1, r3
 8010000:	1419      	asrs	r1, r3, #16
 8010002:	b292      	uxth	r2, r2
 8010004:	041b      	lsls	r3, r3, #16
 8010006:	4313      	orrs	r3, r2
 8010008:	c508      	stmia	r5!, {r3}
 801000a:	9b05      	ldr	r3, [sp, #20]
 801000c:	9106      	str	r1, [sp, #24]
 801000e:	4563      	cmp	r3, ip
 8010010:	d2dd      	bcs.n	800ffce <quorem+0x4a>
 8010012:	6823      	ldr	r3, [r4, #0]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d030      	beq.n	801007a <quorem+0xf6>
 8010018:	0038      	movs	r0, r7
 801001a:	9904      	ldr	r1, [sp, #16]
 801001c:	f001 fd98 	bl	8011b50 <__mcmp>
 8010020:	2800      	cmp	r0, #0
 8010022:	db21      	blt.n	8010068 <quorem+0xe4>
 8010024:	0038      	movs	r0, r7
 8010026:	2600      	movs	r6, #0
 8010028:	9b02      	ldr	r3, [sp, #8]
 801002a:	9c04      	ldr	r4, [sp, #16]
 801002c:	3301      	adds	r3, #1
 801002e:	9302      	str	r3, [sp, #8]
 8010030:	3014      	adds	r0, #20
 8010032:	3414      	adds	r4, #20
 8010034:	6803      	ldr	r3, [r0, #0]
 8010036:	cc02      	ldmia	r4!, {r1}
 8010038:	b29d      	uxth	r5, r3
 801003a:	19ad      	adds	r5, r5, r6
 801003c:	b28a      	uxth	r2, r1
 801003e:	1aaa      	subs	r2, r5, r2
 8010040:	0c09      	lsrs	r1, r1, #16
 8010042:	0c1b      	lsrs	r3, r3, #16
 8010044:	1a5b      	subs	r3, r3, r1
 8010046:	1411      	asrs	r1, r2, #16
 8010048:	185b      	adds	r3, r3, r1
 801004a:	141e      	asrs	r6, r3, #16
 801004c:	b292      	uxth	r2, r2
 801004e:	041b      	lsls	r3, r3, #16
 8010050:	4313      	orrs	r3, r2
 8010052:	c008      	stmia	r0!, {r3}
 8010054:	9b05      	ldr	r3, [sp, #20]
 8010056:	42a3      	cmp	r3, r4
 8010058:	d2ec      	bcs.n	8010034 <quorem+0xb0>
 801005a:	9b01      	ldr	r3, [sp, #4]
 801005c:	9a03      	ldr	r2, [sp, #12]
 801005e:	009b      	lsls	r3, r3, #2
 8010060:	18d3      	adds	r3, r2, r3
 8010062:	681a      	ldr	r2, [r3, #0]
 8010064:	2a00      	cmp	r2, #0
 8010066:	d015      	beq.n	8010094 <quorem+0x110>
 8010068:	9802      	ldr	r0, [sp, #8]
 801006a:	b009      	add	sp, #36	; 0x24
 801006c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801006e:	6823      	ldr	r3, [r4, #0]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d106      	bne.n	8010082 <quorem+0xfe>
 8010074:	9b01      	ldr	r3, [sp, #4]
 8010076:	3b01      	subs	r3, #1
 8010078:	9301      	str	r3, [sp, #4]
 801007a:	9b03      	ldr	r3, [sp, #12]
 801007c:	3c04      	subs	r4, #4
 801007e:	42a3      	cmp	r3, r4
 8010080:	d3f5      	bcc.n	801006e <quorem+0xea>
 8010082:	9b01      	ldr	r3, [sp, #4]
 8010084:	613b      	str	r3, [r7, #16]
 8010086:	e7c7      	b.n	8010018 <quorem+0x94>
 8010088:	681a      	ldr	r2, [r3, #0]
 801008a:	2a00      	cmp	r2, #0
 801008c:	d106      	bne.n	801009c <quorem+0x118>
 801008e:	9a01      	ldr	r2, [sp, #4]
 8010090:	3a01      	subs	r2, #1
 8010092:	9201      	str	r2, [sp, #4]
 8010094:	9a03      	ldr	r2, [sp, #12]
 8010096:	3b04      	subs	r3, #4
 8010098:	429a      	cmp	r2, r3
 801009a:	d3f5      	bcc.n	8010088 <quorem+0x104>
 801009c:	9b01      	ldr	r3, [sp, #4]
 801009e:	613b      	str	r3, [r7, #16]
 80100a0:	e7e2      	b.n	8010068 <quorem+0xe4>
	...

080100a4 <_dtoa_r>:
 80100a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100a6:	0014      	movs	r4, r2
 80100a8:	001d      	movs	r5, r3
 80100aa:	69c6      	ldr	r6, [r0, #28]
 80100ac:	b09d      	sub	sp, #116	; 0x74
 80100ae:	9408      	str	r4, [sp, #32]
 80100b0:	9509      	str	r5, [sp, #36]	; 0x24
 80100b2:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80100b4:	9004      	str	r0, [sp, #16]
 80100b6:	2e00      	cmp	r6, #0
 80100b8:	d10f      	bne.n	80100da <_dtoa_r+0x36>
 80100ba:	2010      	movs	r0, #16
 80100bc:	f001 f9a6 	bl	801140c <malloc>
 80100c0:	9b04      	ldr	r3, [sp, #16]
 80100c2:	1e02      	subs	r2, r0, #0
 80100c4:	61d8      	str	r0, [r3, #28]
 80100c6:	d104      	bne.n	80100d2 <_dtoa_r+0x2e>
 80100c8:	21ef      	movs	r1, #239	; 0xef
 80100ca:	4bc6      	ldr	r3, [pc, #792]	; (80103e4 <_dtoa_r+0x340>)
 80100cc:	48c6      	ldr	r0, [pc, #792]	; (80103e8 <_dtoa_r+0x344>)
 80100ce:	f7ff ff3b 	bl	800ff48 <__assert_func>
 80100d2:	6046      	str	r6, [r0, #4]
 80100d4:	6086      	str	r6, [r0, #8]
 80100d6:	6006      	str	r6, [r0, #0]
 80100d8:	60c6      	str	r6, [r0, #12]
 80100da:	9b04      	ldr	r3, [sp, #16]
 80100dc:	69db      	ldr	r3, [r3, #28]
 80100de:	6819      	ldr	r1, [r3, #0]
 80100e0:	2900      	cmp	r1, #0
 80100e2:	d00b      	beq.n	80100fc <_dtoa_r+0x58>
 80100e4:	685a      	ldr	r2, [r3, #4]
 80100e6:	2301      	movs	r3, #1
 80100e8:	4093      	lsls	r3, r2
 80100ea:	604a      	str	r2, [r1, #4]
 80100ec:	608b      	str	r3, [r1, #8]
 80100ee:	9804      	ldr	r0, [sp, #16]
 80100f0:	f001 faa0 	bl	8011634 <_Bfree>
 80100f4:	2200      	movs	r2, #0
 80100f6:	9b04      	ldr	r3, [sp, #16]
 80100f8:	69db      	ldr	r3, [r3, #28]
 80100fa:	601a      	str	r2, [r3, #0]
 80100fc:	2d00      	cmp	r5, #0
 80100fe:	da1e      	bge.n	801013e <_dtoa_r+0x9a>
 8010100:	2301      	movs	r3, #1
 8010102:	603b      	str	r3, [r7, #0]
 8010104:	006b      	lsls	r3, r5, #1
 8010106:	085b      	lsrs	r3, r3, #1
 8010108:	9309      	str	r3, [sp, #36]	; 0x24
 801010a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801010c:	4bb7      	ldr	r3, [pc, #732]	; (80103ec <_dtoa_r+0x348>)
 801010e:	4ab7      	ldr	r2, [pc, #732]	; (80103ec <_dtoa_r+0x348>)
 8010110:	403b      	ands	r3, r7
 8010112:	4293      	cmp	r3, r2
 8010114:	d116      	bne.n	8010144 <_dtoa_r+0xa0>
 8010116:	4bb6      	ldr	r3, [pc, #728]	; (80103f0 <_dtoa_r+0x34c>)
 8010118:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801011a:	6013      	str	r3, [r2, #0]
 801011c:	033b      	lsls	r3, r7, #12
 801011e:	0b1b      	lsrs	r3, r3, #12
 8010120:	4323      	orrs	r3, r4
 8010122:	d101      	bne.n	8010128 <_dtoa_r+0x84>
 8010124:	f000 fdb5 	bl	8010c92 <_dtoa_r+0xbee>
 8010128:	4bb2      	ldr	r3, [pc, #712]	; (80103f4 <_dtoa_r+0x350>)
 801012a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801012c:	9306      	str	r3, [sp, #24]
 801012e:	2a00      	cmp	r2, #0
 8010130:	d002      	beq.n	8010138 <_dtoa_r+0x94>
 8010132:	4bb1      	ldr	r3, [pc, #708]	; (80103f8 <_dtoa_r+0x354>)
 8010134:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010136:	6013      	str	r3, [r2, #0]
 8010138:	9806      	ldr	r0, [sp, #24]
 801013a:	b01d      	add	sp, #116	; 0x74
 801013c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801013e:	2300      	movs	r3, #0
 8010140:	603b      	str	r3, [r7, #0]
 8010142:	e7e2      	b.n	801010a <_dtoa_r+0x66>
 8010144:	9a08      	ldr	r2, [sp, #32]
 8010146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010148:	9210      	str	r2, [sp, #64]	; 0x40
 801014a:	9311      	str	r3, [sp, #68]	; 0x44
 801014c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801014e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010150:	2200      	movs	r2, #0
 8010152:	2300      	movs	r3, #0
 8010154:	f7f0 f984 	bl	8000460 <__aeabi_dcmpeq>
 8010158:	1e06      	subs	r6, r0, #0
 801015a:	d009      	beq.n	8010170 <_dtoa_r+0xcc>
 801015c:	2301      	movs	r3, #1
 801015e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010160:	6013      	str	r3, [r2, #0]
 8010162:	4ba6      	ldr	r3, [pc, #664]	; (80103fc <_dtoa_r+0x358>)
 8010164:	9306      	str	r3, [sp, #24]
 8010166:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010168:	2b00      	cmp	r3, #0
 801016a:	d0e5      	beq.n	8010138 <_dtoa_r+0x94>
 801016c:	4ba4      	ldr	r3, [pc, #656]	; (8010400 <_dtoa_r+0x35c>)
 801016e:	e7e1      	b.n	8010134 <_dtoa_r+0x90>
 8010170:	ab1a      	add	r3, sp, #104	; 0x68
 8010172:	9301      	str	r3, [sp, #4]
 8010174:	ab1b      	add	r3, sp, #108	; 0x6c
 8010176:	9300      	str	r3, [sp, #0]
 8010178:	9804      	ldr	r0, [sp, #16]
 801017a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801017c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801017e:	f001 fe03 	bl	8011d88 <__d2b>
 8010182:	007a      	lsls	r2, r7, #1
 8010184:	9005      	str	r0, [sp, #20]
 8010186:	0d52      	lsrs	r2, r2, #21
 8010188:	d100      	bne.n	801018c <_dtoa_r+0xe8>
 801018a:	e07b      	b.n	8010284 <_dtoa_r+0x1e0>
 801018c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801018e:	9617      	str	r6, [sp, #92]	; 0x5c
 8010190:	0319      	lsls	r1, r3, #12
 8010192:	4b9c      	ldr	r3, [pc, #624]	; (8010404 <_dtoa_r+0x360>)
 8010194:	0b09      	lsrs	r1, r1, #12
 8010196:	430b      	orrs	r3, r1
 8010198:	499b      	ldr	r1, [pc, #620]	; (8010408 <_dtoa_r+0x364>)
 801019a:	1857      	adds	r7, r2, r1
 801019c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801019e:	9911      	ldr	r1, [sp, #68]	; 0x44
 80101a0:	0019      	movs	r1, r3
 80101a2:	2200      	movs	r2, #0
 80101a4:	4b99      	ldr	r3, [pc, #612]	; (801040c <_dtoa_r+0x368>)
 80101a6:	f7f2 f91b 	bl	80023e0 <__aeabi_dsub>
 80101aa:	4a99      	ldr	r2, [pc, #612]	; (8010410 <_dtoa_r+0x36c>)
 80101ac:	4b99      	ldr	r3, [pc, #612]	; (8010414 <_dtoa_r+0x370>)
 80101ae:	f7f1 fe55 	bl	8001e5c <__aeabi_dmul>
 80101b2:	4a99      	ldr	r2, [pc, #612]	; (8010418 <_dtoa_r+0x374>)
 80101b4:	4b99      	ldr	r3, [pc, #612]	; (801041c <_dtoa_r+0x378>)
 80101b6:	f7f0 fef7 	bl	8000fa8 <__aeabi_dadd>
 80101ba:	0004      	movs	r4, r0
 80101bc:	0038      	movs	r0, r7
 80101be:	000d      	movs	r5, r1
 80101c0:	f7f2 fce4 	bl	8002b8c <__aeabi_i2d>
 80101c4:	4a96      	ldr	r2, [pc, #600]	; (8010420 <_dtoa_r+0x37c>)
 80101c6:	4b97      	ldr	r3, [pc, #604]	; (8010424 <_dtoa_r+0x380>)
 80101c8:	f7f1 fe48 	bl	8001e5c <__aeabi_dmul>
 80101cc:	0002      	movs	r2, r0
 80101ce:	000b      	movs	r3, r1
 80101d0:	0020      	movs	r0, r4
 80101d2:	0029      	movs	r1, r5
 80101d4:	f7f0 fee8 	bl	8000fa8 <__aeabi_dadd>
 80101d8:	0004      	movs	r4, r0
 80101da:	000d      	movs	r5, r1
 80101dc:	f7f2 fca0 	bl	8002b20 <__aeabi_d2iz>
 80101e0:	2200      	movs	r2, #0
 80101e2:	9003      	str	r0, [sp, #12]
 80101e4:	2300      	movs	r3, #0
 80101e6:	0020      	movs	r0, r4
 80101e8:	0029      	movs	r1, r5
 80101ea:	f7f0 f93f 	bl	800046c <__aeabi_dcmplt>
 80101ee:	2800      	cmp	r0, #0
 80101f0:	d00b      	beq.n	801020a <_dtoa_r+0x166>
 80101f2:	9803      	ldr	r0, [sp, #12]
 80101f4:	f7f2 fcca 	bl	8002b8c <__aeabi_i2d>
 80101f8:	002b      	movs	r3, r5
 80101fa:	0022      	movs	r2, r4
 80101fc:	f7f0 f930 	bl	8000460 <__aeabi_dcmpeq>
 8010200:	4243      	negs	r3, r0
 8010202:	4158      	adcs	r0, r3
 8010204:	9b03      	ldr	r3, [sp, #12]
 8010206:	1a1b      	subs	r3, r3, r0
 8010208:	9303      	str	r3, [sp, #12]
 801020a:	2301      	movs	r3, #1
 801020c:	9316      	str	r3, [sp, #88]	; 0x58
 801020e:	9b03      	ldr	r3, [sp, #12]
 8010210:	2b16      	cmp	r3, #22
 8010212:	d810      	bhi.n	8010236 <_dtoa_r+0x192>
 8010214:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010216:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010218:	9a03      	ldr	r2, [sp, #12]
 801021a:	4b83      	ldr	r3, [pc, #524]	; (8010428 <_dtoa_r+0x384>)
 801021c:	00d2      	lsls	r2, r2, #3
 801021e:	189b      	adds	r3, r3, r2
 8010220:	681a      	ldr	r2, [r3, #0]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	f7f0 f922 	bl	800046c <__aeabi_dcmplt>
 8010228:	2800      	cmp	r0, #0
 801022a:	d047      	beq.n	80102bc <_dtoa_r+0x218>
 801022c:	9b03      	ldr	r3, [sp, #12]
 801022e:	3b01      	subs	r3, #1
 8010230:	9303      	str	r3, [sp, #12]
 8010232:	2300      	movs	r3, #0
 8010234:	9316      	str	r3, [sp, #88]	; 0x58
 8010236:	2200      	movs	r2, #0
 8010238:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801023a:	920a      	str	r2, [sp, #40]	; 0x28
 801023c:	1bdb      	subs	r3, r3, r7
 801023e:	1e5a      	subs	r2, r3, #1
 8010240:	d53e      	bpl.n	80102c0 <_dtoa_r+0x21c>
 8010242:	2201      	movs	r2, #1
 8010244:	1ad3      	subs	r3, r2, r3
 8010246:	930a      	str	r3, [sp, #40]	; 0x28
 8010248:	2300      	movs	r3, #0
 801024a:	930c      	str	r3, [sp, #48]	; 0x30
 801024c:	9b03      	ldr	r3, [sp, #12]
 801024e:	2b00      	cmp	r3, #0
 8010250:	db38      	blt.n	80102c4 <_dtoa_r+0x220>
 8010252:	9a03      	ldr	r2, [sp, #12]
 8010254:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010256:	4694      	mov	ip, r2
 8010258:	4463      	add	r3, ip
 801025a:	930c      	str	r3, [sp, #48]	; 0x30
 801025c:	2300      	movs	r3, #0
 801025e:	9213      	str	r2, [sp, #76]	; 0x4c
 8010260:	930d      	str	r3, [sp, #52]	; 0x34
 8010262:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010264:	2401      	movs	r4, #1
 8010266:	2b09      	cmp	r3, #9
 8010268:	d867      	bhi.n	801033a <_dtoa_r+0x296>
 801026a:	2b05      	cmp	r3, #5
 801026c:	dd02      	ble.n	8010274 <_dtoa_r+0x1d0>
 801026e:	2400      	movs	r4, #0
 8010270:	3b04      	subs	r3, #4
 8010272:	9322      	str	r3, [sp, #136]	; 0x88
 8010274:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010276:	1e98      	subs	r0, r3, #2
 8010278:	2803      	cmp	r0, #3
 801027a:	d867      	bhi.n	801034c <_dtoa_r+0x2a8>
 801027c:	f7ef ff56 	bl	800012c <__gnu_thumb1_case_uqi>
 8010280:	5b383a2b 	.word	0x5b383a2b
 8010284:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010286:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8010288:	18f6      	adds	r6, r6, r3
 801028a:	4b68      	ldr	r3, [pc, #416]	; (801042c <_dtoa_r+0x388>)
 801028c:	18f2      	adds	r2, r6, r3
 801028e:	2a20      	cmp	r2, #32
 8010290:	dd0f      	ble.n	80102b2 <_dtoa_r+0x20e>
 8010292:	2340      	movs	r3, #64	; 0x40
 8010294:	1a9b      	subs	r3, r3, r2
 8010296:	409f      	lsls	r7, r3
 8010298:	4b65      	ldr	r3, [pc, #404]	; (8010430 <_dtoa_r+0x38c>)
 801029a:	0038      	movs	r0, r7
 801029c:	18f3      	adds	r3, r6, r3
 801029e:	40dc      	lsrs	r4, r3
 80102a0:	4320      	orrs	r0, r4
 80102a2:	f7f2 fca3 	bl	8002bec <__aeabi_ui2d>
 80102a6:	2201      	movs	r2, #1
 80102a8:	4b62      	ldr	r3, [pc, #392]	; (8010434 <_dtoa_r+0x390>)
 80102aa:	1e77      	subs	r7, r6, #1
 80102ac:	18cb      	adds	r3, r1, r3
 80102ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80102b0:	e776      	b.n	80101a0 <_dtoa_r+0xfc>
 80102b2:	2320      	movs	r3, #32
 80102b4:	0020      	movs	r0, r4
 80102b6:	1a9b      	subs	r3, r3, r2
 80102b8:	4098      	lsls	r0, r3
 80102ba:	e7f2      	b.n	80102a2 <_dtoa_r+0x1fe>
 80102bc:	9016      	str	r0, [sp, #88]	; 0x58
 80102be:	e7ba      	b.n	8010236 <_dtoa_r+0x192>
 80102c0:	920c      	str	r2, [sp, #48]	; 0x30
 80102c2:	e7c3      	b.n	801024c <_dtoa_r+0x1a8>
 80102c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102c6:	9a03      	ldr	r2, [sp, #12]
 80102c8:	1a9b      	subs	r3, r3, r2
 80102ca:	930a      	str	r3, [sp, #40]	; 0x28
 80102cc:	4253      	negs	r3, r2
 80102ce:	930d      	str	r3, [sp, #52]	; 0x34
 80102d0:	2300      	movs	r3, #0
 80102d2:	9313      	str	r3, [sp, #76]	; 0x4c
 80102d4:	e7c5      	b.n	8010262 <_dtoa_r+0x1be>
 80102d6:	2300      	movs	r3, #0
 80102d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80102da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80102dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80102de:	9307      	str	r3, [sp, #28]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	dc13      	bgt.n	801030c <_dtoa_r+0x268>
 80102e4:	2301      	movs	r3, #1
 80102e6:	001a      	movs	r2, r3
 80102e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80102ea:	9307      	str	r3, [sp, #28]
 80102ec:	9223      	str	r2, [sp, #140]	; 0x8c
 80102ee:	e00d      	b.n	801030c <_dtoa_r+0x268>
 80102f0:	2301      	movs	r3, #1
 80102f2:	e7f1      	b.n	80102d8 <_dtoa_r+0x234>
 80102f4:	2300      	movs	r3, #0
 80102f6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80102f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80102fa:	4694      	mov	ip, r2
 80102fc:	9b03      	ldr	r3, [sp, #12]
 80102fe:	4463      	add	r3, ip
 8010300:	930b      	str	r3, [sp, #44]	; 0x2c
 8010302:	3301      	adds	r3, #1
 8010304:	9307      	str	r3, [sp, #28]
 8010306:	2b00      	cmp	r3, #0
 8010308:	dc00      	bgt.n	801030c <_dtoa_r+0x268>
 801030a:	2301      	movs	r3, #1
 801030c:	9a04      	ldr	r2, [sp, #16]
 801030e:	2100      	movs	r1, #0
 8010310:	69d0      	ldr	r0, [r2, #28]
 8010312:	2204      	movs	r2, #4
 8010314:	0015      	movs	r5, r2
 8010316:	3514      	adds	r5, #20
 8010318:	429d      	cmp	r5, r3
 801031a:	d91b      	bls.n	8010354 <_dtoa_r+0x2b0>
 801031c:	6041      	str	r1, [r0, #4]
 801031e:	9804      	ldr	r0, [sp, #16]
 8010320:	f001 f944 	bl	80115ac <_Balloc>
 8010324:	9006      	str	r0, [sp, #24]
 8010326:	2800      	cmp	r0, #0
 8010328:	d117      	bne.n	801035a <_dtoa_r+0x2b6>
 801032a:	21b0      	movs	r1, #176	; 0xb0
 801032c:	4b42      	ldr	r3, [pc, #264]	; (8010438 <_dtoa_r+0x394>)
 801032e:	482e      	ldr	r0, [pc, #184]	; (80103e8 <_dtoa_r+0x344>)
 8010330:	9a06      	ldr	r2, [sp, #24]
 8010332:	31ff      	adds	r1, #255	; 0xff
 8010334:	e6cb      	b.n	80100ce <_dtoa_r+0x2a>
 8010336:	2301      	movs	r3, #1
 8010338:	e7dd      	b.n	80102f6 <_dtoa_r+0x252>
 801033a:	2300      	movs	r3, #0
 801033c:	940f      	str	r4, [sp, #60]	; 0x3c
 801033e:	9322      	str	r3, [sp, #136]	; 0x88
 8010340:	3b01      	subs	r3, #1
 8010342:	930b      	str	r3, [sp, #44]	; 0x2c
 8010344:	9307      	str	r3, [sp, #28]
 8010346:	2200      	movs	r2, #0
 8010348:	3313      	adds	r3, #19
 801034a:	e7cf      	b.n	80102ec <_dtoa_r+0x248>
 801034c:	2301      	movs	r3, #1
 801034e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010350:	3b02      	subs	r3, #2
 8010352:	e7f6      	b.n	8010342 <_dtoa_r+0x29e>
 8010354:	3101      	adds	r1, #1
 8010356:	0052      	lsls	r2, r2, #1
 8010358:	e7dc      	b.n	8010314 <_dtoa_r+0x270>
 801035a:	9b04      	ldr	r3, [sp, #16]
 801035c:	9a06      	ldr	r2, [sp, #24]
 801035e:	69db      	ldr	r3, [r3, #28]
 8010360:	601a      	str	r2, [r3, #0]
 8010362:	9b07      	ldr	r3, [sp, #28]
 8010364:	2b0e      	cmp	r3, #14
 8010366:	d900      	bls.n	801036a <_dtoa_r+0x2c6>
 8010368:	e0e5      	b.n	8010536 <_dtoa_r+0x492>
 801036a:	2c00      	cmp	r4, #0
 801036c:	d100      	bne.n	8010370 <_dtoa_r+0x2cc>
 801036e:	e0e2      	b.n	8010536 <_dtoa_r+0x492>
 8010370:	9b03      	ldr	r3, [sp, #12]
 8010372:	2b00      	cmp	r3, #0
 8010374:	dd64      	ble.n	8010440 <_dtoa_r+0x39c>
 8010376:	210f      	movs	r1, #15
 8010378:	9a03      	ldr	r2, [sp, #12]
 801037a:	4b2b      	ldr	r3, [pc, #172]	; (8010428 <_dtoa_r+0x384>)
 801037c:	400a      	ands	r2, r1
 801037e:	00d2      	lsls	r2, r2, #3
 8010380:	189b      	adds	r3, r3, r2
 8010382:	681e      	ldr	r6, [r3, #0]
 8010384:	685f      	ldr	r7, [r3, #4]
 8010386:	9b03      	ldr	r3, [sp, #12]
 8010388:	2402      	movs	r4, #2
 801038a:	111d      	asrs	r5, r3, #4
 801038c:	05db      	lsls	r3, r3, #23
 801038e:	d50a      	bpl.n	80103a6 <_dtoa_r+0x302>
 8010390:	4b2a      	ldr	r3, [pc, #168]	; (801043c <_dtoa_r+0x398>)
 8010392:	400d      	ands	r5, r1
 8010394:	6a1a      	ldr	r2, [r3, #32]
 8010396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010398:	9810      	ldr	r0, [sp, #64]	; 0x40
 801039a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801039c:	f7f1 f964 	bl	8001668 <__aeabi_ddiv>
 80103a0:	9008      	str	r0, [sp, #32]
 80103a2:	9109      	str	r1, [sp, #36]	; 0x24
 80103a4:	3401      	adds	r4, #1
 80103a6:	4b25      	ldr	r3, [pc, #148]	; (801043c <_dtoa_r+0x398>)
 80103a8:	930e      	str	r3, [sp, #56]	; 0x38
 80103aa:	2d00      	cmp	r5, #0
 80103ac:	d108      	bne.n	80103c0 <_dtoa_r+0x31c>
 80103ae:	9808      	ldr	r0, [sp, #32]
 80103b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80103b2:	0032      	movs	r2, r6
 80103b4:	003b      	movs	r3, r7
 80103b6:	f7f1 f957 	bl	8001668 <__aeabi_ddiv>
 80103ba:	9008      	str	r0, [sp, #32]
 80103bc:	9109      	str	r1, [sp, #36]	; 0x24
 80103be:	e05a      	b.n	8010476 <_dtoa_r+0x3d2>
 80103c0:	2301      	movs	r3, #1
 80103c2:	421d      	tst	r5, r3
 80103c4:	d009      	beq.n	80103da <_dtoa_r+0x336>
 80103c6:	18e4      	adds	r4, r4, r3
 80103c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103ca:	0030      	movs	r0, r6
 80103cc:	681a      	ldr	r2, [r3, #0]
 80103ce:	685b      	ldr	r3, [r3, #4]
 80103d0:	0039      	movs	r1, r7
 80103d2:	f7f1 fd43 	bl	8001e5c <__aeabi_dmul>
 80103d6:	0006      	movs	r6, r0
 80103d8:	000f      	movs	r7, r1
 80103da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103dc:	106d      	asrs	r5, r5, #1
 80103de:	3308      	adds	r3, #8
 80103e0:	e7e2      	b.n	80103a8 <_dtoa_r+0x304>
 80103e2:	46c0      	nop			; (mov r8, r8)
 80103e4:	08013d08 	.word	0x08013d08
 80103e8:	08013dca 	.word	0x08013dca
 80103ec:	7ff00000 	.word	0x7ff00000
 80103f0:	0000270f 	.word	0x0000270f
 80103f4:	08013dc6 	.word	0x08013dc6
 80103f8:	08013dc9 	.word	0x08013dc9
 80103fc:	08014013 	.word	0x08014013
 8010400:	08014014 	.word	0x08014014
 8010404:	3ff00000 	.word	0x3ff00000
 8010408:	fffffc01 	.word	0xfffffc01
 801040c:	3ff80000 	.word	0x3ff80000
 8010410:	636f4361 	.word	0x636f4361
 8010414:	3fd287a7 	.word	0x3fd287a7
 8010418:	8b60c8b3 	.word	0x8b60c8b3
 801041c:	3fc68a28 	.word	0x3fc68a28
 8010420:	509f79fb 	.word	0x509f79fb
 8010424:	3fd34413 	.word	0x3fd34413
 8010428:	08013f18 	.word	0x08013f18
 801042c:	00000432 	.word	0x00000432
 8010430:	00000412 	.word	0x00000412
 8010434:	fe100000 	.word	0xfe100000
 8010438:	08013e22 	.word	0x08013e22
 801043c:	08013ef0 	.word	0x08013ef0
 8010440:	9b03      	ldr	r3, [sp, #12]
 8010442:	2402      	movs	r4, #2
 8010444:	2b00      	cmp	r3, #0
 8010446:	d016      	beq.n	8010476 <_dtoa_r+0x3d2>
 8010448:	9810      	ldr	r0, [sp, #64]	; 0x40
 801044a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801044c:	220f      	movs	r2, #15
 801044e:	425d      	negs	r5, r3
 8010450:	402a      	ands	r2, r5
 8010452:	4bdd      	ldr	r3, [pc, #884]	; (80107c8 <_dtoa_r+0x724>)
 8010454:	00d2      	lsls	r2, r2, #3
 8010456:	189b      	adds	r3, r3, r2
 8010458:	681a      	ldr	r2, [r3, #0]
 801045a:	685b      	ldr	r3, [r3, #4]
 801045c:	f7f1 fcfe 	bl	8001e5c <__aeabi_dmul>
 8010460:	2701      	movs	r7, #1
 8010462:	2300      	movs	r3, #0
 8010464:	9008      	str	r0, [sp, #32]
 8010466:	9109      	str	r1, [sp, #36]	; 0x24
 8010468:	4ed8      	ldr	r6, [pc, #864]	; (80107cc <_dtoa_r+0x728>)
 801046a:	112d      	asrs	r5, r5, #4
 801046c:	2d00      	cmp	r5, #0
 801046e:	d000      	beq.n	8010472 <_dtoa_r+0x3ce>
 8010470:	e091      	b.n	8010596 <_dtoa_r+0x4f2>
 8010472:	2b00      	cmp	r3, #0
 8010474:	d1a1      	bne.n	80103ba <_dtoa_r+0x316>
 8010476:	9e08      	ldr	r6, [sp, #32]
 8010478:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801047a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801047c:	2b00      	cmp	r3, #0
 801047e:	d100      	bne.n	8010482 <_dtoa_r+0x3de>
 8010480:	e094      	b.n	80105ac <_dtoa_r+0x508>
 8010482:	2200      	movs	r2, #0
 8010484:	0030      	movs	r0, r6
 8010486:	0039      	movs	r1, r7
 8010488:	4bd1      	ldr	r3, [pc, #836]	; (80107d0 <_dtoa_r+0x72c>)
 801048a:	f7ef ffef 	bl	800046c <__aeabi_dcmplt>
 801048e:	2800      	cmp	r0, #0
 8010490:	d100      	bne.n	8010494 <_dtoa_r+0x3f0>
 8010492:	e08b      	b.n	80105ac <_dtoa_r+0x508>
 8010494:	9b07      	ldr	r3, [sp, #28]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d100      	bne.n	801049c <_dtoa_r+0x3f8>
 801049a:	e087      	b.n	80105ac <_dtoa_r+0x508>
 801049c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801049e:	2b00      	cmp	r3, #0
 80104a0:	dd45      	ble.n	801052e <_dtoa_r+0x48a>
 80104a2:	9b03      	ldr	r3, [sp, #12]
 80104a4:	2200      	movs	r2, #0
 80104a6:	3b01      	subs	r3, #1
 80104a8:	930e      	str	r3, [sp, #56]	; 0x38
 80104aa:	0030      	movs	r0, r6
 80104ac:	4bc9      	ldr	r3, [pc, #804]	; (80107d4 <_dtoa_r+0x730>)
 80104ae:	0039      	movs	r1, r7
 80104b0:	f7f1 fcd4 	bl	8001e5c <__aeabi_dmul>
 80104b4:	9008      	str	r0, [sp, #32]
 80104b6:	9109      	str	r1, [sp, #36]	; 0x24
 80104b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104ba:	3401      	adds	r4, #1
 80104bc:	0020      	movs	r0, r4
 80104be:	9e08      	ldr	r6, [sp, #32]
 80104c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80104c2:	9312      	str	r3, [sp, #72]	; 0x48
 80104c4:	f7f2 fb62 	bl	8002b8c <__aeabi_i2d>
 80104c8:	0032      	movs	r2, r6
 80104ca:	003b      	movs	r3, r7
 80104cc:	f7f1 fcc6 	bl	8001e5c <__aeabi_dmul>
 80104d0:	2200      	movs	r2, #0
 80104d2:	4bc1      	ldr	r3, [pc, #772]	; (80107d8 <_dtoa_r+0x734>)
 80104d4:	f7f0 fd68 	bl	8000fa8 <__aeabi_dadd>
 80104d8:	4ac0      	ldr	r2, [pc, #768]	; (80107dc <_dtoa_r+0x738>)
 80104da:	9014      	str	r0, [sp, #80]	; 0x50
 80104dc:	9115      	str	r1, [sp, #84]	; 0x54
 80104de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80104e0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80104e2:	4694      	mov	ip, r2
 80104e4:	9308      	str	r3, [sp, #32]
 80104e6:	9409      	str	r4, [sp, #36]	; 0x24
 80104e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104ea:	4463      	add	r3, ip
 80104ec:	9318      	str	r3, [sp, #96]	; 0x60
 80104ee:	9309      	str	r3, [sp, #36]	; 0x24
 80104f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d15e      	bne.n	80105b4 <_dtoa_r+0x510>
 80104f6:	2200      	movs	r2, #0
 80104f8:	4bb9      	ldr	r3, [pc, #740]	; (80107e0 <_dtoa_r+0x73c>)
 80104fa:	0030      	movs	r0, r6
 80104fc:	0039      	movs	r1, r7
 80104fe:	f7f1 ff6f 	bl	80023e0 <__aeabi_dsub>
 8010502:	9a08      	ldr	r2, [sp, #32]
 8010504:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010506:	0004      	movs	r4, r0
 8010508:	000d      	movs	r5, r1
 801050a:	f7ef ffc3 	bl	8000494 <__aeabi_dcmpgt>
 801050e:	2800      	cmp	r0, #0
 8010510:	d000      	beq.n	8010514 <_dtoa_r+0x470>
 8010512:	e2b3      	b.n	8010a7c <_dtoa_r+0x9d8>
 8010514:	48b3      	ldr	r0, [pc, #716]	; (80107e4 <_dtoa_r+0x740>)
 8010516:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010518:	4684      	mov	ip, r0
 801051a:	4461      	add	r1, ip
 801051c:	000b      	movs	r3, r1
 801051e:	0020      	movs	r0, r4
 8010520:	0029      	movs	r1, r5
 8010522:	9a08      	ldr	r2, [sp, #32]
 8010524:	f7ef ffa2 	bl	800046c <__aeabi_dcmplt>
 8010528:	2800      	cmp	r0, #0
 801052a:	d000      	beq.n	801052e <_dtoa_r+0x48a>
 801052c:	e2a3      	b.n	8010a76 <_dtoa_r+0x9d2>
 801052e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010530:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010532:	9308      	str	r3, [sp, #32]
 8010534:	9409      	str	r4, [sp, #36]	; 0x24
 8010536:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010538:	2b00      	cmp	r3, #0
 801053a:	da00      	bge.n	801053e <_dtoa_r+0x49a>
 801053c:	e179      	b.n	8010832 <_dtoa_r+0x78e>
 801053e:	9a03      	ldr	r2, [sp, #12]
 8010540:	2a0e      	cmp	r2, #14
 8010542:	dd00      	ble.n	8010546 <_dtoa_r+0x4a2>
 8010544:	e175      	b.n	8010832 <_dtoa_r+0x78e>
 8010546:	4ba0      	ldr	r3, [pc, #640]	; (80107c8 <_dtoa_r+0x724>)
 8010548:	00d2      	lsls	r2, r2, #3
 801054a:	189b      	adds	r3, r3, r2
 801054c:	681e      	ldr	r6, [r3, #0]
 801054e:	685f      	ldr	r7, [r3, #4]
 8010550:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010552:	2b00      	cmp	r3, #0
 8010554:	db00      	blt.n	8010558 <_dtoa_r+0x4b4>
 8010556:	e0e5      	b.n	8010724 <_dtoa_r+0x680>
 8010558:	9b07      	ldr	r3, [sp, #28]
 801055a:	2b00      	cmp	r3, #0
 801055c:	dd00      	ble.n	8010560 <_dtoa_r+0x4bc>
 801055e:	e0e1      	b.n	8010724 <_dtoa_r+0x680>
 8010560:	d000      	beq.n	8010564 <_dtoa_r+0x4c0>
 8010562:	e288      	b.n	8010a76 <_dtoa_r+0x9d2>
 8010564:	2200      	movs	r2, #0
 8010566:	0030      	movs	r0, r6
 8010568:	0039      	movs	r1, r7
 801056a:	4b9d      	ldr	r3, [pc, #628]	; (80107e0 <_dtoa_r+0x73c>)
 801056c:	f7f1 fc76 	bl	8001e5c <__aeabi_dmul>
 8010570:	9a08      	ldr	r2, [sp, #32]
 8010572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010574:	f7ef ff98 	bl	80004a8 <__aeabi_dcmpge>
 8010578:	9e07      	ldr	r6, [sp, #28]
 801057a:	0037      	movs	r7, r6
 801057c:	2800      	cmp	r0, #0
 801057e:	d000      	beq.n	8010582 <_dtoa_r+0x4de>
 8010580:	e25f      	b.n	8010a42 <_dtoa_r+0x99e>
 8010582:	9b06      	ldr	r3, [sp, #24]
 8010584:	9a06      	ldr	r2, [sp, #24]
 8010586:	3301      	adds	r3, #1
 8010588:	9308      	str	r3, [sp, #32]
 801058a:	2331      	movs	r3, #49	; 0x31
 801058c:	7013      	strb	r3, [r2, #0]
 801058e:	9b03      	ldr	r3, [sp, #12]
 8010590:	3301      	adds	r3, #1
 8010592:	9303      	str	r3, [sp, #12]
 8010594:	e25a      	b.n	8010a4c <_dtoa_r+0x9a8>
 8010596:	423d      	tst	r5, r7
 8010598:	d005      	beq.n	80105a6 <_dtoa_r+0x502>
 801059a:	6832      	ldr	r2, [r6, #0]
 801059c:	6873      	ldr	r3, [r6, #4]
 801059e:	f7f1 fc5d 	bl	8001e5c <__aeabi_dmul>
 80105a2:	003b      	movs	r3, r7
 80105a4:	3401      	adds	r4, #1
 80105a6:	106d      	asrs	r5, r5, #1
 80105a8:	3608      	adds	r6, #8
 80105aa:	e75f      	b.n	801046c <_dtoa_r+0x3c8>
 80105ac:	9b03      	ldr	r3, [sp, #12]
 80105ae:	930e      	str	r3, [sp, #56]	; 0x38
 80105b0:	9b07      	ldr	r3, [sp, #28]
 80105b2:	e783      	b.n	80104bc <_dtoa_r+0x418>
 80105b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80105b6:	4b84      	ldr	r3, [pc, #528]	; (80107c8 <_dtoa_r+0x724>)
 80105b8:	3a01      	subs	r2, #1
 80105ba:	00d2      	lsls	r2, r2, #3
 80105bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80105be:	189b      	adds	r3, r3, r2
 80105c0:	9c08      	ldr	r4, [sp, #32]
 80105c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80105c4:	681a      	ldr	r2, [r3, #0]
 80105c6:	685b      	ldr	r3, [r3, #4]
 80105c8:	2900      	cmp	r1, #0
 80105ca:	d051      	beq.n	8010670 <_dtoa_r+0x5cc>
 80105cc:	2000      	movs	r0, #0
 80105ce:	4986      	ldr	r1, [pc, #536]	; (80107e8 <_dtoa_r+0x744>)
 80105d0:	f7f1 f84a 	bl	8001668 <__aeabi_ddiv>
 80105d4:	0022      	movs	r2, r4
 80105d6:	002b      	movs	r3, r5
 80105d8:	f7f1 ff02 	bl	80023e0 <__aeabi_dsub>
 80105dc:	9a06      	ldr	r2, [sp, #24]
 80105de:	0004      	movs	r4, r0
 80105e0:	4694      	mov	ip, r2
 80105e2:	000d      	movs	r5, r1
 80105e4:	9b06      	ldr	r3, [sp, #24]
 80105e6:	9314      	str	r3, [sp, #80]	; 0x50
 80105e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80105ea:	4463      	add	r3, ip
 80105ec:	9318      	str	r3, [sp, #96]	; 0x60
 80105ee:	0039      	movs	r1, r7
 80105f0:	0030      	movs	r0, r6
 80105f2:	f7f2 fa95 	bl	8002b20 <__aeabi_d2iz>
 80105f6:	9012      	str	r0, [sp, #72]	; 0x48
 80105f8:	f7f2 fac8 	bl	8002b8c <__aeabi_i2d>
 80105fc:	0002      	movs	r2, r0
 80105fe:	000b      	movs	r3, r1
 8010600:	0030      	movs	r0, r6
 8010602:	0039      	movs	r1, r7
 8010604:	f7f1 feec 	bl	80023e0 <__aeabi_dsub>
 8010608:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801060a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801060c:	3301      	adds	r3, #1
 801060e:	9308      	str	r3, [sp, #32]
 8010610:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010612:	0006      	movs	r6, r0
 8010614:	3330      	adds	r3, #48	; 0x30
 8010616:	7013      	strb	r3, [r2, #0]
 8010618:	0022      	movs	r2, r4
 801061a:	002b      	movs	r3, r5
 801061c:	000f      	movs	r7, r1
 801061e:	f7ef ff25 	bl	800046c <__aeabi_dcmplt>
 8010622:	2800      	cmp	r0, #0
 8010624:	d174      	bne.n	8010710 <_dtoa_r+0x66c>
 8010626:	0032      	movs	r2, r6
 8010628:	003b      	movs	r3, r7
 801062a:	2000      	movs	r0, #0
 801062c:	4968      	ldr	r1, [pc, #416]	; (80107d0 <_dtoa_r+0x72c>)
 801062e:	f7f1 fed7 	bl	80023e0 <__aeabi_dsub>
 8010632:	0022      	movs	r2, r4
 8010634:	002b      	movs	r3, r5
 8010636:	f7ef ff19 	bl	800046c <__aeabi_dcmplt>
 801063a:	2800      	cmp	r0, #0
 801063c:	d000      	beq.n	8010640 <_dtoa_r+0x59c>
 801063e:	e0d7      	b.n	80107f0 <_dtoa_r+0x74c>
 8010640:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010642:	9a08      	ldr	r2, [sp, #32]
 8010644:	4293      	cmp	r3, r2
 8010646:	d100      	bne.n	801064a <_dtoa_r+0x5a6>
 8010648:	e771      	b.n	801052e <_dtoa_r+0x48a>
 801064a:	2200      	movs	r2, #0
 801064c:	0020      	movs	r0, r4
 801064e:	0029      	movs	r1, r5
 8010650:	4b60      	ldr	r3, [pc, #384]	; (80107d4 <_dtoa_r+0x730>)
 8010652:	f7f1 fc03 	bl	8001e5c <__aeabi_dmul>
 8010656:	4b5f      	ldr	r3, [pc, #380]	; (80107d4 <_dtoa_r+0x730>)
 8010658:	0004      	movs	r4, r0
 801065a:	000d      	movs	r5, r1
 801065c:	0030      	movs	r0, r6
 801065e:	0039      	movs	r1, r7
 8010660:	2200      	movs	r2, #0
 8010662:	f7f1 fbfb 	bl	8001e5c <__aeabi_dmul>
 8010666:	9b08      	ldr	r3, [sp, #32]
 8010668:	0006      	movs	r6, r0
 801066a:	000f      	movs	r7, r1
 801066c:	9314      	str	r3, [sp, #80]	; 0x50
 801066e:	e7be      	b.n	80105ee <_dtoa_r+0x54a>
 8010670:	0020      	movs	r0, r4
 8010672:	0029      	movs	r1, r5
 8010674:	f7f1 fbf2 	bl	8001e5c <__aeabi_dmul>
 8010678:	9a06      	ldr	r2, [sp, #24]
 801067a:	9b06      	ldr	r3, [sp, #24]
 801067c:	4694      	mov	ip, r2
 801067e:	9308      	str	r3, [sp, #32]
 8010680:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010682:	9014      	str	r0, [sp, #80]	; 0x50
 8010684:	9115      	str	r1, [sp, #84]	; 0x54
 8010686:	4463      	add	r3, ip
 8010688:	9319      	str	r3, [sp, #100]	; 0x64
 801068a:	0030      	movs	r0, r6
 801068c:	0039      	movs	r1, r7
 801068e:	f7f2 fa47 	bl	8002b20 <__aeabi_d2iz>
 8010692:	9018      	str	r0, [sp, #96]	; 0x60
 8010694:	f7f2 fa7a 	bl	8002b8c <__aeabi_i2d>
 8010698:	0002      	movs	r2, r0
 801069a:	000b      	movs	r3, r1
 801069c:	0030      	movs	r0, r6
 801069e:	0039      	movs	r1, r7
 80106a0:	f7f1 fe9e 	bl	80023e0 <__aeabi_dsub>
 80106a4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80106a6:	9b08      	ldr	r3, [sp, #32]
 80106a8:	3630      	adds	r6, #48	; 0x30
 80106aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80106ac:	701e      	strb	r6, [r3, #0]
 80106ae:	3301      	adds	r3, #1
 80106b0:	0004      	movs	r4, r0
 80106b2:	000d      	movs	r5, r1
 80106b4:	9308      	str	r3, [sp, #32]
 80106b6:	4293      	cmp	r3, r2
 80106b8:	d12d      	bne.n	8010716 <_dtoa_r+0x672>
 80106ba:	9814      	ldr	r0, [sp, #80]	; 0x50
 80106bc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80106be:	9a06      	ldr	r2, [sp, #24]
 80106c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80106c2:	4694      	mov	ip, r2
 80106c4:	4463      	add	r3, ip
 80106c6:	2200      	movs	r2, #0
 80106c8:	9308      	str	r3, [sp, #32]
 80106ca:	4b47      	ldr	r3, [pc, #284]	; (80107e8 <_dtoa_r+0x744>)
 80106cc:	f7f0 fc6c 	bl	8000fa8 <__aeabi_dadd>
 80106d0:	0002      	movs	r2, r0
 80106d2:	000b      	movs	r3, r1
 80106d4:	0020      	movs	r0, r4
 80106d6:	0029      	movs	r1, r5
 80106d8:	f7ef fedc 	bl	8000494 <__aeabi_dcmpgt>
 80106dc:	2800      	cmp	r0, #0
 80106de:	d000      	beq.n	80106e2 <_dtoa_r+0x63e>
 80106e0:	e086      	b.n	80107f0 <_dtoa_r+0x74c>
 80106e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80106e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80106e6:	2000      	movs	r0, #0
 80106e8:	493f      	ldr	r1, [pc, #252]	; (80107e8 <_dtoa_r+0x744>)
 80106ea:	f7f1 fe79 	bl	80023e0 <__aeabi_dsub>
 80106ee:	0002      	movs	r2, r0
 80106f0:	000b      	movs	r3, r1
 80106f2:	0020      	movs	r0, r4
 80106f4:	0029      	movs	r1, r5
 80106f6:	f7ef feb9 	bl	800046c <__aeabi_dcmplt>
 80106fa:	2800      	cmp	r0, #0
 80106fc:	d100      	bne.n	8010700 <_dtoa_r+0x65c>
 80106fe:	e716      	b.n	801052e <_dtoa_r+0x48a>
 8010700:	9b08      	ldr	r3, [sp, #32]
 8010702:	001a      	movs	r2, r3
 8010704:	3a01      	subs	r2, #1
 8010706:	9208      	str	r2, [sp, #32]
 8010708:	7812      	ldrb	r2, [r2, #0]
 801070a:	2a30      	cmp	r2, #48	; 0x30
 801070c:	d0f8      	beq.n	8010700 <_dtoa_r+0x65c>
 801070e:	9308      	str	r3, [sp, #32]
 8010710:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010712:	9303      	str	r3, [sp, #12]
 8010714:	e046      	b.n	80107a4 <_dtoa_r+0x700>
 8010716:	2200      	movs	r2, #0
 8010718:	4b2e      	ldr	r3, [pc, #184]	; (80107d4 <_dtoa_r+0x730>)
 801071a:	f7f1 fb9f 	bl	8001e5c <__aeabi_dmul>
 801071e:	0006      	movs	r6, r0
 8010720:	000f      	movs	r7, r1
 8010722:	e7b2      	b.n	801068a <_dtoa_r+0x5e6>
 8010724:	9b06      	ldr	r3, [sp, #24]
 8010726:	9a06      	ldr	r2, [sp, #24]
 8010728:	930a      	str	r3, [sp, #40]	; 0x28
 801072a:	9b07      	ldr	r3, [sp, #28]
 801072c:	9c08      	ldr	r4, [sp, #32]
 801072e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010730:	3b01      	subs	r3, #1
 8010732:	189b      	adds	r3, r3, r2
 8010734:	930b      	str	r3, [sp, #44]	; 0x2c
 8010736:	0032      	movs	r2, r6
 8010738:	003b      	movs	r3, r7
 801073a:	0020      	movs	r0, r4
 801073c:	0029      	movs	r1, r5
 801073e:	f7f0 ff93 	bl	8001668 <__aeabi_ddiv>
 8010742:	f7f2 f9ed 	bl	8002b20 <__aeabi_d2iz>
 8010746:	9007      	str	r0, [sp, #28]
 8010748:	f7f2 fa20 	bl	8002b8c <__aeabi_i2d>
 801074c:	0032      	movs	r2, r6
 801074e:	003b      	movs	r3, r7
 8010750:	f7f1 fb84 	bl	8001e5c <__aeabi_dmul>
 8010754:	0002      	movs	r2, r0
 8010756:	000b      	movs	r3, r1
 8010758:	0020      	movs	r0, r4
 801075a:	0029      	movs	r1, r5
 801075c:	f7f1 fe40 	bl	80023e0 <__aeabi_dsub>
 8010760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010762:	001a      	movs	r2, r3
 8010764:	3201      	adds	r2, #1
 8010766:	920a      	str	r2, [sp, #40]	; 0x28
 8010768:	9208      	str	r2, [sp, #32]
 801076a:	9a07      	ldr	r2, [sp, #28]
 801076c:	3230      	adds	r2, #48	; 0x30
 801076e:	701a      	strb	r2, [r3, #0]
 8010770:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010772:	429a      	cmp	r2, r3
 8010774:	d14f      	bne.n	8010816 <_dtoa_r+0x772>
 8010776:	0002      	movs	r2, r0
 8010778:	000b      	movs	r3, r1
 801077a:	f7f0 fc15 	bl	8000fa8 <__aeabi_dadd>
 801077e:	0032      	movs	r2, r6
 8010780:	003b      	movs	r3, r7
 8010782:	0004      	movs	r4, r0
 8010784:	000d      	movs	r5, r1
 8010786:	f7ef fe85 	bl	8000494 <__aeabi_dcmpgt>
 801078a:	2800      	cmp	r0, #0
 801078c:	d12e      	bne.n	80107ec <_dtoa_r+0x748>
 801078e:	0032      	movs	r2, r6
 8010790:	003b      	movs	r3, r7
 8010792:	0020      	movs	r0, r4
 8010794:	0029      	movs	r1, r5
 8010796:	f7ef fe63 	bl	8000460 <__aeabi_dcmpeq>
 801079a:	2800      	cmp	r0, #0
 801079c:	d002      	beq.n	80107a4 <_dtoa_r+0x700>
 801079e:	9b07      	ldr	r3, [sp, #28]
 80107a0:	07de      	lsls	r6, r3, #31
 80107a2:	d423      	bmi.n	80107ec <_dtoa_r+0x748>
 80107a4:	9905      	ldr	r1, [sp, #20]
 80107a6:	9804      	ldr	r0, [sp, #16]
 80107a8:	f000 ff44 	bl	8011634 <_Bfree>
 80107ac:	2300      	movs	r3, #0
 80107ae:	9a08      	ldr	r2, [sp, #32]
 80107b0:	7013      	strb	r3, [r2, #0]
 80107b2:	9b03      	ldr	r3, [sp, #12]
 80107b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80107b6:	3301      	adds	r3, #1
 80107b8:	6013      	str	r3, [r2, #0]
 80107ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d100      	bne.n	80107c2 <_dtoa_r+0x71e>
 80107c0:	e4ba      	b.n	8010138 <_dtoa_r+0x94>
 80107c2:	9a08      	ldr	r2, [sp, #32]
 80107c4:	601a      	str	r2, [r3, #0]
 80107c6:	e4b7      	b.n	8010138 <_dtoa_r+0x94>
 80107c8:	08013f18 	.word	0x08013f18
 80107cc:	08013ef0 	.word	0x08013ef0
 80107d0:	3ff00000 	.word	0x3ff00000
 80107d4:	40240000 	.word	0x40240000
 80107d8:	401c0000 	.word	0x401c0000
 80107dc:	fcc00000 	.word	0xfcc00000
 80107e0:	40140000 	.word	0x40140000
 80107e4:	7cc00000 	.word	0x7cc00000
 80107e8:	3fe00000 	.word	0x3fe00000
 80107ec:	9b03      	ldr	r3, [sp, #12]
 80107ee:	930e      	str	r3, [sp, #56]	; 0x38
 80107f0:	9b08      	ldr	r3, [sp, #32]
 80107f2:	9308      	str	r3, [sp, #32]
 80107f4:	3b01      	subs	r3, #1
 80107f6:	781a      	ldrb	r2, [r3, #0]
 80107f8:	2a39      	cmp	r2, #57	; 0x39
 80107fa:	d108      	bne.n	801080e <_dtoa_r+0x76a>
 80107fc:	9a06      	ldr	r2, [sp, #24]
 80107fe:	429a      	cmp	r2, r3
 8010800:	d1f7      	bne.n	80107f2 <_dtoa_r+0x74e>
 8010802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010804:	9906      	ldr	r1, [sp, #24]
 8010806:	3201      	adds	r2, #1
 8010808:	920e      	str	r2, [sp, #56]	; 0x38
 801080a:	2230      	movs	r2, #48	; 0x30
 801080c:	700a      	strb	r2, [r1, #0]
 801080e:	781a      	ldrb	r2, [r3, #0]
 8010810:	3201      	adds	r2, #1
 8010812:	701a      	strb	r2, [r3, #0]
 8010814:	e77c      	b.n	8010710 <_dtoa_r+0x66c>
 8010816:	2200      	movs	r2, #0
 8010818:	4ba9      	ldr	r3, [pc, #676]	; (8010ac0 <_dtoa_r+0xa1c>)
 801081a:	f7f1 fb1f 	bl	8001e5c <__aeabi_dmul>
 801081e:	2200      	movs	r2, #0
 8010820:	2300      	movs	r3, #0
 8010822:	0004      	movs	r4, r0
 8010824:	000d      	movs	r5, r1
 8010826:	f7ef fe1b 	bl	8000460 <__aeabi_dcmpeq>
 801082a:	2800      	cmp	r0, #0
 801082c:	d100      	bne.n	8010830 <_dtoa_r+0x78c>
 801082e:	e782      	b.n	8010736 <_dtoa_r+0x692>
 8010830:	e7b8      	b.n	80107a4 <_dtoa_r+0x700>
 8010832:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010834:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010836:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010838:	2f00      	cmp	r7, #0
 801083a:	d012      	beq.n	8010862 <_dtoa_r+0x7be>
 801083c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801083e:	2a01      	cmp	r2, #1
 8010840:	dc6e      	bgt.n	8010920 <_dtoa_r+0x87c>
 8010842:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010844:	2a00      	cmp	r2, #0
 8010846:	d065      	beq.n	8010914 <_dtoa_r+0x870>
 8010848:	4a9e      	ldr	r2, [pc, #632]	; (8010ac4 <_dtoa_r+0xa20>)
 801084a:	189b      	adds	r3, r3, r2
 801084c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801084e:	2101      	movs	r1, #1
 8010850:	18d2      	adds	r2, r2, r3
 8010852:	920a      	str	r2, [sp, #40]	; 0x28
 8010854:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010856:	9804      	ldr	r0, [sp, #16]
 8010858:	18d3      	adds	r3, r2, r3
 801085a:	930c      	str	r3, [sp, #48]	; 0x30
 801085c:	f000 ffe6 	bl	801182c <__i2b>
 8010860:	0007      	movs	r7, r0
 8010862:	2c00      	cmp	r4, #0
 8010864:	d00e      	beq.n	8010884 <_dtoa_r+0x7e0>
 8010866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010868:	2b00      	cmp	r3, #0
 801086a:	dd0b      	ble.n	8010884 <_dtoa_r+0x7e0>
 801086c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801086e:	0023      	movs	r3, r4
 8010870:	4294      	cmp	r4, r2
 8010872:	dd00      	ble.n	8010876 <_dtoa_r+0x7d2>
 8010874:	0013      	movs	r3, r2
 8010876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010878:	1ae4      	subs	r4, r4, r3
 801087a:	1ad2      	subs	r2, r2, r3
 801087c:	920a      	str	r2, [sp, #40]	; 0x28
 801087e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010880:	1ad3      	subs	r3, r2, r3
 8010882:	930c      	str	r3, [sp, #48]	; 0x30
 8010884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010886:	2b00      	cmp	r3, #0
 8010888:	d01e      	beq.n	80108c8 <_dtoa_r+0x824>
 801088a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801088c:	2b00      	cmp	r3, #0
 801088e:	d05c      	beq.n	801094a <_dtoa_r+0x8a6>
 8010890:	2d00      	cmp	r5, #0
 8010892:	dd10      	ble.n	80108b6 <_dtoa_r+0x812>
 8010894:	0039      	movs	r1, r7
 8010896:	002a      	movs	r2, r5
 8010898:	9804      	ldr	r0, [sp, #16]
 801089a:	f001 f88f 	bl	80119bc <__pow5mult>
 801089e:	9a05      	ldr	r2, [sp, #20]
 80108a0:	0001      	movs	r1, r0
 80108a2:	0007      	movs	r7, r0
 80108a4:	9804      	ldr	r0, [sp, #16]
 80108a6:	f000 ffd9 	bl	801185c <__multiply>
 80108aa:	0006      	movs	r6, r0
 80108ac:	9905      	ldr	r1, [sp, #20]
 80108ae:	9804      	ldr	r0, [sp, #16]
 80108b0:	f000 fec0 	bl	8011634 <_Bfree>
 80108b4:	9605      	str	r6, [sp, #20]
 80108b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108b8:	1b5a      	subs	r2, r3, r5
 80108ba:	42ab      	cmp	r3, r5
 80108bc:	d004      	beq.n	80108c8 <_dtoa_r+0x824>
 80108be:	9905      	ldr	r1, [sp, #20]
 80108c0:	9804      	ldr	r0, [sp, #16]
 80108c2:	f001 f87b 	bl	80119bc <__pow5mult>
 80108c6:	9005      	str	r0, [sp, #20]
 80108c8:	2101      	movs	r1, #1
 80108ca:	9804      	ldr	r0, [sp, #16]
 80108cc:	f000 ffae 	bl	801182c <__i2b>
 80108d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80108d2:	0006      	movs	r6, r0
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	dd3a      	ble.n	801094e <_dtoa_r+0x8aa>
 80108d8:	001a      	movs	r2, r3
 80108da:	0001      	movs	r1, r0
 80108dc:	9804      	ldr	r0, [sp, #16]
 80108de:	f001 f86d 	bl	80119bc <__pow5mult>
 80108e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80108e4:	0006      	movs	r6, r0
 80108e6:	2500      	movs	r5, #0
 80108e8:	2b01      	cmp	r3, #1
 80108ea:	dc38      	bgt.n	801095e <_dtoa_r+0x8ba>
 80108ec:	2500      	movs	r5, #0
 80108ee:	9b08      	ldr	r3, [sp, #32]
 80108f0:	42ab      	cmp	r3, r5
 80108f2:	d130      	bne.n	8010956 <_dtoa_r+0x8b2>
 80108f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108f6:	031b      	lsls	r3, r3, #12
 80108f8:	42ab      	cmp	r3, r5
 80108fa:	d12c      	bne.n	8010956 <_dtoa_r+0x8b2>
 80108fc:	4b72      	ldr	r3, [pc, #456]	; (8010ac8 <_dtoa_r+0xa24>)
 80108fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010900:	4213      	tst	r3, r2
 8010902:	d028      	beq.n	8010956 <_dtoa_r+0x8b2>
 8010904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010906:	3501      	adds	r5, #1
 8010908:	3301      	adds	r3, #1
 801090a:	930a      	str	r3, [sp, #40]	; 0x28
 801090c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801090e:	3301      	adds	r3, #1
 8010910:	930c      	str	r3, [sp, #48]	; 0x30
 8010912:	e020      	b.n	8010956 <_dtoa_r+0x8b2>
 8010914:	2336      	movs	r3, #54	; 0x36
 8010916:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010918:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801091a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801091c:	1a9b      	subs	r3, r3, r2
 801091e:	e795      	b.n	801084c <_dtoa_r+0x7a8>
 8010920:	9b07      	ldr	r3, [sp, #28]
 8010922:	1e5d      	subs	r5, r3, #1
 8010924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010926:	42ab      	cmp	r3, r5
 8010928:	db07      	blt.n	801093a <_dtoa_r+0x896>
 801092a:	1b5d      	subs	r5, r3, r5
 801092c:	9b07      	ldr	r3, [sp, #28]
 801092e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010930:	2b00      	cmp	r3, #0
 8010932:	da8b      	bge.n	801084c <_dtoa_r+0x7a8>
 8010934:	1ae4      	subs	r4, r4, r3
 8010936:	2300      	movs	r3, #0
 8010938:	e788      	b.n	801084c <_dtoa_r+0x7a8>
 801093a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801093c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801093e:	1aeb      	subs	r3, r5, r3
 8010940:	18d3      	adds	r3, r2, r3
 8010942:	950d      	str	r5, [sp, #52]	; 0x34
 8010944:	9313      	str	r3, [sp, #76]	; 0x4c
 8010946:	2500      	movs	r5, #0
 8010948:	e7f0      	b.n	801092c <_dtoa_r+0x888>
 801094a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801094c:	e7b7      	b.n	80108be <_dtoa_r+0x81a>
 801094e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010950:	2500      	movs	r5, #0
 8010952:	2b01      	cmp	r3, #1
 8010954:	ddca      	ble.n	80108ec <_dtoa_r+0x848>
 8010956:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010958:	2001      	movs	r0, #1
 801095a:	2b00      	cmp	r3, #0
 801095c:	d008      	beq.n	8010970 <_dtoa_r+0x8cc>
 801095e:	6933      	ldr	r3, [r6, #16]
 8010960:	3303      	adds	r3, #3
 8010962:	009b      	lsls	r3, r3, #2
 8010964:	18f3      	adds	r3, r6, r3
 8010966:	6858      	ldr	r0, [r3, #4]
 8010968:	f000 ff18 	bl	801179c <__hi0bits>
 801096c:	2320      	movs	r3, #32
 801096e:	1a18      	subs	r0, r3, r0
 8010970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010972:	1818      	adds	r0, r3, r0
 8010974:	0002      	movs	r2, r0
 8010976:	231f      	movs	r3, #31
 8010978:	401a      	ands	r2, r3
 801097a:	4218      	tst	r0, r3
 801097c:	d047      	beq.n	8010a0e <_dtoa_r+0x96a>
 801097e:	3301      	adds	r3, #1
 8010980:	1a9b      	subs	r3, r3, r2
 8010982:	2b04      	cmp	r3, #4
 8010984:	dd3f      	ble.n	8010a06 <_dtoa_r+0x962>
 8010986:	231c      	movs	r3, #28
 8010988:	1a9b      	subs	r3, r3, r2
 801098a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801098c:	18e4      	adds	r4, r4, r3
 801098e:	18d2      	adds	r2, r2, r3
 8010990:	920a      	str	r2, [sp, #40]	; 0x28
 8010992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010994:	18d3      	adds	r3, r2, r3
 8010996:	930c      	str	r3, [sp, #48]	; 0x30
 8010998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801099a:	2b00      	cmp	r3, #0
 801099c:	dd05      	ble.n	80109aa <_dtoa_r+0x906>
 801099e:	001a      	movs	r2, r3
 80109a0:	9905      	ldr	r1, [sp, #20]
 80109a2:	9804      	ldr	r0, [sp, #16]
 80109a4:	f001 f866 	bl	8011a74 <__lshift>
 80109a8:	9005      	str	r0, [sp, #20]
 80109aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	dd05      	ble.n	80109bc <_dtoa_r+0x918>
 80109b0:	0031      	movs	r1, r6
 80109b2:	001a      	movs	r2, r3
 80109b4:	9804      	ldr	r0, [sp, #16]
 80109b6:	f001 f85d 	bl	8011a74 <__lshift>
 80109ba:	0006      	movs	r6, r0
 80109bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d027      	beq.n	8010a12 <_dtoa_r+0x96e>
 80109c2:	0031      	movs	r1, r6
 80109c4:	9805      	ldr	r0, [sp, #20]
 80109c6:	f001 f8c3 	bl	8011b50 <__mcmp>
 80109ca:	2800      	cmp	r0, #0
 80109cc:	da21      	bge.n	8010a12 <_dtoa_r+0x96e>
 80109ce:	9b03      	ldr	r3, [sp, #12]
 80109d0:	220a      	movs	r2, #10
 80109d2:	3b01      	subs	r3, #1
 80109d4:	9303      	str	r3, [sp, #12]
 80109d6:	9905      	ldr	r1, [sp, #20]
 80109d8:	2300      	movs	r3, #0
 80109da:	9804      	ldr	r0, [sp, #16]
 80109dc:	f000 fe4e 	bl	801167c <__multadd>
 80109e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109e2:	9005      	str	r0, [sp, #20]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d100      	bne.n	80109ea <_dtoa_r+0x946>
 80109e8:	e15d      	b.n	8010ca6 <_dtoa_r+0xc02>
 80109ea:	2300      	movs	r3, #0
 80109ec:	0039      	movs	r1, r7
 80109ee:	220a      	movs	r2, #10
 80109f0:	9804      	ldr	r0, [sp, #16]
 80109f2:	f000 fe43 	bl	801167c <__multadd>
 80109f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109f8:	0007      	movs	r7, r0
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	dc49      	bgt.n	8010a92 <_dtoa_r+0x9ee>
 80109fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010a00:	2b02      	cmp	r3, #2
 8010a02:	dc0e      	bgt.n	8010a22 <_dtoa_r+0x97e>
 8010a04:	e045      	b.n	8010a92 <_dtoa_r+0x9ee>
 8010a06:	2b04      	cmp	r3, #4
 8010a08:	d0c6      	beq.n	8010998 <_dtoa_r+0x8f4>
 8010a0a:	331c      	adds	r3, #28
 8010a0c:	e7bd      	b.n	801098a <_dtoa_r+0x8e6>
 8010a0e:	0013      	movs	r3, r2
 8010a10:	e7fb      	b.n	8010a0a <_dtoa_r+0x966>
 8010a12:	9b07      	ldr	r3, [sp, #28]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	dc36      	bgt.n	8010a86 <_dtoa_r+0x9e2>
 8010a18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010a1a:	2b02      	cmp	r3, #2
 8010a1c:	dd33      	ble.n	8010a86 <_dtoa_r+0x9e2>
 8010a1e:	9b07      	ldr	r3, [sp, #28]
 8010a20:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d10c      	bne.n	8010a42 <_dtoa_r+0x99e>
 8010a28:	0031      	movs	r1, r6
 8010a2a:	2205      	movs	r2, #5
 8010a2c:	9804      	ldr	r0, [sp, #16]
 8010a2e:	f000 fe25 	bl	801167c <__multadd>
 8010a32:	0006      	movs	r6, r0
 8010a34:	0001      	movs	r1, r0
 8010a36:	9805      	ldr	r0, [sp, #20]
 8010a38:	f001 f88a 	bl	8011b50 <__mcmp>
 8010a3c:	2800      	cmp	r0, #0
 8010a3e:	dd00      	ble.n	8010a42 <_dtoa_r+0x99e>
 8010a40:	e59f      	b.n	8010582 <_dtoa_r+0x4de>
 8010a42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010a44:	43db      	mvns	r3, r3
 8010a46:	9303      	str	r3, [sp, #12]
 8010a48:	9b06      	ldr	r3, [sp, #24]
 8010a4a:	9308      	str	r3, [sp, #32]
 8010a4c:	2500      	movs	r5, #0
 8010a4e:	0031      	movs	r1, r6
 8010a50:	9804      	ldr	r0, [sp, #16]
 8010a52:	f000 fdef 	bl	8011634 <_Bfree>
 8010a56:	2f00      	cmp	r7, #0
 8010a58:	d100      	bne.n	8010a5c <_dtoa_r+0x9b8>
 8010a5a:	e6a3      	b.n	80107a4 <_dtoa_r+0x700>
 8010a5c:	2d00      	cmp	r5, #0
 8010a5e:	d005      	beq.n	8010a6c <_dtoa_r+0x9c8>
 8010a60:	42bd      	cmp	r5, r7
 8010a62:	d003      	beq.n	8010a6c <_dtoa_r+0x9c8>
 8010a64:	0029      	movs	r1, r5
 8010a66:	9804      	ldr	r0, [sp, #16]
 8010a68:	f000 fde4 	bl	8011634 <_Bfree>
 8010a6c:	0039      	movs	r1, r7
 8010a6e:	9804      	ldr	r0, [sp, #16]
 8010a70:	f000 fde0 	bl	8011634 <_Bfree>
 8010a74:	e696      	b.n	80107a4 <_dtoa_r+0x700>
 8010a76:	2600      	movs	r6, #0
 8010a78:	0037      	movs	r7, r6
 8010a7a:	e7e2      	b.n	8010a42 <_dtoa_r+0x99e>
 8010a7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a7e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010a80:	9303      	str	r3, [sp, #12]
 8010a82:	0037      	movs	r7, r6
 8010a84:	e57d      	b.n	8010582 <_dtoa_r+0x4de>
 8010a86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d100      	bne.n	8010a8e <_dtoa_r+0x9ea>
 8010a8c:	e0c3      	b.n	8010c16 <_dtoa_r+0xb72>
 8010a8e:	9b07      	ldr	r3, [sp, #28]
 8010a90:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a92:	2c00      	cmp	r4, #0
 8010a94:	dd05      	ble.n	8010aa2 <_dtoa_r+0x9fe>
 8010a96:	0039      	movs	r1, r7
 8010a98:	0022      	movs	r2, r4
 8010a9a:	9804      	ldr	r0, [sp, #16]
 8010a9c:	f000 ffea 	bl	8011a74 <__lshift>
 8010aa0:	0007      	movs	r7, r0
 8010aa2:	0038      	movs	r0, r7
 8010aa4:	2d00      	cmp	r5, #0
 8010aa6:	d024      	beq.n	8010af2 <_dtoa_r+0xa4e>
 8010aa8:	6879      	ldr	r1, [r7, #4]
 8010aaa:	9804      	ldr	r0, [sp, #16]
 8010aac:	f000 fd7e 	bl	80115ac <_Balloc>
 8010ab0:	1e04      	subs	r4, r0, #0
 8010ab2:	d111      	bne.n	8010ad8 <_dtoa_r+0xa34>
 8010ab4:	0022      	movs	r2, r4
 8010ab6:	4b05      	ldr	r3, [pc, #20]	; (8010acc <_dtoa_r+0xa28>)
 8010ab8:	4805      	ldr	r0, [pc, #20]	; (8010ad0 <_dtoa_r+0xa2c>)
 8010aba:	4906      	ldr	r1, [pc, #24]	; (8010ad4 <_dtoa_r+0xa30>)
 8010abc:	f7ff fb07 	bl	80100ce <_dtoa_r+0x2a>
 8010ac0:	40240000 	.word	0x40240000
 8010ac4:	00000433 	.word	0x00000433
 8010ac8:	7ff00000 	.word	0x7ff00000
 8010acc:	08013e22 	.word	0x08013e22
 8010ad0:	08013dca 	.word	0x08013dca
 8010ad4:	000002ef 	.word	0x000002ef
 8010ad8:	0039      	movs	r1, r7
 8010ada:	693a      	ldr	r2, [r7, #16]
 8010adc:	310c      	adds	r1, #12
 8010ade:	3202      	adds	r2, #2
 8010ae0:	0092      	lsls	r2, r2, #2
 8010ae2:	300c      	adds	r0, #12
 8010ae4:	f7ff fa1c 	bl	800ff20 <memcpy>
 8010ae8:	2201      	movs	r2, #1
 8010aea:	0021      	movs	r1, r4
 8010aec:	9804      	ldr	r0, [sp, #16]
 8010aee:	f000 ffc1 	bl	8011a74 <__lshift>
 8010af2:	9b06      	ldr	r3, [sp, #24]
 8010af4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010af6:	9307      	str	r3, [sp, #28]
 8010af8:	3b01      	subs	r3, #1
 8010afa:	189b      	adds	r3, r3, r2
 8010afc:	2201      	movs	r2, #1
 8010afe:	003d      	movs	r5, r7
 8010b00:	0007      	movs	r7, r0
 8010b02:	930e      	str	r3, [sp, #56]	; 0x38
 8010b04:	9b08      	ldr	r3, [sp, #32]
 8010b06:	4013      	ands	r3, r2
 8010b08:	930d      	str	r3, [sp, #52]	; 0x34
 8010b0a:	0031      	movs	r1, r6
 8010b0c:	9805      	ldr	r0, [sp, #20]
 8010b0e:	f7ff fa39 	bl	800ff84 <quorem>
 8010b12:	0029      	movs	r1, r5
 8010b14:	0004      	movs	r4, r0
 8010b16:	900b      	str	r0, [sp, #44]	; 0x2c
 8010b18:	9805      	ldr	r0, [sp, #20]
 8010b1a:	f001 f819 	bl	8011b50 <__mcmp>
 8010b1e:	003a      	movs	r2, r7
 8010b20:	900c      	str	r0, [sp, #48]	; 0x30
 8010b22:	0031      	movs	r1, r6
 8010b24:	9804      	ldr	r0, [sp, #16]
 8010b26:	f001 f82f 	bl	8011b88 <__mdiff>
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	68c3      	ldr	r3, [r0, #12]
 8010b2e:	3430      	adds	r4, #48	; 0x30
 8010b30:	9008      	str	r0, [sp, #32]
 8010b32:	920a      	str	r2, [sp, #40]	; 0x28
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d104      	bne.n	8010b42 <_dtoa_r+0xa9e>
 8010b38:	0001      	movs	r1, r0
 8010b3a:	9805      	ldr	r0, [sp, #20]
 8010b3c:	f001 f808 	bl	8011b50 <__mcmp>
 8010b40:	900a      	str	r0, [sp, #40]	; 0x28
 8010b42:	9908      	ldr	r1, [sp, #32]
 8010b44:	9804      	ldr	r0, [sp, #16]
 8010b46:	f000 fd75 	bl	8011634 <_Bfree>
 8010b4a:	9b07      	ldr	r3, [sp, #28]
 8010b4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b4e:	3301      	adds	r3, #1
 8010b50:	9308      	str	r3, [sp, #32]
 8010b52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010b54:	4313      	orrs	r3, r2
 8010b56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010b58:	4313      	orrs	r3, r2
 8010b5a:	d109      	bne.n	8010b70 <_dtoa_r+0xacc>
 8010b5c:	2c39      	cmp	r4, #57	; 0x39
 8010b5e:	d022      	beq.n	8010ba6 <_dtoa_r+0xb02>
 8010b60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	dd01      	ble.n	8010b6a <_dtoa_r+0xac6>
 8010b66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010b68:	3431      	adds	r4, #49	; 0x31
 8010b6a:	9b07      	ldr	r3, [sp, #28]
 8010b6c:	701c      	strb	r4, [r3, #0]
 8010b6e:	e76e      	b.n	8010a4e <_dtoa_r+0x9aa>
 8010b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	db04      	blt.n	8010b80 <_dtoa_r+0xadc>
 8010b76:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010b78:	4313      	orrs	r3, r2
 8010b7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010b7c:	4313      	orrs	r3, r2
 8010b7e:	d11e      	bne.n	8010bbe <_dtoa_r+0xb1a>
 8010b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	ddf1      	ble.n	8010b6a <_dtoa_r+0xac6>
 8010b86:	9905      	ldr	r1, [sp, #20]
 8010b88:	2201      	movs	r2, #1
 8010b8a:	9804      	ldr	r0, [sp, #16]
 8010b8c:	f000 ff72 	bl	8011a74 <__lshift>
 8010b90:	0031      	movs	r1, r6
 8010b92:	9005      	str	r0, [sp, #20]
 8010b94:	f000 ffdc 	bl	8011b50 <__mcmp>
 8010b98:	2800      	cmp	r0, #0
 8010b9a:	dc02      	bgt.n	8010ba2 <_dtoa_r+0xafe>
 8010b9c:	d1e5      	bne.n	8010b6a <_dtoa_r+0xac6>
 8010b9e:	07e3      	lsls	r3, r4, #31
 8010ba0:	d5e3      	bpl.n	8010b6a <_dtoa_r+0xac6>
 8010ba2:	2c39      	cmp	r4, #57	; 0x39
 8010ba4:	d1df      	bne.n	8010b66 <_dtoa_r+0xac2>
 8010ba6:	2339      	movs	r3, #57	; 0x39
 8010ba8:	9a07      	ldr	r2, [sp, #28]
 8010baa:	7013      	strb	r3, [r2, #0]
 8010bac:	9b08      	ldr	r3, [sp, #32]
 8010bae:	9308      	str	r3, [sp, #32]
 8010bb0:	3b01      	subs	r3, #1
 8010bb2:	781a      	ldrb	r2, [r3, #0]
 8010bb4:	2a39      	cmp	r2, #57	; 0x39
 8010bb6:	d063      	beq.n	8010c80 <_dtoa_r+0xbdc>
 8010bb8:	3201      	adds	r2, #1
 8010bba:	701a      	strb	r2, [r3, #0]
 8010bbc:	e747      	b.n	8010a4e <_dtoa_r+0x9aa>
 8010bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	dd03      	ble.n	8010bcc <_dtoa_r+0xb28>
 8010bc4:	2c39      	cmp	r4, #57	; 0x39
 8010bc6:	d0ee      	beq.n	8010ba6 <_dtoa_r+0xb02>
 8010bc8:	3401      	adds	r4, #1
 8010bca:	e7ce      	b.n	8010b6a <_dtoa_r+0xac6>
 8010bcc:	9b07      	ldr	r3, [sp, #28]
 8010bce:	9a07      	ldr	r2, [sp, #28]
 8010bd0:	701c      	strb	r4, [r3, #0]
 8010bd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	d03e      	beq.n	8010c56 <_dtoa_r+0xbb2>
 8010bd8:	2300      	movs	r3, #0
 8010bda:	220a      	movs	r2, #10
 8010bdc:	9905      	ldr	r1, [sp, #20]
 8010bde:	9804      	ldr	r0, [sp, #16]
 8010be0:	f000 fd4c 	bl	801167c <__multadd>
 8010be4:	2300      	movs	r3, #0
 8010be6:	9005      	str	r0, [sp, #20]
 8010be8:	220a      	movs	r2, #10
 8010bea:	0029      	movs	r1, r5
 8010bec:	9804      	ldr	r0, [sp, #16]
 8010bee:	42bd      	cmp	r5, r7
 8010bf0:	d106      	bne.n	8010c00 <_dtoa_r+0xb5c>
 8010bf2:	f000 fd43 	bl	801167c <__multadd>
 8010bf6:	0005      	movs	r5, r0
 8010bf8:	0007      	movs	r7, r0
 8010bfa:	9b08      	ldr	r3, [sp, #32]
 8010bfc:	9307      	str	r3, [sp, #28]
 8010bfe:	e784      	b.n	8010b0a <_dtoa_r+0xa66>
 8010c00:	f000 fd3c 	bl	801167c <__multadd>
 8010c04:	0039      	movs	r1, r7
 8010c06:	0005      	movs	r5, r0
 8010c08:	2300      	movs	r3, #0
 8010c0a:	220a      	movs	r2, #10
 8010c0c:	9804      	ldr	r0, [sp, #16]
 8010c0e:	f000 fd35 	bl	801167c <__multadd>
 8010c12:	0007      	movs	r7, r0
 8010c14:	e7f1      	b.n	8010bfa <_dtoa_r+0xb56>
 8010c16:	9b07      	ldr	r3, [sp, #28]
 8010c18:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c1a:	2500      	movs	r5, #0
 8010c1c:	0031      	movs	r1, r6
 8010c1e:	9805      	ldr	r0, [sp, #20]
 8010c20:	f7ff f9b0 	bl	800ff84 <quorem>
 8010c24:	9b06      	ldr	r3, [sp, #24]
 8010c26:	3030      	adds	r0, #48	; 0x30
 8010c28:	5558      	strb	r0, [r3, r5]
 8010c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c2c:	3501      	adds	r5, #1
 8010c2e:	0004      	movs	r4, r0
 8010c30:	42ab      	cmp	r3, r5
 8010c32:	dd07      	ble.n	8010c44 <_dtoa_r+0xba0>
 8010c34:	2300      	movs	r3, #0
 8010c36:	220a      	movs	r2, #10
 8010c38:	9905      	ldr	r1, [sp, #20]
 8010c3a:	9804      	ldr	r0, [sp, #16]
 8010c3c:	f000 fd1e 	bl	801167c <__multadd>
 8010c40:	9005      	str	r0, [sp, #20]
 8010c42:	e7eb      	b.n	8010c1c <_dtoa_r+0xb78>
 8010c44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c46:	2301      	movs	r3, #1
 8010c48:	2a00      	cmp	r2, #0
 8010c4a:	dd00      	ble.n	8010c4e <_dtoa_r+0xbaa>
 8010c4c:	0013      	movs	r3, r2
 8010c4e:	2500      	movs	r5, #0
 8010c50:	9a06      	ldr	r2, [sp, #24]
 8010c52:	18d3      	adds	r3, r2, r3
 8010c54:	9308      	str	r3, [sp, #32]
 8010c56:	9905      	ldr	r1, [sp, #20]
 8010c58:	2201      	movs	r2, #1
 8010c5a:	9804      	ldr	r0, [sp, #16]
 8010c5c:	f000 ff0a 	bl	8011a74 <__lshift>
 8010c60:	0031      	movs	r1, r6
 8010c62:	9005      	str	r0, [sp, #20]
 8010c64:	f000 ff74 	bl	8011b50 <__mcmp>
 8010c68:	2800      	cmp	r0, #0
 8010c6a:	dc9f      	bgt.n	8010bac <_dtoa_r+0xb08>
 8010c6c:	d101      	bne.n	8010c72 <_dtoa_r+0xbce>
 8010c6e:	07e4      	lsls	r4, r4, #31
 8010c70:	d49c      	bmi.n	8010bac <_dtoa_r+0xb08>
 8010c72:	9b08      	ldr	r3, [sp, #32]
 8010c74:	9308      	str	r3, [sp, #32]
 8010c76:	3b01      	subs	r3, #1
 8010c78:	781a      	ldrb	r2, [r3, #0]
 8010c7a:	2a30      	cmp	r2, #48	; 0x30
 8010c7c:	d0fa      	beq.n	8010c74 <_dtoa_r+0xbd0>
 8010c7e:	e6e6      	b.n	8010a4e <_dtoa_r+0x9aa>
 8010c80:	9a06      	ldr	r2, [sp, #24]
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d193      	bne.n	8010bae <_dtoa_r+0xb0a>
 8010c86:	9b03      	ldr	r3, [sp, #12]
 8010c88:	3301      	adds	r3, #1
 8010c8a:	9303      	str	r3, [sp, #12]
 8010c8c:	2331      	movs	r3, #49	; 0x31
 8010c8e:	7013      	strb	r3, [r2, #0]
 8010c90:	e6dd      	b.n	8010a4e <_dtoa_r+0x9aa>
 8010c92:	4b09      	ldr	r3, [pc, #36]	; (8010cb8 <_dtoa_r+0xc14>)
 8010c94:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010c96:	9306      	str	r3, [sp, #24]
 8010c98:	4b08      	ldr	r3, [pc, #32]	; (8010cbc <_dtoa_r+0xc18>)
 8010c9a:	2a00      	cmp	r2, #0
 8010c9c:	d001      	beq.n	8010ca2 <_dtoa_r+0xbfe>
 8010c9e:	f7ff fa49 	bl	8010134 <_dtoa_r+0x90>
 8010ca2:	f7ff fa49 	bl	8010138 <_dtoa_r+0x94>
 8010ca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	dcb6      	bgt.n	8010c1a <_dtoa_r+0xb76>
 8010cac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010cae:	2b02      	cmp	r3, #2
 8010cb0:	dd00      	ble.n	8010cb4 <_dtoa_r+0xc10>
 8010cb2:	e6b6      	b.n	8010a22 <_dtoa_r+0x97e>
 8010cb4:	e7b1      	b.n	8010c1a <_dtoa_r+0xb76>
 8010cb6:	46c0      	nop			; (mov r8, r8)
 8010cb8:	08013dbd 	.word	0x08013dbd
 8010cbc:	08013dc5 	.word	0x08013dc5

08010cc0 <_free_r>:
 8010cc0:	b570      	push	{r4, r5, r6, lr}
 8010cc2:	0005      	movs	r5, r0
 8010cc4:	2900      	cmp	r1, #0
 8010cc6:	d010      	beq.n	8010cea <_free_r+0x2a>
 8010cc8:	1f0c      	subs	r4, r1, #4
 8010cca:	6823      	ldr	r3, [r4, #0]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	da00      	bge.n	8010cd2 <_free_r+0x12>
 8010cd0:	18e4      	adds	r4, r4, r3
 8010cd2:	0028      	movs	r0, r5
 8010cd4:	f000 fc5a 	bl	801158c <__malloc_lock>
 8010cd8:	4a1d      	ldr	r2, [pc, #116]	; (8010d50 <_free_r+0x90>)
 8010cda:	6813      	ldr	r3, [r2, #0]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d105      	bne.n	8010cec <_free_r+0x2c>
 8010ce0:	6063      	str	r3, [r4, #4]
 8010ce2:	6014      	str	r4, [r2, #0]
 8010ce4:	0028      	movs	r0, r5
 8010ce6:	f000 fc59 	bl	801159c <__malloc_unlock>
 8010cea:	bd70      	pop	{r4, r5, r6, pc}
 8010cec:	42a3      	cmp	r3, r4
 8010cee:	d908      	bls.n	8010d02 <_free_r+0x42>
 8010cf0:	6820      	ldr	r0, [r4, #0]
 8010cf2:	1821      	adds	r1, r4, r0
 8010cf4:	428b      	cmp	r3, r1
 8010cf6:	d1f3      	bne.n	8010ce0 <_free_r+0x20>
 8010cf8:	6819      	ldr	r1, [r3, #0]
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	1809      	adds	r1, r1, r0
 8010cfe:	6021      	str	r1, [r4, #0]
 8010d00:	e7ee      	b.n	8010ce0 <_free_r+0x20>
 8010d02:	001a      	movs	r2, r3
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d001      	beq.n	8010d0e <_free_r+0x4e>
 8010d0a:	42a3      	cmp	r3, r4
 8010d0c:	d9f9      	bls.n	8010d02 <_free_r+0x42>
 8010d0e:	6811      	ldr	r1, [r2, #0]
 8010d10:	1850      	adds	r0, r2, r1
 8010d12:	42a0      	cmp	r0, r4
 8010d14:	d10b      	bne.n	8010d2e <_free_r+0x6e>
 8010d16:	6820      	ldr	r0, [r4, #0]
 8010d18:	1809      	adds	r1, r1, r0
 8010d1a:	1850      	adds	r0, r2, r1
 8010d1c:	6011      	str	r1, [r2, #0]
 8010d1e:	4283      	cmp	r3, r0
 8010d20:	d1e0      	bne.n	8010ce4 <_free_r+0x24>
 8010d22:	6818      	ldr	r0, [r3, #0]
 8010d24:	685b      	ldr	r3, [r3, #4]
 8010d26:	1841      	adds	r1, r0, r1
 8010d28:	6011      	str	r1, [r2, #0]
 8010d2a:	6053      	str	r3, [r2, #4]
 8010d2c:	e7da      	b.n	8010ce4 <_free_r+0x24>
 8010d2e:	42a0      	cmp	r0, r4
 8010d30:	d902      	bls.n	8010d38 <_free_r+0x78>
 8010d32:	230c      	movs	r3, #12
 8010d34:	602b      	str	r3, [r5, #0]
 8010d36:	e7d5      	b.n	8010ce4 <_free_r+0x24>
 8010d38:	6820      	ldr	r0, [r4, #0]
 8010d3a:	1821      	adds	r1, r4, r0
 8010d3c:	428b      	cmp	r3, r1
 8010d3e:	d103      	bne.n	8010d48 <_free_r+0x88>
 8010d40:	6819      	ldr	r1, [r3, #0]
 8010d42:	685b      	ldr	r3, [r3, #4]
 8010d44:	1809      	adds	r1, r1, r0
 8010d46:	6021      	str	r1, [r4, #0]
 8010d48:	6063      	str	r3, [r4, #4]
 8010d4a:	6054      	str	r4, [r2, #4]
 8010d4c:	e7ca      	b.n	8010ce4 <_free_r+0x24>
 8010d4e:	46c0      	nop			; (mov r8, r8)
 8010d50:	20003f64 	.word	0x20003f64

08010d54 <rshift>:
 8010d54:	0002      	movs	r2, r0
 8010d56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d58:	6904      	ldr	r4, [r0, #16]
 8010d5a:	114b      	asrs	r3, r1, #5
 8010d5c:	b085      	sub	sp, #20
 8010d5e:	3214      	adds	r2, #20
 8010d60:	9302      	str	r3, [sp, #8]
 8010d62:	114d      	asrs	r5, r1, #5
 8010d64:	0013      	movs	r3, r2
 8010d66:	42ac      	cmp	r4, r5
 8010d68:	dd32      	ble.n	8010dd0 <rshift+0x7c>
 8010d6a:	261f      	movs	r6, #31
 8010d6c:	000f      	movs	r7, r1
 8010d6e:	114b      	asrs	r3, r1, #5
 8010d70:	009b      	lsls	r3, r3, #2
 8010d72:	00a5      	lsls	r5, r4, #2
 8010d74:	18d3      	adds	r3, r2, r3
 8010d76:	4037      	ands	r7, r6
 8010d78:	1955      	adds	r5, r2, r5
 8010d7a:	9300      	str	r3, [sp, #0]
 8010d7c:	9701      	str	r7, [sp, #4]
 8010d7e:	4231      	tst	r1, r6
 8010d80:	d10d      	bne.n	8010d9e <rshift+0x4a>
 8010d82:	0016      	movs	r6, r2
 8010d84:	0019      	movs	r1, r3
 8010d86:	428d      	cmp	r5, r1
 8010d88:	d836      	bhi.n	8010df8 <rshift+0xa4>
 8010d8a:	9900      	ldr	r1, [sp, #0]
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	3903      	subs	r1, #3
 8010d90:	428d      	cmp	r5, r1
 8010d92:	d302      	bcc.n	8010d9a <rshift+0x46>
 8010d94:	9b02      	ldr	r3, [sp, #8]
 8010d96:	1ae4      	subs	r4, r4, r3
 8010d98:	00a3      	lsls	r3, r4, #2
 8010d9a:	18d3      	adds	r3, r2, r3
 8010d9c:	e018      	b.n	8010dd0 <rshift+0x7c>
 8010d9e:	2120      	movs	r1, #32
 8010da0:	9e01      	ldr	r6, [sp, #4]
 8010da2:	9f01      	ldr	r7, [sp, #4]
 8010da4:	1b89      	subs	r1, r1, r6
 8010da6:	9e00      	ldr	r6, [sp, #0]
 8010da8:	9103      	str	r1, [sp, #12]
 8010daa:	ce02      	ldmia	r6!, {r1}
 8010dac:	4694      	mov	ip, r2
 8010dae:	40f9      	lsrs	r1, r7
 8010db0:	42b5      	cmp	r5, r6
 8010db2:	d816      	bhi.n	8010de2 <rshift+0x8e>
 8010db4:	9e00      	ldr	r6, [sp, #0]
 8010db6:	2300      	movs	r3, #0
 8010db8:	3601      	adds	r6, #1
 8010dba:	42b5      	cmp	r5, r6
 8010dbc:	d303      	bcc.n	8010dc6 <rshift+0x72>
 8010dbe:	9b02      	ldr	r3, [sp, #8]
 8010dc0:	1ae3      	subs	r3, r4, r3
 8010dc2:	009b      	lsls	r3, r3, #2
 8010dc4:	3b04      	subs	r3, #4
 8010dc6:	18d3      	adds	r3, r2, r3
 8010dc8:	6019      	str	r1, [r3, #0]
 8010dca:	2900      	cmp	r1, #0
 8010dcc:	d000      	beq.n	8010dd0 <rshift+0x7c>
 8010dce:	3304      	adds	r3, #4
 8010dd0:	1a99      	subs	r1, r3, r2
 8010dd2:	1089      	asrs	r1, r1, #2
 8010dd4:	6101      	str	r1, [r0, #16]
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	d101      	bne.n	8010dde <rshift+0x8a>
 8010dda:	2300      	movs	r3, #0
 8010ddc:	6143      	str	r3, [r0, #20]
 8010dde:	b005      	add	sp, #20
 8010de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010de2:	6837      	ldr	r7, [r6, #0]
 8010de4:	9b03      	ldr	r3, [sp, #12]
 8010de6:	409f      	lsls	r7, r3
 8010de8:	430f      	orrs	r7, r1
 8010dea:	4661      	mov	r1, ip
 8010dec:	c180      	stmia	r1!, {r7}
 8010dee:	468c      	mov	ip, r1
 8010df0:	9b01      	ldr	r3, [sp, #4]
 8010df2:	ce02      	ldmia	r6!, {r1}
 8010df4:	40d9      	lsrs	r1, r3
 8010df6:	e7db      	b.n	8010db0 <rshift+0x5c>
 8010df8:	c980      	ldmia	r1!, {r7}
 8010dfa:	c680      	stmia	r6!, {r7}
 8010dfc:	e7c3      	b.n	8010d86 <rshift+0x32>

08010dfe <__hexdig_fun>:
 8010dfe:	0002      	movs	r2, r0
 8010e00:	3a30      	subs	r2, #48	; 0x30
 8010e02:	0003      	movs	r3, r0
 8010e04:	2a09      	cmp	r2, #9
 8010e06:	d802      	bhi.n	8010e0e <__hexdig_fun+0x10>
 8010e08:	3b20      	subs	r3, #32
 8010e0a:	b2d8      	uxtb	r0, r3
 8010e0c:	4770      	bx	lr
 8010e0e:	0002      	movs	r2, r0
 8010e10:	3a61      	subs	r2, #97	; 0x61
 8010e12:	2a05      	cmp	r2, #5
 8010e14:	d801      	bhi.n	8010e1a <__hexdig_fun+0x1c>
 8010e16:	3b47      	subs	r3, #71	; 0x47
 8010e18:	e7f7      	b.n	8010e0a <__hexdig_fun+0xc>
 8010e1a:	001a      	movs	r2, r3
 8010e1c:	3a41      	subs	r2, #65	; 0x41
 8010e1e:	2000      	movs	r0, #0
 8010e20:	2a05      	cmp	r2, #5
 8010e22:	d8f3      	bhi.n	8010e0c <__hexdig_fun+0xe>
 8010e24:	3b27      	subs	r3, #39	; 0x27
 8010e26:	e7f0      	b.n	8010e0a <__hexdig_fun+0xc>

08010e28 <__gethex>:
 8010e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e2a:	b089      	sub	sp, #36	; 0x24
 8010e2c:	9307      	str	r3, [sp, #28]
 8010e2e:	2302      	movs	r3, #2
 8010e30:	9201      	str	r2, [sp, #4]
 8010e32:	680a      	ldr	r2, [r1, #0]
 8010e34:	425b      	negs	r3, r3
 8010e36:	9003      	str	r0, [sp, #12]
 8010e38:	9106      	str	r1, [sp, #24]
 8010e3a:	1c96      	adds	r6, r2, #2
 8010e3c:	1a9b      	subs	r3, r3, r2
 8010e3e:	199a      	adds	r2, r3, r6
 8010e40:	9600      	str	r6, [sp, #0]
 8010e42:	9205      	str	r2, [sp, #20]
 8010e44:	9a00      	ldr	r2, [sp, #0]
 8010e46:	3601      	adds	r6, #1
 8010e48:	7810      	ldrb	r0, [r2, #0]
 8010e4a:	2830      	cmp	r0, #48	; 0x30
 8010e4c:	d0f7      	beq.n	8010e3e <__gethex+0x16>
 8010e4e:	f7ff ffd6 	bl	8010dfe <__hexdig_fun>
 8010e52:	2300      	movs	r3, #0
 8010e54:	001d      	movs	r5, r3
 8010e56:	9302      	str	r3, [sp, #8]
 8010e58:	4298      	cmp	r0, r3
 8010e5a:	d11d      	bne.n	8010e98 <__gethex+0x70>
 8010e5c:	2201      	movs	r2, #1
 8010e5e:	49a6      	ldr	r1, [pc, #664]	; (80110f8 <__gethex+0x2d0>)
 8010e60:	9800      	ldr	r0, [sp, #0]
 8010e62:	f7fe ff42 	bl	800fcea <strncmp>
 8010e66:	0007      	movs	r7, r0
 8010e68:	42a8      	cmp	r0, r5
 8010e6a:	d169      	bne.n	8010f40 <__gethex+0x118>
 8010e6c:	9b00      	ldr	r3, [sp, #0]
 8010e6e:	0034      	movs	r4, r6
 8010e70:	7858      	ldrb	r0, [r3, #1]
 8010e72:	f7ff ffc4 	bl	8010dfe <__hexdig_fun>
 8010e76:	2301      	movs	r3, #1
 8010e78:	9302      	str	r3, [sp, #8]
 8010e7a:	42a8      	cmp	r0, r5
 8010e7c:	d02f      	beq.n	8010ede <__gethex+0xb6>
 8010e7e:	9600      	str	r6, [sp, #0]
 8010e80:	9b00      	ldr	r3, [sp, #0]
 8010e82:	7818      	ldrb	r0, [r3, #0]
 8010e84:	2830      	cmp	r0, #48	; 0x30
 8010e86:	d009      	beq.n	8010e9c <__gethex+0x74>
 8010e88:	f7ff ffb9 	bl	8010dfe <__hexdig_fun>
 8010e8c:	4242      	negs	r2, r0
 8010e8e:	4142      	adcs	r2, r0
 8010e90:	2301      	movs	r3, #1
 8010e92:	0035      	movs	r5, r6
 8010e94:	9202      	str	r2, [sp, #8]
 8010e96:	9305      	str	r3, [sp, #20]
 8010e98:	9c00      	ldr	r4, [sp, #0]
 8010e9a:	e004      	b.n	8010ea6 <__gethex+0x7e>
 8010e9c:	9b00      	ldr	r3, [sp, #0]
 8010e9e:	3301      	adds	r3, #1
 8010ea0:	9300      	str	r3, [sp, #0]
 8010ea2:	e7ed      	b.n	8010e80 <__gethex+0x58>
 8010ea4:	3401      	adds	r4, #1
 8010ea6:	7820      	ldrb	r0, [r4, #0]
 8010ea8:	f7ff ffa9 	bl	8010dfe <__hexdig_fun>
 8010eac:	1e07      	subs	r7, r0, #0
 8010eae:	d1f9      	bne.n	8010ea4 <__gethex+0x7c>
 8010eb0:	2201      	movs	r2, #1
 8010eb2:	0020      	movs	r0, r4
 8010eb4:	4990      	ldr	r1, [pc, #576]	; (80110f8 <__gethex+0x2d0>)
 8010eb6:	f7fe ff18 	bl	800fcea <strncmp>
 8010eba:	2800      	cmp	r0, #0
 8010ebc:	d10d      	bne.n	8010eda <__gethex+0xb2>
 8010ebe:	2d00      	cmp	r5, #0
 8010ec0:	d106      	bne.n	8010ed0 <__gethex+0xa8>
 8010ec2:	3401      	adds	r4, #1
 8010ec4:	0025      	movs	r5, r4
 8010ec6:	7820      	ldrb	r0, [r4, #0]
 8010ec8:	f7ff ff99 	bl	8010dfe <__hexdig_fun>
 8010ecc:	2800      	cmp	r0, #0
 8010ece:	d102      	bne.n	8010ed6 <__gethex+0xae>
 8010ed0:	1b2d      	subs	r5, r5, r4
 8010ed2:	00af      	lsls	r7, r5, #2
 8010ed4:	e003      	b.n	8010ede <__gethex+0xb6>
 8010ed6:	3401      	adds	r4, #1
 8010ed8:	e7f5      	b.n	8010ec6 <__gethex+0x9e>
 8010eda:	2d00      	cmp	r5, #0
 8010edc:	d1f8      	bne.n	8010ed0 <__gethex+0xa8>
 8010ede:	2220      	movs	r2, #32
 8010ee0:	7823      	ldrb	r3, [r4, #0]
 8010ee2:	0026      	movs	r6, r4
 8010ee4:	4393      	bics	r3, r2
 8010ee6:	2b50      	cmp	r3, #80	; 0x50
 8010ee8:	d11d      	bne.n	8010f26 <__gethex+0xfe>
 8010eea:	7863      	ldrb	r3, [r4, #1]
 8010eec:	2b2b      	cmp	r3, #43	; 0x2b
 8010eee:	d02c      	beq.n	8010f4a <__gethex+0x122>
 8010ef0:	2b2d      	cmp	r3, #45	; 0x2d
 8010ef2:	d02e      	beq.n	8010f52 <__gethex+0x12a>
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	1c66      	adds	r6, r4, #1
 8010ef8:	9304      	str	r3, [sp, #16]
 8010efa:	7830      	ldrb	r0, [r6, #0]
 8010efc:	f7ff ff7f 	bl	8010dfe <__hexdig_fun>
 8010f00:	1e43      	subs	r3, r0, #1
 8010f02:	b2db      	uxtb	r3, r3
 8010f04:	2b18      	cmp	r3, #24
 8010f06:	d82b      	bhi.n	8010f60 <__gethex+0x138>
 8010f08:	3810      	subs	r0, #16
 8010f0a:	0005      	movs	r5, r0
 8010f0c:	7870      	ldrb	r0, [r6, #1]
 8010f0e:	f7ff ff76 	bl	8010dfe <__hexdig_fun>
 8010f12:	1e43      	subs	r3, r0, #1
 8010f14:	b2db      	uxtb	r3, r3
 8010f16:	3601      	adds	r6, #1
 8010f18:	2b18      	cmp	r3, #24
 8010f1a:	d91c      	bls.n	8010f56 <__gethex+0x12e>
 8010f1c:	9b04      	ldr	r3, [sp, #16]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d000      	beq.n	8010f24 <__gethex+0xfc>
 8010f22:	426d      	negs	r5, r5
 8010f24:	197f      	adds	r7, r7, r5
 8010f26:	9b06      	ldr	r3, [sp, #24]
 8010f28:	601e      	str	r6, [r3, #0]
 8010f2a:	9b02      	ldr	r3, [sp, #8]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d019      	beq.n	8010f64 <__gethex+0x13c>
 8010f30:	2600      	movs	r6, #0
 8010f32:	9b05      	ldr	r3, [sp, #20]
 8010f34:	42b3      	cmp	r3, r6
 8010f36:	d100      	bne.n	8010f3a <__gethex+0x112>
 8010f38:	3606      	adds	r6, #6
 8010f3a:	0030      	movs	r0, r6
 8010f3c:	b009      	add	sp, #36	; 0x24
 8010f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f40:	2301      	movs	r3, #1
 8010f42:	2700      	movs	r7, #0
 8010f44:	9c00      	ldr	r4, [sp, #0]
 8010f46:	9302      	str	r3, [sp, #8]
 8010f48:	e7c9      	b.n	8010ede <__gethex+0xb6>
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	9304      	str	r3, [sp, #16]
 8010f4e:	1ca6      	adds	r6, r4, #2
 8010f50:	e7d3      	b.n	8010efa <__gethex+0xd2>
 8010f52:	2301      	movs	r3, #1
 8010f54:	e7fa      	b.n	8010f4c <__gethex+0x124>
 8010f56:	230a      	movs	r3, #10
 8010f58:	435d      	muls	r5, r3
 8010f5a:	182d      	adds	r5, r5, r0
 8010f5c:	3d10      	subs	r5, #16
 8010f5e:	e7d5      	b.n	8010f0c <__gethex+0xe4>
 8010f60:	0026      	movs	r6, r4
 8010f62:	e7e0      	b.n	8010f26 <__gethex+0xfe>
 8010f64:	9b00      	ldr	r3, [sp, #0]
 8010f66:	9902      	ldr	r1, [sp, #8]
 8010f68:	1ae3      	subs	r3, r4, r3
 8010f6a:	3b01      	subs	r3, #1
 8010f6c:	2b07      	cmp	r3, #7
 8010f6e:	dc0a      	bgt.n	8010f86 <__gethex+0x15e>
 8010f70:	9803      	ldr	r0, [sp, #12]
 8010f72:	f000 fb1b 	bl	80115ac <_Balloc>
 8010f76:	1e05      	subs	r5, r0, #0
 8010f78:	d108      	bne.n	8010f8c <__gethex+0x164>
 8010f7a:	002a      	movs	r2, r5
 8010f7c:	21e4      	movs	r1, #228	; 0xe4
 8010f7e:	4b5f      	ldr	r3, [pc, #380]	; (80110fc <__gethex+0x2d4>)
 8010f80:	485f      	ldr	r0, [pc, #380]	; (8011100 <__gethex+0x2d8>)
 8010f82:	f7fe ffe1 	bl	800ff48 <__assert_func>
 8010f86:	3101      	adds	r1, #1
 8010f88:	105b      	asrs	r3, r3, #1
 8010f8a:	e7ef      	b.n	8010f6c <__gethex+0x144>
 8010f8c:	0003      	movs	r3, r0
 8010f8e:	3314      	adds	r3, #20
 8010f90:	9302      	str	r3, [sp, #8]
 8010f92:	9305      	str	r3, [sp, #20]
 8010f94:	2300      	movs	r3, #0
 8010f96:	001e      	movs	r6, r3
 8010f98:	9304      	str	r3, [sp, #16]
 8010f9a:	9b00      	ldr	r3, [sp, #0]
 8010f9c:	42a3      	cmp	r3, r4
 8010f9e:	d33f      	bcc.n	8011020 <__gethex+0x1f8>
 8010fa0:	9c05      	ldr	r4, [sp, #20]
 8010fa2:	9b02      	ldr	r3, [sp, #8]
 8010fa4:	c440      	stmia	r4!, {r6}
 8010fa6:	1ae4      	subs	r4, r4, r3
 8010fa8:	10a4      	asrs	r4, r4, #2
 8010faa:	0030      	movs	r0, r6
 8010fac:	612c      	str	r4, [r5, #16]
 8010fae:	f000 fbf5 	bl	801179c <__hi0bits>
 8010fb2:	9b01      	ldr	r3, [sp, #4]
 8010fb4:	0164      	lsls	r4, r4, #5
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	1a26      	subs	r6, r4, r0
 8010fba:	9300      	str	r3, [sp, #0]
 8010fbc:	429e      	cmp	r6, r3
 8010fbe:	dd51      	ble.n	8011064 <__gethex+0x23c>
 8010fc0:	1af6      	subs	r6, r6, r3
 8010fc2:	0031      	movs	r1, r6
 8010fc4:	0028      	movs	r0, r5
 8010fc6:	f000 ff89 	bl	8011edc <__any_on>
 8010fca:	1e04      	subs	r4, r0, #0
 8010fcc:	d016      	beq.n	8010ffc <__gethex+0x1d4>
 8010fce:	2401      	movs	r4, #1
 8010fd0:	231f      	movs	r3, #31
 8010fd2:	0020      	movs	r0, r4
 8010fd4:	1e72      	subs	r2, r6, #1
 8010fd6:	4013      	ands	r3, r2
 8010fd8:	4098      	lsls	r0, r3
 8010fda:	0003      	movs	r3, r0
 8010fdc:	1151      	asrs	r1, r2, #5
 8010fde:	9802      	ldr	r0, [sp, #8]
 8010fe0:	0089      	lsls	r1, r1, #2
 8010fe2:	5809      	ldr	r1, [r1, r0]
 8010fe4:	4219      	tst	r1, r3
 8010fe6:	d009      	beq.n	8010ffc <__gethex+0x1d4>
 8010fe8:	42a2      	cmp	r2, r4
 8010fea:	dd06      	ble.n	8010ffa <__gethex+0x1d2>
 8010fec:	0028      	movs	r0, r5
 8010fee:	1eb1      	subs	r1, r6, #2
 8010ff0:	f000 ff74 	bl	8011edc <__any_on>
 8010ff4:	3402      	adds	r4, #2
 8010ff6:	2800      	cmp	r0, #0
 8010ff8:	d100      	bne.n	8010ffc <__gethex+0x1d4>
 8010ffa:	2402      	movs	r4, #2
 8010ffc:	0031      	movs	r1, r6
 8010ffe:	0028      	movs	r0, r5
 8011000:	f7ff fea8 	bl	8010d54 <rshift>
 8011004:	19bf      	adds	r7, r7, r6
 8011006:	9b01      	ldr	r3, [sp, #4]
 8011008:	689b      	ldr	r3, [r3, #8]
 801100a:	42bb      	cmp	r3, r7
 801100c:	da3a      	bge.n	8011084 <__gethex+0x25c>
 801100e:	0029      	movs	r1, r5
 8011010:	9803      	ldr	r0, [sp, #12]
 8011012:	f000 fb0f 	bl	8011634 <_Bfree>
 8011016:	2300      	movs	r3, #0
 8011018:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801101a:	26a3      	movs	r6, #163	; 0xa3
 801101c:	6013      	str	r3, [r2, #0]
 801101e:	e78c      	b.n	8010f3a <__gethex+0x112>
 8011020:	3c01      	subs	r4, #1
 8011022:	7823      	ldrb	r3, [r4, #0]
 8011024:	2b2e      	cmp	r3, #46	; 0x2e
 8011026:	d012      	beq.n	801104e <__gethex+0x226>
 8011028:	9b04      	ldr	r3, [sp, #16]
 801102a:	2b20      	cmp	r3, #32
 801102c:	d104      	bne.n	8011038 <__gethex+0x210>
 801102e:	9b05      	ldr	r3, [sp, #20]
 8011030:	c340      	stmia	r3!, {r6}
 8011032:	2600      	movs	r6, #0
 8011034:	9305      	str	r3, [sp, #20]
 8011036:	9604      	str	r6, [sp, #16]
 8011038:	7820      	ldrb	r0, [r4, #0]
 801103a:	f7ff fee0 	bl	8010dfe <__hexdig_fun>
 801103e:	230f      	movs	r3, #15
 8011040:	4018      	ands	r0, r3
 8011042:	9b04      	ldr	r3, [sp, #16]
 8011044:	4098      	lsls	r0, r3
 8011046:	3304      	adds	r3, #4
 8011048:	4306      	orrs	r6, r0
 801104a:	9304      	str	r3, [sp, #16]
 801104c:	e7a5      	b.n	8010f9a <__gethex+0x172>
 801104e:	9b00      	ldr	r3, [sp, #0]
 8011050:	42a3      	cmp	r3, r4
 8011052:	d8e9      	bhi.n	8011028 <__gethex+0x200>
 8011054:	2201      	movs	r2, #1
 8011056:	0020      	movs	r0, r4
 8011058:	4927      	ldr	r1, [pc, #156]	; (80110f8 <__gethex+0x2d0>)
 801105a:	f7fe fe46 	bl	800fcea <strncmp>
 801105e:	2800      	cmp	r0, #0
 8011060:	d1e2      	bne.n	8011028 <__gethex+0x200>
 8011062:	e79a      	b.n	8010f9a <__gethex+0x172>
 8011064:	9b00      	ldr	r3, [sp, #0]
 8011066:	2400      	movs	r4, #0
 8011068:	429e      	cmp	r6, r3
 801106a:	dacc      	bge.n	8011006 <__gethex+0x1de>
 801106c:	1b9e      	subs	r6, r3, r6
 801106e:	0029      	movs	r1, r5
 8011070:	0032      	movs	r2, r6
 8011072:	9803      	ldr	r0, [sp, #12]
 8011074:	f000 fcfe 	bl	8011a74 <__lshift>
 8011078:	0003      	movs	r3, r0
 801107a:	3314      	adds	r3, #20
 801107c:	0005      	movs	r5, r0
 801107e:	1bbf      	subs	r7, r7, r6
 8011080:	9302      	str	r3, [sp, #8]
 8011082:	e7c0      	b.n	8011006 <__gethex+0x1de>
 8011084:	9b01      	ldr	r3, [sp, #4]
 8011086:	685e      	ldr	r6, [r3, #4]
 8011088:	42be      	cmp	r6, r7
 801108a:	dd70      	ble.n	801116e <__gethex+0x346>
 801108c:	9b00      	ldr	r3, [sp, #0]
 801108e:	1bf6      	subs	r6, r6, r7
 8011090:	42b3      	cmp	r3, r6
 8011092:	dc37      	bgt.n	8011104 <__gethex+0x2dc>
 8011094:	9b01      	ldr	r3, [sp, #4]
 8011096:	68db      	ldr	r3, [r3, #12]
 8011098:	2b02      	cmp	r3, #2
 801109a:	d024      	beq.n	80110e6 <__gethex+0x2be>
 801109c:	2b03      	cmp	r3, #3
 801109e:	d026      	beq.n	80110ee <__gethex+0x2c6>
 80110a0:	2b01      	cmp	r3, #1
 80110a2:	d117      	bne.n	80110d4 <__gethex+0x2ac>
 80110a4:	9b00      	ldr	r3, [sp, #0]
 80110a6:	42b3      	cmp	r3, r6
 80110a8:	d114      	bne.n	80110d4 <__gethex+0x2ac>
 80110aa:	2b01      	cmp	r3, #1
 80110ac:	d10b      	bne.n	80110c6 <__gethex+0x29e>
 80110ae:	9b01      	ldr	r3, [sp, #4]
 80110b0:	9a07      	ldr	r2, [sp, #28]
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	2662      	movs	r6, #98	; 0x62
 80110b6:	6013      	str	r3, [r2, #0]
 80110b8:	2301      	movs	r3, #1
 80110ba:	9a02      	ldr	r2, [sp, #8]
 80110bc:	612b      	str	r3, [r5, #16]
 80110be:	6013      	str	r3, [r2, #0]
 80110c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80110c2:	601d      	str	r5, [r3, #0]
 80110c4:	e739      	b.n	8010f3a <__gethex+0x112>
 80110c6:	9900      	ldr	r1, [sp, #0]
 80110c8:	0028      	movs	r0, r5
 80110ca:	3901      	subs	r1, #1
 80110cc:	f000 ff06 	bl	8011edc <__any_on>
 80110d0:	2800      	cmp	r0, #0
 80110d2:	d1ec      	bne.n	80110ae <__gethex+0x286>
 80110d4:	0029      	movs	r1, r5
 80110d6:	9803      	ldr	r0, [sp, #12]
 80110d8:	f000 faac 	bl	8011634 <_Bfree>
 80110dc:	2300      	movs	r3, #0
 80110de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80110e0:	2650      	movs	r6, #80	; 0x50
 80110e2:	6013      	str	r3, [r2, #0]
 80110e4:	e729      	b.n	8010f3a <__gethex+0x112>
 80110e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d1f3      	bne.n	80110d4 <__gethex+0x2ac>
 80110ec:	e7df      	b.n	80110ae <__gethex+0x286>
 80110ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d1dc      	bne.n	80110ae <__gethex+0x286>
 80110f4:	e7ee      	b.n	80110d4 <__gethex+0x2ac>
 80110f6:	46c0      	nop			; (mov r8, r8)
 80110f8:	08013b78 	.word	0x08013b78
 80110fc:	08013e22 	.word	0x08013e22
 8011100:	08013e33 	.word	0x08013e33
 8011104:	1e77      	subs	r7, r6, #1
 8011106:	2c00      	cmp	r4, #0
 8011108:	d12f      	bne.n	801116a <__gethex+0x342>
 801110a:	2f00      	cmp	r7, #0
 801110c:	d004      	beq.n	8011118 <__gethex+0x2f0>
 801110e:	0039      	movs	r1, r7
 8011110:	0028      	movs	r0, r5
 8011112:	f000 fee3 	bl	8011edc <__any_on>
 8011116:	0004      	movs	r4, r0
 8011118:	231f      	movs	r3, #31
 801111a:	117a      	asrs	r2, r7, #5
 801111c:	401f      	ands	r7, r3
 801111e:	3b1e      	subs	r3, #30
 8011120:	40bb      	lsls	r3, r7
 8011122:	9902      	ldr	r1, [sp, #8]
 8011124:	0092      	lsls	r2, r2, #2
 8011126:	5852      	ldr	r2, [r2, r1]
 8011128:	421a      	tst	r2, r3
 801112a:	d001      	beq.n	8011130 <__gethex+0x308>
 801112c:	2302      	movs	r3, #2
 801112e:	431c      	orrs	r4, r3
 8011130:	9b00      	ldr	r3, [sp, #0]
 8011132:	0031      	movs	r1, r6
 8011134:	1b9b      	subs	r3, r3, r6
 8011136:	2602      	movs	r6, #2
 8011138:	0028      	movs	r0, r5
 801113a:	9300      	str	r3, [sp, #0]
 801113c:	f7ff fe0a 	bl	8010d54 <rshift>
 8011140:	9b01      	ldr	r3, [sp, #4]
 8011142:	685f      	ldr	r7, [r3, #4]
 8011144:	2c00      	cmp	r4, #0
 8011146:	d041      	beq.n	80111cc <__gethex+0x3a4>
 8011148:	9b01      	ldr	r3, [sp, #4]
 801114a:	68db      	ldr	r3, [r3, #12]
 801114c:	2b02      	cmp	r3, #2
 801114e:	d010      	beq.n	8011172 <__gethex+0x34a>
 8011150:	2b03      	cmp	r3, #3
 8011152:	d012      	beq.n	801117a <__gethex+0x352>
 8011154:	2b01      	cmp	r3, #1
 8011156:	d106      	bne.n	8011166 <__gethex+0x33e>
 8011158:	07a2      	lsls	r2, r4, #30
 801115a:	d504      	bpl.n	8011166 <__gethex+0x33e>
 801115c:	9a02      	ldr	r2, [sp, #8]
 801115e:	6812      	ldr	r2, [r2, #0]
 8011160:	4314      	orrs	r4, r2
 8011162:	421c      	tst	r4, r3
 8011164:	d10c      	bne.n	8011180 <__gethex+0x358>
 8011166:	2310      	movs	r3, #16
 8011168:	e02f      	b.n	80111ca <__gethex+0x3a2>
 801116a:	2401      	movs	r4, #1
 801116c:	e7d4      	b.n	8011118 <__gethex+0x2f0>
 801116e:	2601      	movs	r6, #1
 8011170:	e7e8      	b.n	8011144 <__gethex+0x31c>
 8011172:	2301      	movs	r3, #1
 8011174:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011176:	1a9b      	subs	r3, r3, r2
 8011178:	930f      	str	r3, [sp, #60]	; 0x3c
 801117a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801117c:	2b00      	cmp	r3, #0
 801117e:	d0f2      	beq.n	8011166 <__gethex+0x33e>
 8011180:	692b      	ldr	r3, [r5, #16]
 8011182:	2000      	movs	r0, #0
 8011184:	9302      	str	r3, [sp, #8]
 8011186:	009b      	lsls	r3, r3, #2
 8011188:	9304      	str	r3, [sp, #16]
 801118a:	002b      	movs	r3, r5
 801118c:	9a04      	ldr	r2, [sp, #16]
 801118e:	3314      	adds	r3, #20
 8011190:	1899      	adds	r1, r3, r2
 8011192:	681a      	ldr	r2, [r3, #0]
 8011194:	1c54      	adds	r4, r2, #1
 8011196:	d01e      	beq.n	80111d6 <__gethex+0x3ae>
 8011198:	3201      	adds	r2, #1
 801119a:	601a      	str	r2, [r3, #0]
 801119c:	002b      	movs	r3, r5
 801119e:	3314      	adds	r3, #20
 80111a0:	2e02      	cmp	r6, #2
 80111a2:	d141      	bne.n	8011228 <__gethex+0x400>
 80111a4:	9a01      	ldr	r2, [sp, #4]
 80111a6:	9900      	ldr	r1, [sp, #0]
 80111a8:	6812      	ldr	r2, [r2, #0]
 80111aa:	3a01      	subs	r2, #1
 80111ac:	428a      	cmp	r2, r1
 80111ae:	d10b      	bne.n	80111c8 <__gethex+0x3a0>
 80111b0:	221f      	movs	r2, #31
 80111b2:	9800      	ldr	r0, [sp, #0]
 80111b4:	1149      	asrs	r1, r1, #5
 80111b6:	4002      	ands	r2, r0
 80111b8:	2001      	movs	r0, #1
 80111ba:	0004      	movs	r4, r0
 80111bc:	4094      	lsls	r4, r2
 80111be:	0089      	lsls	r1, r1, #2
 80111c0:	58cb      	ldr	r3, [r1, r3]
 80111c2:	4223      	tst	r3, r4
 80111c4:	d000      	beq.n	80111c8 <__gethex+0x3a0>
 80111c6:	2601      	movs	r6, #1
 80111c8:	2320      	movs	r3, #32
 80111ca:	431e      	orrs	r6, r3
 80111cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80111ce:	601d      	str	r5, [r3, #0]
 80111d0:	9b07      	ldr	r3, [sp, #28]
 80111d2:	601f      	str	r7, [r3, #0]
 80111d4:	e6b1      	b.n	8010f3a <__gethex+0x112>
 80111d6:	c301      	stmia	r3!, {r0}
 80111d8:	4299      	cmp	r1, r3
 80111da:	d8da      	bhi.n	8011192 <__gethex+0x36a>
 80111dc:	68ab      	ldr	r3, [r5, #8]
 80111de:	9a02      	ldr	r2, [sp, #8]
 80111e0:	429a      	cmp	r2, r3
 80111e2:	db18      	blt.n	8011216 <__gethex+0x3ee>
 80111e4:	6869      	ldr	r1, [r5, #4]
 80111e6:	9803      	ldr	r0, [sp, #12]
 80111e8:	3101      	adds	r1, #1
 80111ea:	f000 f9df 	bl	80115ac <_Balloc>
 80111ee:	1e04      	subs	r4, r0, #0
 80111f0:	d104      	bne.n	80111fc <__gethex+0x3d4>
 80111f2:	0022      	movs	r2, r4
 80111f4:	2184      	movs	r1, #132	; 0x84
 80111f6:	4b1c      	ldr	r3, [pc, #112]	; (8011268 <__gethex+0x440>)
 80111f8:	481c      	ldr	r0, [pc, #112]	; (801126c <__gethex+0x444>)
 80111fa:	e6c2      	b.n	8010f82 <__gethex+0x15a>
 80111fc:	0029      	movs	r1, r5
 80111fe:	692a      	ldr	r2, [r5, #16]
 8011200:	310c      	adds	r1, #12
 8011202:	3202      	adds	r2, #2
 8011204:	0092      	lsls	r2, r2, #2
 8011206:	300c      	adds	r0, #12
 8011208:	f7fe fe8a 	bl	800ff20 <memcpy>
 801120c:	0029      	movs	r1, r5
 801120e:	9803      	ldr	r0, [sp, #12]
 8011210:	f000 fa10 	bl	8011634 <_Bfree>
 8011214:	0025      	movs	r5, r4
 8011216:	692b      	ldr	r3, [r5, #16]
 8011218:	1c5a      	adds	r2, r3, #1
 801121a:	612a      	str	r2, [r5, #16]
 801121c:	2201      	movs	r2, #1
 801121e:	3304      	adds	r3, #4
 8011220:	009b      	lsls	r3, r3, #2
 8011222:	18eb      	adds	r3, r5, r3
 8011224:	605a      	str	r2, [r3, #4]
 8011226:	e7b9      	b.n	801119c <__gethex+0x374>
 8011228:	692a      	ldr	r2, [r5, #16]
 801122a:	9902      	ldr	r1, [sp, #8]
 801122c:	428a      	cmp	r2, r1
 801122e:	dd09      	ble.n	8011244 <__gethex+0x41c>
 8011230:	2101      	movs	r1, #1
 8011232:	0028      	movs	r0, r5
 8011234:	f7ff fd8e 	bl	8010d54 <rshift>
 8011238:	9b01      	ldr	r3, [sp, #4]
 801123a:	3701      	adds	r7, #1
 801123c:	689b      	ldr	r3, [r3, #8]
 801123e:	42bb      	cmp	r3, r7
 8011240:	dac1      	bge.n	80111c6 <__gethex+0x39e>
 8011242:	e6e4      	b.n	801100e <__gethex+0x1e6>
 8011244:	221f      	movs	r2, #31
 8011246:	9c00      	ldr	r4, [sp, #0]
 8011248:	9900      	ldr	r1, [sp, #0]
 801124a:	2601      	movs	r6, #1
 801124c:	4014      	ands	r4, r2
 801124e:	4211      	tst	r1, r2
 8011250:	d0ba      	beq.n	80111c8 <__gethex+0x3a0>
 8011252:	9a04      	ldr	r2, [sp, #16]
 8011254:	189b      	adds	r3, r3, r2
 8011256:	3b04      	subs	r3, #4
 8011258:	6818      	ldr	r0, [r3, #0]
 801125a:	f000 fa9f 	bl	801179c <__hi0bits>
 801125e:	2320      	movs	r3, #32
 8011260:	1b1b      	subs	r3, r3, r4
 8011262:	4298      	cmp	r0, r3
 8011264:	dbe4      	blt.n	8011230 <__gethex+0x408>
 8011266:	e7af      	b.n	80111c8 <__gethex+0x3a0>
 8011268:	08013e22 	.word	0x08013e22
 801126c:	08013e33 	.word	0x08013e33

08011270 <L_shift>:
 8011270:	2308      	movs	r3, #8
 8011272:	b570      	push	{r4, r5, r6, lr}
 8011274:	2520      	movs	r5, #32
 8011276:	1a9a      	subs	r2, r3, r2
 8011278:	0092      	lsls	r2, r2, #2
 801127a:	1aad      	subs	r5, r5, r2
 801127c:	6843      	ldr	r3, [r0, #4]
 801127e:	6804      	ldr	r4, [r0, #0]
 8011280:	001e      	movs	r6, r3
 8011282:	40ae      	lsls	r6, r5
 8011284:	40d3      	lsrs	r3, r2
 8011286:	4334      	orrs	r4, r6
 8011288:	6004      	str	r4, [r0, #0]
 801128a:	6043      	str	r3, [r0, #4]
 801128c:	3004      	adds	r0, #4
 801128e:	4288      	cmp	r0, r1
 8011290:	d3f4      	bcc.n	801127c <L_shift+0xc>
 8011292:	bd70      	pop	{r4, r5, r6, pc}

08011294 <__match>:
 8011294:	b530      	push	{r4, r5, lr}
 8011296:	6803      	ldr	r3, [r0, #0]
 8011298:	780c      	ldrb	r4, [r1, #0]
 801129a:	3301      	adds	r3, #1
 801129c:	2c00      	cmp	r4, #0
 801129e:	d102      	bne.n	80112a6 <__match+0x12>
 80112a0:	6003      	str	r3, [r0, #0]
 80112a2:	2001      	movs	r0, #1
 80112a4:	bd30      	pop	{r4, r5, pc}
 80112a6:	781a      	ldrb	r2, [r3, #0]
 80112a8:	0015      	movs	r5, r2
 80112aa:	3d41      	subs	r5, #65	; 0x41
 80112ac:	2d19      	cmp	r5, #25
 80112ae:	d800      	bhi.n	80112b2 <__match+0x1e>
 80112b0:	3220      	adds	r2, #32
 80112b2:	3101      	adds	r1, #1
 80112b4:	42a2      	cmp	r2, r4
 80112b6:	d0ef      	beq.n	8011298 <__match+0x4>
 80112b8:	2000      	movs	r0, #0
 80112ba:	e7f3      	b.n	80112a4 <__match+0x10>

080112bc <__hexnan>:
 80112bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112be:	680b      	ldr	r3, [r1, #0]
 80112c0:	b08b      	sub	sp, #44	; 0x2c
 80112c2:	9201      	str	r2, [sp, #4]
 80112c4:	9901      	ldr	r1, [sp, #4]
 80112c6:	115a      	asrs	r2, r3, #5
 80112c8:	0092      	lsls	r2, r2, #2
 80112ca:	188a      	adds	r2, r1, r2
 80112cc:	9202      	str	r2, [sp, #8]
 80112ce:	0019      	movs	r1, r3
 80112d0:	221f      	movs	r2, #31
 80112d2:	4011      	ands	r1, r2
 80112d4:	9008      	str	r0, [sp, #32]
 80112d6:	9106      	str	r1, [sp, #24]
 80112d8:	4213      	tst	r3, r2
 80112da:	d002      	beq.n	80112e2 <__hexnan+0x26>
 80112dc:	9b02      	ldr	r3, [sp, #8]
 80112de:	3304      	adds	r3, #4
 80112e0:	9302      	str	r3, [sp, #8]
 80112e2:	9b02      	ldr	r3, [sp, #8]
 80112e4:	2500      	movs	r5, #0
 80112e6:	1f1f      	subs	r7, r3, #4
 80112e8:	003e      	movs	r6, r7
 80112ea:	003c      	movs	r4, r7
 80112ec:	9b08      	ldr	r3, [sp, #32]
 80112ee:	603d      	str	r5, [r7, #0]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	9507      	str	r5, [sp, #28]
 80112f4:	9305      	str	r3, [sp, #20]
 80112f6:	9503      	str	r5, [sp, #12]
 80112f8:	9b05      	ldr	r3, [sp, #20]
 80112fa:	3301      	adds	r3, #1
 80112fc:	9309      	str	r3, [sp, #36]	; 0x24
 80112fe:	9b05      	ldr	r3, [sp, #20]
 8011300:	785b      	ldrb	r3, [r3, #1]
 8011302:	9304      	str	r3, [sp, #16]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d028      	beq.n	801135a <__hexnan+0x9e>
 8011308:	9804      	ldr	r0, [sp, #16]
 801130a:	f7ff fd78 	bl	8010dfe <__hexdig_fun>
 801130e:	2800      	cmp	r0, #0
 8011310:	d154      	bne.n	80113bc <__hexnan+0x100>
 8011312:	9b04      	ldr	r3, [sp, #16]
 8011314:	2b20      	cmp	r3, #32
 8011316:	d819      	bhi.n	801134c <__hexnan+0x90>
 8011318:	9b03      	ldr	r3, [sp, #12]
 801131a:	9a07      	ldr	r2, [sp, #28]
 801131c:	4293      	cmp	r3, r2
 801131e:	dd12      	ble.n	8011346 <__hexnan+0x8a>
 8011320:	42b4      	cmp	r4, r6
 8011322:	d206      	bcs.n	8011332 <__hexnan+0x76>
 8011324:	2d07      	cmp	r5, #7
 8011326:	dc04      	bgt.n	8011332 <__hexnan+0x76>
 8011328:	002a      	movs	r2, r5
 801132a:	0031      	movs	r1, r6
 801132c:	0020      	movs	r0, r4
 801132e:	f7ff ff9f 	bl	8011270 <L_shift>
 8011332:	9b01      	ldr	r3, [sp, #4]
 8011334:	2508      	movs	r5, #8
 8011336:	429c      	cmp	r4, r3
 8011338:	d905      	bls.n	8011346 <__hexnan+0x8a>
 801133a:	1f26      	subs	r6, r4, #4
 801133c:	2500      	movs	r5, #0
 801133e:	0034      	movs	r4, r6
 8011340:	9b03      	ldr	r3, [sp, #12]
 8011342:	6035      	str	r5, [r6, #0]
 8011344:	9307      	str	r3, [sp, #28]
 8011346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011348:	9305      	str	r3, [sp, #20]
 801134a:	e7d5      	b.n	80112f8 <__hexnan+0x3c>
 801134c:	9b04      	ldr	r3, [sp, #16]
 801134e:	2b29      	cmp	r3, #41	; 0x29
 8011350:	d159      	bne.n	8011406 <__hexnan+0x14a>
 8011352:	9b05      	ldr	r3, [sp, #20]
 8011354:	9a08      	ldr	r2, [sp, #32]
 8011356:	3302      	adds	r3, #2
 8011358:	6013      	str	r3, [r2, #0]
 801135a:	9b03      	ldr	r3, [sp, #12]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d052      	beq.n	8011406 <__hexnan+0x14a>
 8011360:	42b4      	cmp	r4, r6
 8011362:	d206      	bcs.n	8011372 <__hexnan+0xb6>
 8011364:	2d07      	cmp	r5, #7
 8011366:	dc04      	bgt.n	8011372 <__hexnan+0xb6>
 8011368:	002a      	movs	r2, r5
 801136a:	0031      	movs	r1, r6
 801136c:	0020      	movs	r0, r4
 801136e:	f7ff ff7f 	bl	8011270 <L_shift>
 8011372:	9b01      	ldr	r3, [sp, #4]
 8011374:	429c      	cmp	r4, r3
 8011376:	d935      	bls.n	80113e4 <__hexnan+0x128>
 8011378:	001a      	movs	r2, r3
 801137a:	0023      	movs	r3, r4
 801137c:	cb02      	ldmia	r3!, {r1}
 801137e:	c202      	stmia	r2!, {r1}
 8011380:	429f      	cmp	r7, r3
 8011382:	d2fb      	bcs.n	801137c <__hexnan+0xc0>
 8011384:	9b02      	ldr	r3, [sp, #8]
 8011386:	1c62      	adds	r2, r4, #1
 8011388:	1ed9      	subs	r1, r3, #3
 801138a:	2304      	movs	r3, #4
 801138c:	4291      	cmp	r1, r2
 801138e:	d305      	bcc.n	801139c <__hexnan+0xe0>
 8011390:	9b02      	ldr	r3, [sp, #8]
 8011392:	3b04      	subs	r3, #4
 8011394:	1b1b      	subs	r3, r3, r4
 8011396:	089b      	lsrs	r3, r3, #2
 8011398:	3301      	adds	r3, #1
 801139a:	009b      	lsls	r3, r3, #2
 801139c:	9a01      	ldr	r2, [sp, #4]
 801139e:	18d3      	adds	r3, r2, r3
 80113a0:	2200      	movs	r2, #0
 80113a2:	c304      	stmia	r3!, {r2}
 80113a4:	429f      	cmp	r7, r3
 80113a6:	d2fc      	bcs.n	80113a2 <__hexnan+0xe6>
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d104      	bne.n	80113b8 <__hexnan+0xfc>
 80113ae:	9b01      	ldr	r3, [sp, #4]
 80113b0:	429f      	cmp	r7, r3
 80113b2:	d126      	bne.n	8011402 <__hexnan+0x146>
 80113b4:	2301      	movs	r3, #1
 80113b6:	603b      	str	r3, [r7, #0]
 80113b8:	2005      	movs	r0, #5
 80113ba:	e025      	b.n	8011408 <__hexnan+0x14c>
 80113bc:	9b03      	ldr	r3, [sp, #12]
 80113be:	3501      	adds	r5, #1
 80113c0:	3301      	adds	r3, #1
 80113c2:	9303      	str	r3, [sp, #12]
 80113c4:	2d08      	cmp	r5, #8
 80113c6:	dd06      	ble.n	80113d6 <__hexnan+0x11a>
 80113c8:	9b01      	ldr	r3, [sp, #4]
 80113ca:	429c      	cmp	r4, r3
 80113cc:	d9bb      	bls.n	8011346 <__hexnan+0x8a>
 80113ce:	2300      	movs	r3, #0
 80113d0:	2501      	movs	r5, #1
 80113d2:	3c04      	subs	r4, #4
 80113d4:	6023      	str	r3, [r4, #0]
 80113d6:	220f      	movs	r2, #15
 80113d8:	6823      	ldr	r3, [r4, #0]
 80113da:	4010      	ands	r0, r2
 80113dc:	011b      	lsls	r3, r3, #4
 80113de:	4303      	orrs	r3, r0
 80113e0:	6023      	str	r3, [r4, #0]
 80113e2:	e7b0      	b.n	8011346 <__hexnan+0x8a>
 80113e4:	9b06      	ldr	r3, [sp, #24]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d0de      	beq.n	80113a8 <__hexnan+0xec>
 80113ea:	2320      	movs	r3, #32
 80113ec:	9a06      	ldr	r2, [sp, #24]
 80113ee:	9902      	ldr	r1, [sp, #8]
 80113f0:	1a9b      	subs	r3, r3, r2
 80113f2:	2201      	movs	r2, #1
 80113f4:	4252      	negs	r2, r2
 80113f6:	40da      	lsrs	r2, r3
 80113f8:	3904      	subs	r1, #4
 80113fa:	680b      	ldr	r3, [r1, #0]
 80113fc:	4013      	ands	r3, r2
 80113fe:	600b      	str	r3, [r1, #0]
 8011400:	e7d2      	b.n	80113a8 <__hexnan+0xec>
 8011402:	3f04      	subs	r7, #4
 8011404:	e7d0      	b.n	80113a8 <__hexnan+0xec>
 8011406:	2004      	movs	r0, #4
 8011408:	b00b      	add	sp, #44	; 0x2c
 801140a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801140c <malloc>:
 801140c:	b510      	push	{r4, lr}
 801140e:	4b03      	ldr	r3, [pc, #12]	; (801141c <malloc+0x10>)
 8011410:	0001      	movs	r1, r0
 8011412:	6818      	ldr	r0, [r3, #0]
 8011414:	f000 f826 	bl	8011464 <_malloc_r>
 8011418:	bd10      	pop	{r4, pc}
 801141a:	46c0      	nop			; (mov r8, r8)
 801141c:	2000021c 	.word	0x2000021c

08011420 <sbrk_aligned>:
 8011420:	b570      	push	{r4, r5, r6, lr}
 8011422:	4e0f      	ldr	r6, [pc, #60]	; (8011460 <sbrk_aligned+0x40>)
 8011424:	000d      	movs	r5, r1
 8011426:	6831      	ldr	r1, [r6, #0]
 8011428:	0004      	movs	r4, r0
 801142a:	2900      	cmp	r1, #0
 801142c:	d102      	bne.n	8011434 <sbrk_aligned+0x14>
 801142e:	f001 fb63 	bl	8012af8 <_sbrk_r>
 8011432:	6030      	str	r0, [r6, #0]
 8011434:	0029      	movs	r1, r5
 8011436:	0020      	movs	r0, r4
 8011438:	f001 fb5e 	bl	8012af8 <_sbrk_r>
 801143c:	1c43      	adds	r3, r0, #1
 801143e:	d00a      	beq.n	8011456 <sbrk_aligned+0x36>
 8011440:	2303      	movs	r3, #3
 8011442:	1cc5      	adds	r5, r0, #3
 8011444:	439d      	bics	r5, r3
 8011446:	42a8      	cmp	r0, r5
 8011448:	d007      	beq.n	801145a <sbrk_aligned+0x3a>
 801144a:	1a29      	subs	r1, r5, r0
 801144c:	0020      	movs	r0, r4
 801144e:	f001 fb53 	bl	8012af8 <_sbrk_r>
 8011452:	3001      	adds	r0, #1
 8011454:	d101      	bne.n	801145a <sbrk_aligned+0x3a>
 8011456:	2501      	movs	r5, #1
 8011458:	426d      	negs	r5, r5
 801145a:	0028      	movs	r0, r5
 801145c:	bd70      	pop	{r4, r5, r6, pc}
 801145e:	46c0      	nop			; (mov r8, r8)
 8011460:	20003f68 	.word	0x20003f68

08011464 <_malloc_r>:
 8011464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011466:	2203      	movs	r2, #3
 8011468:	1ccb      	adds	r3, r1, #3
 801146a:	4393      	bics	r3, r2
 801146c:	3308      	adds	r3, #8
 801146e:	0006      	movs	r6, r0
 8011470:	001f      	movs	r7, r3
 8011472:	2b0c      	cmp	r3, #12
 8011474:	d238      	bcs.n	80114e8 <_malloc_r+0x84>
 8011476:	270c      	movs	r7, #12
 8011478:	42b9      	cmp	r1, r7
 801147a:	d837      	bhi.n	80114ec <_malloc_r+0x88>
 801147c:	0030      	movs	r0, r6
 801147e:	f000 f885 	bl	801158c <__malloc_lock>
 8011482:	4b38      	ldr	r3, [pc, #224]	; (8011564 <_malloc_r+0x100>)
 8011484:	9300      	str	r3, [sp, #0]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	001c      	movs	r4, r3
 801148a:	2c00      	cmp	r4, #0
 801148c:	d133      	bne.n	80114f6 <_malloc_r+0x92>
 801148e:	0039      	movs	r1, r7
 8011490:	0030      	movs	r0, r6
 8011492:	f7ff ffc5 	bl	8011420 <sbrk_aligned>
 8011496:	0004      	movs	r4, r0
 8011498:	1c43      	adds	r3, r0, #1
 801149a:	d15e      	bne.n	801155a <_malloc_r+0xf6>
 801149c:	9b00      	ldr	r3, [sp, #0]
 801149e:	681c      	ldr	r4, [r3, #0]
 80114a0:	0025      	movs	r5, r4
 80114a2:	2d00      	cmp	r5, #0
 80114a4:	d14e      	bne.n	8011544 <_malloc_r+0xe0>
 80114a6:	2c00      	cmp	r4, #0
 80114a8:	d051      	beq.n	801154e <_malloc_r+0xea>
 80114aa:	6823      	ldr	r3, [r4, #0]
 80114ac:	0029      	movs	r1, r5
 80114ae:	18e3      	adds	r3, r4, r3
 80114b0:	0030      	movs	r0, r6
 80114b2:	9301      	str	r3, [sp, #4]
 80114b4:	f001 fb20 	bl	8012af8 <_sbrk_r>
 80114b8:	9b01      	ldr	r3, [sp, #4]
 80114ba:	4283      	cmp	r3, r0
 80114bc:	d147      	bne.n	801154e <_malloc_r+0xea>
 80114be:	6823      	ldr	r3, [r4, #0]
 80114c0:	0030      	movs	r0, r6
 80114c2:	1aff      	subs	r7, r7, r3
 80114c4:	0039      	movs	r1, r7
 80114c6:	f7ff ffab 	bl	8011420 <sbrk_aligned>
 80114ca:	3001      	adds	r0, #1
 80114cc:	d03f      	beq.n	801154e <_malloc_r+0xea>
 80114ce:	6823      	ldr	r3, [r4, #0]
 80114d0:	19db      	adds	r3, r3, r7
 80114d2:	6023      	str	r3, [r4, #0]
 80114d4:	9b00      	ldr	r3, [sp, #0]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d040      	beq.n	801155e <_malloc_r+0xfa>
 80114dc:	685a      	ldr	r2, [r3, #4]
 80114de:	42a2      	cmp	r2, r4
 80114e0:	d133      	bne.n	801154a <_malloc_r+0xe6>
 80114e2:	2200      	movs	r2, #0
 80114e4:	605a      	str	r2, [r3, #4]
 80114e6:	e014      	b.n	8011512 <_malloc_r+0xae>
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	dac5      	bge.n	8011478 <_malloc_r+0x14>
 80114ec:	230c      	movs	r3, #12
 80114ee:	2500      	movs	r5, #0
 80114f0:	6033      	str	r3, [r6, #0]
 80114f2:	0028      	movs	r0, r5
 80114f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80114f6:	6821      	ldr	r1, [r4, #0]
 80114f8:	1bc9      	subs	r1, r1, r7
 80114fa:	d420      	bmi.n	801153e <_malloc_r+0xda>
 80114fc:	290b      	cmp	r1, #11
 80114fe:	d918      	bls.n	8011532 <_malloc_r+0xce>
 8011500:	19e2      	adds	r2, r4, r7
 8011502:	6027      	str	r7, [r4, #0]
 8011504:	42a3      	cmp	r3, r4
 8011506:	d112      	bne.n	801152e <_malloc_r+0xca>
 8011508:	9b00      	ldr	r3, [sp, #0]
 801150a:	601a      	str	r2, [r3, #0]
 801150c:	6863      	ldr	r3, [r4, #4]
 801150e:	6011      	str	r1, [r2, #0]
 8011510:	6053      	str	r3, [r2, #4]
 8011512:	0030      	movs	r0, r6
 8011514:	0025      	movs	r5, r4
 8011516:	f000 f841 	bl	801159c <__malloc_unlock>
 801151a:	2207      	movs	r2, #7
 801151c:	350b      	adds	r5, #11
 801151e:	1d23      	adds	r3, r4, #4
 8011520:	4395      	bics	r5, r2
 8011522:	1aea      	subs	r2, r5, r3
 8011524:	429d      	cmp	r5, r3
 8011526:	d0e4      	beq.n	80114f2 <_malloc_r+0x8e>
 8011528:	1b5b      	subs	r3, r3, r5
 801152a:	50a3      	str	r3, [r4, r2]
 801152c:	e7e1      	b.n	80114f2 <_malloc_r+0x8e>
 801152e:	605a      	str	r2, [r3, #4]
 8011530:	e7ec      	b.n	801150c <_malloc_r+0xa8>
 8011532:	6862      	ldr	r2, [r4, #4]
 8011534:	42a3      	cmp	r3, r4
 8011536:	d1d5      	bne.n	80114e4 <_malloc_r+0x80>
 8011538:	9b00      	ldr	r3, [sp, #0]
 801153a:	601a      	str	r2, [r3, #0]
 801153c:	e7e9      	b.n	8011512 <_malloc_r+0xae>
 801153e:	0023      	movs	r3, r4
 8011540:	6864      	ldr	r4, [r4, #4]
 8011542:	e7a2      	b.n	801148a <_malloc_r+0x26>
 8011544:	002c      	movs	r4, r5
 8011546:	686d      	ldr	r5, [r5, #4]
 8011548:	e7ab      	b.n	80114a2 <_malloc_r+0x3e>
 801154a:	0013      	movs	r3, r2
 801154c:	e7c4      	b.n	80114d8 <_malloc_r+0x74>
 801154e:	230c      	movs	r3, #12
 8011550:	0030      	movs	r0, r6
 8011552:	6033      	str	r3, [r6, #0]
 8011554:	f000 f822 	bl	801159c <__malloc_unlock>
 8011558:	e7cb      	b.n	80114f2 <_malloc_r+0x8e>
 801155a:	6027      	str	r7, [r4, #0]
 801155c:	e7d9      	b.n	8011512 <_malloc_r+0xae>
 801155e:	605b      	str	r3, [r3, #4]
 8011560:	deff      	udf	#255	; 0xff
 8011562:	46c0      	nop			; (mov r8, r8)
 8011564:	20003f64 	.word	0x20003f64

08011568 <__ascii_mbtowc>:
 8011568:	b082      	sub	sp, #8
 801156a:	2900      	cmp	r1, #0
 801156c:	d100      	bne.n	8011570 <__ascii_mbtowc+0x8>
 801156e:	a901      	add	r1, sp, #4
 8011570:	1e10      	subs	r0, r2, #0
 8011572:	d006      	beq.n	8011582 <__ascii_mbtowc+0x1a>
 8011574:	2b00      	cmp	r3, #0
 8011576:	d006      	beq.n	8011586 <__ascii_mbtowc+0x1e>
 8011578:	7813      	ldrb	r3, [r2, #0]
 801157a:	600b      	str	r3, [r1, #0]
 801157c:	7810      	ldrb	r0, [r2, #0]
 801157e:	1e43      	subs	r3, r0, #1
 8011580:	4198      	sbcs	r0, r3
 8011582:	b002      	add	sp, #8
 8011584:	4770      	bx	lr
 8011586:	2002      	movs	r0, #2
 8011588:	4240      	negs	r0, r0
 801158a:	e7fa      	b.n	8011582 <__ascii_mbtowc+0x1a>

0801158c <__malloc_lock>:
 801158c:	b510      	push	{r4, lr}
 801158e:	4802      	ldr	r0, [pc, #8]	; (8011598 <__malloc_lock+0xc>)
 8011590:	f7fe fcb1 	bl	800fef6 <__retarget_lock_acquire_recursive>
 8011594:	bd10      	pop	{r4, pc}
 8011596:	46c0      	nop			; (mov r8, r8)
 8011598:	20003f60 	.word	0x20003f60

0801159c <__malloc_unlock>:
 801159c:	b510      	push	{r4, lr}
 801159e:	4802      	ldr	r0, [pc, #8]	; (80115a8 <__malloc_unlock+0xc>)
 80115a0:	f7fe fcaa 	bl	800fef8 <__retarget_lock_release_recursive>
 80115a4:	bd10      	pop	{r4, pc}
 80115a6:	46c0      	nop			; (mov r8, r8)
 80115a8:	20003f60 	.word	0x20003f60

080115ac <_Balloc>:
 80115ac:	b570      	push	{r4, r5, r6, lr}
 80115ae:	69c5      	ldr	r5, [r0, #28]
 80115b0:	0006      	movs	r6, r0
 80115b2:	000c      	movs	r4, r1
 80115b4:	2d00      	cmp	r5, #0
 80115b6:	d10e      	bne.n	80115d6 <_Balloc+0x2a>
 80115b8:	2010      	movs	r0, #16
 80115ba:	f7ff ff27 	bl	801140c <malloc>
 80115be:	1e02      	subs	r2, r0, #0
 80115c0:	61f0      	str	r0, [r6, #28]
 80115c2:	d104      	bne.n	80115ce <_Balloc+0x22>
 80115c4:	216b      	movs	r1, #107	; 0x6b
 80115c6:	4b19      	ldr	r3, [pc, #100]	; (801162c <_Balloc+0x80>)
 80115c8:	4819      	ldr	r0, [pc, #100]	; (8011630 <_Balloc+0x84>)
 80115ca:	f7fe fcbd 	bl	800ff48 <__assert_func>
 80115ce:	6045      	str	r5, [r0, #4]
 80115d0:	6085      	str	r5, [r0, #8]
 80115d2:	6005      	str	r5, [r0, #0]
 80115d4:	60c5      	str	r5, [r0, #12]
 80115d6:	69f5      	ldr	r5, [r6, #28]
 80115d8:	68eb      	ldr	r3, [r5, #12]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d013      	beq.n	8011606 <_Balloc+0x5a>
 80115de:	69f3      	ldr	r3, [r6, #28]
 80115e0:	00a2      	lsls	r2, r4, #2
 80115e2:	68db      	ldr	r3, [r3, #12]
 80115e4:	189b      	adds	r3, r3, r2
 80115e6:	6818      	ldr	r0, [r3, #0]
 80115e8:	2800      	cmp	r0, #0
 80115ea:	d118      	bne.n	801161e <_Balloc+0x72>
 80115ec:	2101      	movs	r1, #1
 80115ee:	000d      	movs	r5, r1
 80115f0:	40a5      	lsls	r5, r4
 80115f2:	1d6a      	adds	r2, r5, #5
 80115f4:	0030      	movs	r0, r6
 80115f6:	0092      	lsls	r2, r2, #2
 80115f8:	f001 fa97 	bl	8012b2a <_calloc_r>
 80115fc:	2800      	cmp	r0, #0
 80115fe:	d00c      	beq.n	801161a <_Balloc+0x6e>
 8011600:	6044      	str	r4, [r0, #4]
 8011602:	6085      	str	r5, [r0, #8]
 8011604:	e00d      	b.n	8011622 <_Balloc+0x76>
 8011606:	2221      	movs	r2, #33	; 0x21
 8011608:	2104      	movs	r1, #4
 801160a:	0030      	movs	r0, r6
 801160c:	f001 fa8d 	bl	8012b2a <_calloc_r>
 8011610:	69f3      	ldr	r3, [r6, #28]
 8011612:	60e8      	str	r0, [r5, #12]
 8011614:	68db      	ldr	r3, [r3, #12]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d1e1      	bne.n	80115de <_Balloc+0x32>
 801161a:	2000      	movs	r0, #0
 801161c:	bd70      	pop	{r4, r5, r6, pc}
 801161e:	6802      	ldr	r2, [r0, #0]
 8011620:	601a      	str	r2, [r3, #0]
 8011622:	2300      	movs	r3, #0
 8011624:	6103      	str	r3, [r0, #16]
 8011626:	60c3      	str	r3, [r0, #12]
 8011628:	e7f8      	b.n	801161c <_Balloc+0x70>
 801162a:	46c0      	nop			; (mov r8, r8)
 801162c:	08013d08 	.word	0x08013d08
 8011630:	08013e93 	.word	0x08013e93

08011634 <_Bfree>:
 8011634:	b570      	push	{r4, r5, r6, lr}
 8011636:	69c6      	ldr	r6, [r0, #28]
 8011638:	0005      	movs	r5, r0
 801163a:	000c      	movs	r4, r1
 801163c:	2e00      	cmp	r6, #0
 801163e:	d10e      	bne.n	801165e <_Bfree+0x2a>
 8011640:	2010      	movs	r0, #16
 8011642:	f7ff fee3 	bl	801140c <malloc>
 8011646:	1e02      	subs	r2, r0, #0
 8011648:	61e8      	str	r0, [r5, #28]
 801164a:	d104      	bne.n	8011656 <_Bfree+0x22>
 801164c:	218f      	movs	r1, #143	; 0x8f
 801164e:	4b09      	ldr	r3, [pc, #36]	; (8011674 <_Bfree+0x40>)
 8011650:	4809      	ldr	r0, [pc, #36]	; (8011678 <_Bfree+0x44>)
 8011652:	f7fe fc79 	bl	800ff48 <__assert_func>
 8011656:	6046      	str	r6, [r0, #4]
 8011658:	6086      	str	r6, [r0, #8]
 801165a:	6006      	str	r6, [r0, #0]
 801165c:	60c6      	str	r6, [r0, #12]
 801165e:	2c00      	cmp	r4, #0
 8011660:	d007      	beq.n	8011672 <_Bfree+0x3e>
 8011662:	69eb      	ldr	r3, [r5, #28]
 8011664:	6862      	ldr	r2, [r4, #4]
 8011666:	68db      	ldr	r3, [r3, #12]
 8011668:	0092      	lsls	r2, r2, #2
 801166a:	189b      	adds	r3, r3, r2
 801166c:	681a      	ldr	r2, [r3, #0]
 801166e:	6022      	str	r2, [r4, #0]
 8011670:	601c      	str	r4, [r3, #0]
 8011672:	bd70      	pop	{r4, r5, r6, pc}
 8011674:	08013d08 	.word	0x08013d08
 8011678:	08013e93 	.word	0x08013e93

0801167c <__multadd>:
 801167c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801167e:	000e      	movs	r6, r1
 8011680:	9001      	str	r0, [sp, #4]
 8011682:	000c      	movs	r4, r1
 8011684:	001d      	movs	r5, r3
 8011686:	2000      	movs	r0, #0
 8011688:	690f      	ldr	r7, [r1, #16]
 801168a:	3614      	adds	r6, #20
 801168c:	6833      	ldr	r3, [r6, #0]
 801168e:	3001      	adds	r0, #1
 8011690:	b299      	uxth	r1, r3
 8011692:	4351      	muls	r1, r2
 8011694:	0c1b      	lsrs	r3, r3, #16
 8011696:	4353      	muls	r3, r2
 8011698:	1949      	adds	r1, r1, r5
 801169a:	0c0d      	lsrs	r5, r1, #16
 801169c:	195b      	adds	r3, r3, r5
 801169e:	0c1d      	lsrs	r5, r3, #16
 80116a0:	b289      	uxth	r1, r1
 80116a2:	041b      	lsls	r3, r3, #16
 80116a4:	185b      	adds	r3, r3, r1
 80116a6:	c608      	stmia	r6!, {r3}
 80116a8:	4287      	cmp	r7, r0
 80116aa:	dcef      	bgt.n	801168c <__multadd+0x10>
 80116ac:	2d00      	cmp	r5, #0
 80116ae:	d022      	beq.n	80116f6 <__multadd+0x7a>
 80116b0:	68a3      	ldr	r3, [r4, #8]
 80116b2:	42bb      	cmp	r3, r7
 80116b4:	dc19      	bgt.n	80116ea <__multadd+0x6e>
 80116b6:	6861      	ldr	r1, [r4, #4]
 80116b8:	9801      	ldr	r0, [sp, #4]
 80116ba:	3101      	adds	r1, #1
 80116bc:	f7ff ff76 	bl	80115ac <_Balloc>
 80116c0:	1e06      	subs	r6, r0, #0
 80116c2:	d105      	bne.n	80116d0 <__multadd+0x54>
 80116c4:	0032      	movs	r2, r6
 80116c6:	21ba      	movs	r1, #186	; 0xba
 80116c8:	4b0c      	ldr	r3, [pc, #48]	; (80116fc <__multadd+0x80>)
 80116ca:	480d      	ldr	r0, [pc, #52]	; (8011700 <__multadd+0x84>)
 80116cc:	f7fe fc3c 	bl	800ff48 <__assert_func>
 80116d0:	0021      	movs	r1, r4
 80116d2:	6922      	ldr	r2, [r4, #16]
 80116d4:	310c      	adds	r1, #12
 80116d6:	3202      	adds	r2, #2
 80116d8:	0092      	lsls	r2, r2, #2
 80116da:	300c      	adds	r0, #12
 80116dc:	f7fe fc20 	bl	800ff20 <memcpy>
 80116e0:	0021      	movs	r1, r4
 80116e2:	9801      	ldr	r0, [sp, #4]
 80116e4:	f7ff ffa6 	bl	8011634 <_Bfree>
 80116e8:	0034      	movs	r4, r6
 80116ea:	1d3b      	adds	r3, r7, #4
 80116ec:	009b      	lsls	r3, r3, #2
 80116ee:	18e3      	adds	r3, r4, r3
 80116f0:	605d      	str	r5, [r3, #4]
 80116f2:	1c7b      	adds	r3, r7, #1
 80116f4:	6123      	str	r3, [r4, #16]
 80116f6:	0020      	movs	r0, r4
 80116f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80116fa:	46c0      	nop			; (mov r8, r8)
 80116fc:	08013e22 	.word	0x08013e22
 8011700:	08013e93 	.word	0x08013e93

08011704 <__s2b>:
 8011704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011706:	0006      	movs	r6, r0
 8011708:	0018      	movs	r0, r3
 801170a:	000c      	movs	r4, r1
 801170c:	3008      	adds	r0, #8
 801170e:	2109      	movs	r1, #9
 8011710:	9301      	str	r3, [sp, #4]
 8011712:	0015      	movs	r5, r2
 8011714:	f7ee fda8 	bl	8000268 <__divsi3>
 8011718:	2301      	movs	r3, #1
 801171a:	2100      	movs	r1, #0
 801171c:	4283      	cmp	r3, r0
 801171e:	db0a      	blt.n	8011736 <__s2b+0x32>
 8011720:	0030      	movs	r0, r6
 8011722:	f7ff ff43 	bl	80115ac <_Balloc>
 8011726:	1e01      	subs	r1, r0, #0
 8011728:	d108      	bne.n	801173c <__s2b+0x38>
 801172a:	000a      	movs	r2, r1
 801172c:	4b19      	ldr	r3, [pc, #100]	; (8011794 <__s2b+0x90>)
 801172e:	481a      	ldr	r0, [pc, #104]	; (8011798 <__s2b+0x94>)
 8011730:	31d3      	adds	r1, #211	; 0xd3
 8011732:	f7fe fc09 	bl	800ff48 <__assert_func>
 8011736:	005b      	lsls	r3, r3, #1
 8011738:	3101      	adds	r1, #1
 801173a:	e7ef      	b.n	801171c <__s2b+0x18>
 801173c:	9b08      	ldr	r3, [sp, #32]
 801173e:	6143      	str	r3, [r0, #20]
 8011740:	2301      	movs	r3, #1
 8011742:	6103      	str	r3, [r0, #16]
 8011744:	2d09      	cmp	r5, #9
 8011746:	dd18      	ble.n	801177a <__s2b+0x76>
 8011748:	0023      	movs	r3, r4
 801174a:	3309      	adds	r3, #9
 801174c:	001f      	movs	r7, r3
 801174e:	9300      	str	r3, [sp, #0]
 8011750:	1964      	adds	r4, r4, r5
 8011752:	783b      	ldrb	r3, [r7, #0]
 8011754:	220a      	movs	r2, #10
 8011756:	0030      	movs	r0, r6
 8011758:	3b30      	subs	r3, #48	; 0x30
 801175a:	f7ff ff8f 	bl	801167c <__multadd>
 801175e:	3701      	adds	r7, #1
 8011760:	0001      	movs	r1, r0
 8011762:	42a7      	cmp	r7, r4
 8011764:	d1f5      	bne.n	8011752 <__s2b+0x4e>
 8011766:	002c      	movs	r4, r5
 8011768:	9b00      	ldr	r3, [sp, #0]
 801176a:	3c08      	subs	r4, #8
 801176c:	191c      	adds	r4, r3, r4
 801176e:	002f      	movs	r7, r5
 8011770:	9b01      	ldr	r3, [sp, #4]
 8011772:	429f      	cmp	r7, r3
 8011774:	db04      	blt.n	8011780 <__s2b+0x7c>
 8011776:	0008      	movs	r0, r1
 8011778:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801177a:	2509      	movs	r5, #9
 801177c:	340a      	adds	r4, #10
 801177e:	e7f6      	b.n	801176e <__s2b+0x6a>
 8011780:	1b63      	subs	r3, r4, r5
 8011782:	5ddb      	ldrb	r3, [r3, r7]
 8011784:	220a      	movs	r2, #10
 8011786:	0030      	movs	r0, r6
 8011788:	3b30      	subs	r3, #48	; 0x30
 801178a:	f7ff ff77 	bl	801167c <__multadd>
 801178e:	3701      	adds	r7, #1
 8011790:	0001      	movs	r1, r0
 8011792:	e7ed      	b.n	8011770 <__s2b+0x6c>
 8011794:	08013e22 	.word	0x08013e22
 8011798:	08013e93 	.word	0x08013e93

0801179c <__hi0bits>:
 801179c:	0003      	movs	r3, r0
 801179e:	0c02      	lsrs	r2, r0, #16
 80117a0:	2000      	movs	r0, #0
 80117a2:	4282      	cmp	r2, r0
 80117a4:	d101      	bne.n	80117aa <__hi0bits+0xe>
 80117a6:	041b      	lsls	r3, r3, #16
 80117a8:	3010      	adds	r0, #16
 80117aa:	0e1a      	lsrs	r2, r3, #24
 80117ac:	d101      	bne.n	80117b2 <__hi0bits+0x16>
 80117ae:	3008      	adds	r0, #8
 80117b0:	021b      	lsls	r3, r3, #8
 80117b2:	0f1a      	lsrs	r2, r3, #28
 80117b4:	d101      	bne.n	80117ba <__hi0bits+0x1e>
 80117b6:	3004      	adds	r0, #4
 80117b8:	011b      	lsls	r3, r3, #4
 80117ba:	0f9a      	lsrs	r2, r3, #30
 80117bc:	d101      	bne.n	80117c2 <__hi0bits+0x26>
 80117be:	3002      	adds	r0, #2
 80117c0:	009b      	lsls	r3, r3, #2
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	db03      	blt.n	80117ce <__hi0bits+0x32>
 80117c6:	3001      	adds	r0, #1
 80117c8:	005b      	lsls	r3, r3, #1
 80117ca:	d400      	bmi.n	80117ce <__hi0bits+0x32>
 80117cc:	2020      	movs	r0, #32
 80117ce:	4770      	bx	lr

080117d0 <__lo0bits>:
 80117d0:	6803      	ldr	r3, [r0, #0]
 80117d2:	0001      	movs	r1, r0
 80117d4:	2207      	movs	r2, #7
 80117d6:	0018      	movs	r0, r3
 80117d8:	4010      	ands	r0, r2
 80117da:	4213      	tst	r3, r2
 80117dc:	d00d      	beq.n	80117fa <__lo0bits+0x2a>
 80117de:	3a06      	subs	r2, #6
 80117e0:	2000      	movs	r0, #0
 80117e2:	4213      	tst	r3, r2
 80117e4:	d105      	bne.n	80117f2 <__lo0bits+0x22>
 80117e6:	3002      	adds	r0, #2
 80117e8:	4203      	tst	r3, r0
 80117ea:	d003      	beq.n	80117f4 <__lo0bits+0x24>
 80117ec:	40d3      	lsrs	r3, r2
 80117ee:	0010      	movs	r0, r2
 80117f0:	600b      	str	r3, [r1, #0]
 80117f2:	4770      	bx	lr
 80117f4:	089b      	lsrs	r3, r3, #2
 80117f6:	600b      	str	r3, [r1, #0]
 80117f8:	e7fb      	b.n	80117f2 <__lo0bits+0x22>
 80117fa:	b29a      	uxth	r2, r3
 80117fc:	2a00      	cmp	r2, #0
 80117fe:	d101      	bne.n	8011804 <__lo0bits+0x34>
 8011800:	2010      	movs	r0, #16
 8011802:	0c1b      	lsrs	r3, r3, #16
 8011804:	b2da      	uxtb	r2, r3
 8011806:	2a00      	cmp	r2, #0
 8011808:	d101      	bne.n	801180e <__lo0bits+0x3e>
 801180a:	3008      	adds	r0, #8
 801180c:	0a1b      	lsrs	r3, r3, #8
 801180e:	071a      	lsls	r2, r3, #28
 8011810:	d101      	bne.n	8011816 <__lo0bits+0x46>
 8011812:	3004      	adds	r0, #4
 8011814:	091b      	lsrs	r3, r3, #4
 8011816:	079a      	lsls	r2, r3, #30
 8011818:	d101      	bne.n	801181e <__lo0bits+0x4e>
 801181a:	3002      	adds	r0, #2
 801181c:	089b      	lsrs	r3, r3, #2
 801181e:	07da      	lsls	r2, r3, #31
 8011820:	d4e9      	bmi.n	80117f6 <__lo0bits+0x26>
 8011822:	3001      	adds	r0, #1
 8011824:	085b      	lsrs	r3, r3, #1
 8011826:	d1e6      	bne.n	80117f6 <__lo0bits+0x26>
 8011828:	2020      	movs	r0, #32
 801182a:	e7e2      	b.n	80117f2 <__lo0bits+0x22>

0801182c <__i2b>:
 801182c:	b510      	push	{r4, lr}
 801182e:	000c      	movs	r4, r1
 8011830:	2101      	movs	r1, #1
 8011832:	f7ff febb 	bl	80115ac <_Balloc>
 8011836:	2800      	cmp	r0, #0
 8011838:	d107      	bne.n	801184a <__i2b+0x1e>
 801183a:	2146      	movs	r1, #70	; 0x46
 801183c:	4c05      	ldr	r4, [pc, #20]	; (8011854 <__i2b+0x28>)
 801183e:	0002      	movs	r2, r0
 8011840:	4b05      	ldr	r3, [pc, #20]	; (8011858 <__i2b+0x2c>)
 8011842:	0020      	movs	r0, r4
 8011844:	31ff      	adds	r1, #255	; 0xff
 8011846:	f7fe fb7f 	bl	800ff48 <__assert_func>
 801184a:	2301      	movs	r3, #1
 801184c:	6144      	str	r4, [r0, #20]
 801184e:	6103      	str	r3, [r0, #16]
 8011850:	bd10      	pop	{r4, pc}
 8011852:	46c0      	nop			; (mov r8, r8)
 8011854:	08013e93 	.word	0x08013e93
 8011858:	08013e22 	.word	0x08013e22

0801185c <__multiply>:
 801185c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801185e:	0015      	movs	r5, r2
 8011860:	690a      	ldr	r2, [r1, #16]
 8011862:	692b      	ldr	r3, [r5, #16]
 8011864:	000c      	movs	r4, r1
 8011866:	b08b      	sub	sp, #44	; 0x2c
 8011868:	429a      	cmp	r2, r3
 801186a:	da01      	bge.n	8011870 <__multiply+0x14>
 801186c:	002c      	movs	r4, r5
 801186e:	000d      	movs	r5, r1
 8011870:	6927      	ldr	r7, [r4, #16]
 8011872:	692e      	ldr	r6, [r5, #16]
 8011874:	6861      	ldr	r1, [r4, #4]
 8011876:	19bb      	adds	r3, r7, r6
 8011878:	9303      	str	r3, [sp, #12]
 801187a:	68a3      	ldr	r3, [r4, #8]
 801187c:	19ba      	adds	r2, r7, r6
 801187e:	4293      	cmp	r3, r2
 8011880:	da00      	bge.n	8011884 <__multiply+0x28>
 8011882:	3101      	adds	r1, #1
 8011884:	f7ff fe92 	bl	80115ac <_Balloc>
 8011888:	9002      	str	r0, [sp, #8]
 801188a:	2800      	cmp	r0, #0
 801188c:	d106      	bne.n	801189c <__multiply+0x40>
 801188e:	21b1      	movs	r1, #177	; 0xb1
 8011890:	4b48      	ldr	r3, [pc, #288]	; (80119b4 <__multiply+0x158>)
 8011892:	4849      	ldr	r0, [pc, #292]	; (80119b8 <__multiply+0x15c>)
 8011894:	9a02      	ldr	r2, [sp, #8]
 8011896:	0049      	lsls	r1, r1, #1
 8011898:	f7fe fb56 	bl	800ff48 <__assert_func>
 801189c:	9b02      	ldr	r3, [sp, #8]
 801189e:	2200      	movs	r2, #0
 80118a0:	3314      	adds	r3, #20
 80118a2:	469c      	mov	ip, r3
 80118a4:	19bb      	adds	r3, r7, r6
 80118a6:	009b      	lsls	r3, r3, #2
 80118a8:	4463      	add	r3, ip
 80118aa:	9304      	str	r3, [sp, #16]
 80118ac:	4663      	mov	r3, ip
 80118ae:	9904      	ldr	r1, [sp, #16]
 80118b0:	428b      	cmp	r3, r1
 80118b2:	d32a      	bcc.n	801190a <__multiply+0xae>
 80118b4:	0023      	movs	r3, r4
 80118b6:	00bf      	lsls	r7, r7, #2
 80118b8:	3314      	adds	r3, #20
 80118ba:	3514      	adds	r5, #20
 80118bc:	9308      	str	r3, [sp, #32]
 80118be:	00b6      	lsls	r6, r6, #2
 80118c0:	19db      	adds	r3, r3, r7
 80118c2:	9305      	str	r3, [sp, #20]
 80118c4:	19ab      	adds	r3, r5, r6
 80118c6:	9309      	str	r3, [sp, #36]	; 0x24
 80118c8:	2304      	movs	r3, #4
 80118ca:	9306      	str	r3, [sp, #24]
 80118cc:	0023      	movs	r3, r4
 80118ce:	9a05      	ldr	r2, [sp, #20]
 80118d0:	3315      	adds	r3, #21
 80118d2:	9501      	str	r5, [sp, #4]
 80118d4:	429a      	cmp	r2, r3
 80118d6:	d305      	bcc.n	80118e4 <__multiply+0x88>
 80118d8:	1b13      	subs	r3, r2, r4
 80118da:	3b15      	subs	r3, #21
 80118dc:	089b      	lsrs	r3, r3, #2
 80118de:	3301      	adds	r3, #1
 80118e0:	009b      	lsls	r3, r3, #2
 80118e2:	9306      	str	r3, [sp, #24]
 80118e4:	9b01      	ldr	r3, [sp, #4]
 80118e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80118e8:	4293      	cmp	r3, r2
 80118ea:	d310      	bcc.n	801190e <__multiply+0xb2>
 80118ec:	9b03      	ldr	r3, [sp, #12]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	dd05      	ble.n	80118fe <__multiply+0xa2>
 80118f2:	9b04      	ldr	r3, [sp, #16]
 80118f4:	3b04      	subs	r3, #4
 80118f6:	9304      	str	r3, [sp, #16]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d056      	beq.n	80119ac <__multiply+0x150>
 80118fe:	9b02      	ldr	r3, [sp, #8]
 8011900:	9a03      	ldr	r2, [sp, #12]
 8011902:	0018      	movs	r0, r3
 8011904:	611a      	str	r2, [r3, #16]
 8011906:	b00b      	add	sp, #44	; 0x2c
 8011908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801190a:	c304      	stmia	r3!, {r2}
 801190c:	e7cf      	b.n	80118ae <__multiply+0x52>
 801190e:	9b01      	ldr	r3, [sp, #4]
 8011910:	6818      	ldr	r0, [r3, #0]
 8011912:	b280      	uxth	r0, r0
 8011914:	2800      	cmp	r0, #0
 8011916:	d01e      	beq.n	8011956 <__multiply+0xfa>
 8011918:	4667      	mov	r7, ip
 801191a:	2500      	movs	r5, #0
 801191c:	9e08      	ldr	r6, [sp, #32]
 801191e:	ce02      	ldmia	r6!, {r1}
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	9307      	str	r3, [sp, #28]
 8011924:	b28b      	uxth	r3, r1
 8011926:	4343      	muls	r3, r0
 8011928:	001a      	movs	r2, r3
 801192a:	466b      	mov	r3, sp
 801192c:	8b9b      	ldrh	r3, [r3, #28]
 801192e:	18d3      	adds	r3, r2, r3
 8011930:	195b      	adds	r3, r3, r5
 8011932:	0c0d      	lsrs	r5, r1, #16
 8011934:	4345      	muls	r5, r0
 8011936:	9a07      	ldr	r2, [sp, #28]
 8011938:	0c11      	lsrs	r1, r2, #16
 801193a:	1869      	adds	r1, r5, r1
 801193c:	0c1a      	lsrs	r2, r3, #16
 801193e:	188a      	adds	r2, r1, r2
 8011940:	b29b      	uxth	r3, r3
 8011942:	0c15      	lsrs	r5, r2, #16
 8011944:	0412      	lsls	r2, r2, #16
 8011946:	431a      	orrs	r2, r3
 8011948:	9b05      	ldr	r3, [sp, #20]
 801194a:	c704      	stmia	r7!, {r2}
 801194c:	42b3      	cmp	r3, r6
 801194e:	d8e6      	bhi.n	801191e <__multiply+0xc2>
 8011950:	4663      	mov	r3, ip
 8011952:	9a06      	ldr	r2, [sp, #24]
 8011954:	509d      	str	r5, [r3, r2]
 8011956:	9b01      	ldr	r3, [sp, #4]
 8011958:	6818      	ldr	r0, [r3, #0]
 801195a:	0c00      	lsrs	r0, r0, #16
 801195c:	d020      	beq.n	80119a0 <__multiply+0x144>
 801195e:	4663      	mov	r3, ip
 8011960:	0025      	movs	r5, r4
 8011962:	4661      	mov	r1, ip
 8011964:	2700      	movs	r7, #0
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	3514      	adds	r5, #20
 801196a:	682a      	ldr	r2, [r5, #0]
 801196c:	680e      	ldr	r6, [r1, #0]
 801196e:	b292      	uxth	r2, r2
 8011970:	4342      	muls	r2, r0
 8011972:	0c36      	lsrs	r6, r6, #16
 8011974:	1992      	adds	r2, r2, r6
 8011976:	19d2      	adds	r2, r2, r7
 8011978:	0416      	lsls	r6, r2, #16
 801197a:	b29b      	uxth	r3, r3
 801197c:	431e      	orrs	r6, r3
 801197e:	600e      	str	r6, [r1, #0]
 8011980:	cd40      	ldmia	r5!, {r6}
 8011982:	684b      	ldr	r3, [r1, #4]
 8011984:	0c36      	lsrs	r6, r6, #16
 8011986:	4346      	muls	r6, r0
 8011988:	b29b      	uxth	r3, r3
 801198a:	0c12      	lsrs	r2, r2, #16
 801198c:	18f3      	adds	r3, r6, r3
 801198e:	189b      	adds	r3, r3, r2
 8011990:	9a05      	ldr	r2, [sp, #20]
 8011992:	0c1f      	lsrs	r7, r3, #16
 8011994:	3104      	adds	r1, #4
 8011996:	42aa      	cmp	r2, r5
 8011998:	d8e7      	bhi.n	801196a <__multiply+0x10e>
 801199a:	4662      	mov	r2, ip
 801199c:	9906      	ldr	r1, [sp, #24]
 801199e:	5053      	str	r3, [r2, r1]
 80119a0:	9b01      	ldr	r3, [sp, #4]
 80119a2:	3304      	adds	r3, #4
 80119a4:	9301      	str	r3, [sp, #4]
 80119a6:	2304      	movs	r3, #4
 80119a8:	449c      	add	ip, r3
 80119aa:	e79b      	b.n	80118e4 <__multiply+0x88>
 80119ac:	9b03      	ldr	r3, [sp, #12]
 80119ae:	3b01      	subs	r3, #1
 80119b0:	9303      	str	r3, [sp, #12]
 80119b2:	e79b      	b.n	80118ec <__multiply+0x90>
 80119b4:	08013e22 	.word	0x08013e22
 80119b8:	08013e93 	.word	0x08013e93

080119bc <__pow5mult>:
 80119bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119be:	2303      	movs	r3, #3
 80119c0:	0015      	movs	r5, r2
 80119c2:	0007      	movs	r7, r0
 80119c4:	000e      	movs	r6, r1
 80119c6:	401a      	ands	r2, r3
 80119c8:	421d      	tst	r5, r3
 80119ca:	d008      	beq.n	80119de <__pow5mult+0x22>
 80119cc:	4925      	ldr	r1, [pc, #148]	; (8011a64 <__pow5mult+0xa8>)
 80119ce:	3a01      	subs	r2, #1
 80119d0:	0092      	lsls	r2, r2, #2
 80119d2:	5852      	ldr	r2, [r2, r1]
 80119d4:	2300      	movs	r3, #0
 80119d6:	0031      	movs	r1, r6
 80119d8:	f7ff fe50 	bl	801167c <__multadd>
 80119dc:	0006      	movs	r6, r0
 80119de:	10ad      	asrs	r5, r5, #2
 80119e0:	d03d      	beq.n	8011a5e <__pow5mult+0xa2>
 80119e2:	69fc      	ldr	r4, [r7, #28]
 80119e4:	2c00      	cmp	r4, #0
 80119e6:	d10f      	bne.n	8011a08 <__pow5mult+0x4c>
 80119e8:	2010      	movs	r0, #16
 80119ea:	f7ff fd0f 	bl	801140c <malloc>
 80119ee:	1e02      	subs	r2, r0, #0
 80119f0:	61f8      	str	r0, [r7, #28]
 80119f2:	d105      	bne.n	8011a00 <__pow5mult+0x44>
 80119f4:	21b4      	movs	r1, #180	; 0xb4
 80119f6:	4b1c      	ldr	r3, [pc, #112]	; (8011a68 <__pow5mult+0xac>)
 80119f8:	481c      	ldr	r0, [pc, #112]	; (8011a6c <__pow5mult+0xb0>)
 80119fa:	31ff      	adds	r1, #255	; 0xff
 80119fc:	f7fe faa4 	bl	800ff48 <__assert_func>
 8011a00:	6044      	str	r4, [r0, #4]
 8011a02:	6084      	str	r4, [r0, #8]
 8011a04:	6004      	str	r4, [r0, #0]
 8011a06:	60c4      	str	r4, [r0, #12]
 8011a08:	69fb      	ldr	r3, [r7, #28]
 8011a0a:	689c      	ldr	r4, [r3, #8]
 8011a0c:	9301      	str	r3, [sp, #4]
 8011a0e:	2c00      	cmp	r4, #0
 8011a10:	d108      	bne.n	8011a24 <__pow5mult+0x68>
 8011a12:	0038      	movs	r0, r7
 8011a14:	4916      	ldr	r1, [pc, #88]	; (8011a70 <__pow5mult+0xb4>)
 8011a16:	f7ff ff09 	bl	801182c <__i2b>
 8011a1a:	9b01      	ldr	r3, [sp, #4]
 8011a1c:	0004      	movs	r4, r0
 8011a1e:	6098      	str	r0, [r3, #8]
 8011a20:	2300      	movs	r3, #0
 8011a22:	6003      	str	r3, [r0, #0]
 8011a24:	2301      	movs	r3, #1
 8011a26:	421d      	tst	r5, r3
 8011a28:	d00a      	beq.n	8011a40 <__pow5mult+0x84>
 8011a2a:	0031      	movs	r1, r6
 8011a2c:	0022      	movs	r2, r4
 8011a2e:	0038      	movs	r0, r7
 8011a30:	f7ff ff14 	bl	801185c <__multiply>
 8011a34:	0031      	movs	r1, r6
 8011a36:	9001      	str	r0, [sp, #4]
 8011a38:	0038      	movs	r0, r7
 8011a3a:	f7ff fdfb 	bl	8011634 <_Bfree>
 8011a3e:	9e01      	ldr	r6, [sp, #4]
 8011a40:	106d      	asrs	r5, r5, #1
 8011a42:	d00c      	beq.n	8011a5e <__pow5mult+0xa2>
 8011a44:	6820      	ldr	r0, [r4, #0]
 8011a46:	2800      	cmp	r0, #0
 8011a48:	d107      	bne.n	8011a5a <__pow5mult+0x9e>
 8011a4a:	0022      	movs	r2, r4
 8011a4c:	0021      	movs	r1, r4
 8011a4e:	0038      	movs	r0, r7
 8011a50:	f7ff ff04 	bl	801185c <__multiply>
 8011a54:	2300      	movs	r3, #0
 8011a56:	6020      	str	r0, [r4, #0]
 8011a58:	6003      	str	r3, [r0, #0]
 8011a5a:	0004      	movs	r4, r0
 8011a5c:	e7e2      	b.n	8011a24 <__pow5mult+0x68>
 8011a5e:	0030      	movs	r0, r6
 8011a60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011a62:	46c0      	nop			; (mov r8, r8)
 8011a64:	08013fe0 	.word	0x08013fe0
 8011a68:	08013d08 	.word	0x08013d08
 8011a6c:	08013e93 	.word	0x08013e93
 8011a70:	00000271 	.word	0x00000271

08011a74 <__lshift>:
 8011a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a76:	000c      	movs	r4, r1
 8011a78:	0017      	movs	r7, r2
 8011a7a:	6923      	ldr	r3, [r4, #16]
 8011a7c:	1155      	asrs	r5, r2, #5
 8011a7e:	b087      	sub	sp, #28
 8011a80:	18eb      	adds	r3, r5, r3
 8011a82:	9302      	str	r3, [sp, #8]
 8011a84:	3301      	adds	r3, #1
 8011a86:	9301      	str	r3, [sp, #4]
 8011a88:	6849      	ldr	r1, [r1, #4]
 8011a8a:	68a3      	ldr	r3, [r4, #8]
 8011a8c:	9004      	str	r0, [sp, #16]
 8011a8e:	9a01      	ldr	r2, [sp, #4]
 8011a90:	4293      	cmp	r3, r2
 8011a92:	db10      	blt.n	8011ab6 <__lshift+0x42>
 8011a94:	9804      	ldr	r0, [sp, #16]
 8011a96:	f7ff fd89 	bl	80115ac <_Balloc>
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	0002      	movs	r2, r0
 8011a9e:	0006      	movs	r6, r0
 8011aa0:	0019      	movs	r1, r3
 8011aa2:	3214      	adds	r2, #20
 8011aa4:	4298      	cmp	r0, r3
 8011aa6:	d10c      	bne.n	8011ac2 <__lshift+0x4e>
 8011aa8:	31df      	adds	r1, #223	; 0xdf
 8011aaa:	0032      	movs	r2, r6
 8011aac:	4b26      	ldr	r3, [pc, #152]	; (8011b48 <__lshift+0xd4>)
 8011aae:	4827      	ldr	r0, [pc, #156]	; (8011b4c <__lshift+0xd8>)
 8011ab0:	31ff      	adds	r1, #255	; 0xff
 8011ab2:	f7fe fa49 	bl	800ff48 <__assert_func>
 8011ab6:	3101      	adds	r1, #1
 8011ab8:	005b      	lsls	r3, r3, #1
 8011aba:	e7e8      	b.n	8011a8e <__lshift+0x1a>
 8011abc:	0098      	lsls	r0, r3, #2
 8011abe:	5011      	str	r1, [r2, r0]
 8011ac0:	3301      	adds	r3, #1
 8011ac2:	42ab      	cmp	r3, r5
 8011ac4:	dbfa      	blt.n	8011abc <__lshift+0x48>
 8011ac6:	43eb      	mvns	r3, r5
 8011ac8:	17db      	asrs	r3, r3, #31
 8011aca:	401d      	ands	r5, r3
 8011acc:	211f      	movs	r1, #31
 8011ace:	0023      	movs	r3, r4
 8011ad0:	0038      	movs	r0, r7
 8011ad2:	00ad      	lsls	r5, r5, #2
 8011ad4:	1955      	adds	r5, r2, r5
 8011ad6:	6922      	ldr	r2, [r4, #16]
 8011ad8:	3314      	adds	r3, #20
 8011ada:	0092      	lsls	r2, r2, #2
 8011adc:	4008      	ands	r0, r1
 8011ade:	4684      	mov	ip, r0
 8011ae0:	189a      	adds	r2, r3, r2
 8011ae2:	420f      	tst	r7, r1
 8011ae4:	d02a      	beq.n	8011b3c <__lshift+0xc8>
 8011ae6:	3101      	adds	r1, #1
 8011ae8:	1a09      	subs	r1, r1, r0
 8011aea:	9105      	str	r1, [sp, #20]
 8011aec:	2100      	movs	r1, #0
 8011aee:	9503      	str	r5, [sp, #12]
 8011af0:	4667      	mov	r7, ip
 8011af2:	6818      	ldr	r0, [r3, #0]
 8011af4:	40b8      	lsls	r0, r7
 8011af6:	4308      	orrs	r0, r1
 8011af8:	9903      	ldr	r1, [sp, #12]
 8011afa:	c101      	stmia	r1!, {r0}
 8011afc:	9103      	str	r1, [sp, #12]
 8011afe:	9805      	ldr	r0, [sp, #20]
 8011b00:	cb02      	ldmia	r3!, {r1}
 8011b02:	40c1      	lsrs	r1, r0
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d8f3      	bhi.n	8011af0 <__lshift+0x7c>
 8011b08:	0020      	movs	r0, r4
 8011b0a:	3015      	adds	r0, #21
 8011b0c:	2304      	movs	r3, #4
 8011b0e:	4282      	cmp	r2, r0
 8011b10:	d304      	bcc.n	8011b1c <__lshift+0xa8>
 8011b12:	1b13      	subs	r3, r2, r4
 8011b14:	3b15      	subs	r3, #21
 8011b16:	089b      	lsrs	r3, r3, #2
 8011b18:	3301      	adds	r3, #1
 8011b1a:	009b      	lsls	r3, r3, #2
 8011b1c:	50e9      	str	r1, [r5, r3]
 8011b1e:	2900      	cmp	r1, #0
 8011b20:	d002      	beq.n	8011b28 <__lshift+0xb4>
 8011b22:	9b02      	ldr	r3, [sp, #8]
 8011b24:	3302      	adds	r3, #2
 8011b26:	9301      	str	r3, [sp, #4]
 8011b28:	9b01      	ldr	r3, [sp, #4]
 8011b2a:	9804      	ldr	r0, [sp, #16]
 8011b2c:	3b01      	subs	r3, #1
 8011b2e:	0021      	movs	r1, r4
 8011b30:	6133      	str	r3, [r6, #16]
 8011b32:	f7ff fd7f 	bl	8011634 <_Bfree>
 8011b36:	0030      	movs	r0, r6
 8011b38:	b007      	add	sp, #28
 8011b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b3c:	cb02      	ldmia	r3!, {r1}
 8011b3e:	c502      	stmia	r5!, {r1}
 8011b40:	429a      	cmp	r2, r3
 8011b42:	d8fb      	bhi.n	8011b3c <__lshift+0xc8>
 8011b44:	e7f0      	b.n	8011b28 <__lshift+0xb4>
 8011b46:	46c0      	nop			; (mov r8, r8)
 8011b48:	08013e22 	.word	0x08013e22
 8011b4c:	08013e93 	.word	0x08013e93

08011b50 <__mcmp>:
 8011b50:	b530      	push	{r4, r5, lr}
 8011b52:	690b      	ldr	r3, [r1, #16]
 8011b54:	6904      	ldr	r4, [r0, #16]
 8011b56:	0002      	movs	r2, r0
 8011b58:	1ae0      	subs	r0, r4, r3
 8011b5a:	429c      	cmp	r4, r3
 8011b5c:	d10e      	bne.n	8011b7c <__mcmp+0x2c>
 8011b5e:	3214      	adds	r2, #20
 8011b60:	009b      	lsls	r3, r3, #2
 8011b62:	3114      	adds	r1, #20
 8011b64:	0014      	movs	r4, r2
 8011b66:	18c9      	adds	r1, r1, r3
 8011b68:	18d2      	adds	r2, r2, r3
 8011b6a:	3a04      	subs	r2, #4
 8011b6c:	3904      	subs	r1, #4
 8011b6e:	6815      	ldr	r5, [r2, #0]
 8011b70:	680b      	ldr	r3, [r1, #0]
 8011b72:	429d      	cmp	r5, r3
 8011b74:	d003      	beq.n	8011b7e <__mcmp+0x2e>
 8011b76:	2001      	movs	r0, #1
 8011b78:	429d      	cmp	r5, r3
 8011b7a:	d303      	bcc.n	8011b84 <__mcmp+0x34>
 8011b7c:	bd30      	pop	{r4, r5, pc}
 8011b7e:	4294      	cmp	r4, r2
 8011b80:	d3f3      	bcc.n	8011b6a <__mcmp+0x1a>
 8011b82:	e7fb      	b.n	8011b7c <__mcmp+0x2c>
 8011b84:	4240      	negs	r0, r0
 8011b86:	e7f9      	b.n	8011b7c <__mcmp+0x2c>

08011b88 <__mdiff>:
 8011b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b8a:	000e      	movs	r6, r1
 8011b8c:	0007      	movs	r7, r0
 8011b8e:	0011      	movs	r1, r2
 8011b90:	0030      	movs	r0, r6
 8011b92:	b087      	sub	sp, #28
 8011b94:	0014      	movs	r4, r2
 8011b96:	f7ff ffdb 	bl	8011b50 <__mcmp>
 8011b9a:	1e05      	subs	r5, r0, #0
 8011b9c:	d110      	bne.n	8011bc0 <__mdiff+0x38>
 8011b9e:	0001      	movs	r1, r0
 8011ba0:	0038      	movs	r0, r7
 8011ba2:	f7ff fd03 	bl	80115ac <_Balloc>
 8011ba6:	1e02      	subs	r2, r0, #0
 8011ba8:	d104      	bne.n	8011bb4 <__mdiff+0x2c>
 8011baa:	4b3f      	ldr	r3, [pc, #252]	; (8011ca8 <__mdiff+0x120>)
 8011bac:	483f      	ldr	r0, [pc, #252]	; (8011cac <__mdiff+0x124>)
 8011bae:	4940      	ldr	r1, [pc, #256]	; (8011cb0 <__mdiff+0x128>)
 8011bb0:	f7fe f9ca 	bl	800ff48 <__assert_func>
 8011bb4:	2301      	movs	r3, #1
 8011bb6:	6145      	str	r5, [r0, #20]
 8011bb8:	6103      	str	r3, [r0, #16]
 8011bba:	0010      	movs	r0, r2
 8011bbc:	b007      	add	sp, #28
 8011bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	9301      	str	r3, [sp, #4]
 8011bc4:	2800      	cmp	r0, #0
 8011bc6:	db04      	blt.n	8011bd2 <__mdiff+0x4a>
 8011bc8:	0023      	movs	r3, r4
 8011bca:	0034      	movs	r4, r6
 8011bcc:	001e      	movs	r6, r3
 8011bce:	2300      	movs	r3, #0
 8011bd0:	9301      	str	r3, [sp, #4]
 8011bd2:	0038      	movs	r0, r7
 8011bd4:	6861      	ldr	r1, [r4, #4]
 8011bd6:	f7ff fce9 	bl	80115ac <_Balloc>
 8011bda:	1e02      	subs	r2, r0, #0
 8011bdc:	d103      	bne.n	8011be6 <__mdiff+0x5e>
 8011bde:	4b32      	ldr	r3, [pc, #200]	; (8011ca8 <__mdiff+0x120>)
 8011be0:	4832      	ldr	r0, [pc, #200]	; (8011cac <__mdiff+0x124>)
 8011be2:	4934      	ldr	r1, [pc, #208]	; (8011cb4 <__mdiff+0x12c>)
 8011be4:	e7e4      	b.n	8011bb0 <__mdiff+0x28>
 8011be6:	9b01      	ldr	r3, [sp, #4]
 8011be8:	2700      	movs	r7, #0
 8011bea:	60c3      	str	r3, [r0, #12]
 8011bec:	6920      	ldr	r0, [r4, #16]
 8011bee:	3414      	adds	r4, #20
 8011bf0:	0083      	lsls	r3, r0, #2
 8011bf2:	18e3      	adds	r3, r4, r3
 8011bf4:	0021      	movs	r1, r4
 8011bf6:	9401      	str	r4, [sp, #4]
 8011bf8:	0034      	movs	r4, r6
 8011bfa:	9302      	str	r3, [sp, #8]
 8011bfc:	6933      	ldr	r3, [r6, #16]
 8011bfe:	3414      	adds	r4, #20
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	18e3      	adds	r3, r4, r3
 8011c04:	9303      	str	r3, [sp, #12]
 8011c06:	0013      	movs	r3, r2
 8011c08:	3314      	adds	r3, #20
 8011c0a:	469c      	mov	ip, r3
 8011c0c:	9305      	str	r3, [sp, #20]
 8011c0e:	9104      	str	r1, [sp, #16]
 8011c10:	9b04      	ldr	r3, [sp, #16]
 8011c12:	cc02      	ldmia	r4!, {r1}
 8011c14:	cb20      	ldmia	r3!, {r5}
 8011c16:	9304      	str	r3, [sp, #16]
 8011c18:	b2ab      	uxth	r3, r5
 8011c1a:	19df      	adds	r7, r3, r7
 8011c1c:	b28b      	uxth	r3, r1
 8011c1e:	1afb      	subs	r3, r7, r3
 8011c20:	0c09      	lsrs	r1, r1, #16
 8011c22:	0c2d      	lsrs	r5, r5, #16
 8011c24:	1a6d      	subs	r5, r5, r1
 8011c26:	1419      	asrs	r1, r3, #16
 8011c28:	1869      	adds	r1, r5, r1
 8011c2a:	b29b      	uxth	r3, r3
 8011c2c:	140f      	asrs	r7, r1, #16
 8011c2e:	0409      	lsls	r1, r1, #16
 8011c30:	4319      	orrs	r1, r3
 8011c32:	4663      	mov	r3, ip
 8011c34:	c302      	stmia	r3!, {r1}
 8011c36:	469c      	mov	ip, r3
 8011c38:	9b03      	ldr	r3, [sp, #12]
 8011c3a:	42a3      	cmp	r3, r4
 8011c3c:	d8e8      	bhi.n	8011c10 <__mdiff+0x88>
 8011c3e:	0031      	movs	r1, r6
 8011c40:	9c03      	ldr	r4, [sp, #12]
 8011c42:	3115      	adds	r1, #21
 8011c44:	2304      	movs	r3, #4
 8011c46:	428c      	cmp	r4, r1
 8011c48:	d304      	bcc.n	8011c54 <__mdiff+0xcc>
 8011c4a:	1ba3      	subs	r3, r4, r6
 8011c4c:	3b15      	subs	r3, #21
 8011c4e:	089b      	lsrs	r3, r3, #2
 8011c50:	3301      	adds	r3, #1
 8011c52:	009b      	lsls	r3, r3, #2
 8011c54:	9901      	ldr	r1, [sp, #4]
 8011c56:	18cd      	adds	r5, r1, r3
 8011c58:	9905      	ldr	r1, [sp, #20]
 8011c5a:	002e      	movs	r6, r5
 8011c5c:	18cb      	adds	r3, r1, r3
 8011c5e:	469c      	mov	ip, r3
 8011c60:	9902      	ldr	r1, [sp, #8]
 8011c62:	428e      	cmp	r6, r1
 8011c64:	d310      	bcc.n	8011c88 <__mdiff+0x100>
 8011c66:	9e02      	ldr	r6, [sp, #8]
 8011c68:	1ee9      	subs	r1, r5, #3
 8011c6a:	2400      	movs	r4, #0
 8011c6c:	428e      	cmp	r6, r1
 8011c6e:	d304      	bcc.n	8011c7a <__mdiff+0xf2>
 8011c70:	0031      	movs	r1, r6
 8011c72:	3103      	adds	r1, #3
 8011c74:	1b49      	subs	r1, r1, r5
 8011c76:	0889      	lsrs	r1, r1, #2
 8011c78:	008c      	lsls	r4, r1, #2
 8011c7a:	191b      	adds	r3, r3, r4
 8011c7c:	3b04      	subs	r3, #4
 8011c7e:	6819      	ldr	r1, [r3, #0]
 8011c80:	2900      	cmp	r1, #0
 8011c82:	d00f      	beq.n	8011ca4 <__mdiff+0x11c>
 8011c84:	6110      	str	r0, [r2, #16]
 8011c86:	e798      	b.n	8011bba <__mdiff+0x32>
 8011c88:	ce02      	ldmia	r6!, {r1}
 8011c8a:	b28c      	uxth	r4, r1
 8011c8c:	19e4      	adds	r4, r4, r7
 8011c8e:	0c0f      	lsrs	r7, r1, #16
 8011c90:	1421      	asrs	r1, r4, #16
 8011c92:	1879      	adds	r1, r7, r1
 8011c94:	b2a4      	uxth	r4, r4
 8011c96:	140f      	asrs	r7, r1, #16
 8011c98:	0409      	lsls	r1, r1, #16
 8011c9a:	4321      	orrs	r1, r4
 8011c9c:	4664      	mov	r4, ip
 8011c9e:	c402      	stmia	r4!, {r1}
 8011ca0:	46a4      	mov	ip, r4
 8011ca2:	e7dd      	b.n	8011c60 <__mdiff+0xd8>
 8011ca4:	3801      	subs	r0, #1
 8011ca6:	e7e9      	b.n	8011c7c <__mdiff+0xf4>
 8011ca8:	08013e22 	.word	0x08013e22
 8011cac:	08013e93 	.word	0x08013e93
 8011cb0:	00000237 	.word	0x00000237
 8011cb4:	00000245 	.word	0x00000245

08011cb8 <__ulp>:
 8011cb8:	2000      	movs	r0, #0
 8011cba:	4b0b      	ldr	r3, [pc, #44]	; (8011ce8 <__ulp+0x30>)
 8011cbc:	4019      	ands	r1, r3
 8011cbe:	4b0b      	ldr	r3, [pc, #44]	; (8011cec <__ulp+0x34>)
 8011cc0:	18c9      	adds	r1, r1, r3
 8011cc2:	4281      	cmp	r1, r0
 8011cc4:	dc06      	bgt.n	8011cd4 <__ulp+0x1c>
 8011cc6:	4249      	negs	r1, r1
 8011cc8:	150b      	asrs	r3, r1, #20
 8011cca:	2b13      	cmp	r3, #19
 8011ccc:	dc03      	bgt.n	8011cd6 <__ulp+0x1e>
 8011cce:	2180      	movs	r1, #128	; 0x80
 8011cd0:	0309      	lsls	r1, r1, #12
 8011cd2:	4119      	asrs	r1, r3
 8011cd4:	4770      	bx	lr
 8011cd6:	3b14      	subs	r3, #20
 8011cd8:	2001      	movs	r0, #1
 8011cda:	2b1e      	cmp	r3, #30
 8011cdc:	dc02      	bgt.n	8011ce4 <__ulp+0x2c>
 8011cde:	2080      	movs	r0, #128	; 0x80
 8011ce0:	0600      	lsls	r0, r0, #24
 8011ce2:	40d8      	lsrs	r0, r3
 8011ce4:	2100      	movs	r1, #0
 8011ce6:	e7f5      	b.n	8011cd4 <__ulp+0x1c>
 8011ce8:	7ff00000 	.word	0x7ff00000
 8011cec:	fcc00000 	.word	0xfcc00000

08011cf0 <__b2d>:
 8011cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011cf2:	0006      	movs	r6, r0
 8011cf4:	6903      	ldr	r3, [r0, #16]
 8011cf6:	3614      	adds	r6, #20
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	18f3      	adds	r3, r6, r3
 8011cfc:	1f1d      	subs	r5, r3, #4
 8011cfe:	682c      	ldr	r4, [r5, #0]
 8011d00:	000f      	movs	r7, r1
 8011d02:	0020      	movs	r0, r4
 8011d04:	9301      	str	r3, [sp, #4]
 8011d06:	f7ff fd49 	bl	801179c <__hi0bits>
 8011d0a:	2220      	movs	r2, #32
 8011d0c:	1a12      	subs	r2, r2, r0
 8011d0e:	603a      	str	r2, [r7, #0]
 8011d10:	0003      	movs	r3, r0
 8011d12:	4a1c      	ldr	r2, [pc, #112]	; (8011d84 <__b2d+0x94>)
 8011d14:	280a      	cmp	r0, #10
 8011d16:	dc15      	bgt.n	8011d44 <__b2d+0x54>
 8011d18:	210b      	movs	r1, #11
 8011d1a:	0027      	movs	r7, r4
 8011d1c:	1a09      	subs	r1, r1, r0
 8011d1e:	40cf      	lsrs	r7, r1
 8011d20:	433a      	orrs	r2, r7
 8011d22:	468c      	mov	ip, r1
 8011d24:	0011      	movs	r1, r2
 8011d26:	2200      	movs	r2, #0
 8011d28:	42ae      	cmp	r6, r5
 8011d2a:	d202      	bcs.n	8011d32 <__b2d+0x42>
 8011d2c:	9a01      	ldr	r2, [sp, #4]
 8011d2e:	3a08      	subs	r2, #8
 8011d30:	6812      	ldr	r2, [r2, #0]
 8011d32:	3315      	adds	r3, #21
 8011d34:	409c      	lsls	r4, r3
 8011d36:	4663      	mov	r3, ip
 8011d38:	0027      	movs	r7, r4
 8011d3a:	40da      	lsrs	r2, r3
 8011d3c:	4317      	orrs	r7, r2
 8011d3e:	0038      	movs	r0, r7
 8011d40:	b003      	add	sp, #12
 8011d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d44:	2700      	movs	r7, #0
 8011d46:	42ae      	cmp	r6, r5
 8011d48:	d202      	bcs.n	8011d50 <__b2d+0x60>
 8011d4a:	9d01      	ldr	r5, [sp, #4]
 8011d4c:	3d08      	subs	r5, #8
 8011d4e:	682f      	ldr	r7, [r5, #0]
 8011d50:	210b      	movs	r1, #11
 8011d52:	4249      	negs	r1, r1
 8011d54:	468c      	mov	ip, r1
 8011d56:	449c      	add	ip, r3
 8011d58:	2b0b      	cmp	r3, #11
 8011d5a:	d010      	beq.n	8011d7e <__b2d+0x8e>
 8011d5c:	4661      	mov	r1, ip
 8011d5e:	2320      	movs	r3, #32
 8011d60:	408c      	lsls	r4, r1
 8011d62:	1a5b      	subs	r3, r3, r1
 8011d64:	0039      	movs	r1, r7
 8011d66:	40d9      	lsrs	r1, r3
 8011d68:	430c      	orrs	r4, r1
 8011d6a:	4322      	orrs	r2, r4
 8011d6c:	0011      	movs	r1, r2
 8011d6e:	2200      	movs	r2, #0
 8011d70:	42b5      	cmp	r5, r6
 8011d72:	d901      	bls.n	8011d78 <__b2d+0x88>
 8011d74:	3d04      	subs	r5, #4
 8011d76:	682a      	ldr	r2, [r5, #0]
 8011d78:	4664      	mov	r4, ip
 8011d7a:	40a7      	lsls	r7, r4
 8011d7c:	e7dd      	b.n	8011d3a <__b2d+0x4a>
 8011d7e:	4322      	orrs	r2, r4
 8011d80:	0011      	movs	r1, r2
 8011d82:	e7dc      	b.n	8011d3e <__b2d+0x4e>
 8011d84:	3ff00000 	.word	0x3ff00000

08011d88 <__d2b>:
 8011d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d8a:	2101      	movs	r1, #1
 8011d8c:	0014      	movs	r4, r2
 8011d8e:	001d      	movs	r5, r3
 8011d90:	9f08      	ldr	r7, [sp, #32]
 8011d92:	f7ff fc0b 	bl	80115ac <_Balloc>
 8011d96:	1e06      	subs	r6, r0, #0
 8011d98:	d105      	bne.n	8011da6 <__d2b+0x1e>
 8011d9a:	0032      	movs	r2, r6
 8011d9c:	4b24      	ldr	r3, [pc, #144]	; (8011e30 <__d2b+0xa8>)
 8011d9e:	4825      	ldr	r0, [pc, #148]	; (8011e34 <__d2b+0xac>)
 8011da0:	4925      	ldr	r1, [pc, #148]	; (8011e38 <__d2b+0xb0>)
 8011da2:	f7fe f8d1 	bl	800ff48 <__assert_func>
 8011da6:	032b      	lsls	r3, r5, #12
 8011da8:	006d      	lsls	r5, r5, #1
 8011daa:	0b1b      	lsrs	r3, r3, #12
 8011dac:	0d6d      	lsrs	r5, r5, #21
 8011dae:	d125      	bne.n	8011dfc <__d2b+0x74>
 8011db0:	9301      	str	r3, [sp, #4]
 8011db2:	2c00      	cmp	r4, #0
 8011db4:	d028      	beq.n	8011e08 <__d2b+0x80>
 8011db6:	4668      	mov	r0, sp
 8011db8:	9400      	str	r4, [sp, #0]
 8011dba:	f7ff fd09 	bl	80117d0 <__lo0bits>
 8011dbe:	9b01      	ldr	r3, [sp, #4]
 8011dc0:	9900      	ldr	r1, [sp, #0]
 8011dc2:	2800      	cmp	r0, #0
 8011dc4:	d01e      	beq.n	8011e04 <__d2b+0x7c>
 8011dc6:	2220      	movs	r2, #32
 8011dc8:	001c      	movs	r4, r3
 8011dca:	1a12      	subs	r2, r2, r0
 8011dcc:	4094      	lsls	r4, r2
 8011dce:	0022      	movs	r2, r4
 8011dd0:	40c3      	lsrs	r3, r0
 8011dd2:	430a      	orrs	r2, r1
 8011dd4:	6172      	str	r2, [r6, #20]
 8011dd6:	9301      	str	r3, [sp, #4]
 8011dd8:	9c01      	ldr	r4, [sp, #4]
 8011dda:	61b4      	str	r4, [r6, #24]
 8011ddc:	1e63      	subs	r3, r4, #1
 8011dde:	419c      	sbcs	r4, r3
 8011de0:	3401      	adds	r4, #1
 8011de2:	6134      	str	r4, [r6, #16]
 8011de4:	2d00      	cmp	r5, #0
 8011de6:	d017      	beq.n	8011e18 <__d2b+0x90>
 8011de8:	2435      	movs	r4, #53	; 0x35
 8011dea:	4b14      	ldr	r3, [pc, #80]	; (8011e3c <__d2b+0xb4>)
 8011dec:	18ed      	adds	r5, r5, r3
 8011dee:	182d      	adds	r5, r5, r0
 8011df0:	603d      	str	r5, [r7, #0]
 8011df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011df4:	1a24      	subs	r4, r4, r0
 8011df6:	601c      	str	r4, [r3, #0]
 8011df8:	0030      	movs	r0, r6
 8011dfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011dfc:	2280      	movs	r2, #128	; 0x80
 8011dfe:	0352      	lsls	r2, r2, #13
 8011e00:	4313      	orrs	r3, r2
 8011e02:	e7d5      	b.n	8011db0 <__d2b+0x28>
 8011e04:	6171      	str	r1, [r6, #20]
 8011e06:	e7e7      	b.n	8011dd8 <__d2b+0x50>
 8011e08:	a801      	add	r0, sp, #4
 8011e0a:	f7ff fce1 	bl	80117d0 <__lo0bits>
 8011e0e:	9b01      	ldr	r3, [sp, #4]
 8011e10:	2401      	movs	r4, #1
 8011e12:	6173      	str	r3, [r6, #20]
 8011e14:	3020      	adds	r0, #32
 8011e16:	e7e4      	b.n	8011de2 <__d2b+0x5a>
 8011e18:	4b09      	ldr	r3, [pc, #36]	; (8011e40 <__d2b+0xb8>)
 8011e1a:	18c0      	adds	r0, r0, r3
 8011e1c:	4b09      	ldr	r3, [pc, #36]	; (8011e44 <__d2b+0xbc>)
 8011e1e:	6038      	str	r0, [r7, #0]
 8011e20:	18e3      	adds	r3, r4, r3
 8011e22:	009b      	lsls	r3, r3, #2
 8011e24:	18f3      	adds	r3, r6, r3
 8011e26:	6958      	ldr	r0, [r3, #20]
 8011e28:	f7ff fcb8 	bl	801179c <__hi0bits>
 8011e2c:	0164      	lsls	r4, r4, #5
 8011e2e:	e7e0      	b.n	8011df2 <__d2b+0x6a>
 8011e30:	08013e22 	.word	0x08013e22
 8011e34:	08013e93 	.word	0x08013e93
 8011e38:	0000030f 	.word	0x0000030f
 8011e3c:	fffffbcd 	.word	0xfffffbcd
 8011e40:	fffffbce 	.word	0xfffffbce
 8011e44:	3fffffff 	.word	0x3fffffff

08011e48 <__ratio>:
 8011e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e4a:	b087      	sub	sp, #28
 8011e4c:	000f      	movs	r7, r1
 8011e4e:	a904      	add	r1, sp, #16
 8011e50:	0006      	movs	r6, r0
 8011e52:	f7ff ff4d 	bl	8011cf0 <__b2d>
 8011e56:	9000      	str	r0, [sp, #0]
 8011e58:	9101      	str	r1, [sp, #4]
 8011e5a:	9c00      	ldr	r4, [sp, #0]
 8011e5c:	9d01      	ldr	r5, [sp, #4]
 8011e5e:	0038      	movs	r0, r7
 8011e60:	a905      	add	r1, sp, #20
 8011e62:	f7ff ff45 	bl	8011cf0 <__b2d>
 8011e66:	9002      	str	r0, [sp, #8]
 8011e68:	9103      	str	r1, [sp, #12]
 8011e6a:	9a02      	ldr	r2, [sp, #8]
 8011e6c:	9b03      	ldr	r3, [sp, #12]
 8011e6e:	6930      	ldr	r0, [r6, #16]
 8011e70:	6939      	ldr	r1, [r7, #16]
 8011e72:	9e04      	ldr	r6, [sp, #16]
 8011e74:	1a40      	subs	r0, r0, r1
 8011e76:	9905      	ldr	r1, [sp, #20]
 8011e78:	0140      	lsls	r0, r0, #5
 8011e7a:	1a71      	subs	r1, r6, r1
 8011e7c:	1841      	adds	r1, r0, r1
 8011e7e:	0508      	lsls	r0, r1, #20
 8011e80:	2900      	cmp	r1, #0
 8011e82:	dd07      	ble.n	8011e94 <__ratio+0x4c>
 8011e84:	9901      	ldr	r1, [sp, #4]
 8011e86:	1845      	adds	r5, r0, r1
 8011e88:	0020      	movs	r0, r4
 8011e8a:	0029      	movs	r1, r5
 8011e8c:	f7ef fbec 	bl	8001668 <__aeabi_ddiv>
 8011e90:	b007      	add	sp, #28
 8011e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e94:	9903      	ldr	r1, [sp, #12]
 8011e96:	1a0b      	subs	r3, r1, r0
 8011e98:	e7f6      	b.n	8011e88 <__ratio+0x40>

08011e9a <__copybits>:
 8011e9a:	b570      	push	{r4, r5, r6, lr}
 8011e9c:	0014      	movs	r4, r2
 8011e9e:	0005      	movs	r5, r0
 8011ea0:	3901      	subs	r1, #1
 8011ea2:	6913      	ldr	r3, [r2, #16]
 8011ea4:	1149      	asrs	r1, r1, #5
 8011ea6:	3101      	adds	r1, #1
 8011ea8:	0089      	lsls	r1, r1, #2
 8011eaa:	3414      	adds	r4, #20
 8011eac:	009b      	lsls	r3, r3, #2
 8011eae:	1841      	adds	r1, r0, r1
 8011eb0:	18e3      	adds	r3, r4, r3
 8011eb2:	42a3      	cmp	r3, r4
 8011eb4:	d80d      	bhi.n	8011ed2 <__copybits+0x38>
 8011eb6:	0014      	movs	r4, r2
 8011eb8:	3411      	adds	r4, #17
 8011eba:	2500      	movs	r5, #0
 8011ebc:	429c      	cmp	r4, r3
 8011ebe:	d803      	bhi.n	8011ec8 <__copybits+0x2e>
 8011ec0:	1a9b      	subs	r3, r3, r2
 8011ec2:	3b11      	subs	r3, #17
 8011ec4:	089b      	lsrs	r3, r3, #2
 8011ec6:	009d      	lsls	r5, r3, #2
 8011ec8:	2300      	movs	r3, #0
 8011eca:	1940      	adds	r0, r0, r5
 8011ecc:	4281      	cmp	r1, r0
 8011ece:	d803      	bhi.n	8011ed8 <__copybits+0x3e>
 8011ed0:	bd70      	pop	{r4, r5, r6, pc}
 8011ed2:	cc40      	ldmia	r4!, {r6}
 8011ed4:	c540      	stmia	r5!, {r6}
 8011ed6:	e7ec      	b.n	8011eb2 <__copybits+0x18>
 8011ed8:	c008      	stmia	r0!, {r3}
 8011eda:	e7f7      	b.n	8011ecc <__copybits+0x32>

08011edc <__any_on>:
 8011edc:	0002      	movs	r2, r0
 8011ede:	6900      	ldr	r0, [r0, #16]
 8011ee0:	b510      	push	{r4, lr}
 8011ee2:	3214      	adds	r2, #20
 8011ee4:	114b      	asrs	r3, r1, #5
 8011ee6:	4298      	cmp	r0, r3
 8011ee8:	db13      	blt.n	8011f12 <__any_on+0x36>
 8011eea:	dd0c      	ble.n	8011f06 <__any_on+0x2a>
 8011eec:	241f      	movs	r4, #31
 8011eee:	0008      	movs	r0, r1
 8011ef0:	4020      	ands	r0, r4
 8011ef2:	4221      	tst	r1, r4
 8011ef4:	d007      	beq.n	8011f06 <__any_on+0x2a>
 8011ef6:	0099      	lsls	r1, r3, #2
 8011ef8:	588c      	ldr	r4, [r1, r2]
 8011efa:	0021      	movs	r1, r4
 8011efc:	40c1      	lsrs	r1, r0
 8011efe:	4081      	lsls	r1, r0
 8011f00:	2001      	movs	r0, #1
 8011f02:	428c      	cmp	r4, r1
 8011f04:	d104      	bne.n	8011f10 <__any_on+0x34>
 8011f06:	009b      	lsls	r3, r3, #2
 8011f08:	18d3      	adds	r3, r2, r3
 8011f0a:	4293      	cmp	r3, r2
 8011f0c:	d803      	bhi.n	8011f16 <__any_on+0x3a>
 8011f0e:	2000      	movs	r0, #0
 8011f10:	bd10      	pop	{r4, pc}
 8011f12:	0003      	movs	r3, r0
 8011f14:	e7f7      	b.n	8011f06 <__any_on+0x2a>
 8011f16:	3b04      	subs	r3, #4
 8011f18:	6819      	ldr	r1, [r3, #0]
 8011f1a:	2900      	cmp	r1, #0
 8011f1c:	d0f5      	beq.n	8011f0a <__any_on+0x2e>
 8011f1e:	2001      	movs	r0, #1
 8011f20:	e7f6      	b.n	8011f10 <__any_on+0x34>

08011f22 <__ascii_wctomb>:
 8011f22:	0003      	movs	r3, r0
 8011f24:	1e08      	subs	r0, r1, #0
 8011f26:	d005      	beq.n	8011f34 <__ascii_wctomb+0x12>
 8011f28:	2aff      	cmp	r2, #255	; 0xff
 8011f2a:	d904      	bls.n	8011f36 <__ascii_wctomb+0x14>
 8011f2c:	228a      	movs	r2, #138	; 0x8a
 8011f2e:	2001      	movs	r0, #1
 8011f30:	601a      	str	r2, [r3, #0]
 8011f32:	4240      	negs	r0, r0
 8011f34:	4770      	bx	lr
 8011f36:	2001      	movs	r0, #1
 8011f38:	700a      	strb	r2, [r1, #0]
 8011f3a:	e7fb      	b.n	8011f34 <__ascii_wctomb+0x12>

08011f3c <__ssputs_r>:
 8011f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f3e:	b085      	sub	sp, #20
 8011f40:	9301      	str	r3, [sp, #4]
 8011f42:	9203      	str	r2, [sp, #12]
 8011f44:	688e      	ldr	r6, [r1, #8]
 8011f46:	9a01      	ldr	r2, [sp, #4]
 8011f48:	0007      	movs	r7, r0
 8011f4a:	000c      	movs	r4, r1
 8011f4c:	680b      	ldr	r3, [r1, #0]
 8011f4e:	4296      	cmp	r6, r2
 8011f50:	d831      	bhi.n	8011fb6 <__ssputs_r+0x7a>
 8011f52:	898a      	ldrh	r2, [r1, #12]
 8011f54:	2190      	movs	r1, #144	; 0x90
 8011f56:	00c9      	lsls	r1, r1, #3
 8011f58:	420a      	tst	r2, r1
 8011f5a:	d029      	beq.n	8011fb0 <__ssputs_r+0x74>
 8011f5c:	2003      	movs	r0, #3
 8011f5e:	6921      	ldr	r1, [r4, #16]
 8011f60:	1a5b      	subs	r3, r3, r1
 8011f62:	9302      	str	r3, [sp, #8]
 8011f64:	6963      	ldr	r3, [r4, #20]
 8011f66:	4343      	muls	r3, r0
 8011f68:	0fdd      	lsrs	r5, r3, #31
 8011f6a:	18ed      	adds	r5, r5, r3
 8011f6c:	9b01      	ldr	r3, [sp, #4]
 8011f6e:	9802      	ldr	r0, [sp, #8]
 8011f70:	3301      	adds	r3, #1
 8011f72:	181b      	adds	r3, r3, r0
 8011f74:	106d      	asrs	r5, r5, #1
 8011f76:	42ab      	cmp	r3, r5
 8011f78:	d900      	bls.n	8011f7c <__ssputs_r+0x40>
 8011f7a:	001d      	movs	r5, r3
 8011f7c:	0552      	lsls	r2, r2, #21
 8011f7e:	d529      	bpl.n	8011fd4 <__ssputs_r+0x98>
 8011f80:	0029      	movs	r1, r5
 8011f82:	0038      	movs	r0, r7
 8011f84:	f7ff fa6e 	bl	8011464 <_malloc_r>
 8011f88:	1e06      	subs	r6, r0, #0
 8011f8a:	d02d      	beq.n	8011fe8 <__ssputs_r+0xac>
 8011f8c:	9a02      	ldr	r2, [sp, #8]
 8011f8e:	6921      	ldr	r1, [r4, #16]
 8011f90:	f7fd ffc6 	bl	800ff20 <memcpy>
 8011f94:	89a2      	ldrh	r2, [r4, #12]
 8011f96:	4b19      	ldr	r3, [pc, #100]	; (8011ffc <__ssputs_r+0xc0>)
 8011f98:	401a      	ands	r2, r3
 8011f9a:	2380      	movs	r3, #128	; 0x80
 8011f9c:	4313      	orrs	r3, r2
 8011f9e:	81a3      	strh	r3, [r4, #12]
 8011fa0:	9b02      	ldr	r3, [sp, #8]
 8011fa2:	6126      	str	r6, [r4, #16]
 8011fa4:	18f6      	adds	r6, r6, r3
 8011fa6:	6026      	str	r6, [r4, #0]
 8011fa8:	6165      	str	r5, [r4, #20]
 8011faa:	9e01      	ldr	r6, [sp, #4]
 8011fac:	1aed      	subs	r5, r5, r3
 8011fae:	60a5      	str	r5, [r4, #8]
 8011fb0:	9b01      	ldr	r3, [sp, #4]
 8011fb2:	429e      	cmp	r6, r3
 8011fb4:	d900      	bls.n	8011fb8 <__ssputs_r+0x7c>
 8011fb6:	9e01      	ldr	r6, [sp, #4]
 8011fb8:	0032      	movs	r2, r6
 8011fba:	9903      	ldr	r1, [sp, #12]
 8011fbc:	6820      	ldr	r0, [r4, #0]
 8011fbe:	f000 fd87 	bl	8012ad0 <memmove>
 8011fc2:	2000      	movs	r0, #0
 8011fc4:	68a3      	ldr	r3, [r4, #8]
 8011fc6:	1b9b      	subs	r3, r3, r6
 8011fc8:	60a3      	str	r3, [r4, #8]
 8011fca:	6823      	ldr	r3, [r4, #0]
 8011fcc:	199b      	adds	r3, r3, r6
 8011fce:	6023      	str	r3, [r4, #0]
 8011fd0:	b005      	add	sp, #20
 8011fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fd4:	002a      	movs	r2, r5
 8011fd6:	0038      	movs	r0, r7
 8011fd8:	f000 fdd4 	bl	8012b84 <_realloc_r>
 8011fdc:	1e06      	subs	r6, r0, #0
 8011fde:	d1df      	bne.n	8011fa0 <__ssputs_r+0x64>
 8011fe0:	0038      	movs	r0, r7
 8011fe2:	6921      	ldr	r1, [r4, #16]
 8011fe4:	f7fe fe6c 	bl	8010cc0 <_free_r>
 8011fe8:	230c      	movs	r3, #12
 8011fea:	2001      	movs	r0, #1
 8011fec:	603b      	str	r3, [r7, #0]
 8011fee:	89a2      	ldrh	r2, [r4, #12]
 8011ff0:	3334      	adds	r3, #52	; 0x34
 8011ff2:	4313      	orrs	r3, r2
 8011ff4:	81a3      	strh	r3, [r4, #12]
 8011ff6:	4240      	negs	r0, r0
 8011ff8:	e7ea      	b.n	8011fd0 <__ssputs_r+0x94>
 8011ffa:	46c0      	nop			; (mov r8, r8)
 8011ffc:	fffffb7f 	.word	0xfffffb7f

08012000 <_svfiprintf_r>:
 8012000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012002:	b0a1      	sub	sp, #132	; 0x84
 8012004:	9003      	str	r0, [sp, #12]
 8012006:	001d      	movs	r5, r3
 8012008:	898b      	ldrh	r3, [r1, #12]
 801200a:	000f      	movs	r7, r1
 801200c:	0016      	movs	r6, r2
 801200e:	061b      	lsls	r3, r3, #24
 8012010:	d511      	bpl.n	8012036 <_svfiprintf_r+0x36>
 8012012:	690b      	ldr	r3, [r1, #16]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d10e      	bne.n	8012036 <_svfiprintf_r+0x36>
 8012018:	2140      	movs	r1, #64	; 0x40
 801201a:	f7ff fa23 	bl	8011464 <_malloc_r>
 801201e:	6038      	str	r0, [r7, #0]
 8012020:	6138      	str	r0, [r7, #16]
 8012022:	2800      	cmp	r0, #0
 8012024:	d105      	bne.n	8012032 <_svfiprintf_r+0x32>
 8012026:	230c      	movs	r3, #12
 8012028:	9a03      	ldr	r2, [sp, #12]
 801202a:	3801      	subs	r0, #1
 801202c:	6013      	str	r3, [r2, #0]
 801202e:	b021      	add	sp, #132	; 0x84
 8012030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012032:	2340      	movs	r3, #64	; 0x40
 8012034:	617b      	str	r3, [r7, #20]
 8012036:	2300      	movs	r3, #0
 8012038:	ac08      	add	r4, sp, #32
 801203a:	6163      	str	r3, [r4, #20]
 801203c:	3320      	adds	r3, #32
 801203e:	7663      	strb	r3, [r4, #25]
 8012040:	3310      	adds	r3, #16
 8012042:	76a3      	strb	r3, [r4, #26]
 8012044:	9507      	str	r5, [sp, #28]
 8012046:	0035      	movs	r5, r6
 8012048:	782b      	ldrb	r3, [r5, #0]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d001      	beq.n	8012052 <_svfiprintf_r+0x52>
 801204e:	2b25      	cmp	r3, #37	; 0x25
 8012050:	d148      	bne.n	80120e4 <_svfiprintf_r+0xe4>
 8012052:	1bab      	subs	r3, r5, r6
 8012054:	9305      	str	r3, [sp, #20]
 8012056:	42b5      	cmp	r5, r6
 8012058:	d00b      	beq.n	8012072 <_svfiprintf_r+0x72>
 801205a:	0032      	movs	r2, r6
 801205c:	0039      	movs	r1, r7
 801205e:	9803      	ldr	r0, [sp, #12]
 8012060:	f7ff ff6c 	bl	8011f3c <__ssputs_r>
 8012064:	3001      	adds	r0, #1
 8012066:	d100      	bne.n	801206a <_svfiprintf_r+0x6a>
 8012068:	e0af      	b.n	80121ca <_svfiprintf_r+0x1ca>
 801206a:	6963      	ldr	r3, [r4, #20]
 801206c:	9a05      	ldr	r2, [sp, #20]
 801206e:	189b      	adds	r3, r3, r2
 8012070:	6163      	str	r3, [r4, #20]
 8012072:	782b      	ldrb	r3, [r5, #0]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d100      	bne.n	801207a <_svfiprintf_r+0x7a>
 8012078:	e0a7      	b.n	80121ca <_svfiprintf_r+0x1ca>
 801207a:	2201      	movs	r2, #1
 801207c:	2300      	movs	r3, #0
 801207e:	4252      	negs	r2, r2
 8012080:	6062      	str	r2, [r4, #4]
 8012082:	a904      	add	r1, sp, #16
 8012084:	3254      	adds	r2, #84	; 0x54
 8012086:	1852      	adds	r2, r2, r1
 8012088:	1c6e      	adds	r6, r5, #1
 801208a:	6023      	str	r3, [r4, #0]
 801208c:	60e3      	str	r3, [r4, #12]
 801208e:	60a3      	str	r3, [r4, #8]
 8012090:	7013      	strb	r3, [r2, #0]
 8012092:	65a3      	str	r3, [r4, #88]	; 0x58
 8012094:	4b55      	ldr	r3, [pc, #340]	; (80121ec <_svfiprintf_r+0x1ec>)
 8012096:	2205      	movs	r2, #5
 8012098:	0018      	movs	r0, r3
 801209a:	7831      	ldrb	r1, [r6, #0]
 801209c:	9305      	str	r3, [sp, #20]
 801209e:	f7fd ff34 	bl	800ff0a <memchr>
 80120a2:	1c75      	adds	r5, r6, #1
 80120a4:	2800      	cmp	r0, #0
 80120a6:	d11f      	bne.n	80120e8 <_svfiprintf_r+0xe8>
 80120a8:	6822      	ldr	r2, [r4, #0]
 80120aa:	06d3      	lsls	r3, r2, #27
 80120ac:	d504      	bpl.n	80120b8 <_svfiprintf_r+0xb8>
 80120ae:	2353      	movs	r3, #83	; 0x53
 80120b0:	a904      	add	r1, sp, #16
 80120b2:	185b      	adds	r3, r3, r1
 80120b4:	2120      	movs	r1, #32
 80120b6:	7019      	strb	r1, [r3, #0]
 80120b8:	0713      	lsls	r3, r2, #28
 80120ba:	d504      	bpl.n	80120c6 <_svfiprintf_r+0xc6>
 80120bc:	2353      	movs	r3, #83	; 0x53
 80120be:	a904      	add	r1, sp, #16
 80120c0:	185b      	adds	r3, r3, r1
 80120c2:	212b      	movs	r1, #43	; 0x2b
 80120c4:	7019      	strb	r1, [r3, #0]
 80120c6:	7833      	ldrb	r3, [r6, #0]
 80120c8:	2b2a      	cmp	r3, #42	; 0x2a
 80120ca:	d016      	beq.n	80120fa <_svfiprintf_r+0xfa>
 80120cc:	0035      	movs	r5, r6
 80120ce:	2100      	movs	r1, #0
 80120d0:	200a      	movs	r0, #10
 80120d2:	68e3      	ldr	r3, [r4, #12]
 80120d4:	782a      	ldrb	r2, [r5, #0]
 80120d6:	1c6e      	adds	r6, r5, #1
 80120d8:	3a30      	subs	r2, #48	; 0x30
 80120da:	2a09      	cmp	r2, #9
 80120dc:	d94e      	bls.n	801217c <_svfiprintf_r+0x17c>
 80120de:	2900      	cmp	r1, #0
 80120e0:	d111      	bne.n	8012106 <_svfiprintf_r+0x106>
 80120e2:	e017      	b.n	8012114 <_svfiprintf_r+0x114>
 80120e4:	3501      	adds	r5, #1
 80120e6:	e7af      	b.n	8012048 <_svfiprintf_r+0x48>
 80120e8:	9b05      	ldr	r3, [sp, #20]
 80120ea:	6822      	ldr	r2, [r4, #0]
 80120ec:	1ac0      	subs	r0, r0, r3
 80120ee:	2301      	movs	r3, #1
 80120f0:	4083      	lsls	r3, r0
 80120f2:	4313      	orrs	r3, r2
 80120f4:	002e      	movs	r6, r5
 80120f6:	6023      	str	r3, [r4, #0]
 80120f8:	e7cc      	b.n	8012094 <_svfiprintf_r+0x94>
 80120fa:	9b07      	ldr	r3, [sp, #28]
 80120fc:	1d19      	adds	r1, r3, #4
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	9107      	str	r1, [sp, #28]
 8012102:	2b00      	cmp	r3, #0
 8012104:	db01      	blt.n	801210a <_svfiprintf_r+0x10a>
 8012106:	930b      	str	r3, [sp, #44]	; 0x2c
 8012108:	e004      	b.n	8012114 <_svfiprintf_r+0x114>
 801210a:	425b      	negs	r3, r3
 801210c:	60e3      	str	r3, [r4, #12]
 801210e:	2302      	movs	r3, #2
 8012110:	4313      	orrs	r3, r2
 8012112:	6023      	str	r3, [r4, #0]
 8012114:	782b      	ldrb	r3, [r5, #0]
 8012116:	2b2e      	cmp	r3, #46	; 0x2e
 8012118:	d10a      	bne.n	8012130 <_svfiprintf_r+0x130>
 801211a:	786b      	ldrb	r3, [r5, #1]
 801211c:	2b2a      	cmp	r3, #42	; 0x2a
 801211e:	d135      	bne.n	801218c <_svfiprintf_r+0x18c>
 8012120:	9b07      	ldr	r3, [sp, #28]
 8012122:	3502      	adds	r5, #2
 8012124:	1d1a      	adds	r2, r3, #4
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	9207      	str	r2, [sp, #28]
 801212a:	2b00      	cmp	r3, #0
 801212c:	db2b      	blt.n	8012186 <_svfiprintf_r+0x186>
 801212e:	9309      	str	r3, [sp, #36]	; 0x24
 8012130:	4e2f      	ldr	r6, [pc, #188]	; (80121f0 <_svfiprintf_r+0x1f0>)
 8012132:	2203      	movs	r2, #3
 8012134:	0030      	movs	r0, r6
 8012136:	7829      	ldrb	r1, [r5, #0]
 8012138:	f7fd fee7 	bl	800ff0a <memchr>
 801213c:	2800      	cmp	r0, #0
 801213e:	d006      	beq.n	801214e <_svfiprintf_r+0x14e>
 8012140:	2340      	movs	r3, #64	; 0x40
 8012142:	1b80      	subs	r0, r0, r6
 8012144:	4083      	lsls	r3, r0
 8012146:	6822      	ldr	r2, [r4, #0]
 8012148:	3501      	adds	r5, #1
 801214a:	4313      	orrs	r3, r2
 801214c:	6023      	str	r3, [r4, #0]
 801214e:	7829      	ldrb	r1, [r5, #0]
 8012150:	2206      	movs	r2, #6
 8012152:	4828      	ldr	r0, [pc, #160]	; (80121f4 <_svfiprintf_r+0x1f4>)
 8012154:	1c6e      	adds	r6, r5, #1
 8012156:	7621      	strb	r1, [r4, #24]
 8012158:	f7fd fed7 	bl	800ff0a <memchr>
 801215c:	2800      	cmp	r0, #0
 801215e:	d03c      	beq.n	80121da <_svfiprintf_r+0x1da>
 8012160:	4b25      	ldr	r3, [pc, #148]	; (80121f8 <_svfiprintf_r+0x1f8>)
 8012162:	2b00      	cmp	r3, #0
 8012164:	d125      	bne.n	80121b2 <_svfiprintf_r+0x1b2>
 8012166:	2207      	movs	r2, #7
 8012168:	9b07      	ldr	r3, [sp, #28]
 801216a:	3307      	adds	r3, #7
 801216c:	4393      	bics	r3, r2
 801216e:	3308      	adds	r3, #8
 8012170:	9307      	str	r3, [sp, #28]
 8012172:	6963      	ldr	r3, [r4, #20]
 8012174:	9a04      	ldr	r2, [sp, #16]
 8012176:	189b      	adds	r3, r3, r2
 8012178:	6163      	str	r3, [r4, #20]
 801217a:	e764      	b.n	8012046 <_svfiprintf_r+0x46>
 801217c:	4343      	muls	r3, r0
 801217e:	0035      	movs	r5, r6
 8012180:	2101      	movs	r1, #1
 8012182:	189b      	adds	r3, r3, r2
 8012184:	e7a6      	b.n	80120d4 <_svfiprintf_r+0xd4>
 8012186:	2301      	movs	r3, #1
 8012188:	425b      	negs	r3, r3
 801218a:	e7d0      	b.n	801212e <_svfiprintf_r+0x12e>
 801218c:	2300      	movs	r3, #0
 801218e:	200a      	movs	r0, #10
 8012190:	001a      	movs	r2, r3
 8012192:	3501      	adds	r5, #1
 8012194:	6063      	str	r3, [r4, #4]
 8012196:	7829      	ldrb	r1, [r5, #0]
 8012198:	1c6e      	adds	r6, r5, #1
 801219a:	3930      	subs	r1, #48	; 0x30
 801219c:	2909      	cmp	r1, #9
 801219e:	d903      	bls.n	80121a8 <_svfiprintf_r+0x1a8>
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d0c5      	beq.n	8012130 <_svfiprintf_r+0x130>
 80121a4:	9209      	str	r2, [sp, #36]	; 0x24
 80121a6:	e7c3      	b.n	8012130 <_svfiprintf_r+0x130>
 80121a8:	4342      	muls	r2, r0
 80121aa:	0035      	movs	r5, r6
 80121ac:	2301      	movs	r3, #1
 80121ae:	1852      	adds	r2, r2, r1
 80121b0:	e7f1      	b.n	8012196 <_svfiprintf_r+0x196>
 80121b2:	aa07      	add	r2, sp, #28
 80121b4:	9200      	str	r2, [sp, #0]
 80121b6:	0021      	movs	r1, r4
 80121b8:	003a      	movs	r2, r7
 80121ba:	4b10      	ldr	r3, [pc, #64]	; (80121fc <_svfiprintf_r+0x1fc>)
 80121bc:	9803      	ldr	r0, [sp, #12]
 80121be:	f7fc fe39 	bl	800ee34 <_printf_float>
 80121c2:	9004      	str	r0, [sp, #16]
 80121c4:	9b04      	ldr	r3, [sp, #16]
 80121c6:	3301      	adds	r3, #1
 80121c8:	d1d3      	bne.n	8012172 <_svfiprintf_r+0x172>
 80121ca:	89bb      	ldrh	r3, [r7, #12]
 80121cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80121ce:	065b      	lsls	r3, r3, #25
 80121d0:	d400      	bmi.n	80121d4 <_svfiprintf_r+0x1d4>
 80121d2:	e72c      	b.n	801202e <_svfiprintf_r+0x2e>
 80121d4:	2001      	movs	r0, #1
 80121d6:	4240      	negs	r0, r0
 80121d8:	e729      	b.n	801202e <_svfiprintf_r+0x2e>
 80121da:	aa07      	add	r2, sp, #28
 80121dc:	9200      	str	r2, [sp, #0]
 80121de:	0021      	movs	r1, r4
 80121e0:	003a      	movs	r2, r7
 80121e2:	4b06      	ldr	r3, [pc, #24]	; (80121fc <_svfiprintf_r+0x1fc>)
 80121e4:	9803      	ldr	r0, [sp, #12]
 80121e6:	f7fd f8eb 	bl	800f3c0 <_printf_i>
 80121ea:	e7ea      	b.n	80121c2 <_svfiprintf_r+0x1c2>
 80121ec:	08013fec 	.word	0x08013fec
 80121f0:	08013ff2 	.word	0x08013ff2
 80121f4:	08013ff6 	.word	0x08013ff6
 80121f8:	0800ee35 	.word	0x0800ee35
 80121fc:	08011f3d 	.word	0x08011f3d

08012200 <_sungetc_r>:
 8012200:	b570      	push	{r4, r5, r6, lr}
 8012202:	0014      	movs	r4, r2
 8012204:	1c4b      	adds	r3, r1, #1
 8012206:	d103      	bne.n	8012210 <_sungetc_r+0x10>
 8012208:	2501      	movs	r5, #1
 801220a:	426d      	negs	r5, r5
 801220c:	0028      	movs	r0, r5
 801220e:	bd70      	pop	{r4, r5, r6, pc}
 8012210:	8993      	ldrh	r3, [r2, #12]
 8012212:	2220      	movs	r2, #32
 8012214:	4393      	bics	r3, r2
 8012216:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8012218:	81a3      	strh	r3, [r4, #12]
 801221a:	b2ce      	uxtb	r6, r1
 801221c:	6863      	ldr	r3, [r4, #4]
 801221e:	b2cd      	uxtb	r5, r1
 8012220:	2a00      	cmp	r2, #0
 8012222:	d010      	beq.n	8012246 <_sungetc_r+0x46>
 8012224:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8012226:	429a      	cmp	r2, r3
 8012228:	dd07      	ble.n	801223a <_sungetc_r+0x3a>
 801222a:	6823      	ldr	r3, [r4, #0]
 801222c:	3b01      	subs	r3, #1
 801222e:	6023      	str	r3, [r4, #0]
 8012230:	701e      	strb	r6, [r3, #0]
 8012232:	6863      	ldr	r3, [r4, #4]
 8012234:	3301      	adds	r3, #1
 8012236:	6063      	str	r3, [r4, #4]
 8012238:	e7e8      	b.n	801220c <_sungetc_r+0xc>
 801223a:	0021      	movs	r1, r4
 801223c:	f000 fc0a 	bl	8012a54 <__submore>
 8012240:	2800      	cmp	r0, #0
 8012242:	d0f2      	beq.n	801222a <_sungetc_r+0x2a>
 8012244:	e7e0      	b.n	8012208 <_sungetc_r+0x8>
 8012246:	6921      	ldr	r1, [r4, #16]
 8012248:	6822      	ldr	r2, [r4, #0]
 801224a:	2900      	cmp	r1, #0
 801224c:	d007      	beq.n	801225e <_sungetc_r+0x5e>
 801224e:	4291      	cmp	r1, r2
 8012250:	d205      	bcs.n	801225e <_sungetc_r+0x5e>
 8012252:	1e51      	subs	r1, r2, #1
 8012254:	7808      	ldrb	r0, [r1, #0]
 8012256:	42a8      	cmp	r0, r5
 8012258:	d101      	bne.n	801225e <_sungetc_r+0x5e>
 801225a:	6021      	str	r1, [r4, #0]
 801225c:	e7ea      	b.n	8012234 <_sungetc_r+0x34>
 801225e:	6423      	str	r3, [r4, #64]	; 0x40
 8012260:	0023      	movs	r3, r4
 8012262:	3344      	adds	r3, #68	; 0x44
 8012264:	6363      	str	r3, [r4, #52]	; 0x34
 8012266:	2303      	movs	r3, #3
 8012268:	63a3      	str	r3, [r4, #56]	; 0x38
 801226a:	0023      	movs	r3, r4
 801226c:	3346      	adds	r3, #70	; 0x46
 801226e:	63e2      	str	r2, [r4, #60]	; 0x3c
 8012270:	701e      	strb	r6, [r3, #0]
 8012272:	6023      	str	r3, [r4, #0]
 8012274:	2301      	movs	r3, #1
 8012276:	e7de      	b.n	8012236 <_sungetc_r+0x36>

08012278 <__ssrefill_r>:
 8012278:	b510      	push	{r4, lr}
 801227a:	000c      	movs	r4, r1
 801227c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801227e:	2900      	cmp	r1, #0
 8012280:	d00e      	beq.n	80122a0 <__ssrefill_r+0x28>
 8012282:	0023      	movs	r3, r4
 8012284:	3344      	adds	r3, #68	; 0x44
 8012286:	4299      	cmp	r1, r3
 8012288:	d001      	beq.n	801228e <__ssrefill_r+0x16>
 801228a:	f7fe fd19 	bl	8010cc0 <_free_r>
 801228e:	2000      	movs	r0, #0
 8012290:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012292:	6360      	str	r0, [r4, #52]	; 0x34
 8012294:	6063      	str	r3, [r4, #4]
 8012296:	4283      	cmp	r3, r0
 8012298:	d002      	beq.n	80122a0 <__ssrefill_r+0x28>
 801229a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801229c:	6023      	str	r3, [r4, #0]
 801229e:	bd10      	pop	{r4, pc}
 80122a0:	6923      	ldr	r3, [r4, #16]
 80122a2:	2001      	movs	r0, #1
 80122a4:	6023      	str	r3, [r4, #0]
 80122a6:	2300      	movs	r3, #0
 80122a8:	89a2      	ldrh	r2, [r4, #12]
 80122aa:	6063      	str	r3, [r4, #4]
 80122ac:	3320      	adds	r3, #32
 80122ae:	4313      	orrs	r3, r2
 80122b0:	81a3      	strh	r3, [r4, #12]
 80122b2:	4240      	negs	r0, r0
 80122b4:	e7f3      	b.n	801229e <__ssrefill_r+0x26>
	...

080122b8 <__ssvfiscanf_r>:
 80122b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122ba:	4cae      	ldr	r4, [pc, #696]	; (8012574 <__ssvfiscanf_r+0x2bc>)
 80122bc:	0006      	movs	r6, r0
 80122be:	44a5      	add	sp, r4
 80122c0:	000c      	movs	r4, r1
 80122c2:	2100      	movs	r1, #0
 80122c4:	20be      	movs	r0, #190	; 0xbe
 80122c6:	9146      	str	r1, [sp, #280]	; 0x118
 80122c8:	9147      	str	r1, [sp, #284]	; 0x11c
 80122ca:	a903      	add	r1, sp, #12
 80122cc:	9148      	str	r1, [sp, #288]	; 0x120
 80122ce:	49aa      	ldr	r1, [pc, #680]	; (8012578 <__ssvfiscanf_r+0x2c0>)
 80122d0:	0040      	lsls	r0, r0, #1
 80122d2:	ad43      	add	r5, sp, #268	; 0x10c
 80122d4:	5029      	str	r1, [r5, r0]
 80122d6:	25c0      	movs	r5, #192	; 0xc0
 80122d8:	49a8      	ldr	r1, [pc, #672]	; (801257c <__ssvfiscanf_r+0x2c4>)
 80122da:	006d      	lsls	r5, r5, #1
 80122dc:	a843      	add	r0, sp, #268	; 0x10c
 80122de:	5141      	str	r1, [r0, r5]
 80122e0:	9302      	str	r3, [sp, #8]
 80122e2:	7815      	ldrb	r5, [r2, #0]
 80122e4:	2d00      	cmp	r5, #0
 80122e6:	d100      	bne.n	80122ea <__ssvfiscanf_r+0x32>
 80122e8:	e141      	b.n	801256e <__ssvfiscanf_r+0x2b6>
 80122ea:	4ba5      	ldr	r3, [pc, #660]	; (8012580 <__ssvfiscanf_r+0x2c8>)
 80122ec:	2008      	movs	r0, #8
 80122ee:	5d59      	ldrb	r1, [r3, r5]
 80122f0:	9300      	str	r3, [sp, #0]
 80122f2:	2308      	movs	r3, #8
 80122f4:	1c57      	adds	r7, r2, #1
 80122f6:	400b      	ands	r3, r1
 80122f8:	4201      	tst	r1, r0
 80122fa:	d01e      	beq.n	801233a <__ssvfiscanf_r+0x82>
 80122fc:	6863      	ldr	r3, [r4, #4]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	dd11      	ble.n	8012326 <__ssvfiscanf_r+0x6e>
 8012302:	6823      	ldr	r3, [r4, #0]
 8012304:	9900      	ldr	r1, [sp, #0]
 8012306:	781a      	ldrb	r2, [r3, #0]
 8012308:	5c8a      	ldrb	r2, [r1, r2]
 801230a:	2108      	movs	r1, #8
 801230c:	420a      	tst	r2, r1
 801230e:	d101      	bne.n	8012314 <__ssvfiscanf_r+0x5c>
 8012310:	003a      	movs	r2, r7
 8012312:	e7e6      	b.n	80122e2 <__ssvfiscanf_r+0x2a>
 8012314:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8012316:	3301      	adds	r3, #1
 8012318:	3201      	adds	r2, #1
 801231a:	9247      	str	r2, [sp, #284]	; 0x11c
 801231c:	6862      	ldr	r2, [r4, #4]
 801231e:	6023      	str	r3, [r4, #0]
 8012320:	3a01      	subs	r2, #1
 8012322:	6062      	str	r2, [r4, #4]
 8012324:	e7ea      	b.n	80122fc <__ssvfiscanf_r+0x44>
 8012326:	22c0      	movs	r2, #192	; 0xc0
 8012328:	ab43      	add	r3, sp, #268	; 0x10c
 801232a:	0052      	lsls	r2, r2, #1
 801232c:	0021      	movs	r1, r4
 801232e:	0030      	movs	r0, r6
 8012330:	589b      	ldr	r3, [r3, r2]
 8012332:	4798      	blx	r3
 8012334:	2800      	cmp	r0, #0
 8012336:	d0e4      	beq.n	8012302 <__ssvfiscanf_r+0x4a>
 8012338:	e7ea      	b.n	8012310 <__ssvfiscanf_r+0x58>
 801233a:	2d25      	cmp	r5, #37	; 0x25
 801233c:	d162      	bne.n	8012404 <__ssvfiscanf_r+0x14c>
 801233e:	9345      	str	r3, [sp, #276]	; 0x114
 8012340:	9343      	str	r3, [sp, #268]	; 0x10c
 8012342:	7853      	ldrb	r3, [r2, #1]
 8012344:	2b2a      	cmp	r3, #42	; 0x2a
 8012346:	d102      	bne.n	801234e <__ssvfiscanf_r+0x96>
 8012348:	3b1a      	subs	r3, #26
 801234a:	9343      	str	r3, [sp, #268]	; 0x10c
 801234c:	1c97      	adds	r7, r2, #2
 801234e:	003d      	movs	r5, r7
 8012350:	220a      	movs	r2, #10
 8012352:	7829      	ldrb	r1, [r5, #0]
 8012354:	1c6b      	adds	r3, r5, #1
 8012356:	9301      	str	r3, [sp, #4]
 8012358:	000b      	movs	r3, r1
 801235a:	3b30      	subs	r3, #48	; 0x30
 801235c:	2b09      	cmp	r3, #9
 801235e:	d91e      	bls.n	801239e <__ssvfiscanf_r+0xe6>
 8012360:	4f88      	ldr	r7, [pc, #544]	; (8012584 <__ssvfiscanf_r+0x2cc>)
 8012362:	2203      	movs	r2, #3
 8012364:	0038      	movs	r0, r7
 8012366:	f7fd fdd0 	bl	800ff0a <memchr>
 801236a:	2800      	cmp	r0, #0
 801236c:	d006      	beq.n	801237c <__ssvfiscanf_r+0xc4>
 801236e:	2301      	movs	r3, #1
 8012370:	1bc0      	subs	r0, r0, r7
 8012372:	4083      	lsls	r3, r0
 8012374:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8012376:	9d01      	ldr	r5, [sp, #4]
 8012378:	4313      	orrs	r3, r2
 801237a:	9343      	str	r3, [sp, #268]	; 0x10c
 801237c:	1c6f      	adds	r7, r5, #1
 801237e:	782d      	ldrb	r5, [r5, #0]
 8012380:	2d78      	cmp	r5, #120	; 0x78
 8012382:	d807      	bhi.n	8012394 <__ssvfiscanf_r+0xdc>
 8012384:	2d57      	cmp	r5, #87	; 0x57
 8012386:	d811      	bhi.n	80123ac <__ssvfiscanf_r+0xf4>
 8012388:	2d25      	cmp	r5, #37	; 0x25
 801238a:	d03b      	beq.n	8012404 <__ssvfiscanf_r+0x14c>
 801238c:	d835      	bhi.n	80123fa <__ssvfiscanf_r+0x142>
 801238e:	2d00      	cmp	r5, #0
 8012390:	d100      	bne.n	8012394 <__ssvfiscanf_r+0xdc>
 8012392:	e0e9      	b.n	8012568 <__ssvfiscanf_r+0x2b0>
 8012394:	2303      	movs	r3, #3
 8012396:	9349      	str	r3, [sp, #292]	; 0x124
 8012398:	3307      	adds	r3, #7
 801239a:	9344      	str	r3, [sp, #272]	; 0x110
 801239c:	e06d      	b.n	801247a <__ssvfiscanf_r+0x1c2>
 801239e:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80123a0:	9d01      	ldr	r5, [sp, #4]
 80123a2:	4353      	muls	r3, r2
 80123a4:	3b30      	subs	r3, #48	; 0x30
 80123a6:	185b      	adds	r3, r3, r1
 80123a8:	9345      	str	r3, [sp, #276]	; 0x114
 80123aa:	e7d2      	b.n	8012352 <__ssvfiscanf_r+0x9a>
 80123ac:	0028      	movs	r0, r5
 80123ae:	3858      	subs	r0, #88	; 0x58
 80123b0:	2820      	cmp	r0, #32
 80123b2:	d8ef      	bhi.n	8012394 <__ssvfiscanf_r+0xdc>
 80123b4:	f7ed fec4 	bl	8000140 <__gnu_thumb1_case_shi>
 80123b8:	ffee004d 	.word	0xffee004d
 80123bc:	007fffee 	.word	0x007fffee
 80123c0:	ffeeffee 	.word	0xffeeffee
 80123c4:	ffeeffee 	.word	0xffeeffee
 80123c8:	ffeeffee 	.word	0xffeeffee
 80123cc:	008affee 	.word	0x008affee
 80123d0:	0024007d 	.word	0x0024007d
 80123d4:	00240024 	.word	0x00240024
 80123d8:	0059ffee 	.word	0x0059ffee
 80123dc:	ffeeffee 	.word	0xffeeffee
 80123e0:	ffeeffee 	.word	0xffeeffee
 80123e4:	005d0092 	.word	0x005d0092
 80123e8:	ffee0049 	.word	0xffee0049
 80123ec:	0090ffee 	.word	0x0090ffee
 80123f0:	007dffee 	.word	0x007dffee
 80123f4:	ffeeffee 	.word	0xffeeffee
 80123f8:	004d      	.short	0x004d
 80123fa:	3d45      	subs	r5, #69	; 0x45
 80123fc:	2d02      	cmp	r5, #2
 80123fe:	d8c9      	bhi.n	8012394 <__ssvfiscanf_r+0xdc>
 8012400:	2305      	movs	r3, #5
 8012402:	e039      	b.n	8012478 <__ssvfiscanf_r+0x1c0>
 8012404:	6863      	ldr	r3, [r4, #4]
 8012406:	2b00      	cmp	r3, #0
 8012408:	dd0d      	ble.n	8012426 <__ssvfiscanf_r+0x16e>
 801240a:	6823      	ldr	r3, [r4, #0]
 801240c:	781a      	ldrb	r2, [r3, #0]
 801240e:	42aa      	cmp	r2, r5
 8012410:	d000      	beq.n	8012414 <__ssvfiscanf_r+0x15c>
 8012412:	e0ac      	b.n	801256e <__ssvfiscanf_r+0x2b6>
 8012414:	3301      	adds	r3, #1
 8012416:	6862      	ldr	r2, [r4, #4]
 8012418:	6023      	str	r3, [r4, #0]
 801241a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801241c:	3a01      	subs	r2, #1
 801241e:	3301      	adds	r3, #1
 8012420:	6062      	str	r2, [r4, #4]
 8012422:	9347      	str	r3, [sp, #284]	; 0x11c
 8012424:	e774      	b.n	8012310 <__ssvfiscanf_r+0x58>
 8012426:	22c0      	movs	r2, #192	; 0xc0
 8012428:	ab43      	add	r3, sp, #268	; 0x10c
 801242a:	0052      	lsls	r2, r2, #1
 801242c:	0021      	movs	r1, r4
 801242e:	0030      	movs	r0, r6
 8012430:	589b      	ldr	r3, [r3, r2]
 8012432:	4798      	blx	r3
 8012434:	2800      	cmp	r0, #0
 8012436:	d0e8      	beq.n	801240a <__ssvfiscanf_r+0x152>
 8012438:	9846      	ldr	r0, [sp, #280]	; 0x118
 801243a:	2800      	cmp	r0, #0
 801243c:	d000      	beq.n	8012440 <__ssvfiscanf_r+0x188>
 801243e:	e08f      	b.n	8012560 <__ssvfiscanf_r+0x2a8>
 8012440:	3801      	subs	r0, #1
 8012442:	23a5      	movs	r3, #165	; 0xa5
 8012444:	009b      	lsls	r3, r3, #2
 8012446:	449d      	add	sp, r3
 8012448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801244a:	2320      	movs	r3, #32
 801244c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 801244e:	4313      	orrs	r3, r2
 8012450:	9343      	str	r3, [sp, #268]	; 0x10c
 8012452:	2380      	movs	r3, #128	; 0x80
 8012454:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8012456:	009b      	lsls	r3, r3, #2
 8012458:	4313      	orrs	r3, r2
 801245a:	9343      	str	r3, [sp, #268]	; 0x10c
 801245c:	2310      	movs	r3, #16
 801245e:	9344      	str	r3, [sp, #272]	; 0x110
 8012460:	236e      	movs	r3, #110	; 0x6e
 8012462:	42ab      	cmp	r3, r5
 8012464:	419b      	sbcs	r3, r3
 8012466:	425b      	negs	r3, r3
 8012468:	e001      	b.n	801246e <__ssvfiscanf_r+0x1b6>
 801246a:	2300      	movs	r3, #0
 801246c:	9344      	str	r3, [sp, #272]	; 0x110
 801246e:	3303      	adds	r3, #3
 8012470:	e002      	b.n	8012478 <__ssvfiscanf_r+0x1c0>
 8012472:	2308      	movs	r3, #8
 8012474:	9344      	str	r3, [sp, #272]	; 0x110
 8012476:	3b04      	subs	r3, #4
 8012478:	9349      	str	r3, [sp, #292]	; 0x124
 801247a:	6863      	ldr	r3, [r4, #4]
 801247c:	2b00      	cmp	r3, #0
 801247e:	dd3c      	ble.n	80124fa <__ssvfiscanf_r+0x242>
 8012480:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012482:	065b      	lsls	r3, r3, #25
 8012484:	d406      	bmi.n	8012494 <__ssvfiscanf_r+0x1dc>
 8012486:	6823      	ldr	r3, [r4, #0]
 8012488:	9900      	ldr	r1, [sp, #0]
 801248a:	781a      	ldrb	r2, [r3, #0]
 801248c:	5c8a      	ldrb	r2, [r1, r2]
 801248e:	2108      	movs	r1, #8
 8012490:	420a      	tst	r2, r1
 8012492:	d13c      	bne.n	801250e <__ssvfiscanf_r+0x256>
 8012494:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8012496:	2b02      	cmp	r3, #2
 8012498:	dc4e      	bgt.n	8012538 <__ssvfiscanf_r+0x280>
 801249a:	0022      	movs	r2, r4
 801249c:	0030      	movs	r0, r6
 801249e:	ab02      	add	r3, sp, #8
 80124a0:	a943      	add	r1, sp, #268	; 0x10c
 80124a2:	f000 f873 	bl	801258c <_scanf_chars>
 80124a6:	2801      	cmp	r0, #1
 80124a8:	d061      	beq.n	801256e <__ssvfiscanf_r+0x2b6>
 80124aa:	2802      	cmp	r0, #2
 80124ac:	d000      	beq.n	80124b0 <__ssvfiscanf_r+0x1f8>
 80124ae:	e72f      	b.n	8012310 <__ssvfiscanf_r+0x58>
 80124b0:	e7c2      	b.n	8012438 <__ssvfiscanf_r+0x180>
 80124b2:	230a      	movs	r3, #10
 80124b4:	e7d3      	b.n	801245e <__ssvfiscanf_r+0x1a6>
 80124b6:	0039      	movs	r1, r7
 80124b8:	a803      	add	r0, sp, #12
 80124ba:	f000 fa8f 	bl	80129dc <__sccl>
 80124be:	2340      	movs	r3, #64	; 0x40
 80124c0:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80124c2:	0007      	movs	r7, r0
 80124c4:	4313      	orrs	r3, r2
 80124c6:	9343      	str	r3, [sp, #268]	; 0x10c
 80124c8:	2301      	movs	r3, #1
 80124ca:	e7d5      	b.n	8012478 <__ssvfiscanf_r+0x1c0>
 80124cc:	2340      	movs	r3, #64	; 0x40
 80124ce:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80124d0:	4313      	orrs	r3, r2
 80124d2:	9343      	str	r3, [sp, #268]	; 0x10c
 80124d4:	2300      	movs	r3, #0
 80124d6:	e7cf      	b.n	8012478 <__ssvfiscanf_r+0x1c0>
 80124d8:	2302      	movs	r3, #2
 80124da:	e7cd      	b.n	8012478 <__ssvfiscanf_r+0x1c0>
 80124dc:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80124de:	06d3      	lsls	r3, r2, #27
 80124e0:	d500      	bpl.n	80124e4 <__ssvfiscanf_r+0x22c>
 80124e2:	e715      	b.n	8012310 <__ssvfiscanf_r+0x58>
 80124e4:	9b02      	ldr	r3, [sp, #8]
 80124e6:	9947      	ldr	r1, [sp, #284]	; 0x11c
 80124e8:	1d18      	adds	r0, r3, #4
 80124ea:	9002      	str	r0, [sp, #8]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	07d5      	lsls	r5, r2, #31
 80124f0:	d501      	bpl.n	80124f6 <__ssvfiscanf_r+0x23e>
 80124f2:	8019      	strh	r1, [r3, #0]
 80124f4:	e70c      	b.n	8012310 <__ssvfiscanf_r+0x58>
 80124f6:	6019      	str	r1, [r3, #0]
 80124f8:	e70a      	b.n	8012310 <__ssvfiscanf_r+0x58>
 80124fa:	22c0      	movs	r2, #192	; 0xc0
 80124fc:	ab43      	add	r3, sp, #268	; 0x10c
 80124fe:	0052      	lsls	r2, r2, #1
 8012500:	0021      	movs	r1, r4
 8012502:	0030      	movs	r0, r6
 8012504:	589b      	ldr	r3, [r3, r2]
 8012506:	4798      	blx	r3
 8012508:	2800      	cmp	r0, #0
 801250a:	d0b9      	beq.n	8012480 <__ssvfiscanf_r+0x1c8>
 801250c:	e794      	b.n	8012438 <__ssvfiscanf_r+0x180>
 801250e:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8012510:	3201      	adds	r2, #1
 8012512:	9247      	str	r2, [sp, #284]	; 0x11c
 8012514:	6862      	ldr	r2, [r4, #4]
 8012516:	3a01      	subs	r2, #1
 8012518:	6062      	str	r2, [r4, #4]
 801251a:	2a00      	cmp	r2, #0
 801251c:	dd02      	ble.n	8012524 <__ssvfiscanf_r+0x26c>
 801251e:	3301      	adds	r3, #1
 8012520:	6023      	str	r3, [r4, #0]
 8012522:	e7b0      	b.n	8012486 <__ssvfiscanf_r+0x1ce>
 8012524:	22c0      	movs	r2, #192	; 0xc0
 8012526:	ab43      	add	r3, sp, #268	; 0x10c
 8012528:	0052      	lsls	r2, r2, #1
 801252a:	0021      	movs	r1, r4
 801252c:	0030      	movs	r0, r6
 801252e:	589b      	ldr	r3, [r3, r2]
 8012530:	4798      	blx	r3
 8012532:	2800      	cmp	r0, #0
 8012534:	d0a7      	beq.n	8012486 <__ssvfiscanf_r+0x1ce>
 8012536:	e77f      	b.n	8012438 <__ssvfiscanf_r+0x180>
 8012538:	2b04      	cmp	r3, #4
 801253a:	dc06      	bgt.n	801254a <__ssvfiscanf_r+0x292>
 801253c:	0022      	movs	r2, r4
 801253e:	0030      	movs	r0, r6
 8012540:	ab02      	add	r3, sp, #8
 8012542:	a943      	add	r1, sp, #268	; 0x10c
 8012544:	f000 f880 	bl	8012648 <_scanf_i>
 8012548:	e7ad      	b.n	80124a6 <__ssvfiscanf_r+0x1ee>
 801254a:	4b0f      	ldr	r3, [pc, #60]	; (8012588 <__ssvfiscanf_r+0x2d0>)
 801254c:	2b00      	cmp	r3, #0
 801254e:	d100      	bne.n	8012552 <__ssvfiscanf_r+0x29a>
 8012550:	e6de      	b.n	8012310 <__ssvfiscanf_r+0x58>
 8012552:	0022      	movs	r2, r4
 8012554:	0030      	movs	r0, r6
 8012556:	ab02      	add	r3, sp, #8
 8012558:	a943      	add	r1, sp, #268	; 0x10c
 801255a:	f7fd f841 	bl	800f5e0 <_scanf_float>
 801255e:	e7a2      	b.n	80124a6 <__ssvfiscanf_r+0x1ee>
 8012560:	89a3      	ldrh	r3, [r4, #12]
 8012562:	065b      	lsls	r3, r3, #25
 8012564:	d400      	bmi.n	8012568 <__ssvfiscanf_r+0x2b0>
 8012566:	e76c      	b.n	8012442 <__ssvfiscanf_r+0x18a>
 8012568:	2001      	movs	r0, #1
 801256a:	4240      	negs	r0, r0
 801256c:	e769      	b.n	8012442 <__ssvfiscanf_r+0x18a>
 801256e:	9846      	ldr	r0, [sp, #280]	; 0x118
 8012570:	e767      	b.n	8012442 <__ssvfiscanf_r+0x18a>
 8012572:	46c0      	nop			; (mov r8, r8)
 8012574:	fffffd6c 	.word	0xfffffd6c
 8012578:	08012201 	.word	0x08012201
 801257c:	08012279 	.word	0x08012279
 8012580:	08013bd1 	.word	0x08013bd1
 8012584:	08013ff2 	.word	0x08013ff2
 8012588:	0800f5e1 	.word	0x0800f5e1

0801258c <_scanf_chars>:
 801258c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801258e:	0015      	movs	r5, r2
 8012590:	688a      	ldr	r2, [r1, #8]
 8012592:	000c      	movs	r4, r1
 8012594:	9001      	str	r0, [sp, #4]
 8012596:	2a00      	cmp	r2, #0
 8012598:	d105      	bne.n	80125a6 <_scanf_chars+0x1a>
 801259a:	6989      	ldr	r1, [r1, #24]
 801259c:	3201      	adds	r2, #1
 801259e:	2900      	cmp	r1, #0
 80125a0:	d000      	beq.n	80125a4 <_scanf_chars+0x18>
 80125a2:	3a02      	subs	r2, #2
 80125a4:	60a2      	str	r2, [r4, #8]
 80125a6:	6822      	ldr	r2, [r4, #0]
 80125a8:	06d2      	lsls	r2, r2, #27
 80125aa:	d403      	bmi.n	80125b4 <_scanf_chars+0x28>
 80125ac:	681a      	ldr	r2, [r3, #0]
 80125ae:	1d11      	adds	r1, r2, #4
 80125b0:	6019      	str	r1, [r3, #0]
 80125b2:	6817      	ldr	r7, [r2, #0]
 80125b4:	2600      	movs	r6, #0
 80125b6:	69a0      	ldr	r0, [r4, #24]
 80125b8:	2800      	cmp	r0, #0
 80125ba:	d013      	beq.n	80125e4 <_scanf_chars+0x58>
 80125bc:	2801      	cmp	r0, #1
 80125be:	d108      	bne.n	80125d2 <_scanf_chars+0x46>
 80125c0:	682b      	ldr	r3, [r5, #0]
 80125c2:	6962      	ldr	r2, [r4, #20]
 80125c4:	781b      	ldrb	r3, [r3, #0]
 80125c6:	5cd3      	ldrb	r3, [r2, r3]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d10b      	bne.n	80125e4 <_scanf_chars+0x58>
 80125cc:	2e00      	cmp	r6, #0
 80125ce:	d038      	beq.n	8012642 <_scanf_chars+0xb6>
 80125d0:	e026      	b.n	8012620 <_scanf_chars+0x94>
 80125d2:	2802      	cmp	r0, #2
 80125d4:	d124      	bne.n	8012620 <_scanf_chars+0x94>
 80125d6:	682b      	ldr	r3, [r5, #0]
 80125d8:	4a1a      	ldr	r2, [pc, #104]	; (8012644 <_scanf_chars+0xb8>)
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	5cd3      	ldrb	r3, [r2, r3]
 80125de:	2208      	movs	r2, #8
 80125e0:	4213      	tst	r3, r2
 80125e2:	d11d      	bne.n	8012620 <_scanf_chars+0x94>
 80125e4:	2210      	movs	r2, #16
 80125e6:	6823      	ldr	r3, [r4, #0]
 80125e8:	3601      	adds	r6, #1
 80125ea:	4213      	tst	r3, r2
 80125ec:	d103      	bne.n	80125f6 <_scanf_chars+0x6a>
 80125ee:	682b      	ldr	r3, [r5, #0]
 80125f0:	781b      	ldrb	r3, [r3, #0]
 80125f2:	703b      	strb	r3, [r7, #0]
 80125f4:	3701      	adds	r7, #1
 80125f6:	682a      	ldr	r2, [r5, #0]
 80125f8:	686b      	ldr	r3, [r5, #4]
 80125fa:	3201      	adds	r2, #1
 80125fc:	602a      	str	r2, [r5, #0]
 80125fe:	68a2      	ldr	r2, [r4, #8]
 8012600:	3b01      	subs	r3, #1
 8012602:	3a01      	subs	r2, #1
 8012604:	606b      	str	r3, [r5, #4]
 8012606:	60a2      	str	r2, [r4, #8]
 8012608:	2a00      	cmp	r2, #0
 801260a:	d009      	beq.n	8012620 <_scanf_chars+0x94>
 801260c:	2b00      	cmp	r3, #0
 801260e:	dcd2      	bgt.n	80125b6 <_scanf_chars+0x2a>
 8012610:	23c0      	movs	r3, #192	; 0xc0
 8012612:	005b      	lsls	r3, r3, #1
 8012614:	0029      	movs	r1, r5
 8012616:	58e3      	ldr	r3, [r4, r3]
 8012618:	9801      	ldr	r0, [sp, #4]
 801261a:	4798      	blx	r3
 801261c:	2800      	cmp	r0, #0
 801261e:	d0ca      	beq.n	80125b6 <_scanf_chars+0x2a>
 8012620:	6822      	ldr	r2, [r4, #0]
 8012622:	2310      	movs	r3, #16
 8012624:	0011      	movs	r1, r2
 8012626:	4019      	ands	r1, r3
 8012628:	421a      	tst	r2, r3
 801262a:	d106      	bne.n	801263a <_scanf_chars+0xae>
 801262c:	68e3      	ldr	r3, [r4, #12]
 801262e:	3301      	adds	r3, #1
 8012630:	60e3      	str	r3, [r4, #12]
 8012632:	69a3      	ldr	r3, [r4, #24]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d000      	beq.n	801263a <_scanf_chars+0xae>
 8012638:	7039      	strb	r1, [r7, #0]
 801263a:	2000      	movs	r0, #0
 801263c:	6923      	ldr	r3, [r4, #16]
 801263e:	199b      	adds	r3, r3, r6
 8012640:	6123      	str	r3, [r4, #16]
 8012642:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012644:	08013bd1 	.word	0x08013bd1

08012648 <_scanf_i>:
 8012648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801264a:	b08b      	sub	sp, #44	; 0x2c
 801264c:	9301      	str	r3, [sp, #4]
 801264e:	4b7a      	ldr	r3, [pc, #488]	; (8012838 <_scanf_i+0x1f0>)
 8012650:	0016      	movs	r6, r2
 8012652:	9004      	str	r0, [sp, #16]
 8012654:	aa07      	add	r2, sp, #28
 8012656:	cba1      	ldmia	r3!, {r0, r5, r7}
 8012658:	c2a1      	stmia	r2!, {r0, r5, r7}
 801265a:	4a78      	ldr	r2, [pc, #480]	; (801283c <_scanf_i+0x1f4>)
 801265c:	698b      	ldr	r3, [r1, #24]
 801265e:	000c      	movs	r4, r1
 8012660:	9205      	str	r2, [sp, #20]
 8012662:	2b03      	cmp	r3, #3
 8012664:	d001      	beq.n	801266a <_scanf_i+0x22>
 8012666:	4b76      	ldr	r3, [pc, #472]	; (8012840 <_scanf_i+0x1f8>)
 8012668:	9305      	str	r3, [sp, #20]
 801266a:	22ae      	movs	r2, #174	; 0xae
 801266c:	2000      	movs	r0, #0
 801266e:	68a3      	ldr	r3, [r4, #8]
 8012670:	0052      	lsls	r2, r2, #1
 8012672:	1e59      	subs	r1, r3, #1
 8012674:	9003      	str	r0, [sp, #12]
 8012676:	4291      	cmp	r1, r2
 8012678:	d905      	bls.n	8012686 <_scanf_i+0x3e>
 801267a:	3b5e      	subs	r3, #94	; 0x5e
 801267c:	3bff      	subs	r3, #255	; 0xff
 801267e:	9303      	str	r3, [sp, #12]
 8012680:	235e      	movs	r3, #94	; 0x5e
 8012682:	33ff      	adds	r3, #255	; 0xff
 8012684:	60a3      	str	r3, [r4, #8]
 8012686:	0023      	movs	r3, r4
 8012688:	331c      	adds	r3, #28
 801268a:	9300      	str	r3, [sp, #0]
 801268c:	23d0      	movs	r3, #208	; 0xd0
 801268e:	2700      	movs	r7, #0
 8012690:	6822      	ldr	r2, [r4, #0]
 8012692:	011b      	lsls	r3, r3, #4
 8012694:	4313      	orrs	r3, r2
 8012696:	6023      	str	r3, [r4, #0]
 8012698:	9b00      	ldr	r3, [sp, #0]
 801269a:	9302      	str	r3, [sp, #8]
 801269c:	6833      	ldr	r3, [r6, #0]
 801269e:	a807      	add	r0, sp, #28
 80126a0:	7819      	ldrb	r1, [r3, #0]
 80126a2:	00bb      	lsls	r3, r7, #2
 80126a4:	2202      	movs	r2, #2
 80126a6:	5818      	ldr	r0, [r3, r0]
 80126a8:	f7fd fc2f 	bl	800ff0a <memchr>
 80126ac:	2800      	cmp	r0, #0
 80126ae:	d02a      	beq.n	8012706 <_scanf_i+0xbe>
 80126b0:	2f01      	cmp	r7, #1
 80126b2:	d161      	bne.n	8012778 <_scanf_i+0x130>
 80126b4:	6863      	ldr	r3, [r4, #4]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d106      	bne.n	80126c8 <_scanf_i+0x80>
 80126ba:	3308      	adds	r3, #8
 80126bc:	6822      	ldr	r2, [r4, #0]
 80126be:	6063      	str	r3, [r4, #4]
 80126c0:	33f9      	adds	r3, #249	; 0xf9
 80126c2:	33ff      	adds	r3, #255	; 0xff
 80126c4:	4313      	orrs	r3, r2
 80126c6:	6023      	str	r3, [r4, #0]
 80126c8:	6823      	ldr	r3, [r4, #0]
 80126ca:	4a5e      	ldr	r2, [pc, #376]	; (8012844 <_scanf_i+0x1fc>)
 80126cc:	4013      	ands	r3, r2
 80126ce:	6023      	str	r3, [r4, #0]
 80126d0:	68a3      	ldr	r3, [r4, #8]
 80126d2:	1e5a      	subs	r2, r3, #1
 80126d4:	60a2      	str	r2, [r4, #8]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d015      	beq.n	8012706 <_scanf_i+0xbe>
 80126da:	6833      	ldr	r3, [r6, #0]
 80126dc:	1c5a      	adds	r2, r3, #1
 80126de:	6032      	str	r2, [r6, #0]
 80126e0:	781b      	ldrb	r3, [r3, #0]
 80126e2:	9a02      	ldr	r2, [sp, #8]
 80126e4:	7013      	strb	r3, [r2, #0]
 80126e6:	6873      	ldr	r3, [r6, #4]
 80126e8:	1c55      	adds	r5, r2, #1
 80126ea:	3b01      	subs	r3, #1
 80126ec:	6073      	str	r3, [r6, #4]
 80126ee:	9502      	str	r5, [sp, #8]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	dc08      	bgt.n	8012706 <_scanf_i+0xbe>
 80126f4:	23c0      	movs	r3, #192	; 0xc0
 80126f6:	005b      	lsls	r3, r3, #1
 80126f8:	0031      	movs	r1, r6
 80126fa:	58e3      	ldr	r3, [r4, r3]
 80126fc:	9804      	ldr	r0, [sp, #16]
 80126fe:	4798      	blx	r3
 8012700:	2800      	cmp	r0, #0
 8012702:	d000      	beq.n	8012706 <_scanf_i+0xbe>
 8012704:	e080      	b.n	8012808 <_scanf_i+0x1c0>
 8012706:	3701      	adds	r7, #1
 8012708:	2f03      	cmp	r7, #3
 801270a:	d1c7      	bne.n	801269c <_scanf_i+0x54>
 801270c:	6863      	ldr	r3, [r4, #4]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d101      	bne.n	8012716 <_scanf_i+0xce>
 8012712:	330a      	adds	r3, #10
 8012714:	6063      	str	r3, [r4, #4]
 8012716:	2110      	movs	r1, #16
 8012718:	2700      	movs	r7, #0
 801271a:	6863      	ldr	r3, [r4, #4]
 801271c:	6960      	ldr	r0, [r4, #20]
 801271e:	1ac9      	subs	r1, r1, r3
 8012720:	4b49      	ldr	r3, [pc, #292]	; (8012848 <_scanf_i+0x200>)
 8012722:	18c9      	adds	r1, r1, r3
 8012724:	f000 f95a 	bl	80129dc <__sccl>
 8012728:	9d02      	ldr	r5, [sp, #8]
 801272a:	68a3      	ldr	r3, [r4, #8]
 801272c:	6820      	ldr	r0, [r4, #0]
 801272e:	9302      	str	r3, [sp, #8]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d040      	beq.n	80127b6 <_scanf_i+0x16e>
 8012734:	6831      	ldr	r1, [r6, #0]
 8012736:	6963      	ldr	r3, [r4, #20]
 8012738:	780a      	ldrb	r2, [r1, #0]
 801273a:	5c9b      	ldrb	r3, [r3, r2]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d03a      	beq.n	80127b6 <_scanf_i+0x16e>
 8012740:	2a30      	cmp	r2, #48	; 0x30
 8012742:	d129      	bne.n	8012798 <_scanf_i+0x150>
 8012744:	2380      	movs	r3, #128	; 0x80
 8012746:	011b      	lsls	r3, r3, #4
 8012748:	4218      	tst	r0, r3
 801274a:	d025      	beq.n	8012798 <_scanf_i+0x150>
 801274c:	9b03      	ldr	r3, [sp, #12]
 801274e:	3701      	adds	r7, #1
 8012750:	2b00      	cmp	r3, #0
 8012752:	d005      	beq.n	8012760 <_scanf_i+0x118>
 8012754:	001a      	movs	r2, r3
 8012756:	9b02      	ldr	r3, [sp, #8]
 8012758:	3a01      	subs	r2, #1
 801275a:	3301      	adds	r3, #1
 801275c:	9203      	str	r2, [sp, #12]
 801275e:	60a3      	str	r3, [r4, #8]
 8012760:	6873      	ldr	r3, [r6, #4]
 8012762:	3b01      	subs	r3, #1
 8012764:	6073      	str	r3, [r6, #4]
 8012766:	2b00      	cmp	r3, #0
 8012768:	dd1d      	ble.n	80127a6 <_scanf_i+0x15e>
 801276a:	6833      	ldr	r3, [r6, #0]
 801276c:	3301      	adds	r3, #1
 801276e:	6033      	str	r3, [r6, #0]
 8012770:	68a3      	ldr	r3, [r4, #8]
 8012772:	3b01      	subs	r3, #1
 8012774:	60a3      	str	r3, [r4, #8]
 8012776:	e7d8      	b.n	801272a <_scanf_i+0xe2>
 8012778:	2f02      	cmp	r7, #2
 801277a:	d1a9      	bne.n	80126d0 <_scanf_i+0x88>
 801277c:	21c0      	movs	r1, #192	; 0xc0
 801277e:	2380      	movs	r3, #128	; 0x80
 8012780:	6822      	ldr	r2, [r4, #0]
 8012782:	00c9      	lsls	r1, r1, #3
 8012784:	4011      	ands	r1, r2
 8012786:	009b      	lsls	r3, r3, #2
 8012788:	4299      	cmp	r1, r3
 801278a:	d1bf      	bne.n	801270c <_scanf_i+0xc4>
 801278c:	3bf1      	subs	r3, #241	; 0xf1
 801278e:	3bff      	subs	r3, #255	; 0xff
 8012790:	6063      	str	r3, [r4, #4]
 8012792:	33f0      	adds	r3, #240	; 0xf0
 8012794:	4313      	orrs	r3, r2
 8012796:	e79a      	b.n	80126ce <_scanf_i+0x86>
 8012798:	4b2c      	ldr	r3, [pc, #176]	; (801284c <_scanf_i+0x204>)
 801279a:	4003      	ands	r3, r0
 801279c:	6023      	str	r3, [r4, #0]
 801279e:	780b      	ldrb	r3, [r1, #0]
 80127a0:	702b      	strb	r3, [r5, #0]
 80127a2:	3501      	adds	r5, #1
 80127a4:	e7dc      	b.n	8012760 <_scanf_i+0x118>
 80127a6:	23c0      	movs	r3, #192	; 0xc0
 80127a8:	005b      	lsls	r3, r3, #1
 80127aa:	0031      	movs	r1, r6
 80127ac:	58e3      	ldr	r3, [r4, r3]
 80127ae:	9804      	ldr	r0, [sp, #16]
 80127b0:	4798      	blx	r3
 80127b2:	2800      	cmp	r0, #0
 80127b4:	d0dc      	beq.n	8012770 <_scanf_i+0x128>
 80127b6:	6823      	ldr	r3, [r4, #0]
 80127b8:	05db      	lsls	r3, r3, #23
 80127ba:	d50e      	bpl.n	80127da <_scanf_i+0x192>
 80127bc:	9b00      	ldr	r3, [sp, #0]
 80127be:	429d      	cmp	r5, r3
 80127c0:	d907      	bls.n	80127d2 <_scanf_i+0x18a>
 80127c2:	23be      	movs	r3, #190	; 0xbe
 80127c4:	3d01      	subs	r5, #1
 80127c6:	005b      	lsls	r3, r3, #1
 80127c8:	0032      	movs	r2, r6
 80127ca:	7829      	ldrb	r1, [r5, #0]
 80127cc:	58e3      	ldr	r3, [r4, r3]
 80127ce:	9804      	ldr	r0, [sp, #16]
 80127d0:	4798      	blx	r3
 80127d2:	9b00      	ldr	r3, [sp, #0]
 80127d4:	2001      	movs	r0, #1
 80127d6:	429d      	cmp	r5, r3
 80127d8:	d029      	beq.n	801282e <_scanf_i+0x1e6>
 80127da:	6821      	ldr	r1, [r4, #0]
 80127dc:	2310      	movs	r3, #16
 80127de:	000a      	movs	r2, r1
 80127e0:	401a      	ands	r2, r3
 80127e2:	4219      	tst	r1, r3
 80127e4:	d11c      	bne.n	8012820 <_scanf_i+0x1d8>
 80127e6:	702a      	strb	r2, [r5, #0]
 80127e8:	6863      	ldr	r3, [r4, #4]
 80127ea:	9900      	ldr	r1, [sp, #0]
 80127ec:	9804      	ldr	r0, [sp, #16]
 80127ee:	9e05      	ldr	r6, [sp, #20]
 80127f0:	47b0      	blx	r6
 80127f2:	9b01      	ldr	r3, [sp, #4]
 80127f4:	6822      	ldr	r2, [r4, #0]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	0691      	lsls	r1, r2, #26
 80127fa:	d507      	bpl.n	801280c <_scanf_i+0x1c4>
 80127fc:	9901      	ldr	r1, [sp, #4]
 80127fe:	1d1a      	adds	r2, r3, #4
 8012800:	600a      	str	r2, [r1, #0]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	6018      	str	r0, [r3, #0]
 8012806:	e008      	b.n	801281a <_scanf_i+0x1d2>
 8012808:	2700      	movs	r7, #0
 801280a:	e7d4      	b.n	80127b6 <_scanf_i+0x16e>
 801280c:	1d19      	adds	r1, r3, #4
 801280e:	07d6      	lsls	r6, r2, #31
 8012810:	d50f      	bpl.n	8012832 <_scanf_i+0x1ea>
 8012812:	9a01      	ldr	r2, [sp, #4]
 8012814:	6011      	str	r1, [r2, #0]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	8018      	strh	r0, [r3, #0]
 801281a:	68e3      	ldr	r3, [r4, #12]
 801281c:	3301      	adds	r3, #1
 801281e:	60e3      	str	r3, [r4, #12]
 8012820:	2000      	movs	r0, #0
 8012822:	9b00      	ldr	r3, [sp, #0]
 8012824:	1aed      	subs	r5, r5, r3
 8012826:	6923      	ldr	r3, [r4, #16]
 8012828:	19ed      	adds	r5, r5, r7
 801282a:	195b      	adds	r3, r3, r5
 801282c:	6123      	str	r3, [r4, #16]
 801282e:	b00b      	add	sp, #44	; 0x2c
 8012830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012832:	9a01      	ldr	r2, [sp, #4]
 8012834:	6011      	str	r1, [r2, #0]
 8012836:	e7e4      	b.n	8012802 <_scanf_i+0x1ba>
 8012838:	0801356c 	.word	0x0801356c
 801283c:	0800ecc5 	.word	0x0800ecc5
 8012840:	08012ce9 	.word	0x08012ce9
 8012844:	fffffaff 	.word	0xfffffaff
 8012848:	08013ffd 	.word	0x08013ffd
 801284c:	fffff6ff 	.word	0xfffff6ff

08012850 <__sflush_r>:
 8012850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012852:	898b      	ldrh	r3, [r1, #12]
 8012854:	0005      	movs	r5, r0
 8012856:	000c      	movs	r4, r1
 8012858:	071a      	lsls	r2, r3, #28
 801285a:	d45c      	bmi.n	8012916 <__sflush_r+0xc6>
 801285c:	684a      	ldr	r2, [r1, #4]
 801285e:	2a00      	cmp	r2, #0
 8012860:	dc04      	bgt.n	801286c <__sflush_r+0x1c>
 8012862:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8012864:	2a00      	cmp	r2, #0
 8012866:	dc01      	bgt.n	801286c <__sflush_r+0x1c>
 8012868:	2000      	movs	r0, #0
 801286a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801286c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801286e:	2f00      	cmp	r7, #0
 8012870:	d0fa      	beq.n	8012868 <__sflush_r+0x18>
 8012872:	2200      	movs	r2, #0
 8012874:	2080      	movs	r0, #128	; 0x80
 8012876:	682e      	ldr	r6, [r5, #0]
 8012878:	602a      	str	r2, [r5, #0]
 801287a:	001a      	movs	r2, r3
 801287c:	0140      	lsls	r0, r0, #5
 801287e:	6a21      	ldr	r1, [r4, #32]
 8012880:	4002      	ands	r2, r0
 8012882:	4203      	tst	r3, r0
 8012884:	d034      	beq.n	80128f0 <__sflush_r+0xa0>
 8012886:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012888:	89a3      	ldrh	r3, [r4, #12]
 801288a:	075b      	lsls	r3, r3, #29
 801288c:	d506      	bpl.n	801289c <__sflush_r+0x4c>
 801288e:	6863      	ldr	r3, [r4, #4]
 8012890:	1ac0      	subs	r0, r0, r3
 8012892:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012894:	2b00      	cmp	r3, #0
 8012896:	d001      	beq.n	801289c <__sflush_r+0x4c>
 8012898:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801289a:	1ac0      	subs	r0, r0, r3
 801289c:	0002      	movs	r2, r0
 801289e:	2300      	movs	r3, #0
 80128a0:	0028      	movs	r0, r5
 80128a2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80128a4:	6a21      	ldr	r1, [r4, #32]
 80128a6:	47b8      	blx	r7
 80128a8:	89a2      	ldrh	r2, [r4, #12]
 80128aa:	1c43      	adds	r3, r0, #1
 80128ac:	d106      	bne.n	80128bc <__sflush_r+0x6c>
 80128ae:	6829      	ldr	r1, [r5, #0]
 80128b0:	291d      	cmp	r1, #29
 80128b2:	d82c      	bhi.n	801290e <__sflush_r+0xbe>
 80128b4:	4b2a      	ldr	r3, [pc, #168]	; (8012960 <__sflush_r+0x110>)
 80128b6:	410b      	asrs	r3, r1
 80128b8:	07db      	lsls	r3, r3, #31
 80128ba:	d428      	bmi.n	801290e <__sflush_r+0xbe>
 80128bc:	2300      	movs	r3, #0
 80128be:	6063      	str	r3, [r4, #4]
 80128c0:	6923      	ldr	r3, [r4, #16]
 80128c2:	6023      	str	r3, [r4, #0]
 80128c4:	04d2      	lsls	r2, r2, #19
 80128c6:	d505      	bpl.n	80128d4 <__sflush_r+0x84>
 80128c8:	1c43      	adds	r3, r0, #1
 80128ca:	d102      	bne.n	80128d2 <__sflush_r+0x82>
 80128cc:	682b      	ldr	r3, [r5, #0]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d100      	bne.n	80128d4 <__sflush_r+0x84>
 80128d2:	6560      	str	r0, [r4, #84]	; 0x54
 80128d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80128d6:	602e      	str	r6, [r5, #0]
 80128d8:	2900      	cmp	r1, #0
 80128da:	d0c5      	beq.n	8012868 <__sflush_r+0x18>
 80128dc:	0023      	movs	r3, r4
 80128de:	3344      	adds	r3, #68	; 0x44
 80128e0:	4299      	cmp	r1, r3
 80128e2:	d002      	beq.n	80128ea <__sflush_r+0x9a>
 80128e4:	0028      	movs	r0, r5
 80128e6:	f7fe f9eb 	bl	8010cc0 <_free_r>
 80128ea:	2000      	movs	r0, #0
 80128ec:	6360      	str	r0, [r4, #52]	; 0x34
 80128ee:	e7bc      	b.n	801286a <__sflush_r+0x1a>
 80128f0:	2301      	movs	r3, #1
 80128f2:	0028      	movs	r0, r5
 80128f4:	47b8      	blx	r7
 80128f6:	1c43      	adds	r3, r0, #1
 80128f8:	d1c6      	bne.n	8012888 <__sflush_r+0x38>
 80128fa:	682b      	ldr	r3, [r5, #0]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d0c3      	beq.n	8012888 <__sflush_r+0x38>
 8012900:	2b1d      	cmp	r3, #29
 8012902:	d001      	beq.n	8012908 <__sflush_r+0xb8>
 8012904:	2b16      	cmp	r3, #22
 8012906:	d101      	bne.n	801290c <__sflush_r+0xbc>
 8012908:	602e      	str	r6, [r5, #0]
 801290a:	e7ad      	b.n	8012868 <__sflush_r+0x18>
 801290c:	89a2      	ldrh	r2, [r4, #12]
 801290e:	2340      	movs	r3, #64	; 0x40
 8012910:	4313      	orrs	r3, r2
 8012912:	81a3      	strh	r3, [r4, #12]
 8012914:	e7a9      	b.n	801286a <__sflush_r+0x1a>
 8012916:	690e      	ldr	r6, [r1, #16]
 8012918:	2e00      	cmp	r6, #0
 801291a:	d0a5      	beq.n	8012868 <__sflush_r+0x18>
 801291c:	680f      	ldr	r7, [r1, #0]
 801291e:	600e      	str	r6, [r1, #0]
 8012920:	1bba      	subs	r2, r7, r6
 8012922:	9201      	str	r2, [sp, #4]
 8012924:	2200      	movs	r2, #0
 8012926:	079b      	lsls	r3, r3, #30
 8012928:	d100      	bne.n	801292c <__sflush_r+0xdc>
 801292a:	694a      	ldr	r2, [r1, #20]
 801292c:	60a2      	str	r2, [r4, #8]
 801292e:	9b01      	ldr	r3, [sp, #4]
 8012930:	2b00      	cmp	r3, #0
 8012932:	dd99      	ble.n	8012868 <__sflush_r+0x18>
 8012934:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012936:	0032      	movs	r2, r6
 8012938:	001f      	movs	r7, r3
 801293a:	0028      	movs	r0, r5
 801293c:	9b01      	ldr	r3, [sp, #4]
 801293e:	6a21      	ldr	r1, [r4, #32]
 8012940:	47b8      	blx	r7
 8012942:	2800      	cmp	r0, #0
 8012944:	dc06      	bgt.n	8012954 <__sflush_r+0x104>
 8012946:	2340      	movs	r3, #64	; 0x40
 8012948:	2001      	movs	r0, #1
 801294a:	89a2      	ldrh	r2, [r4, #12]
 801294c:	4240      	negs	r0, r0
 801294e:	4313      	orrs	r3, r2
 8012950:	81a3      	strh	r3, [r4, #12]
 8012952:	e78a      	b.n	801286a <__sflush_r+0x1a>
 8012954:	9b01      	ldr	r3, [sp, #4]
 8012956:	1836      	adds	r6, r6, r0
 8012958:	1a1b      	subs	r3, r3, r0
 801295a:	9301      	str	r3, [sp, #4]
 801295c:	e7e7      	b.n	801292e <__sflush_r+0xde>
 801295e:	46c0      	nop			; (mov r8, r8)
 8012960:	dfbffffe 	.word	0xdfbffffe

08012964 <_fflush_r>:
 8012964:	690b      	ldr	r3, [r1, #16]
 8012966:	b570      	push	{r4, r5, r6, lr}
 8012968:	0005      	movs	r5, r0
 801296a:	000c      	movs	r4, r1
 801296c:	2b00      	cmp	r3, #0
 801296e:	d102      	bne.n	8012976 <_fflush_r+0x12>
 8012970:	2500      	movs	r5, #0
 8012972:	0028      	movs	r0, r5
 8012974:	bd70      	pop	{r4, r5, r6, pc}
 8012976:	2800      	cmp	r0, #0
 8012978:	d004      	beq.n	8012984 <_fflush_r+0x20>
 801297a:	6a03      	ldr	r3, [r0, #32]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d101      	bne.n	8012984 <_fflush_r+0x20>
 8012980:	f7fd f8c6 	bl	800fb10 <__sinit>
 8012984:	220c      	movs	r2, #12
 8012986:	5ea3      	ldrsh	r3, [r4, r2]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d0f1      	beq.n	8012970 <_fflush_r+0xc>
 801298c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801298e:	07d2      	lsls	r2, r2, #31
 8012990:	d404      	bmi.n	801299c <_fflush_r+0x38>
 8012992:	059b      	lsls	r3, r3, #22
 8012994:	d402      	bmi.n	801299c <_fflush_r+0x38>
 8012996:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012998:	f7fd faad 	bl	800fef6 <__retarget_lock_acquire_recursive>
 801299c:	0028      	movs	r0, r5
 801299e:	0021      	movs	r1, r4
 80129a0:	f7ff ff56 	bl	8012850 <__sflush_r>
 80129a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129a6:	0005      	movs	r5, r0
 80129a8:	07db      	lsls	r3, r3, #31
 80129aa:	d4e2      	bmi.n	8012972 <_fflush_r+0xe>
 80129ac:	89a3      	ldrh	r3, [r4, #12]
 80129ae:	059b      	lsls	r3, r3, #22
 80129b0:	d4df      	bmi.n	8012972 <_fflush_r+0xe>
 80129b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129b4:	f7fd faa0 	bl	800fef8 <__retarget_lock_release_recursive>
 80129b8:	e7db      	b.n	8012972 <_fflush_r+0xe>
	...

080129bc <fiprintf>:
 80129bc:	b40e      	push	{r1, r2, r3}
 80129be:	b517      	push	{r0, r1, r2, r4, lr}
 80129c0:	4c05      	ldr	r4, [pc, #20]	; (80129d8 <fiprintf+0x1c>)
 80129c2:	ab05      	add	r3, sp, #20
 80129c4:	cb04      	ldmia	r3!, {r2}
 80129c6:	0001      	movs	r1, r0
 80129c8:	6820      	ldr	r0, [r4, #0]
 80129ca:	9301      	str	r3, [sp, #4]
 80129cc:	f000 f9b8 	bl	8012d40 <_vfiprintf_r>
 80129d0:	bc1e      	pop	{r1, r2, r3, r4}
 80129d2:	bc08      	pop	{r3}
 80129d4:	b003      	add	sp, #12
 80129d6:	4718      	bx	r3
 80129d8:	2000021c 	.word	0x2000021c

080129dc <__sccl>:
 80129dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129de:	780b      	ldrb	r3, [r1, #0]
 80129e0:	0004      	movs	r4, r0
 80129e2:	2b5e      	cmp	r3, #94	; 0x5e
 80129e4:	d019      	beq.n	8012a1a <__sccl+0x3e>
 80129e6:	2200      	movs	r2, #0
 80129e8:	1c4d      	adds	r5, r1, #1
 80129ea:	0021      	movs	r1, r4
 80129ec:	1c60      	adds	r0, r4, #1
 80129ee:	30ff      	adds	r0, #255	; 0xff
 80129f0:	700a      	strb	r2, [r1, #0]
 80129f2:	3101      	adds	r1, #1
 80129f4:	4281      	cmp	r1, r0
 80129f6:	d1fb      	bne.n	80129f0 <__sccl+0x14>
 80129f8:	1e68      	subs	r0, r5, #1
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d00c      	beq.n	8012a18 <__sccl+0x3c>
 80129fe:	2101      	movs	r1, #1
 8012a00:	262d      	movs	r6, #45	; 0x2d
 8012a02:	404a      	eors	r2, r1
 8012a04:	0028      	movs	r0, r5
 8012a06:	54e2      	strb	r2, [r4, r3]
 8012a08:	7801      	ldrb	r1, [r0, #0]
 8012a0a:	1c45      	adds	r5, r0, #1
 8012a0c:	292d      	cmp	r1, #45	; 0x2d
 8012a0e:	d00c      	beq.n	8012a2a <__sccl+0x4e>
 8012a10:	295d      	cmp	r1, #93	; 0x5d
 8012a12:	d01d      	beq.n	8012a50 <__sccl+0x74>
 8012a14:	2900      	cmp	r1, #0
 8012a16:	d104      	bne.n	8012a22 <__sccl+0x46>
 8012a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a1a:	2201      	movs	r2, #1
 8012a1c:	784b      	ldrb	r3, [r1, #1]
 8012a1e:	1c8d      	adds	r5, r1, #2
 8012a20:	e7e3      	b.n	80129ea <__sccl+0xe>
 8012a22:	000b      	movs	r3, r1
 8012a24:	e7ee      	b.n	8012a04 <__sccl+0x28>
 8012a26:	0033      	movs	r3, r6
 8012a28:	e7ec      	b.n	8012a04 <__sccl+0x28>
 8012a2a:	7841      	ldrb	r1, [r0, #1]
 8012a2c:	295d      	cmp	r1, #93	; 0x5d
 8012a2e:	d0fa      	beq.n	8012a26 <__sccl+0x4a>
 8012a30:	428b      	cmp	r3, r1
 8012a32:	dcf8      	bgt.n	8012a26 <__sccl+0x4a>
 8012a34:	001d      	movs	r5, r3
 8012a36:	3002      	adds	r0, #2
 8012a38:	3501      	adds	r5, #1
 8012a3a:	5562      	strb	r2, [r4, r5]
 8012a3c:	42a9      	cmp	r1, r5
 8012a3e:	dcfb      	bgt.n	8012a38 <__sccl+0x5c>
 8012a40:	2500      	movs	r5, #0
 8012a42:	1c5f      	adds	r7, r3, #1
 8012a44:	428b      	cmp	r3, r1
 8012a46:	da01      	bge.n	8012a4c <__sccl+0x70>
 8012a48:	1acd      	subs	r5, r1, r3
 8012a4a:	3d01      	subs	r5, #1
 8012a4c:	197b      	adds	r3, r7, r5
 8012a4e:	e7db      	b.n	8012a08 <__sccl+0x2c>
 8012a50:	0028      	movs	r0, r5
 8012a52:	e7e1      	b.n	8012a18 <__sccl+0x3c>

08012a54 <__submore>:
 8012a54:	000b      	movs	r3, r1
 8012a56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a58:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8012a5a:	3344      	adds	r3, #68	; 0x44
 8012a5c:	000c      	movs	r4, r1
 8012a5e:	429d      	cmp	r5, r3
 8012a60:	d11c      	bne.n	8012a9c <__submore+0x48>
 8012a62:	2680      	movs	r6, #128	; 0x80
 8012a64:	00f6      	lsls	r6, r6, #3
 8012a66:	0031      	movs	r1, r6
 8012a68:	f7fe fcfc 	bl	8011464 <_malloc_r>
 8012a6c:	2800      	cmp	r0, #0
 8012a6e:	d102      	bne.n	8012a76 <__submore+0x22>
 8012a70:	2001      	movs	r0, #1
 8012a72:	4240      	negs	r0, r0
 8012a74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012a76:	0023      	movs	r3, r4
 8012a78:	6360      	str	r0, [r4, #52]	; 0x34
 8012a7a:	63a6      	str	r6, [r4, #56]	; 0x38
 8012a7c:	3346      	adds	r3, #70	; 0x46
 8012a7e:	781a      	ldrb	r2, [r3, #0]
 8012a80:	4b10      	ldr	r3, [pc, #64]	; (8012ac4 <__submore+0x70>)
 8012a82:	54c2      	strb	r2, [r0, r3]
 8012a84:	0023      	movs	r3, r4
 8012a86:	3345      	adds	r3, #69	; 0x45
 8012a88:	781a      	ldrb	r2, [r3, #0]
 8012a8a:	4b0f      	ldr	r3, [pc, #60]	; (8012ac8 <__submore+0x74>)
 8012a8c:	54c2      	strb	r2, [r0, r3]
 8012a8e:	782a      	ldrb	r2, [r5, #0]
 8012a90:	4b0e      	ldr	r3, [pc, #56]	; (8012acc <__submore+0x78>)
 8012a92:	54c2      	strb	r2, [r0, r3]
 8012a94:	18c0      	adds	r0, r0, r3
 8012a96:	6020      	str	r0, [r4, #0]
 8012a98:	2000      	movs	r0, #0
 8012a9a:	e7eb      	b.n	8012a74 <__submore+0x20>
 8012a9c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8012a9e:	0029      	movs	r1, r5
 8012aa0:	0073      	lsls	r3, r6, #1
 8012aa2:	001a      	movs	r2, r3
 8012aa4:	9301      	str	r3, [sp, #4]
 8012aa6:	f000 f86d 	bl	8012b84 <_realloc_r>
 8012aaa:	1e05      	subs	r5, r0, #0
 8012aac:	d0e0      	beq.n	8012a70 <__submore+0x1c>
 8012aae:	1987      	adds	r7, r0, r6
 8012ab0:	0001      	movs	r1, r0
 8012ab2:	0032      	movs	r2, r6
 8012ab4:	0038      	movs	r0, r7
 8012ab6:	f7fd fa33 	bl	800ff20 <memcpy>
 8012aba:	9b01      	ldr	r3, [sp, #4]
 8012abc:	6027      	str	r7, [r4, #0]
 8012abe:	6365      	str	r5, [r4, #52]	; 0x34
 8012ac0:	63a3      	str	r3, [r4, #56]	; 0x38
 8012ac2:	e7e9      	b.n	8012a98 <__submore+0x44>
 8012ac4:	000003ff 	.word	0x000003ff
 8012ac8:	000003fe 	.word	0x000003fe
 8012acc:	000003fd 	.word	0x000003fd

08012ad0 <memmove>:
 8012ad0:	b510      	push	{r4, lr}
 8012ad2:	4288      	cmp	r0, r1
 8012ad4:	d902      	bls.n	8012adc <memmove+0xc>
 8012ad6:	188b      	adds	r3, r1, r2
 8012ad8:	4298      	cmp	r0, r3
 8012ada:	d303      	bcc.n	8012ae4 <memmove+0x14>
 8012adc:	2300      	movs	r3, #0
 8012ade:	e007      	b.n	8012af0 <memmove+0x20>
 8012ae0:	5c8b      	ldrb	r3, [r1, r2]
 8012ae2:	5483      	strb	r3, [r0, r2]
 8012ae4:	3a01      	subs	r2, #1
 8012ae6:	d2fb      	bcs.n	8012ae0 <memmove+0x10>
 8012ae8:	bd10      	pop	{r4, pc}
 8012aea:	5ccc      	ldrb	r4, [r1, r3]
 8012aec:	54c4      	strb	r4, [r0, r3]
 8012aee:	3301      	adds	r3, #1
 8012af0:	429a      	cmp	r2, r3
 8012af2:	d1fa      	bne.n	8012aea <memmove+0x1a>
 8012af4:	e7f8      	b.n	8012ae8 <memmove+0x18>
	...

08012af8 <_sbrk_r>:
 8012af8:	2300      	movs	r3, #0
 8012afa:	b570      	push	{r4, r5, r6, lr}
 8012afc:	4d06      	ldr	r5, [pc, #24]	; (8012b18 <_sbrk_r+0x20>)
 8012afe:	0004      	movs	r4, r0
 8012b00:	0008      	movs	r0, r1
 8012b02:	602b      	str	r3, [r5, #0]
 8012b04:	f7f2 fd04 	bl	8005510 <_sbrk>
 8012b08:	1c43      	adds	r3, r0, #1
 8012b0a:	d103      	bne.n	8012b14 <_sbrk_r+0x1c>
 8012b0c:	682b      	ldr	r3, [r5, #0]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d000      	beq.n	8012b14 <_sbrk_r+0x1c>
 8012b12:	6023      	str	r3, [r4, #0]
 8012b14:	bd70      	pop	{r4, r5, r6, pc}
 8012b16:	46c0      	nop			; (mov r8, r8)
 8012b18:	20003f5c 	.word	0x20003f5c

08012b1c <abort>:
 8012b1c:	2006      	movs	r0, #6
 8012b1e:	b510      	push	{r4, lr}
 8012b20:	f000 fafa 	bl	8013118 <raise>
 8012b24:	2001      	movs	r0, #1
 8012b26:	f7f2 fc81 	bl	800542c <_exit>

08012b2a <_calloc_r>:
 8012b2a:	b570      	push	{r4, r5, r6, lr}
 8012b2c:	0c0b      	lsrs	r3, r1, #16
 8012b2e:	0c15      	lsrs	r5, r2, #16
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d11e      	bne.n	8012b72 <_calloc_r+0x48>
 8012b34:	2d00      	cmp	r5, #0
 8012b36:	d10c      	bne.n	8012b52 <_calloc_r+0x28>
 8012b38:	b289      	uxth	r1, r1
 8012b3a:	b294      	uxth	r4, r2
 8012b3c:	434c      	muls	r4, r1
 8012b3e:	0021      	movs	r1, r4
 8012b40:	f7fe fc90 	bl	8011464 <_malloc_r>
 8012b44:	1e05      	subs	r5, r0, #0
 8012b46:	d01b      	beq.n	8012b80 <_calloc_r+0x56>
 8012b48:	0022      	movs	r2, r4
 8012b4a:	2100      	movs	r1, #0
 8012b4c:	f7fd f8aa 	bl	800fca4 <memset>
 8012b50:	e016      	b.n	8012b80 <_calloc_r+0x56>
 8012b52:	1c2b      	adds	r3, r5, #0
 8012b54:	1c0c      	adds	r4, r1, #0
 8012b56:	b289      	uxth	r1, r1
 8012b58:	b292      	uxth	r2, r2
 8012b5a:	434a      	muls	r2, r1
 8012b5c:	b2a1      	uxth	r1, r4
 8012b5e:	b29c      	uxth	r4, r3
 8012b60:	434c      	muls	r4, r1
 8012b62:	0c13      	lsrs	r3, r2, #16
 8012b64:	18e4      	adds	r4, r4, r3
 8012b66:	0c23      	lsrs	r3, r4, #16
 8012b68:	d107      	bne.n	8012b7a <_calloc_r+0x50>
 8012b6a:	0424      	lsls	r4, r4, #16
 8012b6c:	b292      	uxth	r2, r2
 8012b6e:	4314      	orrs	r4, r2
 8012b70:	e7e5      	b.n	8012b3e <_calloc_r+0x14>
 8012b72:	2d00      	cmp	r5, #0
 8012b74:	d101      	bne.n	8012b7a <_calloc_r+0x50>
 8012b76:	1c14      	adds	r4, r2, #0
 8012b78:	e7ed      	b.n	8012b56 <_calloc_r+0x2c>
 8012b7a:	230c      	movs	r3, #12
 8012b7c:	2500      	movs	r5, #0
 8012b7e:	6003      	str	r3, [r0, #0]
 8012b80:	0028      	movs	r0, r5
 8012b82:	bd70      	pop	{r4, r5, r6, pc}

08012b84 <_realloc_r>:
 8012b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b86:	0007      	movs	r7, r0
 8012b88:	000e      	movs	r6, r1
 8012b8a:	0014      	movs	r4, r2
 8012b8c:	2900      	cmp	r1, #0
 8012b8e:	d105      	bne.n	8012b9c <_realloc_r+0x18>
 8012b90:	0011      	movs	r1, r2
 8012b92:	f7fe fc67 	bl	8011464 <_malloc_r>
 8012b96:	0005      	movs	r5, r0
 8012b98:	0028      	movs	r0, r5
 8012b9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012b9c:	2a00      	cmp	r2, #0
 8012b9e:	d103      	bne.n	8012ba8 <_realloc_r+0x24>
 8012ba0:	f7fe f88e 	bl	8010cc0 <_free_r>
 8012ba4:	0025      	movs	r5, r4
 8012ba6:	e7f7      	b.n	8012b98 <_realloc_r+0x14>
 8012ba8:	f000 fad6 	bl	8013158 <_malloc_usable_size_r>
 8012bac:	9001      	str	r0, [sp, #4]
 8012bae:	4284      	cmp	r4, r0
 8012bb0:	d803      	bhi.n	8012bba <_realloc_r+0x36>
 8012bb2:	0035      	movs	r5, r6
 8012bb4:	0843      	lsrs	r3, r0, #1
 8012bb6:	42a3      	cmp	r3, r4
 8012bb8:	d3ee      	bcc.n	8012b98 <_realloc_r+0x14>
 8012bba:	0021      	movs	r1, r4
 8012bbc:	0038      	movs	r0, r7
 8012bbe:	f7fe fc51 	bl	8011464 <_malloc_r>
 8012bc2:	1e05      	subs	r5, r0, #0
 8012bc4:	d0e8      	beq.n	8012b98 <_realloc_r+0x14>
 8012bc6:	9b01      	ldr	r3, [sp, #4]
 8012bc8:	0022      	movs	r2, r4
 8012bca:	429c      	cmp	r4, r3
 8012bcc:	d900      	bls.n	8012bd0 <_realloc_r+0x4c>
 8012bce:	001a      	movs	r2, r3
 8012bd0:	0031      	movs	r1, r6
 8012bd2:	0028      	movs	r0, r5
 8012bd4:	f7fd f9a4 	bl	800ff20 <memcpy>
 8012bd8:	0031      	movs	r1, r6
 8012bda:	0038      	movs	r0, r7
 8012bdc:	f7fe f870 	bl	8010cc0 <_free_r>
 8012be0:	e7da      	b.n	8012b98 <_realloc_r+0x14>
	...

08012be4 <_strtoul_l.constprop.0>:
 8012be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012be6:	b087      	sub	sp, #28
 8012be8:	9202      	str	r2, [sp, #8]
 8012bea:	4a3e      	ldr	r2, [pc, #248]	; (8012ce4 <_strtoul_l.constprop.0+0x100>)
 8012bec:	001e      	movs	r6, r3
 8012bee:	9101      	str	r1, [sp, #4]
 8012bf0:	000b      	movs	r3, r1
 8012bf2:	4694      	mov	ip, r2
 8012bf4:	2108      	movs	r1, #8
 8012bf6:	9005      	str	r0, [sp, #20]
 8012bf8:	001a      	movs	r2, r3
 8012bfa:	4660      	mov	r0, ip
 8012bfc:	7814      	ldrb	r4, [r2, #0]
 8012bfe:	3301      	adds	r3, #1
 8012c00:	5d00      	ldrb	r0, [r0, r4]
 8012c02:	001d      	movs	r5, r3
 8012c04:	0007      	movs	r7, r0
 8012c06:	400f      	ands	r7, r1
 8012c08:	4208      	tst	r0, r1
 8012c0a:	d1f5      	bne.n	8012bf8 <_strtoul_l.constprop.0+0x14>
 8012c0c:	2c2d      	cmp	r4, #45	; 0x2d
 8012c0e:	d13d      	bne.n	8012c8c <_strtoul_l.constprop.0+0xa8>
 8012c10:	2701      	movs	r7, #1
 8012c12:	781c      	ldrb	r4, [r3, #0]
 8012c14:	1c95      	adds	r5, r2, #2
 8012c16:	2e00      	cmp	r6, #0
 8012c18:	d05f      	beq.n	8012cda <_strtoul_l.constprop.0+0xf6>
 8012c1a:	2e10      	cmp	r6, #16
 8012c1c:	d109      	bne.n	8012c32 <_strtoul_l.constprop.0+0x4e>
 8012c1e:	2c30      	cmp	r4, #48	; 0x30
 8012c20:	d107      	bne.n	8012c32 <_strtoul_l.constprop.0+0x4e>
 8012c22:	2220      	movs	r2, #32
 8012c24:	782b      	ldrb	r3, [r5, #0]
 8012c26:	4393      	bics	r3, r2
 8012c28:	2b58      	cmp	r3, #88	; 0x58
 8012c2a:	d151      	bne.n	8012cd0 <_strtoul_l.constprop.0+0xec>
 8012c2c:	2610      	movs	r6, #16
 8012c2e:	786c      	ldrb	r4, [r5, #1]
 8012c30:	3502      	adds	r5, #2
 8012c32:	2001      	movs	r0, #1
 8012c34:	0031      	movs	r1, r6
 8012c36:	4240      	negs	r0, r0
 8012c38:	f7ed fa8c 	bl	8000154 <__udivsi3>
 8012c3c:	9003      	str	r0, [sp, #12]
 8012c3e:	2001      	movs	r0, #1
 8012c40:	0031      	movs	r1, r6
 8012c42:	4240      	negs	r0, r0
 8012c44:	f7ed fb0c 	bl	8000260 <__aeabi_uidivmod>
 8012c48:	2300      	movs	r3, #0
 8012c4a:	2201      	movs	r2, #1
 8012c4c:	9104      	str	r1, [sp, #16]
 8012c4e:	2101      	movs	r1, #1
 8012c50:	0018      	movs	r0, r3
 8012c52:	4694      	mov	ip, r2
 8012c54:	4249      	negs	r1, r1
 8012c56:	0022      	movs	r2, r4
 8012c58:	3a30      	subs	r2, #48	; 0x30
 8012c5a:	2a09      	cmp	r2, #9
 8012c5c:	d903      	bls.n	8012c66 <_strtoul_l.constprop.0+0x82>
 8012c5e:	3a11      	subs	r2, #17
 8012c60:	2a19      	cmp	r2, #25
 8012c62:	d818      	bhi.n	8012c96 <_strtoul_l.constprop.0+0xb2>
 8012c64:	320a      	adds	r2, #10
 8012c66:	4296      	cmp	r6, r2
 8012c68:	dd19      	ble.n	8012c9e <_strtoul_l.constprop.0+0xba>
 8012c6a:	1c5c      	adds	r4, r3, #1
 8012c6c:	d00b      	beq.n	8012c86 <_strtoul_l.constprop.0+0xa2>
 8012c6e:	9c03      	ldr	r4, [sp, #12]
 8012c70:	000b      	movs	r3, r1
 8012c72:	4284      	cmp	r4, r0
 8012c74:	d307      	bcc.n	8012c86 <_strtoul_l.constprop.0+0xa2>
 8012c76:	d103      	bne.n	8012c80 <_strtoul_l.constprop.0+0x9c>
 8012c78:	9c04      	ldr	r4, [sp, #16]
 8012c7a:	000b      	movs	r3, r1
 8012c7c:	4294      	cmp	r4, r2
 8012c7e:	db02      	blt.n	8012c86 <_strtoul_l.constprop.0+0xa2>
 8012c80:	4663      	mov	r3, ip
 8012c82:	4370      	muls	r0, r6
 8012c84:	1810      	adds	r0, r2, r0
 8012c86:	782c      	ldrb	r4, [r5, #0]
 8012c88:	3501      	adds	r5, #1
 8012c8a:	e7e4      	b.n	8012c56 <_strtoul_l.constprop.0+0x72>
 8012c8c:	2c2b      	cmp	r4, #43	; 0x2b
 8012c8e:	d1c2      	bne.n	8012c16 <_strtoul_l.constprop.0+0x32>
 8012c90:	781c      	ldrb	r4, [r3, #0]
 8012c92:	1c95      	adds	r5, r2, #2
 8012c94:	e7bf      	b.n	8012c16 <_strtoul_l.constprop.0+0x32>
 8012c96:	0022      	movs	r2, r4
 8012c98:	3a61      	subs	r2, #97	; 0x61
 8012c9a:	2a19      	cmp	r2, #25
 8012c9c:	d9e2      	bls.n	8012c64 <_strtoul_l.constprop.0+0x80>
 8012c9e:	1c5a      	adds	r2, r3, #1
 8012ca0:	d108      	bne.n	8012cb4 <_strtoul_l.constprop.0+0xd0>
 8012ca2:	2222      	movs	r2, #34	; 0x22
 8012ca4:	9905      	ldr	r1, [sp, #20]
 8012ca6:	0018      	movs	r0, r3
 8012ca8:	600a      	str	r2, [r1, #0]
 8012caa:	9a02      	ldr	r2, [sp, #8]
 8012cac:	2a00      	cmp	r2, #0
 8012cae:	d109      	bne.n	8012cc4 <_strtoul_l.constprop.0+0xe0>
 8012cb0:	b007      	add	sp, #28
 8012cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cb4:	2f00      	cmp	r7, #0
 8012cb6:	d000      	beq.n	8012cba <_strtoul_l.constprop.0+0xd6>
 8012cb8:	4240      	negs	r0, r0
 8012cba:	9a02      	ldr	r2, [sp, #8]
 8012cbc:	2a00      	cmp	r2, #0
 8012cbe:	d0f7      	beq.n	8012cb0 <_strtoul_l.constprop.0+0xcc>
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d001      	beq.n	8012cc8 <_strtoul_l.constprop.0+0xe4>
 8012cc4:	1e6b      	subs	r3, r5, #1
 8012cc6:	9301      	str	r3, [sp, #4]
 8012cc8:	9b02      	ldr	r3, [sp, #8]
 8012cca:	9a01      	ldr	r2, [sp, #4]
 8012ccc:	601a      	str	r2, [r3, #0]
 8012cce:	e7ef      	b.n	8012cb0 <_strtoul_l.constprop.0+0xcc>
 8012cd0:	2430      	movs	r4, #48	; 0x30
 8012cd2:	2e00      	cmp	r6, #0
 8012cd4:	d1ad      	bne.n	8012c32 <_strtoul_l.constprop.0+0x4e>
 8012cd6:	3608      	adds	r6, #8
 8012cd8:	e7ab      	b.n	8012c32 <_strtoul_l.constprop.0+0x4e>
 8012cda:	2c30      	cmp	r4, #48	; 0x30
 8012cdc:	d0a1      	beq.n	8012c22 <_strtoul_l.constprop.0+0x3e>
 8012cde:	260a      	movs	r6, #10
 8012ce0:	e7a7      	b.n	8012c32 <_strtoul_l.constprop.0+0x4e>
 8012ce2:	46c0      	nop			; (mov r8, r8)
 8012ce4:	08013bd1 	.word	0x08013bd1

08012ce8 <_strtoul_r>:
 8012ce8:	b510      	push	{r4, lr}
 8012cea:	f7ff ff7b 	bl	8012be4 <_strtoul_l.constprop.0>
 8012cee:	bd10      	pop	{r4, pc}

08012cf0 <__sfputc_r>:
 8012cf0:	6893      	ldr	r3, [r2, #8]
 8012cf2:	b510      	push	{r4, lr}
 8012cf4:	3b01      	subs	r3, #1
 8012cf6:	6093      	str	r3, [r2, #8]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	da04      	bge.n	8012d06 <__sfputc_r+0x16>
 8012cfc:	6994      	ldr	r4, [r2, #24]
 8012cfe:	42a3      	cmp	r3, r4
 8012d00:	db07      	blt.n	8012d12 <__sfputc_r+0x22>
 8012d02:	290a      	cmp	r1, #10
 8012d04:	d005      	beq.n	8012d12 <__sfputc_r+0x22>
 8012d06:	6813      	ldr	r3, [r2, #0]
 8012d08:	1c58      	adds	r0, r3, #1
 8012d0a:	6010      	str	r0, [r2, #0]
 8012d0c:	7019      	strb	r1, [r3, #0]
 8012d0e:	0008      	movs	r0, r1
 8012d10:	bd10      	pop	{r4, pc}
 8012d12:	f000 f931 	bl	8012f78 <__swbuf_r>
 8012d16:	0001      	movs	r1, r0
 8012d18:	e7f9      	b.n	8012d0e <__sfputc_r+0x1e>

08012d1a <__sfputs_r>:
 8012d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d1c:	0006      	movs	r6, r0
 8012d1e:	000f      	movs	r7, r1
 8012d20:	0014      	movs	r4, r2
 8012d22:	18d5      	adds	r5, r2, r3
 8012d24:	42ac      	cmp	r4, r5
 8012d26:	d101      	bne.n	8012d2c <__sfputs_r+0x12>
 8012d28:	2000      	movs	r0, #0
 8012d2a:	e007      	b.n	8012d3c <__sfputs_r+0x22>
 8012d2c:	7821      	ldrb	r1, [r4, #0]
 8012d2e:	003a      	movs	r2, r7
 8012d30:	0030      	movs	r0, r6
 8012d32:	f7ff ffdd 	bl	8012cf0 <__sfputc_r>
 8012d36:	3401      	adds	r4, #1
 8012d38:	1c43      	adds	r3, r0, #1
 8012d3a:	d1f3      	bne.n	8012d24 <__sfputs_r+0xa>
 8012d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012d40 <_vfiprintf_r>:
 8012d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d42:	b0a1      	sub	sp, #132	; 0x84
 8012d44:	000f      	movs	r7, r1
 8012d46:	0015      	movs	r5, r2
 8012d48:	001e      	movs	r6, r3
 8012d4a:	9003      	str	r0, [sp, #12]
 8012d4c:	2800      	cmp	r0, #0
 8012d4e:	d004      	beq.n	8012d5a <_vfiprintf_r+0x1a>
 8012d50:	6a03      	ldr	r3, [r0, #32]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d101      	bne.n	8012d5a <_vfiprintf_r+0x1a>
 8012d56:	f7fc fedb 	bl	800fb10 <__sinit>
 8012d5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d5c:	07db      	lsls	r3, r3, #31
 8012d5e:	d405      	bmi.n	8012d6c <_vfiprintf_r+0x2c>
 8012d60:	89bb      	ldrh	r3, [r7, #12]
 8012d62:	059b      	lsls	r3, r3, #22
 8012d64:	d402      	bmi.n	8012d6c <_vfiprintf_r+0x2c>
 8012d66:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8012d68:	f7fd f8c5 	bl	800fef6 <__retarget_lock_acquire_recursive>
 8012d6c:	89bb      	ldrh	r3, [r7, #12]
 8012d6e:	071b      	lsls	r3, r3, #28
 8012d70:	d502      	bpl.n	8012d78 <_vfiprintf_r+0x38>
 8012d72:	693b      	ldr	r3, [r7, #16]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d113      	bne.n	8012da0 <_vfiprintf_r+0x60>
 8012d78:	0039      	movs	r1, r7
 8012d7a:	9803      	ldr	r0, [sp, #12]
 8012d7c:	f000 f93e 	bl	8012ffc <__swsetup_r>
 8012d80:	2800      	cmp	r0, #0
 8012d82:	d00d      	beq.n	8012da0 <_vfiprintf_r+0x60>
 8012d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d86:	07db      	lsls	r3, r3, #31
 8012d88:	d503      	bpl.n	8012d92 <_vfiprintf_r+0x52>
 8012d8a:	2001      	movs	r0, #1
 8012d8c:	4240      	negs	r0, r0
 8012d8e:	b021      	add	sp, #132	; 0x84
 8012d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d92:	89bb      	ldrh	r3, [r7, #12]
 8012d94:	059b      	lsls	r3, r3, #22
 8012d96:	d4f8      	bmi.n	8012d8a <_vfiprintf_r+0x4a>
 8012d98:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8012d9a:	f7fd f8ad 	bl	800fef8 <__retarget_lock_release_recursive>
 8012d9e:	e7f4      	b.n	8012d8a <_vfiprintf_r+0x4a>
 8012da0:	2300      	movs	r3, #0
 8012da2:	ac08      	add	r4, sp, #32
 8012da4:	6163      	str	r3, [r4, #20]
 8012da6:	3320      	adds	r3, #32
 8012da8:	7663      	strb	r3, [r4, #25]
 8012daa:	3310      	adds	r3, #16
 8012dac:	76a3      	strb	r3, [r4, #26]
 8012dae:	9607      	str	r6, [sp, #28]
 8012db0:	002e      	movs	r6, r5
 8012db2:	7833      	ldrb	r3, [r6, #0]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d001      	beq.n	8012dbc <_vfiprintf_r+0x7c>
 8012db8:	2b25      	cmp	r3, #37	; 0x25
 8012dba:	d148      	bne.n	8012e4e <_vfiprintf_r+0x10e>
 8012dbc:	1b73      	subs	r3, r6, r5
 8012dbe:	9305      	str	r3, [sp, #20]
 8012dc0:	42ae      	cmp	r6, r5
 8012dc2:	d00b      	beq.n	8012ddc <_vfiprintf_r+0x9c>
 8012dc4:	002a      	movs	r2, r5
 8012dc6:	0039      	movs	r1, r7
 8012dc8:	9803      	ldr	r0, [sp, #12]
 8012dca:	f7ff ffa6 	bl	8012d1a <__sfputs_r>
 8012dce:	3001      	adds	r0, #1
 8012dd0:	d100      	bne.n	8012dd4 <_vfiprintf_r+0x94>
 8012dd2:	e0af      	b.n	8012f34 <_vfiprintf_r+0x1f4>
 8012dd4:	6963      	ldr	r3, [r4, #20]
 8012dd6:	9a05      	ldr	r2, [sp, #20]
 8012dd8:	189b      	adds	r3, r3, r2
 8012dda:	6163      	str	r3, [r4, #20]
 8012ddc:	7833      	ldrb	r3, [r6, #0]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d100      	bne.n	8012de4 <_vfiprintf_r+0xa4>
 8012de2:	e0a7      	b.n	8012f34 <_vfiprintf_r+0x1f4>
 8012de4:	2201      	movs	r2, #1
 8012de6:	2300      	movs	r3, #0
 8012de8:	4252      	negs	r2, r2
 8012dea:	6062      	str	r2, [r4, #4]
 8012dec:	a904      	add	r1, sp, #16
 8012dee:	3254      	adds	r2, #84	; 0x54
 8012df0:	1852      	adds	r2, r2, r1
 8012df2:	1c75      	adds	r5, r6, #1
 8012df4:	6023      	str	r3, [r4, #0]
 8012df6:	60e3      	str	r3, [r4, #12]
 8012df8:	60a3      	str	r3, [r4, #8]
 8012dfa:	7013      	strb	r3, [r2, #0]
 8012dfc:	65a3      	str	r3, [r4, #88]	; 0x58
 8012dfe:	4b59      	ldr	r3, [pc, #356]	; (8012f64 <_vfiprintf_r+0x224>)
 8012e00:	2205      	movs	r2, #5
 8012e02:	0018      	movs	r0, r3
 8012e04:	7829      	ldrb	r1, [r5, #0]
 8012e06:	9305      	str	r3, [sp, #20]
 8012e08:	f7fd f87f 	bl	800ff0a <memchr>
 8012e0c:	1c6e      	adds	r6, r5, #1
 8012e0e:	2800      	cmp	r0, #0
 8012e10:	d11f      	bne.n	8012e52 <_vfiprintf_r+0x112>
 8012e12:	6822      	ldr	r2, [r4, #0]
 8012e14:	06d3      	lsls	r3, r2, #27
 8012e16:	d504      	bpl.n	8012e22 <_vfiprintf_r+0xe2>
 8012e18:	2353      	movs	r3, #83	; 0x53
 8012e1a:	a904      	add	r1, sp, #16
 8012e1c:	185b      	adds	r3, r3, r1
 8012e1e:	2120      	movs	r1, #32
 8012e20:	7019      	strb	r1, [r3, #0]
 8012e22:	0713      	lsls	r3, r2, #28
 8012e24:	d504      	bpl.n	8012e30 <_vfiprintf_r+0xf0>
 8012e26:	2353      	movs	r3, #83	; 0x53
 8012e28:	a904      	add	r1, sp, #16
 8012e2a:	185b      	adds	r3, r3, r1
 8012e2c:	212b      	movs	r1, #43	; 0x2b
 8012e2e:	7019      	strb	r1, [r3, #0]
 8012e30:	782b      	ldrb	r3, [r5, #0]
 8012e32:	2b2a      	cmp	r3, #42	; 0x2a
 8012e34:	d016      	beq.n	8012e64 <_vfiprintf_r+0x124>
 8012e36:	002e      	movs	r6, r5
 8012e38:	2100      	movs	r1, #0
 8012e3a:	200a      	movs	r0, #10
 8012e3c:	68e3      	ldr	r3, [r4, #12]
 8012e3e:	7832      	ldrb	r2, [r6, #0]
 8012e40:	1c75      	adds	r5, r6, #1
 8012e42:	3a30      	subs	r2, #48	; 0x30
 8012e44:	2a09      	cmp	r2, #9
 8012e46:	d94e      	bls.n	8012ee6 <_vfiprintf_r+0x1a6>
 8012e48:	2900      	cmp	r1, #0
 8012e4a:	d111      	bne.n	8012e70 <_vfiprintf_r+0x130>
 8012e4c:	e017      	b.n	8012e7e <_vfiprintf_r+0x13e>
 8012e4e:	3601      	adds	r6, #1
 8012e50:	e7af      	b.n	8012db2 <_vfiprintf_r+0x72>
 8012e52:	9b05      	ldr	r3, [sp, #20]
 8012e54:	6822      	ldr	r2, [r4, #0]
 8012e56:	1ac0      	subs	r0, r0, r3
 8012e58:	2301      	movs	r3, #1
 8012e5a:	4083      	lsls	r3, r0
 8012e5c:	4313      	orrs	r3, r2
 8012e5e:	0035      	movs	r5, r6
 8012e60:	6023      	str	r3, [r4, #0]
 8012e62:	e7cc      	b.n	8012dfe <_vfiprintf_r+0xbe>
 8012e64:	9b07      	ldr	r3, [sp, #28]
 8012e66:	1d19      	adds	r1, r3, #4
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	9107      	str	r1, [sp, #28]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	db01      	blt.n	8012e74 <_vfiprintf_r+0x134>
 8012e70:	930b      	str	r3, [sp, #44]	; 0x2c
 8012e72:	e004      	b.n	8012e7e <_vfiprintf_r+0x13e>
 8012e74:	425b      	negs	r3, r3
 8012e76:	60e3      	str	r3, [r4, #12]
 8012e78:	2302      	movs	r3, #2
 8012e7a:	4313      	orrs	r3, r2
 8012e7c:	6023      	str	r3, [r4, #0]
 8012e7e:	7833      	ldrb	r3, [r6, #0]
 8012e80:	2b2e      	cmp	r3, #46	; 0x2e
 8012e82:	d10a      	bne.n	8012e9a <_vfiprintf_r+0x15a>
 8012e84:	7873      	ldrb	r3, [r6, #1]
 8012e86:	2b2a      	cmp	r3, #42	; 0x2a
 8012e88:	d135      	bne.n	8012ef6 <_vfiprintf_r+0x1b6>
 8012e8a:	9b07      	ldr	r3, [sp, #28]
 8012e8c:	3602      	adds	r6, #2
 8012e8e:	1d1a      	adds	r2, r3, #4
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	9207      	str	r2, [sp, #28]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	db2b      	blt.n	8012ef0 <_vfiprintf_r+0x1b0>
 8012e98:	9309      	str	r3, [sp, #36]	; 0x24
 8012e9a:	4d33      	ldr	r5, [pc, #204]	; (8012f68 <_vfiprintf_r+0x228>)
 8012e9c:	2203      	movs	r2, #3
 8012e9e:	0028      	movs	r0, r5
 8012ea0:	7831      	ldrb	r1, [r6, #0]
 8012ea2:	f7fd f832 	bl	800ff0a <memchr>
 8012ea6:	2800      	cmp	r0, #0
 8012ea8:	d006      	beq.n	8012eb8 <_vfiprintf_r+0x178>
 8012eaa:	2340      	movs	r3, #64	; 0x40
 8012eac:	1b40      	subs	r0, r0, r5
 8012eae:	4083      	lsls	r3, r0
 8012eb0:	6822      	ldr	r2, [r4, #0]
 8012eb2:	3601      	adds	r6, #1
 8012eb4:	4313      	orrs	r3, r2
 8012eb6:	6023      	str	r3, [r4, #0]
 8012eb8:	7831      	ldrb	r1, [r6, #0]
 8012eba:	2206      	movs	r2, #6
 8012ebc:	482b      	ldr	r0, [pc, #172]	; (8012f6c <_vfiprintf_r+0x22c>)
 8012ebe:	1c75      	adds	r5, r6, #1
 8012ec0:	7621      	strb	r1, [r4, #24]
 8012ec2:	f7fd f822 	bl	800ff0a <memchr>
 8012ec6:	2800      	cmp	r0, #0
 8012ec8:	d043      	beq.n	8012f52 <_vfiprintf_r+0x212>
 8012eca:	4b29      	ldr	r3, [pc, #164]	; (8012f70 <_vfiprintf_r+0x230>)
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d125      	bne.n	8012f1c <_vfiprintf_r+0x1dc>
 8012ed0:	2207      	movs	r2, #7
 8012ed2:	9b07      	ldr	r3, [sp, #28]
 8012ed4:	3307      	adds	r3, #7
 8012ed6:	4393      	bics	r3, r2
 8012ed8:	3308      	adds	r3, #8
 8012eda:	9307      	str	r3, [sp, #28]
 8012edc:	6963      	ldr	r3, [r4, #20]
 8012ede:	9a04      	ldr	r2, [sp, #16]
 8012ee0:	189b      	adds	r3, r3, r2
 8012ee2:	6163      	str	r3, [r4, #20]
 8012ee4:	e764      	b.n	8012db0 <_vfiprintf_r+0x70>
 8012ee6:	4343      	muls	r3, r0
 8012ee8:	002e      	movs	r6, r5
 8012eea:	2101      	movs	r1, #1
 8012eec:	189b      	adds	r3, r3, r2
 8012eee:	e7a6      	b.n	8012e3e <_vfiprintf_r+0xfe>
 8012ef0:	2301      	movs	r3, #1
 8012ef2:	425b      	negs	r3, r3
 8012ef4:	e7d0      	b.n	8012e98 <_vfiprintf_r+0x158>
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	200a      	movs	r0, #10
 8012efa:	001a      	movs	r2, r3
 8012efc:	3601      	adds	r6, #1
 8012efe:	6063      	str	r3, [r4, #4]
 8012f00:	7831      	ldrb	r1, [r6, #0]
 8012f02:	1c75      	adds	r5, r6, #1
 8012f04:	3930      	subs	r1, #48	; 0x30
 8012f06:	2909      	cmp	r1, #9
 8012f08:	d903      	bls.n	8012f12 <_vfiprintf_r+0x1d2>
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d0c5      	beq.n	8012e9a <_vfiprintf_r+0x15a>
 8012f0e:	9209      	str	r2, [sp, #36]	; 0x24
 8012f10:	e7c3      	b.n	8012e9a <_vfiprintf_r+0x15a>
 8012f12:	4342      	muls	r2, r0
 8012f14:	002e      	movs	r6, r5
 8012f16:	2301      	movs	r3, #1
 8012f18:	1852      	adds	r2, r2, r1
 8012f1a:	e7f1      	b.n	8012f00 <_vfiprintf_r+0x1c0>
 8012f1c:	aa07      	add	r2, sp, #28
 8012f1e:	9200      	str	r2, [sp, #0]
 8012f20:	0021      	movs	r1, r4
 8012f22:	003a      	movs	r2, r7
 8012f24:	4b13      	ldr	r3, [pc, #76]	; (8012f74 <_vfiprintf_r+0x234>)
 8012f26:	9803      	ldr	r0, [sp, #12]
 8012f28:	f7fb ff84 	bl	800ee34 <_printf_float>
 8012f2c:	9004      	str	r0, [sp, #16]
 8012f2e:	9b04      	ldr	r3, [sp, #16]
 8012f30:	3301      	adds	r3, #1
 8012f32:	d1d3      	bne.n	8012edc <_vfiprintf_r+0x19c>
 8012f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f36:	07db      	lsls	r3, r3, #31
 8012f38:	d405      	bmi.n	8012f46 <_vfiprintf_r+0x206>
 8012f3a:	89bb      	ldrh	r3, [r7, #12]
 8012f3c:	059b      	lsls	r3, r3, #22
 8012f3e:	d402      	bmi.n	8012f46 <_vfiprintf_r+0x206>
 8012f40:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8012f42:	f7fc ffd9 	bl	800fef8 <__retarget_lock_release_recursive>
 8012f46:	89bb      	ldrh	r3, [r7, #12]
 8012f48:	065b      	lsls	r3, r3, #25
 8012f4a:	d500      	bpl.n	8012f4e <_vfiprintf_r+0x20e>
 8012f4c:	e71d      	b.n	8012d8a <_vfiprintf_r+0x4a>
 8012f4e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8012f50:	e71d      	b.n	8012d8e <_vfiprintf_r+0x4e>
 8012f52:	aa07      	add	r2, sp, #28
 8012f54:	9200      	str	r2, [sp, #0]
 8012f56:	0021      	movs	r1, r4
 8012f58:	003a      	movs	r2, r7
 8012f5a:	4b06      	ldr	r3, [pc, #24]	; (8012f74 <_vfiprintf_r+0x234>)
 8012f5c:	9803      	ldr	r0, [sp, #12]
 8012f5e:	f7fc fa2f 	bl	800f3c0 <_printf_i>
 8012f62:	e7e3      	b.n	8012f2c <_vfiprintf_r+0x1ec>
 8012f64:	08013fec 	.word	0x08013fec
 8012f68:	08013ff2 	.word	0x08013ff2
 8012f6c:	08013ff6 	.word	0x08013ff6
 8012f70:	0800ee35 	.word	0x0800ee35
 8012f74:	08012d1b 	.word	0x08012d1b

08012f78 <__swbuf_r>:
 8012f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f7a:	0006      	movs	r6, r0
 8012f7c:	000d      	movs	r5, r1
 8012f7e:	0014      	movs	r4, r2
 8012f80:	2800      	cmp	r0, #0
 8012f82:	d004      	beq.n	8012f8e <__swbuf_r+0x16>
 8012f84:	6a03      	ldr	r3, [r0, #32]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d101      	bne.n	8012f8e <__swbuf_r+0x16>
 8012f8a:	f7fc fdc1 	bl	800fb10 <__sinit>
 8012f8e:	69a3      	ldr	r3, [r4, #24]
 8012f90:	60a3      	str	r3, [r4, #8]
 8012f92:	89a3      	ldrh	r3, [r4, #12]
 8012f94:	071b      	lsls	r3, r3, #28
 8012f96:	d528      	bpl.n	8012fea <__swbuf_r+0x72>
 8012f98:	6923      	ldr	r3, [r4, #16]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d025      	beq.n	8012fea <__swbuf_r+0x72>
 8012f9e:	6923      	ldr	r3, [r4, #16]
 8012fa0:	6820      	ldr	r0, [r4, #0]
 8012fa2:	b2ef      	uxtb	r7, r5
 8012fa4:	1ac0      	subs	r0, r0, r3
 8012fa6:	6963      	ldr	r3, [r4, #20]
 8012fa8:	b2ed      	uxtb	r5, r5
 8012faa:	4283      	cmp	r3, r0
 8012fac:	dc05      	bgt.n	8012fba <__swbuf_r+0x42>
 8012fae:	0021      	movs	r1, r4
 8012fb0:	0030      	movs	r0, r6
 8012fb2:	f7ff fcd7 	bl	8012964 <_fflush_r>
 8012fb6:	2800      	cmp	r0, #0
 8012fb8:	d11d      	bne.n	8012ff6 <__swbuf_r+0x7e>
 8012fba:	68a3      	ldr	r3, [r4, #8]
 8012fbc:	3001      	adds	r0, #1
 8012fbe:	3b01      	subs	r3, #1
 8012fc0:	60a3      	str	r3, [r4, #8]
 8012fc2:	6823      	ldr	r3, [r4, #0]
 8012fc4:	1c5a      	adds	r2, r3, #1
 8012fc6:	6022      	str	r2, [r4, #0]
 8012fc8:	701f      	strb	r7, [r3, #0]
 8012fca:	6963      	ldr	r3, [r4, #20]
 8012fcc:	4283      	cmp	r3, r0
 8012fce:	d004      	beq.n	8012fda <__swbuf_r+0x62>
 8012fd0:	89a3      	ldrh	r3, [r4, #12]
 8012fd2:	07db      	lsls	r3, r3, #31
 8012fd4:	d507      	bpl.n	8012fe6 <__swbuf_r+0x6e>
 8012fd6:	2d0a      	cmp	r5, #10
 8012fd8:	d105      	bne.n	8012fe6 <__swbuf_r+0x6e>
 8012fda:	0021      	movs	r1, r4
 8012fdc:	0030      	movs	r0, r6
 8012fde:	f7ff fcc1 	bl	8012964 <_fflush_r>
 8012fe2:	2800      	cmp	r0, #0
 8012fe4:	d107      	bne.n	8012ff6 <__swbuf_r+0x7e>
 8012fe6:	0028      	movs	r0, r5
 8012fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fea:	0021      	movs	r1, r4
 8012fec:	0030      	movs	r0, r6
 8012fee:	f000 f805 	bl	8012ffc <__swsetup_r>
 8012ff2:	2800      	cmp	r0, #0
 8012ff4:	d0d3      	beq.n	8012f9e <__swbuf_r+0x26>
 8012ff6:	2501      	movs	r5, #1
 8012ff8:	426d      	negs	r5, r5
 8012ffa:	e7f4      	b.n	8012fe6 <__swbuf_r+0x6e>

08012ffc <__swsetup_r>:
 8012ffc:	4b30      	ldr	r3, [pc, #192]	; (80130c0 <__swsetup_r+0xc4>)
 8012ffe:	b570      	push	{r4, r5, r6, lr}
 8013000:	0005      	movs	r5, r0
 8013002:	6818      	ldr	r0, [r3, #0]
 8013004:	000c      	movs	r4, r1
 8013006:	2800      	cmp	r0, #0
 8013008:	d004      	beq.n	8013014 <__swsetup_r+0x18>
 801300a:	6a03      	ldr	r3, [r0, #32]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d101      	bne.n	8013014 <__swsetup_r+0x18>
 8013010:	f7fc fd7e 	bl	800fb10 <__sinit>
 8013014:	230c      	movs	r3, #12
 8013016:	5ee2      	ldrsh	r2, [r4, r3]
 8013018:	b293      	uxth	r3, r2
 801301a:	0711      	lsls	r1, r2, #28
 801301c:	d423      	bmi.n	8013066 <__swsetup_r+0x6a>
 801301e:	06d9      	lsls	r1, r3, #27
 8013020:	d407      	bmi.n	8013032 <__swsetup_r+0x36>
 8013022:	2309      	movs	r3, #9
 8013024:	2001      	movs	r0, #1
 8013026:	602b      	str	r3, [r5, #0]
 8013028:	3337      	adds	r3, #55	; 0x37
 801302a:	4313      	orrs	r3, r2
 801302c:	81a3      	strh	r3, [r4, #12]
 801302e:	4240      	negs	r0, r0
 8013030:	bd70      	pop	{r4, r5, r6, pc}
 8013032:	075b      	lsls	r3, r3, #29
 8013034:	d513      	bpl.n	801305e <__swsetup_r+0x62>
 8013036:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013038:	2900      	cmp	r1, #0
 801303a:	d008      	beq.n	801304e <__swsetup_r+0x52>
 801303c:	0023      	movs	r3, r4
 801303e:	3344      	adds	r3, #68	; 0x44
 8013040:	4299      	cmp	r1, r3
 8013042:	d002      	beq.n	801304a <__swsetup_r+0x4e>
 8013044:	0028      	movs	r0, r5
 8013046:	f7fd fe3b 	bl	8010cc0 <_free_r>
 801304a:	2300      	movs	r3, #0
 801304c:	6363      	str	r3, [r4, #52]	; 0x34
 801304e:	2224      	movs	r2, #36	; 0x24
 8013050:	89a3      	ldrh	r3, [r4, #12]
 8013052:	4393      	bics	r3, r2
 8013054:	81a3      	strh	r3, [r4, #12]
 8013056:	2300      	movs	r3, #0
 8013058:	6063      	str	r3, [r4, #4]
 801305a:	6923      	ldr	r3, [r4, #16]
 801305c:	6023      	str	r3, [r4, #0]
 801305e:	2308      	movs	r3, #8
 8013060:	89a2      	ldrh	r2, [r4, #12]
 8013062:	4313      	orrs	r3, r2
 8013064:	81a3      	strh	r3, [r4, #12]
 8013066:	6923      	ldr	r3, [r4, #16]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d10b      	bne.n	8013084 <__swsetup_r+0x88>
 801306c:	21a0      	movs	r1, #160	; 0xa0
 801306e:	2280      	movs	r2, #128	; 0x80
 8013070:	89a3      	ldrh	r3, [r4, #12]
 8013072:	0089      	lsls	r1, r1, #2
 8013074:	0092      	lsls	r2, r2, #2
 8013076:	400b      	ands	r3, r1
 8013078:	4293      	cmp	r3, r2
 801307a:	d003      	beq.n	8013084 <__swsetup_r+0x88>
 801307c:	0021      	movs	r1, r4
 801307e:	0028      	movs	r0, r5
 8013080:	f000 f89a 	bl	80131b8 <__smakebuf_r>
 8013084:	220c      	movs	r2, #12
 8013086:	5ea3      	ldrsh	r3, [r4, r2]
 8013088:	2001      	movs	r0, #1
 801308a:	001a      	movs	r2, r3
 801308c:	b299      	uxth	r1, r3
 801308e:	4002      	ands	r2, r0
 8013090:	4203      	tst	r3, r0
 8013092:	d00f      	beq.n	80130b4 <__swsetup_r+0xb8>
 8013094:	2200      	movs	r2, #0
 8013096:	60a2      	str	r2, [r4, #8]
 8013098:	6962      	ldr	r2, [r4, #20]
 801309a:	4252      	negs	r2, r2
 801309c:	61a2      	str	r2, [r4, #24]
 801309e:	2000      	movs	r0, #0
 80130a0:	6922      	ldr	r2, [r4, #16]
 80130a2:	4282      	cmp	r2, r0
 80130a4:	d1c4      	bne.n	8013030 <__swsetup_r+0x34>
 80130a6:	0609      	lsls	r1, r1, #24
 80130a8:	d5c2      	bpl.n	8013030 <__swsetup_r+0x34>
 80130aa:	2240      	movs	r2, #64	; 0x40
 80130ac:	4313      	orrs	r3, r2
 80130ae:	81a3      	strh	r3, [r4, #12]
 80130b0:	3801      	subs	r0, #1
 80130b2:	e7bd      	b.n	8013030 <__swsetup_r+0x34>
 80130b4:	0788      	lsls	r0, r1, #30
 80130b6:	d400      	bmi.n	80130ba <__swsetup_r+0xbe>
 80130b8:	6962      	ldr	r2, [r4, #20]
 80130ba:	60a2      	str	r2, [r4, #8]
 80130bc:	e7ef      	b.n	801309e <__swsetup_r+0xa2>
 80130be:	46c0      	nop			; (mov r8, r8)
 80130c0:	2000021c 	.word	0x2000021c

080130c4 <_raise_r>:
 80130c4:	b570      	push	{r4, r5, r6, lr}
 80130c6:	0004      	movs	r4, r0
 80130c8:	000d      	movs	r5, r1
 80130ca:	291f      	cmp	r1, #31
 80130cc:	d904      	bls.n	80130d8 <_raise_r+0x14>
 80130ce:	2316      	movs	r3, #22
 80130d0:	6003      	str	r3, [r0, #0]
 80130d2:	2001      	movs	r0, #1
 80130d4:	4240      	negs	r0, r0
 80130d6:	bd70      	pop	{r4, r5, r6, pc}
 80130d8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d004      	beq.n	80130e8 <_raise_r+0x24>
 80130de:	008a      	lsls	r2, r1, #2
 80130e0:	189b      	adds	r3, r3, r2
 80130e2:	681a      	ldr	r2, [r3, #0]
 80130e4:	2a00      	cmp	r2, #0
 80130e6:	d108      	bne.n	80130fa <_raise_r+0x36>
 80130e8:	0020      	movs	r0, r4
 80130ea:	f000 f831 	bl	8013150 <_getpid_r>
 80130ee:	002a      	movs	r2, r5
 80130f0:	0001      	movs	r1, r0
 80130f2:	0020      	movs	r0, r4
 80130f4:	f000 f81a 	bl	801312c <_kill_r>
 80130f8:	e7ed      	b.n	80130d6 <_raise_r+0x12>
 80130fa:	2000      	movs	r0, #0
 80130fc:	2a01      	cmp	r2, #1
 80130fe:	d0ea      	beq.n	80130d6 <_raise_r+0x12>
 8013100:	1c51      	adds	r1, r2, #1
 8013102:	d103      	bne.n	801310c <_raise_r+0x48>
 8013104:	2316      	movs	r3, #22
 8013106:	3001      	adds	r0, #1
 8013108:	6023      	str	r3, [r4, #0]
 801310a:	e7e4      	b.n	80130d6 <_raise_r+0x12>
 801310c:	2400      	movs	r4, #0
 801310e:	0028      	movs	r0, r5
 8013110:	601c      	str	r4, [r3, #0]
 8013112:	4790      	blx	r2
 8013114:	0020      	movs	r0, r4
 8013116:	e7de      	b.n	80130d6 <_raise_r+0x12>

08013118 <raise>:
 8013118:	b510      	push	{r4, lr}
 801311a:	4b03      	ldr	r3, [pc, #12]	; (8013128 <raise+0x10>)
 801311c:	0001      	movs	r1, r0
 801311e:	6818      	ldr	r0, [r3, #0]
 8013120:	f7ff ffd0 	bl	80130c4 <_raise_r>
 8013124:	bd10      	pop	{r4, pc}
 8013126:	46c0      	nop			; (mov r8, r8)
 8013128:	2000021c 	.word	0x2000021c

0801312c <_kill_r>:
 801312c:	2300      	movs	r3, #0
 801312e:	b570      	push	{r4, r5, r6, lr}
 8013130:	4d06      	ldr	r5, [pc, #24]	; (801314c <_kill_r+0x20>)
 8013132:	0004      	movs	r4, r0
 8013134:	0008      	movs	r0, r1
 8013136:	0011      	movs	r1, r2
 8013138:	602b      	str	r3, [r5, #0]
 801313a:	f7f2 f967 	bl	800540c <_kill>
 801313e:	1c43      	adds	r3, r0, #1
 8013140:	d103      	bne.n	801314a <_kill_r+0x1e>
 8013142:	682b      	ldr	r3, [r5, #0]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d000      	beq.n	801314a <_kill_r+0x1e>
 8013148:	6023      	str	r3, [r4, #0]
 801314a:	bd70      	pop	{r4, r5, r6, pc}
 801314c:	20003f5c 	.word	0x20003f5c

08013150 <_getpid_r>:
 8013150:	b510      	push	{r4, lr}
 8013152:	f7f2 f955 	bl	8005400 <_getpid>
 8013156:	bd10      	pop	{r4, pc}

08013158 <_malloc_usable_size_r>:
 8013158:	1f0b      	subs	r3, r1, #4
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	1f18      	subs	r0, r3, #4
 801315e:	2b00      	cmp	r3, #0
 8013160:	da01      	bge.n	8013166 <_malloc_usable_size_r+0xe>
 8013162:	580b      	ldr	r3, [r1, r0]
 8013164:	18c0      	adds	r0, r0, r3
 8013166:	4770      	bx	lr

08013168 <__swhatbuf_r>:
 8013168:	b570      	push	{r4, r5, r6, lr}
 801316a:	000e      	movs	r6, r1
 801316c:	001d      	movs	r5, r3
 801316e:	230e      	movs	r3, #14
 8013170:	5ec9      	ldrsh	r1, [r1, r3]
 8013172:	0014      	movs	r4, r2
 8013174:	b096      	sub	sp, #88	; 0x58
 8013176:	2900      	cmp	r1, #0
 8013178:	da0c      	bge.n	8013194 <__swhatbuf_r+0x2c>
 801317a:	89b2      	ldrh	r2, [r6, #12]
 801317c:	2380      	movs	r3, #128	; 0x80
 801317e:	0011      	movs	r1, r2
 8013180:	4019      	ands	r1, r3
 8013182:	421a      	tst	r2, r3
 8013184:	d013      	beq.n	80131ae <__swhatbuf_r+0x46>
 8013186:	2100      	movs	r1, #0
 8013188:	3b40      	subs	r3, #64	; 0x40
 801318a:	2000      	movs	r0, #0
 801318c:	6029      	str	r1, [r5, #0]
 801318e:	6023      	str	r3, [r4, #0]
 8013190:	b016      	add	sp, #88	; 0x58
 8013192:	bd70      	pop	{r4, r5, r6, pc}
 8013194:	466a      	mov	r2, sp
 8013196:	f000 f84d 	bl	8013234 <_fstat_r>
 801319a:	2800      	cmp	r0, #0
 801319c:	dbed      	blt.n	801317a <__swhatbuf_r+0x12>
 801319e:	23f0      	movs	r3, #240	; 0xf0
 80131a0:	9901      	ldr	r1, [sp, #4]
 80131a2:	021b      	lsls	r3, r3, #8
 80131a4:	4019      	ands	r1, r3
 80131a6:	4b03      	ldr	r3, [pc, #12]	; (80131b4 <__swhatbuf_r+0x4c>)
 80131a8:	18c9      	adds	r1, r1, r3
 80131aa:	424b      	negs	r3, r1
 80131ac:	4159      	adcs	r1, r3
 80131ae:	2380      	movs	r3, #128	; 0x80
 80131b0:	00db      	lsls	r3, r3, #3
 80131b2:	e7ea      	b.n	801318a <__swhatbuf_r+0x22>
 80131b4:	ffffe000 	.word	0xffffe000

080131b8 <__smakebuf_r>:
 80131b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80131ba:	2602      	movs	r6, #2
 80131bc:	898b      	ldrh	r3, [r1, #12]
 80131be:	0005      	movs	r5, r0
 80131c0:	000c      	movs	r4, r1
 80131c2:	4233      	tst	r3, r6
 80131c4:	d006      	beq.n	80131d4 <__smakebuf_r+0x1c>
 80131c6:	0023      	movs	r3, r4
 80131c8:	3347      	adds	r3, #71	; 0x47
 80131ca:	6023      	str	r3, [r4, #0]
 80131cc:	6123      	str	r3, [r4, #16]
 80131ce:	2301      	movs	r3, #1
 80131d0:	6163      	str	r3, [r4, #20]
 80131d2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80131d4:	466a      	mov	r2, sp
 80131d6:	ab01      	add	r3, sp, #4
 80131d8:	f7ff ffc6 	bl	8013168 <__swhatbuf_r>
 80131dc:	9900      	ldr	r1, [sp, #0]
 80131de:	0007      	movs	r7, r0
 80131e0:	0028      	movs	r0, r5
 80131e2:	f7fe f93f 	bl	8011464 <_malloc_r>
 80131e6:	2800      	cmp	r0, #0
 80131e8:	d108      	bne.n	80131fc <__smakebuf_r+0x44>
 80131ea:	220c      	movs	r2, #12
 80131ec:	5ea3      	ldrsh	r3, [r4, r2]
 80131ee:	059a      	lsls	r2, r3, #22
 80131f0:	d4ef      	bmi.n	80131d2 <__smakebuf_r+0x1a>
 80131f2:	2203      	movs	r2, #3
 80131f4:	4393      	bics	r3, r2
 80131f6:	431e      	orrs	r6, r3
 80131f8:	81a6      	strh	r6, [r4, #12]
 80131fa:	e7e4      	b.n	80131c6 <__smakebuf_r+0xe>
 80131fc:	2380      	movs	r3, #128	; 0x80
 80131fe:	89a2      	ldrh	r2, [r4, #12]
 8013200:	6020      	str	r0, [r4, #0]
 8013202:	4313      	orrs	r3, r2
 8013204:	81a3      	strh	r3, [r4, #12]
 8013206:	9b00      	ldr	r3, [sp, #0]
 8013208:	6120      	str	r0, [r4, #16]
 801320a:	6163      	str	r3, [r4, #20]
 801320c:	9b01      	ldr	r3, [sp, #4]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d00c      	beq.n	801322c <__smakebuf_r+0x74>
 8013212:	0028      	movs	r0, r5
 8013214:	230e      	movs	r3, #14
 8013216:	5ee1      	ldrsh	r1, [r4, r3]
 8013218:	f000 f81e 	bl	8013258 <_isatty_r>
 801321c:	2800      	cmp	r0, #0
 801321e:	d005      	beq.n	801322c <__smakebuf_r+0x74>
 8013220:	2303      	movs	r3, #3
 8013222:	89a2      	ldrh	r2, [r4, #12]
 8013224:	439a      	bics	r2, r3
 8013226:	3b02      	subs	r3, #2
 8013228:	4313      	orrs	r3, r2
 801322a:	81a3      	strh	r3, [r4, #12]
 801322c:	89a3      	ldrh	r3, [r4, #12]
 801322e:	433b      	orrs	r3, r7
 8013230:	81a3      	strh	r3, [r4, #12]
 8013232:	e7ce      	b.n	80131d2 <__smakebuf_r+0x1a>

08013234 <_fstat_r>:
 8013234:	2300      	movs	r3, #0
 8013236:	b570      	push	{r4, r5, r6, lr}
 8013238:	4d06      	ldr	r5, [pc, #24]	; (8013254 <_fstat_r+0x20>)
 801323a:	0004      	movs	r4, r0
 801323c:	0008      	movs	r0, r1
 801323e:	0011      	movs	r1, r2
 8013240:	602b      	str	r3, [r5, #0]
 8013242:	f7f2 f942 	bl	80054ca <_fstat>
 8013246:	1c43      	adds	r3, r0, #1
 8013248:	d103      	bne.n	8013252 <_fstat_r+0x1e>
 801324a:	682b      	ldr	r3, [r5, #0]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d000      	beq.n	8013252 <_fstat_r+0x1e>
 8013250:	6023      	str	r3, [r4, #0]
 8013252:	bd70      	pop	{r4, r5, r6, pc}
 8013254:	20003f5c 	.word	0x20003f5c

08013258 <_isatty_r>:
 8013258:	2300      	movs	r3, #0
 801325a:	b570      	push	{r4, r5, r6, lr}
 801325c:	4d06      	ldr	r5, [pc, #24]	; (8013278 <_isatty_r+0x20>)
 801325e:	0004      	movs	r4, r0
 8013260:	0008      	movs	r0, r1
 8013262:	602b      	str	r3, [r5, #0]
 8013264:	f7f2 f93f 	bl	80054e6 <_isatty>
 8013268:	1c43      	adds	r3, r0, #1
 801326a:	d103      	bne.n	8013274 <_isatty_r+0x1c>
 801326c:	682b      	ldr	r3, [r5, #0]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d000      	beq.n	8013274 <_isatty_r+0x1c>
 8013272:	6023      	str	r3, [r4, #0]
 8013274:	bd70      	pop	{r4, r5, r6, pc}
 8013276:	46c0      	nop			; (mov r8, r8)
 8013278:	20003f5c 	.word	0x20003f5c

0801327c <_init>:
 801327c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801327e:	46c0      	nop			; (mov r8, r8)
 8013280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013282:	bc08      	pop	{r3}
 8013284:	469e      	mov	lr, r3
 8013286:	4770      	bx	lr

08013288 <_fini>:
 8013288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801328a:	46c0      	nop			; (mov r8, r8)
 801328c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801328e:	bc08      	pop	{r3}
 8013290:	469e      	mov	lr, r3
 8013292:	4770      	bx	lr
